{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/background.jpg","path":"img/background.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/demo.jpg","path":"img/demo.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/timg.jpg","path":"img/timg.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/pet.jpg","path":"img/pet.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490698800850},{"_id":"source/baidu_verify_Y7N2QWqwu1.html","hash":"cecef43ff0be70541b00f91233b3e319fd6fe1dd","modified":1490701534247},{"_id":"source/google4070d8185dcadee2.html","hash":"349f50c9173887786b55f50cb2065677a6b007ac","modified":1490361935124},{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1490323312434},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1490323312434},{"_id":"themes/jacman/README.md","hash":"dd7b96d6c1c4dcffa61e37f76d5f0e4b4bca4d1b","modified":1490323312455},{"_id":"themes/jacman/README_zh.md","hash":"c7fa5c73edcdbc25aa57c12c1b3c71ebf96d2879","modified":1490323312456},{"_id":"themes/jacman/_config.yml","hash":"a70a02509fd8c46872df3186fd0bf1a86d8fb2be","modified":1490614169266},{"_id":"source/_posts/BootStrap干货篇之表单.md","hash":"1d14ab43cc582edb6b69c32fed6dcdd264fe0aeb","modified":1493219881666},{"_id":"source/_posts/JDBC干货篇一.md","hash":"dede241b927450885a98945cba4a89b2fa07ea79","modified":1493305471227},{"_id":"source/_posts/JQuery干货篇之处理元素.md","hash":"e66b56fb01e9cdf3af7a7fadb566b27eb2819606","modified":1492868866741},{"_id":"source/_posts/JQuery干货篇之操控DOM.md","hash":"1e0dd589f68b602aa2ecf8527eeee58e6240e626","modified":1492768429444},{"_id":"source/_posts/JQuery干货篇之选择元素.md","hash":"1bdfd2b1ba9705ace5ab452c922b35f4f25c3762","modified":1492671727163},{"_id":"source/_posts/Linux干货篇一.md","hash":"31e4d43a97cd45d0098f879adf10b79355d23fc7","modified":1492057928520},{"_id":"source/_posts/MongoDB干货篇之安装.md","hash":"558edc618eb5d6d315af40d7cfe3e885c56ffa11","modified":1493348358134},{"_id":"source/_posts/MongoDB干货篇之更新数据.md","hash":"83d39b102522ead3f5c7c46b5deab0d68dcf0031","modified":1493597815183},{"_id":"source/_posts/MongoDB干货篇之查询数据.md","hash":"ba85a6931da4eab8f6d11c2ad604b52be300709d","modified":1493586623666},{"_id":"source/_posts/SQL基本操作.md","hash":"97f4207ad837fbe6861dfe0a69b89224bba5d503","modified":1491490035114},{"_id":"source/_posts/SQL干货篇三.md","hash":"8247cc3eb41568566a634232a5e29a476a35b49d","modified":1492353457593},{"_id":"source/_posts/SQL干货篇二.md","hash":"911914632c30231bbf8c3833b8329eea81715792","modified":1491751268577},{"_id":"source/_posts/Scrapyd部署爬虫.md","hash":"e6ac7b331b0c328bf26f3b34f0e9424865c1ae6b","modified":1493003274155},{"_id":"source/_posts/Scrapy中使用cookie免于验证登录和模拟登录.md","hash":"7979c5b27717b89dbf0f8c57eeab56625d80de58","modified":1490585525186},{"_id":"source/_posts/Swing-干货系列之JSlider.md","hash":"604bb3f8c68651fd3cd55f6b84f14f4e2ac13d0a","modified":1491471341717},{"_id":"source/_posts/Swing中的JSplitPane.md","hash":"2d8e21d76d1b1fc2f04bb2cb023e14ada0651d1b","modified":1490771789302},{"_id":"source/_posts/Swing干货系列之JTextField.md","hash":"6b8162eec6cb27d6e5af8aee0f0b3b06fc0ad90c","modified":1491656577304},{"_id":"source/_posts/java中的IO操作.md","hash":"a1a90fa75888b0abdc7b26108af105c64f95dc93","modified":1490585329061},{"_id":"source/_posts/java图像处理干货篇.md","hash":"43502ba6bbb0900046b94dd7013c42e004b4e48b","modified":1491721457914},{"_id":"source/_posts/java图形与文本处理一.md","hash":"15c60b4a2ff3c739696674436877ca10ba99f60f","modified":1490586043714},{"_id":"source/_posts/java布局管理器.md","hash":"ff060eb7d50565cdbae0bc9e7e8daf409359298a","modified":1491478927672},{"_id":"source/_posts/java干货篇之文字特效.md","hash":"be13cd3138e7ece7c6619bbe9a58c308361235f6","modified":1491725755282},{"_id":"source/_posts/java连接mysql初探篇.md","hash":"9b59b3309e157a1e5be72d1ebc4ef5a2310300a4","modified":1493305562711},{"_id":"source/_posts/matplotlib绘制图形基础.md","hash":"ea83824e2e4310fd1e4c3cc3f746d2da6666ae9b","modified":1491018543635},{"_id":"source/_posts/python爬虫之BeautifulSoup.md","hash":"9542748380b476569ad987ff63c51ff4d8288de9","modified":1493433467616},{"_id":"source/_posts/python爬虫大战京东商城.md","hash":"0ec80e76c1488c50ed0ba75e704a7d1aa2850bab","modified":1492944482496},{"_id":"source/_posts/scrapy初试.md","hash":"838ea34568957dbce4046a29b800399c1976b3c9","modified":1490585406976},{"_id":"source/_posts/scrapy大战京东商城.md","hash":"a99cbd6be0ac8c814e4443142088f8725967cad4","modified":1492957019098},{"_id":"source/_posts/scrapy架构初探.md","hash":"0b86ca3e7d2976c99cc3e5ff628553bb33221064","modified":1490418766277},{"_id":"source/_posts/scrapy爬取豆瓣全站.md","hash":"521ebb34aac96bdf9741a992ecff10c4c09df536","modified":1491633380431},{"_id":"source/_posts/scrapy的下载器中间件.md","hash":"0d1929eb5181c7f63628b71ea0c9c8edc9346e87","modified":1490425720498},{"_id":"source/_posts/scrapy设置代理ip.md","hash":"d94ca1c431156c71d97f47a1408793775a779b5d","modified":1490585473819},{"_id":"source/_posts/scrapy设置请求池.md","hash":"24925650bd01fc58f0e4df576b28c849cb4435a2","modified":1490585494444},{"_id":"source/about/index.md","hash":"c1ded0b722044ef7198ec7274426e86f9c465246","modified":1490372191857},{"_id":"source/tags/index.md","hash":"899d930450cd4688affa58141fcfe8ce013aa978","modified":1490333113404},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490323312416},{"_id":"themes/jacman/.git/config","hash":"ca4e376c8d7a23354160ffad14567f8f7b3155e2","modified":1490323312424},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490323292171},{"_id":"themes/jacman/.git/index","hash":"78318c601f7b20ca4f8825f81f464c5575776c92","modified":1493906611122},{"_id":"themes/jacman/.git/packed-refs","hash":"facb04d8a7e4221a4b0b3dc3062a8ca586ade15d","modified":1490323312409},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1490323312458},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1490323312458},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1490323312459},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1490323312480},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1490323312480},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1490323312481},{"_id":"themes/jacman/layout/layout.ejs","hash":"0a2ab937e4aa67d53ab02135a4da2ff937a0d45b","modified":1490587558813},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1490323312482},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1490323312482},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1490323312482},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1490323312484},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490323292172},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490323292173},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490323292174},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490323292174},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490323292175},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490323292175},{"_id":"themes/jacman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490323292176},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490323292176},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490323292177},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490323292177},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490323292178},{"_id":"themes/jacman/.git/logs/HEAD","hash":"d7e5c311a085564607b923829e9f3319004b19e3","modified":1490323312419},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"919c2b20d78e31df42a47a96451f6981636e4d3c","modified":1490331604606},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"df52b07996b9b0eedb97306936b46ae5a42cd60d","modified":1490366423688},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1490323312461},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1490323312462},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1490323312463},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1490323312464},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"c4358de4ea1372ea68ff5dc0f4257c348d516990","modified":1490323312464},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"b6a854e12a694291a1572beacf6ef8f107c00bf2","modified":1490613666181},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1490323312465},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1490323312466},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1490323312466},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1490323312472},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1490323312472},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1490323312473},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1490323312474},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1490323312474},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1490323312475},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1490323312476},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1490323312476},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1490323312476},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1490323312477},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1490323312478},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1490323312478},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1490323312479},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1490323312479},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1490323312515},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490323312516},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490323312516},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490323312517},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490323312518},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490323312518},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490323312519},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1490323312524},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1490323312526},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1490323312527},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1490323312529},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1490323312528},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1490323312532},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1490323312533},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1490323312534},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1490323312539},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1490323312541},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1490323312543},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1490323312544},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1490323312545},{"_id":"themes/jacman/source/img/avatar.jpg","hash":"a3b608f9ef1a493de977e134a57091a011b97c69","modified":1490322802445},{"_id":"themes/jacman/source/img/background.jpg","hash":"228526e4762f365822d7c34a8c60021cbc868585","modified":1490426099028},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490323312548},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490323312549},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490323312550},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490323312551},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490323312551},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490323312553},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490323312553},{"_id":"themes/jacman/source/img/demo.jpg","hash":"2f360e98433543926ee154d977fa223e4198a95f","modified":1490426987310},{"_id":"themes/jacman/source/img/favicon.ico","hash":"a4343a392e42db6937ff92de379dd0d3d515da17","modified":1490613349086},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1490323312554},{"_id":"themes/jacman/source/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1490323312557},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1490323312557},{"_id":"themes/jacman/source/img/timg.jpg","hash":"21956ab9caa61c0bf34d237e3c950d25773e291c","modified":1490325067768},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1490323312558},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1490323312560},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1490323312561},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1490323312561},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1490323312531},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1490323312538},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1490323312542},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1490323312556},{"_id":"themes/jacman/source/img/pet.jpg","hash":"41e89367a8b579fe92f579961a67dea742ad7f3b","modified":1490326562711},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1490323312560},{"_id":"themes/jacman/.git/objects/pack/pack-f5c97b6c228eb1a50ece3586424f7e271507ccaf.idx","hash":"5ba9efb5445fc4d50e21bd49f57f9d5cb6f852a5","modified":1490323312154},{"_id":"themes/jacman/.git/refs/heads/master","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1490323312418},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1490323312468},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1490323312468},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1490323312468},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1490323312469},{"_id":"themes/jacman/layout/_partial/post/disqus.ejs","hash":"7f7b6eaa513611ab60d2ab7cb3e911269dd0a859","modified":1490370742552},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1490323312470},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1490323312470},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"1abd027ab36efbecbbb62b0a89b64f8e15a239fc","modified":1490428969628},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1490323312471},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1490323312485},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"afc5a582d026930106f9d8143a2993280b32aae3","modified":1490325125950},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1490772651293},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1490435223144},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1490323312498},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1490323312498},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1490323312499},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1490323312500},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"44d0859bfe9560fb16229244a265c040696a5815","modified":1490325225454},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1490323312513},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"1f9d8c513f05790742c17fc125cb6a1ad374065a","modified":1490323312514},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1490323312514},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490323312520},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490323312520},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1490323312521},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1490323312522},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490323312523},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1490323312524},{"_id":"themes/jacman/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1490587218986},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1490323312536},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1490323312547},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"d7e5c311a085564607b923829e9f3319004b19e3","modified":1490323312420},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490323312414},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1490323312487},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1490584734690},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"d7e5c311a085564607b923829e9f3319004b19e3","modified":1490323312414},{"_id":"themes/jacman/.git/objects/pack/pack-f5c97b6c228eb1a50ece3586424f7e271507ccaf.pack","hash":"f9261bdec630297bab46b4825cd694d72195de2b","modified":1490323312230},{"_id":"public/baidusitemap.xml","hash":"91141d82f00b04ca849143e1e37546dbdd13db89","modified":1493907407184},{"_id":"public/atom.xml","hash":"8c9faed70ebabfff62f56da19fc12e240510b9d5","modified":1493907408217},{"_id":"public/search.xml","hash":"f4f83ffa6791f22cde7d6e4f80d959f0b4efaf5c","modified":1493907408247},{"_id":"public/sitemap.xml","hash":"9091809319b1e29aafc817434c78a4acb5c6a5c3","modified":1493907408248},{"_id":"public/baidu_verify_Y7N2QWqwu1.html","hash":"81f607c25374d07c1d29f74f9201f5f34866692e","modified":1493907408265},{"_id":"public/google4070d8185dcadee2.html","hash":"881cebaa834994b353a13d598df605b78d2af77f","modified":1493907408265},{"_id":"public/about/index.html","hash":"ec6986a434a8f1d88c4bac6d83efba84b252c5c7","modified":1493907408265},{"_id":"public/tags/index.html","hash":"a3a246297e0e10d8f32727044aef7972d27a2e42","modified":1493907408265},{"_id":"public/archives/index.html","hash":"90be051fda8b22996c52b9dac825d4d8e96e0307","modified":1493907408265},{"_id":"public/archives/page/2/index.html","hash":"0cee6b25ee6ee49a7925c3e8f502fd3848e14d16","modified":1493907408265},{"_id":"public/archives/page/3/index.html","hash":"d74f6c0f30e87bf41b7ba9ceafe1bf7bdd89874a","modified":1493907408265},{"_id":"public/archives/page/4/index.html","hash":"4a229cbb3b18aed39b5274ab3ba639b942343a87","modified":1493907408266},{"_id":"public/archives/2017/index.html","hash":"e82704e2de6df9d66371e13851d3dcdbec07e37a","modified":1493907408266},{"_id":"public/archives/2017/page/2/index.html","hash":"2f7fd4e354d8140748d87435dda6e2f91ca9e15c","modified":1493907408266},{"_id":"public/archives/2017/page/3/index.html","hash":"abc6b9b94eff2e72e86cd60b36e430a2239c9ffd","modified":1493907408266},{"_id":"public/archives/2017/page/4/index.html","hash":"c5468765dfe6f75b57b1a25084f64455b6194514","modified":1493907408266},{"_id":"public/archives/2017/03/index.html","hash":"3eb27361f1ca037cce49d2630434f91fe13eb6c0","modified":1493907408266},{"_id":"public/archives/2017/04/index.html","hash":"8d24e11d8c5e82719b48e5277dfaf5626bc20fa3","modified":1493907408266},{"_id":"public/archives/2017/04/page/2/index.html","hash":"6ab2c61e30024b7efe521a524b656151d0627f8c","modified":1493907408266},{"_id":"public/archives/2017/04/page/3/index.html","hash":"c35c11deed865a9543b7288d2e9ba5e3e7a10045","modified":1493907408266},{"_id":"public/archives/2017/05/index.html","hash":"746f369c3171e7d434871e49246e198e2bf2177c","modified":1493907408266},{"_id":"public/page/2/index.html","hash":"1573ecc9e757661c79fd52b7c7f9c267d338749d","modified":1493907408266},{"_id":"public/page/4/index.html","hash":"b6d86afd715af807356e2c9fc481ef3d334f36c2","modified":1493907408266},{"_id":"public/categories/java学习/index.html","hash":"8c3a6cc1bc6b04bd9ca5460ea056efdda2fb0632","modified":1493907408266},{"_id":"public/categories/JQuery学习/index.html","hash":"dbdc6fe21f9689e577d8edfedc57de20dd10f93e","modified":1493907408266},{"_id":"public/categories/BootStrap学习/index.html","hash":"df1c69b7c41ec61a2e0c2dd5a54d8afdafcd9207","modified":1493907408266},{"_id":"public/categories/Linux/index.html","hash":"5d38ce1be76cac1390c322a2bfc94c4a49cf90dd","modified":1493907408266},{"_id":"public/categories/数据库干货篇/index.html","hash":"472647da7aefe0f4115de1037cf057040aad0b67","modified":1493907408266},{"_id":"public/categories/Scrapy学习/index.html","hash":"ed17d8aeea11b236f42ef2bdefe69cd681d39d3b","modified":1493907408266},{"_id":"public/categories/python数据挖掘与分析/index.html","hash":"ba7751cdc1cc8e309d4f1fe1879fa294092fc587","modified":1493907408267},{"_id":"public/categories/python/index.html","hash":"a9c903c382949afac11ccc3aca445e7f3276af22","modified":1493907408267},{"_id":"public/tags/JDBC/index.html","hash":"0a4accc2b8aba6586192beda3a6995722ebbab1e","modified":1493907408267},{"_id":"public/tags/JQuery/index.html","hash":"4481c0a73ef799b2730789cf4968113fb668884b","modified":1493907408267},{"_id":"public/tags/BootStrap/index.html","hash":"3189b901d4945d6a78112b6615b6522c19f52e2d","modified":1493907408267},{"_id":"public/tags/Linux/index.html","hash":"9d959bdd31d4eafa4c175694577d83aedbf974ee","modified":1493907408267},{"_id":"public/tags/MongoDB/index.html","hash":"efc07f007a2414deca729936049289e904127301","modified":1493907408267},{"_id":"public/tags/SQL/index.html","hash":"23316bf7a7bf2405f5cefb0ffc5530a92b30ddcc","modified":1493907408267},{"_id":"public/tags/scrapy/index.html","hash":"4cb01121b4639551c13dc113aabc32d282a11b75","modified":1493907408267},{"_id":"public/tags/swing/index.html","hash":"97b467f1a070d074fc50d263e6b218c10aff8baa","modified":1493907408267},{"_id":"public/tags/java基础/index.html","hash":"edaad425f170496e4b290544aae3c897b047d830","modified":1493907408267},{"_id":"public/tags/java图形与文本处理/index.html","hash":"a32e049c2b4842535d64d5585e669ec66729cdfc","modified":1493907408267},{"_id":"public/tags/matplotlib/index.html","hash":"e5055e596fef3e8513e08a2a4e48a869e725e6a0","modified":1493907408267},{"_id":"public/tags/python爬虫/index.html","hash":"4642be1fbc3e1de6d8988e6792481716cb6128eb","modified":1493907408267},{"_id":"public/2017/05/01/MongoDB干货篇之更新数据/index.html","hash":"791e1a048ff0730a33b4edb0ef13bdc9a9bd508c","modified":1493907408267},{"_id":"public/2017/04/30/MongoDB干货篇之查询数据/index.html","hash":"eeff3a9235545661785d696718b2ccadfb7adb1b","modified":1493907408267},{"_id":"public/2017/04/29/python爬虫之BeautifulSoup/index.html","hash":"51fd467ddf46bad6c83d6c59acda666b8a9ae0ce","modified":1493907408267},{"_id":"public/2017/04/28/MongoDB干货篇之安装/index.html","hash":"672baf2b4f2202cd829ae93d87ea46451ce3f5dc","modified":1493907408267},{"_id":"public/2017/04/27/JDBC干货篇一/index.html","hash":"9920d25038b257abe02424c13d89275aff8ea6bf","modified":1493907408267},{"_id":"public/2017/04/26/BootStrap干货篇之表单/index.html","hash":"ed6f2021e366957eda752fbd33ba2e9cc79a3ed3","modified":1493907408267},{"_id":"public/2017/04/24/Scrapyd部署爬虫/index.html","hash":"1eb3c42591a2895c4436e95ccb88438b68e9ffee","modified":1493907408268},{"_id":"public/2017/04/23/scrapy大战京东商城/index.html","hash":"8697a52d49b407a806ac7b0423bfc76a1e687f1b","modified":1493907408268},{"_id":"public/2017/04/23/python爬虫大战京东商城/index.html","hash":"f7c4099f720e1da10b34b7840961ece28bed6b3f","modified":1493907408268},{"_id":"public/2017/04/22/JQuery干货篇之处理元素/index.html","hash":"d71be20f8c78ca3a816565d15caf923918d83955","modified":1493907408268},{"_id":"public/2017/04/21/JQuery干货篇之操控DOM/index.html","hash":"8422af75085219653038952bb8a6036c06d6c75a","modified":1493907408268},{"_id":"public/2017/04/20/JQuery干货篇之选择元素/index.html","hash":"feb0d97c503cf9a8990b0d78448e9e32e40b27a1","modified":1493907408268},{"_id":"public/2017/04/16/SQL干货篇三/index.html","hash":"209afcfc01c96d132ed04c4fdc8ac29a3003418f","modified":1493907408268},{"_id":"public/2017/04/16/java连接mysql初探篇/index.html","hash":"460e8a04b75b17a6fa9adf1bfdd1e71ebabdff0b","modified":1493907408268},{"_id":"public/2017/04/13/Linux干货篇一/index.html","hash":"7a72e8860bebeecbba336e5f401086788c9e6650","modified":1493907408268},{"_id":"public/2017/04/09/SQL干货篇二/index.html","hash":"f12aa21e822c477a49add97b8f646c44443ec9f6","modified":1493907408268},{"_id":"public/2017/04/09/java干货篇之文字特效/index.html","hash":"b894ac563c17aa97610a79e6965a350ffd6f0c0d","modified":1493907408268},{"_id":"public/2017/04/08/Swing干货系列之JTextField/index.html","hash":"985796bf077d088d92d712ee7497fe4b13777902","modified":1493907408268},{"_id":"public/2017/04/08/scrapy爬取豆瓣全站/index.html","hash":"641e37edbea81c78b059f1688e7bc2b780b8280e","modified":1493907408268},{"_id":"public/2017/04/06/SQL基本操作/index.html","hash":"d5e5f3a1b5f3a0241c1169681756c56982d31f8a","modified":1493907408268},{"_id":"public/2017/04/05/java布局管理器/index.html","hash":"fc8068b71f2ab0eed6dcb6c2a09aa947abc43970","modified":1493907408268},{"_id":"public/2017/04/04/java图像处理干货篇/index.html","hash":"e3eb604f9d4d679d176b6e72c6dd4e328ceba02c","modified":1493907408268},{"_id":"public/2017/04/01/matplotlib绘制图形基础/index.html","hash":"d253b2956272eeb2614828523e892af511f81c93","modified":1493907408269},{"_id":"public/2017/03/28/Swing中的JSplitPane/index.html","hash":"6450ca8adb7f400b59f72d6d3043d921f3d0495e","modified":1493907408269},{"_id":"public/2017/03/27/Swing-干货系列之JSlider/index.html","hash":"8507f2dafcfaa6e958f5bfad1c84f8aa6b622f74","modified":1493907408269},{"_id":"public/2017/03/26/scrapy设置请求池/index.html","hash":"c202361a4e2d6c0d41b464e56f4944871ae6df46","modified":1493907408269},{"_id":"public/2017/03/26/Scrapy中使用cookie免于验证登录和模拟登录/index.html","hash":"e54096b440873c82869dc20dc7cd1422f4ff96bd","modified":1493907408269},{"_id":"public/2017/03/26/scrapy设置代理ip/index.html","hash":"99c35f271fb575006dc7f52f9de5ae55a9f9d83e","modified":1493907408269},{"_id":"public/2017/03/25/scrapy的下载器中间件/index.html","hash":"2965642525dc4131b00a2d6a6f8eb269db2ef00c","modified":1493907408269},{"_id":"public/2017/03/25/scrapy初试/index.html","hash":"9d77afea245d343f99ce0ad232574883d4bda1ee","modified":1493907408269},{"_id":"public/2017/03/25/java中的IO操作/index.html","hash":"1e0ce9f8c1ff28e4cc85ba19c772ce0a957c98fe","modified":1493907408269},{"_id":"public/2017/03/25/scrapy架构初探/index.html","hash":"0f4181cc1c48c7999984f43fb5a6719a89bf720c","modified":1493907408269},{"_id":"public/2017/03/25/java图形与文本处理一/index.html","hash":"509c07b9c24c595de792c790f8e5c7ac30df7e62","modified":1493907408273},{"_id":"public/index.html","hash":"8236a837311e926a483ab88f525720e57a0c6097","modified":1493907408273},{"_id":"public/page/3/index.html","hash":"b88175b77b16043f64186c1d743aaa8cf273d981","modified":1493907408273},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493907408282},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493907408287},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493907408287},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493907408287},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493907408287},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493907408287},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493907408288},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1493907408288},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1493907408288},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1493907408288},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1493907408288},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1493907408288},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1493907408288},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1493907408289},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1493907408289},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1493907408289},{"_id":"public/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1493907408289},{"_id":"public/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493907408289},{"_id":"public/img/avatar.jpg","hash":"a3b608f9ef1a493de977e134a57091a011b97c69","modified":1493907408289},{"_id":"public/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493907408289},{"_id":"public/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493907408289},{"_id":"public/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493907408289},{"_id":"public/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493907408289},{"_id":"public/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493907408289},{"_id":"public/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493907408289},{"_id":"public/img/demo.jpg","hash":"2f360e98433543926ee154d977fa223e4198a95f","modified":1493907408289},{"_id":"public/img/favicon.ico","hash":"a4343a392e42db6937ff92de379dd0d3d515da17","modified":1493907408289},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1493907408289},{"_id":"public/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1493907408289},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1493907408289},{"_id":"public/img/timg.jpg","hash":"21956ab9caa61c0bf34d237e3c950d25773e291c","modified":1493907408289},{"_id":"public/img/background.jpg","hash":"228526e4762f365822d7c34a8c60021cbc868585","modified":1493907408289},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493907408289},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1493907409246},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1493907409249},{"_id":"public/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1493907409253},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1493907409254},{"_id":"public/img/pet.jpg","hash":"41e89367a8b579fe92f579961a67dea742ad7f3b","modified":1493907409254},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1493907409269},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1493907409269},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1493907409269},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1493907409269},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1493907409269},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493907409269},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493907409269},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1493907409269},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1493907409269},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1493907409269},{"_id":"public/css/style.css","hash":"ad2666436bc12eb0679ecab814a2c0ccc280f438","modified":1493907409269},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1493907409270},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1493907409270},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1493907409270},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1493907409270},{"_id":"public/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1493907409313},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1493907409313}],"Category":[{"name":"java学习","_id":"cj2ahwavl0004l0uzxruzd7jv"},{"name":"JQuery学习","_id":"cj2ahwawc0009l0uzkdnaohcz"},{"name":"BootStrap学习","_id":"cj2ahwawl000fl0uzh59uu6x9"},{"name":"Linux","_id":"cj2ahwaxa000xl0uzkj3nzcd4"},{"name":"数据库干货篇","_id":"cj2ahwaxf0013l0uzthcrhu7x"},{"name":"Scrapy学习","_id":"cj2ahwayz002al0uz0ldude4o"},{"name":"python数据挖掘与分析","_id":"cj2ahwazc002pl0uz3immtlts"},{"name":"python","_id":"cj2ahwazg002wl0uzqphffgbe"}],"Data":[],"Page":[{"_content":"Y7N2QWqwu1","source":"baidu_verify_Y7N2QWqwu1.html","raw":"Y7N2QWqwu1","date":"2017-04-04T08:21:55.745Z","updated":"2017-03-28T11:45:34.247Z","path":"baidu_verify_Y7N2QWqwu1.html","title":"","comments":1,"layout":"page","_id":"cj2ahwasv0000l0uzi529uqh0","content":"Y7N2QWqwu1","excerpt":"","more":"Y7N2QWqwu1"},{"_content":"google-site-verification: google4070d8185dcadee2.html","source":"google4070d8185dcadee2.html","raw":"google-site-verification: google4070d8185dcadee2.html","date":"2017-04-04T08:21:55.779Z","updated":"2017-03-24T13:25:35.124Z","path":"google4070d8185dcadee2.html","title":"","comments":1,"layout":"page","_id":"cj2ahwatv0001l0uz99y8pe7m","content":"google-site-verification: google4070d8185dcadee2.html","excerpt":"","more":"google-site-verification: google4070d8185dcadee2.html"},{"title":"about","date":"2017-03-24T05:27:32.000Z","_content":"# 本人简介\n目前自己还是一个在校大学生，传说中的技术狗，选了坑人的计算机专业，但是渐渐发现自己还是挺喜欢软件开发这块的，以前自学了**python爬虫**，系统的学习了**c++**、**c**,现在就是主攻**java软件开发**，希望在未来的日子里能够将自己的学习心得记录在博客上。\n\n## 本人的联系方式：\n\n### QQ:1655378771\n### 微博:18796327106\n### [github](https://github.com/chenjiabing666)\n### CSDN:BLMOTOF\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-24 13:27:32\n---\n# 本人简介\n目前自己还是一个在校大学生，传说中的技术狗，选了坑人的计算机专业，但是渐渐发现自己还是挺喜欢软件开发这块的，以前自学了**python爬虫**，系统的学习了**c++**、**c**,现在就是主攻**java软件开发**，希望在未来的日子里能够将自己的学习心得记录在博客上。\n\n## 本人的联系方式：\n\n### QQ:1655378771\n### 微博:18796327106\n### [github](https://github.com/chenjiabing666)\n### CSDN:BLMOTOF\n\n","updated":"2017-03-24T16:16:31.857Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj2ahwb0r0043l0uz8ui280vo","content":"<h1 id=\"本人简介\"><a href=\"#本人简介\" class=\"headerlink\" title=\"本人简介\"></a>本人简介</h1><p>目前自己还是一个在校大学生，传说中的技术狗，选了坑人的计算机专业，但是渐渐发现自己还是挺喜欢软件开发这块的，以前自学了<strong>python爬虫</strong>，系统的学习了<strong>c++</strong>、<strong>c</strong>,现在就是主攻<strong>java软件开发</strong>，希望在未来的日子里能够将自己的学习心得记录在博客上。</p>\n<h2 id=\"本人的联系方式：\"><a href=\"#本人的联系方式：\" class=\"headerlink\" title=\"本人的联系方式：\"></a>本人的联系方式：</h2><h3 id=\"QQ-1655378771\"><a href=\"#QQ-1655378771\" class=\"headerlink\" title=\"QQ:1655378771\"></a>QQ:1655378771</h3><h3 id=\"微博-18796327106\"><a href=\"#微博-18796327106\" class=\"headerlink\" title=\"微博:18796327106\"></a>微博:18796327106</h3><h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a><a href=\"https://github.com/chenjiabing666\" target=\"_blank\" rel=\"external\">github</a></h3><h3 id=\"CSDN-BLMOTOF\"><a href=\"#CSDN-BLMOTOF\" class=\"headerlink\" title=\"CSDN:BLMOTOF\"></a>CSDN:BLMOTOF</h3>","excerpt":"","more":"<h1 id=\"本人简介\"><a href=\"#本人简介\" class=\"headerlink\" title=\"本人简介\"></a>本人简介</h1><p>目前自己还是一个在校大学生，传说中的技术狗，选了坑人的计算机专业，但是渐渐发现自己还是挺喜欢软件开发这块的，以前自学了<strong>python爬虫</strong>，系统的学习了<strong>c++</strong>、<strong>c</strong>,现在就是主攻<strong>java软件开发</strong>，希望在未来的日子里能够将自己的学习心得记录在博客上。</p>\n<h2 id=\"本人的联系方式：\"><a href=\"#本人的联系方式：\" class=\"headerlink\" title=\"本人的联系方式：\"></a>本人的联系方式：</h2><h3 id=\"QQ-1655378771\"><a href=\"#QQ-1655378771\" class=\"headerlink\" title=\"QQ:1655378771\"></a>QQ:1655378771</h3><h3 id=\"微博-18796327106\"><a href=\"#微博-18796327106\" class=\"headerlink\" title=\"微博:18796327106\"></a>微博:18796327106</h3><h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a><a href=\"https://github.com/chenjiabing666\">github</a></h3><h3 id=\"CSDN-BLMOTOF\"><a href=\"#CSDN-BLMOTOF\" class=\"headerlink\" title=\"CSDN:BLMOTOF\"></a>CSDN:BLMOTOF</h3>"},{"title":"tags","date":"2017-03-24T05:23:46.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-24 13:23:46\ntype: \"tags\"\ncomments: true\n---\n","updated":"2017-03-24T05:25:13.404Z","path":"tags/index.html","layout":"page","_id":"cj2ahwb0t0044l0uzvg61lywa","content":"","excerpt":"","more":""}],"Post":[{"title":"JDBC干货篇一","date":"2017-04-27T15:03:51.000Z","_content":"# JDBC干货篇一\n\n## JDBC基础\n>* **`JDBC`的全称是`Java Database Connectivity`，即`Java`数据库连接，它是一种可以执行`SQL`语句的`Java API`。程序可通过`JDBC API`连接到关系数据库，并使用结构化查询语言（`SQL`，数据库标准的查询语言）来完成对数据库的查询、更新**\n\n>* **与其他数据库编程环境相比，`JDBC`为数据库开发提供了标准的`API`，使用`JDBC`开发的数据库应用可以跨平台运行，而且还可以跨数据库（如果全部使用标准的`SQL`语句）。也就是说如果使用JDBC开发一个数据库应用，则该应用既可以在Windows操作系统上运行，又可以在`Unix`等其他操作系统上运行，既可以使用`MySQ`L数据库，又可以使用`Oracle`等其他的数据库，应用程序不需要做任何的修改**\n\n## 加载数据库驱动\n>* **`Class.forName(classDriver)`其中`classDrive`r就是数据库驱动类对应的字符串,下面给出加载`mysql`,`oracle`数据库的例子：**\n\n```java\nClass.forName(\"com.mysql.jdbc.Driver\");   //mysql\nClass.forName(\"oracle.jabc.driver.OracleDriver\");    //oracle\n\n```\n\n## 获取数据库连接\n**获得数据库连接的方法为`DriverManager.getConnection()`,其中有不同的参数，也对应不同的方法，下面将会详细介绍**\n>* **`DriverManager.getConnection(String url)`**   \n\n>* **`DriverManager.getConnection(String url, Properties prop)`  这里的Properties是一个属性集，详情请看[文档](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Properties.html)**\n\n>* **`DriverManager.getConnection(String url,String user,String password)`  这里的`url`是`jdbc:mysql://localhost:3306/java_demo`，其中`java_demo`表示你自己创建的数据库名字，`urser`表示当前数据库的登录的用户名，`password`表示密码**\n\n```java\n        //第二种方法\n        String url=\"jdbc:mysql://localhost:3306/java_demo\";  //这是连接的url\n        String user=\"root\";\n        String password=\"root\";   \n        Properties properties=new Properties();   //创建属性集\n        properties.setProperty(\"password\", password);   //向起中添加属性,很想python中的字典\n        properties.setProperty(\"user\",user);   \n        Class.forName(\"com.mysql.jdbc.Driver\");   //加载数据库驱动\n        Connection conn=DriverManager.getConnection(url,properties);   //连接数据库\n        \n        //第三种方法\n        \n        Connection conn=DriverManager.getConnection(url,user,password);   //连接数据库 \n        \n\n```\n>**注意：以上只是一些例子，并不是完整的代码，其中并没有处理异常，还应该注意的是要关闭connection**\n\n## 查询数据\n>**查询数据有两种方法，分别为静态查询和动态查询，静态查询使用的[Statement](http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html)，动态查询使用的[PrepareStatement](http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html),下面详细介绍这两种查询方法**\n\n### 静态查询\n>**使用的是`Statement`,其中常用的函数如下：**\n>* **`boolean execute(String SQL)`  如果`ResultSet`对象可以被检索，则返回的布尔值为` true `，否则返回 `false` 。当你需要使用真正的动态 `SQL` 时，可以使用这个方法来执行 `SQL DDL` 语句**\n\n>* **`int executeUpdate(String SQL)`  返回执行 `SQL` 语句影响的行的数目。使用该方法来执行 `SQL` 语句，是希望得到一些受影响的行的数目，例如，`INSERT`，`UPDATE` 或 `DELETE` 语句**\n\n>* **`ResultSet executeQuery(String SQL) `: 返回一个 `ResultSet` 对象。当你希望得到一个结果集时使用该方法，就像你使用一个 `SELECT` 语句。**\n\n>* **`close()`关闭`statement`对象，这个是必须有的，为了程序的安全，必须在结束之前关闭**\n\n>**实例：**\n\n```java\n\n    Statement stmt = null;   //申请对象\ntry {\n   stmt = connection.createStatement( );   //通过Connection对象创建statement对象\n   \n   String sql_1=\"select * from course;\";\n   String sql_2=\"select * from course where id=2;\";\n   \n   ResultSet res_1=stm.executeQuery(sql_1);   //执行查询语句，返回的是一个结果集合，上面已经说明了\n   ResultSet res_2=stm.executeQuery(sql_1);\n   \n   while(res_1.next())\n   {\n   System.out.println(res_1.getInt(1)+\"---\"+res_1.getString(2));   //分别查询第一列和第二列的值，通过列数查询\n   System.out.println(res_1.getInt(\"id\")+\"---\"+res_1.getString(\"name\"));   //通过列名查询\n   \n   }\n  \n   }\ncatch (SQLException e) {    //捕捉异常\n   . . .\n}\nfinally {\n    if(connection!=null)\n    {\n        connection.close();    //关闭连接\n    }\n   if(stmt!=null)\n   {\n       stmt.close();  //关闭\n   }\n}\n\n```\n\n>**说明：`ResultSet`常用的方法如下：注意下面的方法会发生`SQLException`异常**\n\n>* **`public void beforeFirst()` 将光标移动到第一行之前。**\n\n>* **`public void afterLast()`  将光标移动到最后一行之后。**\n\n>* **`public boolean first()`  将光标移动到第一行。从第一行的数据开始读取**\n\n>* **`public void last()` 将光标移动到最后一行。**\n\n>* **`public boolean absolute(int row)` 将光标移动到指定的第` row `行。**\n\n>* **`public boolean previous()` 将光标移动到上一行，如果超过结果集的范围则返回` false`。**\n\n>* **`public boolean next()` 将光标移动到下一行，如果是结果集的最后一行则返回 false。**\n\n>* **`public int getRow()` 返回当前光标指向的行数的值。**\n\n>* **`public void moveToInsertRow()` 将光标移动到结果集中指定的行，可以在数据库中插入新的一行。当前光标位置将被记住**\n\n>* **`public void moveToCurrentRow()` 如果光标处于插入行，则将光标返回到当前行，其他情况下，这个方法不执行任何操作**\n\n>* **`public int getInt(String columnName) `返回当前行中名为 `columnName `的列的 `int` 值。**\n\n>* **`public int getInt(int columnIndex)` 返回当前行中指定列的索引的` int `值。列索引从 `1` 开始，意味着行中的第一列是` 1` ，第二列是 `2` ，以此类推。**\n\n>* **`getString(int columIndex)` 返回指定列的`String`类型的数据**\n\n>* **`getString(String columName)` 返回当前行中名为`columName`的`String`类型的值**\n\n### 动态查询\n>**动态查询使用的`PrepareStatement`这个类实现的，`PreparedStatement` 接口扩展了 `Statement` 接口，它让你用一个常用的 `Statement` 对象增加几个高级功能。这个 `statement` 对象可以提供灵活多变的动态参数**\n\n> **实例：**\n\n```java\n\nPreparedStatement pstmt = null;\ntry {\n   String SQL = \"select * from course where age=? and name=?\";\n   pstmt = conn.prepareStatement(SQL);   //创建对象\n   pstmt.setInt(1,22);   //设置参数age的值 ，1表示第一个参数\n   pstmt.setString(2,\"chenjiabing\");   //设置name的值，其中2表示第二个参数\n   ResultSet res=pstmt.execteQuery();\n   while(res.next)\n   {\n       ....\n   }\n   \n   . . .\n}\ncatch (SQLException e) {\n   . . .\n}\nfinally {\n    if(connection!=null)\n    {\n        connection.close();\n    }\n    if(pstmt!=null)\n    {\n    pstmt.close();   //关闭\n    }\n\n   . . .\n}\n\n```\n\n>**说明:`JDBC` 中所有的参数都被用` ? `符号表示，这是已知的参数标记。在执行` SQL` 语句之前，你必须赋予每一个参数确切的数值。其中`PrepareStatement`的常用函数如下，当然`Statement`中的`execute` ,`executeQuery `,`executeUpdate`也可以使用**\n\n>* **`void setInt(int parameterIndex, int x)` `parameterIndex`表示第几个`?`,这里的`int x`表示是`mysql`中定义的`int`类型的值**\n>* **`void setString(int parameterIndex,String x)`  为第`parameterIndex`个`String`类型的?赋予`x`的值**\n\n\n## 其他的操作\n>**这里还有`delete`,`update`,`alter`等一系列的操作都是和上面的一样，就是把`sql`语句改变以下，如果使用的是静态的就要为`delete`,`update`,使用`Statement.execteUpdate(sql)`这个函数,当然要使用动态的也是`executeUpdate`函数**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/JDBC干货篇一.md","raw":"---\ntitle: JDBC干货篇一\ndate: 2017-04-27 23:03:51\ncategories: java学习\ntags: JDBC\n---\n# JDBC干货篇一\n\n## JDBC基础\n>* **`JDBC`的全称是`Java Database Connectivity`，即`Java`数据库连接，它是一种可以执行`SQL`语句的`Java API`。程序可通过`JDBC API`连接到关系数据库，并使用结构化查询语言（`SQL`，数据库标准的查询语言）来完成对数据库的查询、更新**\n\n>* **与其他数据库编程环境相比，`JDBC`为数据库开发提供了标准的`API`，使用`JDBC`开发的数据库应用可以跨平台运行，而且还可以跨数据库（如果全部使用标准的`SQL`语句）。也就是说如果使用JDBC开发一个数据库应用，则该应用既可以在Windows操作系统上运行，又可以在`Unix`等其他操作系统上运行，既可以使用`MySQ`L数据库，又可以使用`Oracle`等其他的数据库，应用程序不需要做任何的修改**\n\n## 加载数据库驱动\n>* **`Class.forName(classDriver)`其中`classDrive`r就是数据库驱动类对应的字符串,下面给出加载`mysql`,`oracle`数据库的例子：**\n\n```java\nClass.forName(\"com.mysql.jdbc.Driver\");   //mysql\nClass.forName(\"oracle.jabc.driver.OracleDriver\");    //oracle\n\n```\n\n## 获取数据库连接\n**获得数据库连接的方法为`DriverManager.getConnection()`,其中有不同的参数，也对应不同的方法，下面将会详细介绍**\n>* **`DriverManager.getConnection(String url)`**   \n\n>* **`DriverManager.getConnection(String url, Properties prop)`  这里的Properties是一个属性集，详情请看[文档](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Properties.html)**\n\n>* **`DriverManager.getConnection(String url,String user,String password)`  这里的`url`是`jdbc:mysql://localhost:3306/java_demo`，其中`java_demo`表示你自己创建的数据库名字，`urser`表示当前数据库的登录的用户名，`password`表示密码**\n\n```java\n        //第二种方法\n        String url=\"jdbc:mysql://localhost:3306/java_demo\";  //这是连接的url\n        String user=\"root\";\n        String password=\"root\";   \n        Properties properties=new Properties();   //创建属性集\n        properties.setProperty(\"password\", password);   //向起中添加属性,很想python中的字典\n        properties.setProperty(\"user\",user);   \n        Class.forName(\"com.mysql.jdbc.Driver\");   //加载数据库驱动\n        Connection conn=DriverManager.getConnection(url,properties);   //连接数据库\n        \n        //第三种方法\n        \n        Connection conn=DriverManager.getConnection(url,user,password);   //连接数据库 \n        \n\n```\n>**注意：以上只是一些例子，并不是完整的代码，其中并没有处理异常，还应该注意的是要关闭connection**\n\n## 查询数据\n>**查询数据有两种方法，分别为静态查询和动态查询，静态查询使用的[Statement](http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html)，动态查询使用的[PrepareStatement](http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html),下面详细介绍这两种查询方法**\n\n### 静态查询\n>**使用的是`Statement`,其中常用的函数如下：**\n>* **`boolean execute(String SQL)`  如果`ResultSet`对象可以被检索，则返回的布尔值为` true `，否则返回 `false` 。当你需要使用真正的动态 `SQL` 时，可以使用这个方法来执行 `SQL DDL` 语句**\n\n>* **`int executeUpdate(String SQL)`  返回执行 `SQL` 语句影响的行的数目。使用该方法来执行 `SQL` 语句，是希望得到一些受影响的行的数目，例如，`INSERT`，`UPDATE` 或 `DELETE` 语句**\n\n>* **`ResultSet executeQuery(String SQL) `: 返回一个 `ResultSet` 对象。当你希望得到一个结果集时使用该方法，就像你使用一个 `SELECT` 语句。**\n\n>* **`close()`关闭`statement`对象，这个是必须有的，为了程序的安全，必须在结束之前关闭**\n\n>**实例：**\n\n```java\n\n    Statement stmt = null;   //申请对象\ntry {\n   stmt = connection.createStatement( );   //通过Connection对象创建statement对象\n   \n   String sql_1=\"select * from course;\";\n   String sql_2=\"select * from course where id=2;\";\n   \n   ResultSet res_1=stm.executeQuery(sql_1);   //执行查询语句，返回的是一个结果集合，上面已经说明了\n   ResultSet res_2=stm.executeQuery(sql_1);\n   \n   while(res_1.next())\n   {\n   System.out.println(res_1.getInt(1)+\"---\"+res_1.getString(2));   //分别查询第一列和第二列的值，通过列数查询\n   System.out.println(res_1.getInt(\"id\")+\"---\"+res_1.getString(\"name\"));   //通过列名查询\n   \n   }\n  \n   }\ncatch (SQLException e) {    //捕捉异常\n   . . .\n}\nfinally {\n    if(connection!=null)\n    {\n        connection.close();    //关闭连接\n    }\n   if(stmt!=null)\n   {\n       stmt.close();  //关闭\n   }\n}\n\n```\n\n>**说明：`ResultSet`常用的方法如下：注意下面的方法会发生`SQLException`异常**\n\n>* **`public void beforeFirst()` 将光标移动到第一行之前。**\n\n>* **`public void afterLast()`  将光标移动到最后一行之后。**\n\n>* **`public boolean first()`  将光标移动到第一行。从第一行的数据开始读取**\n\n>* **`public void last()` 将光标移动到最后一行。**\n\n>* **`public boolean absolute(int row)` 将光标移动到指定的第` row `行。**\n\n>* **`public boolean previous()` 将光标移动到上一行，如果超过结果集的范围则返回` false`。**\n\n>* **`public boolean next()` 将光标移动到下一行，如果是结果集的最后一行则返回 false。**\n\n>* **`public int getRow()` 返回当前光标指向的行数的值。**\n\n>* **`public void moveToInsertRow()` 将光标移动到结果集中指定的行，可以在数据库中插入新的一行。当前光标位置将被记住**\n\n>* **`public void moveToCurrentRow()` 如果光标处于插入行，则将光标返回到当前行，其他情况下，这个方法不执行任何操作**\n\n>* **`public int getInt(String columnName) `返回当前行中名为 `columnName `的列的 `int` 值。**\n\n>* **`public int getInt(int columnIndex)` 返回当前行中指定列的索引的` int `值。列索引从 `1` 开始，意味着行中的第一列是` 1` ，第二列是 `2` ，以此类推。**\n\n>* **`getString(int columIndex)` 返回指定列的`String`类型的数据**\n\n>* **`getString(String columName)` 返回当前行中名为`columName`的`String`类型的值**\n\n### 动态查询\n>**动态查询使用的`PrepareStatement`这个类实现的，`PreparedStatement` 接口扩展了 `Statement` 接口，它让你用一个常用的 `Statement` 对象增加几个高级功能。这个 `statement` 对象可以提供灵活多变的动态参数**\n\n> **实例：**\n\n```java\n\nPreparedStatement pstmt = null;\ntry {\n   String SQL = \"select * from course where age=? and name=?\";\n   pstmt = conn.prepareStatement(SQL);   //创建对象\n   pstmt.setInt(1,22);   //设置参数age的值 ，1表示第一个参数\n   pstmt.setString(2,\"chenjiabing\");   //设置name的值，其中2表示第二个参数\n   ResultSet res=pstmt.execteQuery();\n   while(res.next)\n   {\n       ....\n   }\n   \n   . . .\n}\ncatch (SQLException e) {\n   . . .\n}\nfinally {\n    if(connection!=null)\n    {\n        connection.close();\n    }\n    if(pstmt!=null)\n    {\n    pstmt.close();   //关闭\n    }\n\n   . . .\n}\n\n```\n\n>**说明:`JDBC` 中所有的参数都被用` ? `符号表示，这是已知的参数标记。在执行` SQL` 语句之前，你必须赋予每一个参数确切的数值。其中`PrepareStatement`的常用函数如下，当然`Statement`中的`execute` ,`executeQuery `,`executeUpdate`也可以使用**\n\n>* **`void setInt(int parameterIndex, int x)` `parameterIndex`表示第几个`?`,这里的`int x`表示是`mysql`中定义的`int`类型的值**\n>* **`void setString(int parameterIndex,String x)`  为第`parameterIndex`个`String`类型的?赋予`x`的值**\n\n\n## 其他的操作\n>**这里还有`delete`,`update`,`alter`等一系列的操作都是和上面的一样，就是把`sql`语句改变以下，如果使用的是静态的就要为`delete`,`update`,使用`Statement.execteUpdate(sql)`这个函数,当然要使用动态的也是`executeUpdate`函数**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"JDBC干货篇一","published":1,"updated":"2017-04-27T15:04:31.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwavb0002l0uzly3d3fpd","content":"<h1 id=\"JDBC干货篇一\"><a href=\"#JDBC干货篇一\" class=\"headerlink\" title=\"JDBC干货篇一\"></a>JDBC干货篇一</h1><h2 id=\"JDBC基础\"><a href=\"#JDBC基础\" class=\"headerlink\" title=\"JDBC基础\"></a>JDBC基础</h2><blockquote>\n<ul>\n<li><p><strong><code>JDBC</code>的全称是<code>Java Database Connectivity</code>，即<code>Java</code>数据库连接，它是一种可以执行<code>SQL</code>语句的<code>Java API</code>。程序可通过<code>JDBC API</code>连接到关系数据库，并使用结构化查询语言（<code>SQL</code>，数据库标准的查询语言）来完成对数据库的查询、更新</strong></p>\n</li>\n<li><p><strong>与其他数据库编程环境相比，<code>JDBC</code>为数据库开发提供了标准的<code>API</code>，使用<code>JDBC</code>开发的数据库应用可以跨平台运行，而且还可以跨数据库（如果全部使用标准的<code>SQL</code>语句）。也就是说如果使用JDBC开发一个数据库应用，则该应用既可以在Windows操作系统上运行，又可以在<code>Unix</code>等其他操作系统上运行，既可以使用<code>MySQ</code>L数据库，又可以使用<code>Oracle</code>等其他的数据库，应用程序不需要做任何的修改</strong></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"加载数据库驱动\"><a href=\"#加载数据库驱动\" class=\"headerlink\" title=\"加载数据库驱动\"></a>加载数据库驱动</h2><blockquote>\n<ul>\n<li><strong><code>Class.forName(classDriver)</code>其中<code>classDrive</code>r就是数据库驱动类对应的字符串,下面给出加载<code>mysql</code>,<code>oracle</code>数据库的例子：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);   <span class=\"comment\">//mysql</span></div><div class=\"line\">Class.forName(<span class=\"string\">\"oracle.jabc.driver.OracleDriver\"</span>);    <span class=\"comment\">//oracle</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数据库连接\"><a href=\"#获取数据库连接\" class=\"headerlink\" title=\"获取数据库连接\"></a>获取数据库连接</h2><p><strong>获得数据库连接的方法为<code>DriverManager.getConnection()</code>,其中有不同的参数，也对应不同的方法，下面将会详细介绍</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>DriverManager.getConnection(String url)</code></strong>   </p>\n</li>\n<li><p><strong><code>DriverManager.getConnection(String url, Properties prop)</code>  这里的Properties是一个属性集，详情请看<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Properties.html\" target=\"_blank\" rel=\"external\">文档</a></strong></p>\n</li>\n<li><p><strong><code>DriverManager.getConnection(String url,String user,String password)</code>  这里的<code>url</code>是<code>jdbc:mysql://localhost:3306/java_demo</code>，其中<code>java_demo</code>表示你自己创建的数据库名字，<code>urser</code>表示当前数据库的登录的用户名，<code>password</code>表示密码</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第二种方法</span></div><div class=\"line\">String url=<span class=\"string\">\"jdbc:mysql://localhost:3306/java_demo\"</span>;  <span class=\"comment\">//这是连接的url</span></div><div class=\"line\">String user=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">String password=<span class=\"string\">\"root\"</span>;   </div><div class=\"line\">Properties properties=<span class=\"keyword\">new</span> Properties();   <span class=\"comment\">//创建属性集</span></div><div class=\"line\">properties.setProperty(<span class=\"string\">\"password\"</span>, password);   <span class=\"comment\">//向起中添加属性,很想python中的字典</span></div><div class=\"line\">properties.setProperty(<span class=\"string\">\"user\"</span>,user);   </div><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);   <span class=\"comment\">//加载数据库驱动</span></div><div class=\"line\">Connection conn=DriverManager.getConnection(url,properties);   <span class=\"comment\">//连接数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第三种方法</span></div><div class=\"line\"></div><div class=\"line\">Connection conn=DriverManager.getConnection(url,user,password);   <span class=\"comment\">//连接数据库</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：以上只是一些例子，并不是完整的代码，其中并没有处理异常，还应该注意的是要关闭connection</strong></p>\n</blockquote>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><blockquote>\n<p><strong>查询数据有两种方法，分别为静态查询和动态查询，静态查询使用的<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html\" target=\"_blank\" rel=\"external\">Statement</a>，动态查询使用的<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html\" target=\"_blank\" rel=\"external\">PrepareStatement</a>,下面详细介绍这两种查询方法</strong></p>\n</blockquote>\n<h3 id=\"静态查询\"><a href=\"#静态查询\" class=\"headerlink\" title=\"静态查询\"></a>静态查询</h3><blockquote>\n<p><strong>使用的是<code>Statement</code>,其中常用的函数如下：</strong></p>\n<ul>\n<li><p><strong><code>boolean execute(String SQL)</code>  如果<code>ResultSet</code>对象可以被检索，则返回的布尔值为<code>true</code>，否则返回 <code>false</code> 。当你需要使用真正的动态 <code>SQL</code> 时，可以使用这个方法来执行 <code>SQL DDL</code> 语句</strong></p>\n</li>\n<li><p><strong><code>int executeUpdate(String SQL)</code>  返回执行 <code>SQL</code> 语句影响的行的数目。使用该方法来执行 <code>SQL</code> 语句，是希望得到一些受影响的行的数目，例如，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句</strong></p>\n</li>\n<li><p><strong><code>ResultSet executeQuery(String SQL)</code>: 返回一个 <code>ResultSet</code> 对象。当你希望得到一个结果集时使用该方法，就像你使用一个 <code>SELECT</code> 语句。</strong></p>\n</li>\n<li><p><strong><code>close()</code>关闭<code>statement</code>对象，这个是必须有的，为了程序的安全，必须在结束之前关闭</strong></p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    Statement stmt = <span class=\"keyword\">null</span>;   <span class=\"comment\">//申请对象</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   stmt = connection.createStatement( );   <span class=\"comment\">//通过Connection对象创建statement对象</span></div><div class=\"line\">   </div><div class=\"line\">   String sql_1=<span class=\"string\">\"select * from course;\"</span>;</div><div class=\"line\">   String sql_2=<span class=\"string\">\"select * from course where id=2;\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   ResultSet res_1=stm.executeQuery(sql_1);   <span class=\"comment\">//执行查询语句，返回的是一个结果集合，上面已经说明了</span></div><div class=\"line\">   ResultSet res_2=stm.executeQuery(sql_1);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">while</span>(res_1.next())</div><div class=\"line\">   &#123;</div><div class=\"line\">   System.out.println(res_1.getInt(<span class=\"number\">1</span>)+<span class=\"string\">\"---\"</span>+res_1.getString(<span class=\"number\">2</span>));   <span class=\"comment\">//分别查询第一列和第二列的值，通过列数查询</span></div><div class=\"line\">   System.out.println(res_1.getInt(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\"---\"</span>+res_1.getString(<span class=\"string\">\"name\"</span>));   <span class=\"comment\">//通过列名查询</span></div><div class=\"line\">   </div><div class=\"line\">   &#125;</div><div class=\"line\">  </div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (SQLException e) &#123;    <span class=\"comment\">//捕捉异常</span></div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        connection.close();    <span class=\"comment\">//关闭连接</span></div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"keyword\">if</span>(stmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">   &#123;</div><div class=\"line\">       stmt.close();  <span class=\"comment\">//关闭</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：<code>ResultSet</code>常用的方法如下：注意下面的方法会发生<code>SQLException</code>异常</strong></p>\n<ul>\n<li><p><strong><code>public void beforeFirst()</code> 将光标移动到第一行之前。</strong></p>\n</li>\n<li><p><strong><code>public void afterLast()</code>  将光标移动到最后一行之后。</strong></p>\n</li>\n<li><p><strong><code>public boolean first()</code>  将光标移动到第一行。从第一行的数据开始读取</strong></p>\n</li>\n<li><p><strong><code>public void last()</code> 将光标移动到最后一行。</strong></p>\n</li>\n<li><p><strong><code>public boolean absolute(int row)</code> 将光标移动到指定的第<code>row</code>行。</strong></p>\n</li>\n<li><p><strong><code>public boolean previous()</code> 将光标移动到上一行，如果超过结果集的范围则返回<code>false</code>。</strong></p>\n</li>\n<li><p><strong><code>public boolean next()</code> 将光标移动到下一行，如果是结果集的最后一行则返回 false。</strong></p>\n</li>\n<li><p><strong><code>public int getRow()</code> 返回当前光标指向的行数的值。</strong></p>\n</li>\n<li><p><strong><code>public void moveToInsertRow()</code> 将光标移动到结果集中指定的行，可以在数据库中插入新的一行。当前光标位置将被记住</strong></p>\n</li>\n<li><p><strong><code>public void moveToCurrentRow()</code> 如果光标处于插入行，则将光标返回到当前行，其他情况下，这个方法不执行任何操作</strong></p>\n</li>\n<li><p><strong><code>public int getInt(String columnName)</code>返回当前行中名为 <code>columnName</code>的列的 <code>int</code> 值。</strong></p>\n</li>\n<li><p><strong><code>public int getInt(int columnIndex)</code> 返回当前行中指定列的索引的<code>int</code>值。列索引从 <code>1</code> 开始，意味着行中的第一列是<code>1</code> ，第二列是 <code>2</code> ，以此类推。</strong></p>\n</li>\n<li><p><strong><code>getString(int columIndex)</code> 返回指定列的<code>String</code>类型的数据</strong></p>\n</li>\n<li><p><strong><code>getString(String columName)</code> 返回当前行中名为<code>columName</code>的<code>String</code>类型的值</strong></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"动态查询\"><a href=\"#动态查询\" class=\"headerlink\" title=\"动态查询\"></a>动态查询</h3><blockquote>\n<p><strong>动态查询使用的<code>PrepareStatement</code>这个类实现的，<code>PreparedStatement</code> 接口扩展了 <code>Statement</code> 接口，它让你用一个常用的 <code>Statement</code> 对象增加几个高级功能。这个 <code>statement</code> 对象可以提供灵活多变的动态参数</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">PreparedStatement pstmt = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   String SQL = <span class=\"string\">\"select * from course where age=? and name=?\"</span>;</div><div class=\"line\">   pstmt = conn.prepareStatement(SQL);   <span class=\"comment\">//创建对象</span></div><div class=\"line\">   pstmt.setInt(<span class=\"number\">1</span>,<span class=\"number\">22</span>);   <span class=\"comment\">//设置参数age的值 ，1表示第一个参数</span></div><div class=\"line\">   pstmt.setString(<span class=\"number\">2</span>,<span class=\"string\">\"chenjiabing\"</span>);   <span class=\"comment\">//设置name的值，其中2表示第二个参数</span></div><div class=\"line\">   ResultSet res=pstmt.execteQuery();</div><div class=\"line\">   <span class=\"keyword\">while</span>(res.next)</div><div class=\"line\">   &#123;</div><div class=\"line\">       ....</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        connection.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(pstmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">    pstmt.close();   <span class=\"comment\">//关闭</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明:<code>JDBC</code> 中所有的参数都被用<code>?</code>符号表示，这是已知的参数标记。在执行<code>SQL</code> 语句之前，你必须赋予每一个参数确切的数值。其中<code>PrepareStatement</code>的常用函数如下，当然<code>Statement</code>中的<code>execute</code> ,<code>executeQuery</code>,<code>executeUpdate</code>也可以使用</strong></p>\n<ul>\n<li><strong><code>void setInt(int parameterIndex, int x)</code> <code>parameterIndex</code>表示第几个<code>?</code>,这里的<code>int x</code>表示是<code>mysql</code>中定义的<code>int</code>类型的值</strong></li>\n<li><strong><code>void setString(int parameterIndex,String x)</code>  为第<code>parameterIndex</code>个<code>String</code>类型的?赋予<code>x</code>的值</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"其他的操作\"><a href=\"#其他的操作\" class=\"headerlink\" title=\"其他的操作\"></a>其他的操作</h2><blockquote>\n<p><strong>这里还有<code>delete</code>,<code>update</code>,<code>alter</code>等一系列的操作都是和上面的一样，就是把<code>sql</code>语句改变以下，如果使用的是静态的就要为<code>delete</code>,<code>update</code>,使用<code>Statement.execteUpdate(sql)</code>这个函数,当然要使用动态的也是<code>executeUpdate</code>函数</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"JDBC干货篇一\"><a href=\"#JDBC干货篇一\" class=\"headerlink\" title=\"JDBC干货篇一\"></a>JDBC干货篇一</h1><h2 id=\"JDBC基础\"><a href=\"#JDBC基础\" class=\"headerlink\" title=\"JDBC基础\"></a>JDBC基础</h2><blockquote>\n<ul>\n<li><p><strong><code>JDBC</code>的全称是<code>Java Database Connectivity</code>，即<code>Java</code>数据库连接，它是一种可以执行<code>SQL</code>语句的<code>Java API</code>。程序可通过<code>JDBC API</code>连接到关系数据库，并使用结构化查询语言（<code>SQL</code>，数据库标准的查询语言）来完成对数据库的查询、更新</strong></p>\n</li>\n<li><p><strong>与其他数据库编程环境相比，<code>JDBC</code>为数据库开发提供了标准的<code>API</code>，使用<code>JDBC</code>开发的数据库应用可以跨平台运行，而且还可以跨数据库（如果全部使用标准的<code>SQL</code>语句）。也就是说如果使用JDBC开发一个数据库应用，则该应用既可以在Windows操作系统上运行，又可以在<code>Unix</code>等其他操作系统上运行，既可以使用<code>MySQ</code>L数据库，又可以使用<code>Oracle</code>等其他的数据库，应用程序不需要做任何的修改</strong></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"加载数据库驱动\"><a href=\"#加载数据库驱动\" class=\"headerlink\" title=\"加载数据库驱动\"></a>加载数据库驱动</h2><blockquote>\n<ul>\n<li><strong><code>Class.forName(classDriver)</code>其中<code>classDrive</code>r就是数据库驱动类对应的字符串,下面给出加载<code>mysql</code>,<code>oracle</code>数据库的例子：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);   <span class=\"comment\">//mysql</span></div><div class=\"line\">Class.forName(<span class=\"string\">\"oracle.jabc.driver.OracleDriver\"</span>);    <span class=\"comment\">//oracle</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数据库连接\"><a href=\"#获取数据库连接\" class=\"headerlink\" title=\"获取数据库连接\"></a>获取数据库连接</h2><p><strong>获得数据库连接的方法为<code>DriverManager.getConnection()</code>,其中有不同的参数，也对应不同的方法，下面将会详细介绍</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>DriverManager.getConnection(String url)</code></strong>   </p>\n</li>\n<li><p><strong><code>DriverManager.getConnection(String url, Properties prop)</code>  这里的Properties是一个属性集，详情请看<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Properties.html\">文档</a></strong></p>\n</li>\n<li><p><strong><code>DriverManager.getConnection(String url,String user,String password)</code>  这里的<code>url</code>是<code>jdbc:mysql://localhost:3306/java_demo</code>，其中<code>java_demo</code>表示你自己创建的数据库名字，<code>urser</code>表示当前数据库的登录的用户名，<code>password</code>表示密码</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第二种方法</span></div><div class=\"line\">String url=<span class=\"string\">\"jdbc:mysql://localhost:3306/java_demo\"</span>;  <span class=\"comment\">//这是连接的url</span></div><div class=\"line\">String user=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">String password=<span class=\"string\">\"root\"</span>;   </div><div class=\"line\">Properties properties=<span class=\"keyword\">new</span> Properties();   <span class=\"comment\">//创建属性集</span></div><div class=\"line\">properties.setProperty(<span class=\"string\">\"password\"</span>, password);   <span class=\"comment\">//向起中添加属性,很想python中的字典</span></div><div class=\"line\">properties.setProperty(<span class=\"string\">\"user\"</span>,user);   </div><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);   <span class=\"comment\">//加载数据库驱动</span></div><div class=\"line\">Connection conn=DriverManager.getConnection(url,properties);   <span class=\"comment\">//连接数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第三种方法</span></div><div class=\"line\"></div><div class=\"line\">Connection conn=DriverManager.getConnection(url,user,password);   <span class=\"comment\">//连接数据库</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：以上只是一些例子，并不是完整的代码，其中并没有处理异常，还应该注意的是要关闭connection</strong></p>\n</blockquote>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><blockquote>\n<p><strong>查询数据有两种方法，分别为静态查询和动态查询，静态查询使用的<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html\">Statement</a>，动态查询使用的<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html\">PrepareStatement</a>,下面详细介绍这两种查询方法</strong></p>\n</blockquote>\n<h3 id=\"静态查询\"><a href=\"#静态查询\" class=\"headerlink\" title=\"静态查询\"></a>静态查询</h3><blockquote>\n<p><strong>使用的是<code>Statement</code>,其中常用的函数如下：</strong></p>\n<ul>\n<li><p><strong><code>boolean execute(String SQL)</code>  如果<code>ResultSet</code>对象可以被检索，则返回的布尔值为<code>true</code>，否则返回 <code>false</code> 。当你需要使用真正的动态 <code>SQL</code> 时，可以使用这个方法来执行 <code>SQL DDL</code> 语句</strong></p>\n</li>\n<li><p><strong><code>int executeUpdate(String SQL)</code>  返回执行 <code>SQL</code> 语句影响的行的数目。使用该方法来执行 <code>SQL</code> 语句，是希望得到一些受影响的行的数目，例如，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句</strong></p>\n</li>\n<li><p><strong><code>ResultSet executeQuery(String SQL)</code>: 返回一个 <code>ResultSet</code> 对象。当你希望得到一个结果集时使用该方法，就像你使用一个 <code>SELECT</code> 语句。</strong></p>\n</li>\n<li><p><strong><code>close()</code>关闭<code>statement</code>对象，这个是必须有的，为了程序的安全，必须在结束之前关闭</strong></p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    Statement stmt = <span class=\"keyword\">null</span>;   <span class=\"comment\">//申请对象</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   stmt = connection.createStatement( );   <span class=\"comment\">//通过Connection对象创建statement对象</span></div><div class=\"line\">   </div><div class=\"line\">   String sql_1=<span class=\"string\">\"select * from course;\"</span>;</div><div class=\"line\">   String sql_2=<span class=\"string\">\"select * from course where id=2;\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   ResultSet res_1=stm.executeQuery(sql_1);   <span class=\"comment\">//执行查询语句，返回的是一个结果集合，上面已经说明了</span></div><div class=\"line\">   ResultSet res_2=stm.executeQuery(sql_1);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">while</span>(res_1.next())</div><div class=\"line\">   &#123;</div><div class=\"line\">   System.out.println(res_1.getInt(<span class=\"number\">1</span>)+<span class=\"string\">\"---\"</span>+res_1.getString(<span class=\"number\">2</span>));   <span class=\"comment\">//分别查询第一列和第二列的值，通过列数查询</span></div><div class=\"line\">   System.out.println(res_1.getInt(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\"---\"</span>+res_1.getString(<span class=\"string\">\"name\"</span>));   <span class=\"comment\">//通过列名查询</span></div><div class=\"line\">   </div><div class=\"line\">   &#125;</div><div class=\"line\">  </div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (SQLException e) &#123;    <span class=\"comment\">//捕捉异常</span></div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        connection.close();    <span class=\"comment\">//关闭连接</span></div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"keyword\">if</span>(stmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">   &#123;</div><div class=\"line\">       stmt.close();  <span class=\"comment\">//关闭</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：<code>ResultSet</code>常用的方法如下：注意下面的方法会发生<code>SQLException</code>异常</strong></p>\n<ul>\n<li><p><strong><code>public void beforeFirst()</code> 将光标移动到第一行之前。</strong></p>\n</li>\n<li><p><strong><code>public void afterLast()</code>  将光标移动到最后一行之后。</strong></p>\n</li>\n<li><p><strong><code>public boolean first()</code>  将光标移动到第一行。从第一行的数据开始读取</strong></p>\n</li>\n<li><p><strong><code>public void last()</code> 将光标移动到最后一行。</strong></p>\n</li>\n<li><p><strong><code>public boolean absolute(int row)</code> 将光标移动到指定的第<code>row</code>行。</strong></p>\n</li>\n<li><p><strong><code>public boolean previous()</code> 将光标移动到上一行，如果超过结果集的范围则返回<code>false</code>。</strong></p>\n</li>\n<li><p><strong><code>public boolean next()</code> 将光标移动到下一行，如果是结果集的最后一行则返回 false。</strong></p>\n</li>\n<li><p><strong><code>public int getRow()</code> 返回当前光标指向的行数的值。</strong></p>\n</li>\n<li><p><strong><code>public void moveToInsertRow()</code> 将光标移动到结果集中指定的行，可以在数据库中插入新的一行。当前光标位置将被记住</strong></p>\n</li>\n<li><p><strong><code>public void moveToCurrentRow()</code> 如果光标处于插入行，则将光标返回到当前行，其他情况下，这个方法不执行任何操作</strong></p>\n</li>\n<li><p><strong><code>public int getInt(String columnName)</code>返回当前行中名为 <code>columnName</code>的列的 <code>int</code> 值。</strong></p>\n</li>\n<li><p><strong><code>public int getInt(int columnIndex)</code> 返回当前行中指定列的索引的<code>int</code>值。列索引从 <code>1</code> 开始，意味着行中的第一列是<code>1</code> ，第二列是 <code>2</code> ，以此类推。</strong></p>\n</li>\n<li><p><strong><code>getString(int columIndex)</code> 返回指定列的<code>String</code>类型的数据</strong></p>\n</li>\n<li><p><strong><code>getString(String columName)</code> 返回当前行中名为<code>columName</code>的<code>String</code>类型的值</strong></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"动态查询\"><a href=\"#动态查询\" class=\"headerlink\" title=\"动态查询\"></a>动态查询</h3><blockquote>\n<p><strong>动态查询使用的<code>PrepareStatement</code>这个类实现的，<code>PreparedStatement</code> 接口扩展了 <code>Statement</code> 接口，它让你用一个常用的 <code>Statement</code> 对象增加几个高级功能。这个 <code>statement</code> 对象可以提供灵活多变的动态参数</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">PreparedStatement pstmt = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   String SQL = <span class=\"string\">\"select * from course where age=? and name=?\"</span>;</div><div class=\"line\">   pstmt = conn.prepareStatement(SQL);   <span class=\"comment\">//创建对象</span></div><div class=\"line\">   pstmt.setInt(<span class=\"number\">1</span>,<span class=\"number\">22</span>);   <span class=\"comment\">//设置参数age的值 ，1表示第一个参数</span></div><div class=\"line\">   pstmt.setString(<span class=\"number\">2</span>,<span class=\"string\">\"chenjiabing\"</span>);   <span class=\"comment\">//设置name的值，其中2表示第二个参数</span></div><div class=\"line\">   ResultSet res=pstmt.execteQuery();</div><div class=\"line\">   <span class=\"keyword\">while</span>(res.next)</div><div class=\"line\">   &#123;</div><div class=\"line\">       ....</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        connection.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(pstmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">    pstmt.close();   <span class=\"comment\">//关闭</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   . . .</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明:<code>JDBC</code> 中所有的参数都被用<code>?</code>符号表示，这是已知的参数标记。在执行<code>SQL</code> 语句之前，你必须赋予每一个参数确切的数值。其中<code>PrepareStatement</code>的常用函数如下，当然<code>Statement</code>中的<code>execute</code> ,<code>executeQuery</code>,<code>executeUpdate</code>也可以使用</strong></p>\n<ul>\n<li><strong><code>void setInt(int parameterIndex, int x)</code> <code>parameterIndex</code>表示第几个<code>?</code>,这里的<code>int x</code>表示是<code>mysql</code>中定义的<code>int</code>类型的值</strong></li>\n<li><strong><code>void setString(int parameterIndex,String x)</code>  为第<code>parameterIndex</code>个<code>String</code>类型的?赋予<code>x</code>的值</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"其他的操作\"><a href=\"#其他的操作\" class=\"headerlink\" title=\"其他的操作\"></a>其他的操作</h2><blockquote>\n<p><strong>这里还有<code>delete</code>,<code>update</code>,<code>alter</code>等一系列的操作都是和上面的一样，就是把<code>sql</code>语句改变以下，如果使用的是静态的就要为<code>delete</code>,<code>update</code>,使用<code>Statement.execteUpdate(sql)</code>这个函数,当然要使用动态的也是<code>executeUpdate</code>函数</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"JQuery干货篇之处理元素","date":"2017-04-22T13:45:23.000Z","_content":"# JQuery干货篇之处理元素\n>**注意这里用的还是我前两篇用的例子，详情请看[我的博客](https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/)**\n## attr\n>**`attr()` 方法设置或返回被选元素的属性值。**\n\n>**语法：**\n>>* `$(selector).attr(attribute)` 返回被选元素的属性值。\n>>* `$(selector).attr(attribute,value)` 设置被选元素的属性和值\n>>* `$(selector).attr(attribute,function(index,oldvalue))` 设置被选元素的属性和值。\n\n| 参数 |  描述   |\n|:-----:|:-----:|\n|  `attribute `    |    规定属性的名称。   |\n|   `function(index,oldvalue)`    |  规定返回属性值的数。该函数可接收并使用选择器的 index 值和当前属性值。     |\n\n>**实例：**\n```javascript\n    $(\"img\").filter(\":first\").attr('src');   //得到属性\n\n$(\"img\").each(function (index,elem) {    \n        if(index%2==0)\n            $(elem).attr(\"src\",'lily.png');      //设置属性\n        console.log($(elem).attr(\"src\"));\n        })\n        \n        \n        $(\"img\").attr('src',function (index,oldValue) {  //这里的oldValue表示原来属性的值，index是索引\n        if(oldValue==\"rose.png\")\n            return 'lily.png';\n        else\n            return 'astor.png';\n    })\n    \n    \n    attrs={       //使用映射对象一次设置多个值\n        src:'lily.png',\n        style: 'border: thick double red'\n    };\n    $(\"img:eq(1)\").attr(attrs);\n```\n\n\n## removeAttr\n>**`removeAttr()` 方法从被选元素中移除属性。**\n\n>**语法：**\n\n>* `$(selector).removeAttr(attribute)`  这里的attribute是属性的名字\n\n>**实例：**\n\n```javascript\n$(\"img:first\").removeAttr(\"src\");  //删除属性src\n```\n\n## addClass\n>**`addClass()` 方法向被选元素添加一个或多个类**\n\n>**语法：**\n\n>* `$(selector).addClass(class)` 这里的class是类名如果需要添加多个类，中间用**空格**隔开\n\n>* `$(selector).addClass(function(index,oldclass))`  这里的index是索引，oldClass是原来就有的类名，都是**可选参数**。这个函数的返回的就是要添加的类名\n\n>**实例：**\n\n```javascript\n$(\"img:even\").addClass(\"redBar\");  //向偶数的img添加类redBar\n\n$(\"img\").addClass(function (index,currentClass) {    //这里的currentClass就是原来有的类名，可选\n        if(index==1)\n            return 'blueBar';   //第二个img应用blueBar这个类\n        else\n            return 'redBar';      //这里需要注意的是，对同一个img应用类的时候，因为这个类的定义有优先级，上面定义会被后面定义的覆盖，所以要注意类定义的位置\n    })\n    \n    \n    $(\"img\").filter(\":odd\").addClass(\"redBar\").end().filter(\":even\").addClass(\"blueBar\");  //链式调用\n    \n    $(\"img\").addClass(\"blueBar redBar\");   //添加两个类\n    \n```\n\n## hasClass\n>**`hasClass()` 方法检查被选元素是否包含指定的`class`**\n\n>**语法：**\n\n>* `$(selector).hasClass(class)`  //返回值是false和true\n\n>**实例：**\n\n```javascript\nconsole.log($(\"img:odd\").hasClass(\"redBar\"));     \n\n```\n\n## toggleClass\n>**toggleClass() 对设置或移除被选元素的一个或多个类进行切换。该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果**\n\n>**语法：**\n\n>* `$(selector).toggleClass(class,switch)`  `class`必需的，用来规定添加或移除`class`的指定元素，如需规定若干 `class`，请使用空格来分隔类名。`switch`是`boolean`可选参数，规定是否添加或移除`class`\n\n>* `$(selector).toggleClass(function(index,class),switch)`   `index`表示索引，`class`表示选择器当前拥有的类\n\n>**实例：**\n\n```javascript\n$(\"img\").toggleClass(\"redBar\");   //这里对所有的img在redBar这个类之间切换\n\n$(\"img\").toggleClass(\"redBar blueBar\");  //在两个类之间来回的切换\n\n\n\n$(\"<button>ToggleClass</button>\").appendTo(\"#buttonDiv\").click(function (e) {\n        $(\"img\").toggleClass('redBar blueBar');   //在两种class之间切换，如果有就删除，没有的就添加\n        e.preventDefault();    \n        })\n        \n        \n        //下面添加一个按钮，完成同时添加多个图片的效果\n    $(\"<button>ToggleClass</button>\").appendTo(\"#buttonDiv\").click(function (e) {\n        $(\"img\").toggleClass(function (index,currentClass) {\n            if(index%2==0)\n                return 'blueBar';   //动态的切换，这里是偶数就切换blue\n            else\n                return 'redBar blueBar';  //这里是奇数的图片在两种颜色来回的切换\n\n        });\n        e.preventDefault();\n\n    })\n```\n\n\n## css\n>**`css()` 方法返回或设置匹配的元素的一个或多个样式属性，这里只说`css`，还有其他的设置`css`样式请看[w3School](http://www.w3school.com.cn/jquery/jquery_ref_css.asp)**\n\n>**语法：**\n\n>* `$(selector).css(name)`  返回第一个匹配元素的 `CSS `属性值。`name`是`css`属性的名称\n\n>* `$(selector).css(name,value)` 设置所有匹配元素的指定 `CSS` 属性。`name`表示属性名称，`value`表示属性的值\n \n>* `$(selector).css(name,function(index,value))`   此函数返回要设置的属性值。接受两个参数，`index `为元素在对象集合中的索引位置，`value` 是原先的属性值。`name`表示要设置的属性名称，返回值就是要设置的属性值\n\n>**实例：**\n\n```javascript\n$(\"label\").css('font-size','30px');  //设置字体大小\n\n$(\"label\").css('font-size','+=10');  //使用相对值设置属性值，在原有的基础上加上10\n\nconsole.log($(\"h1\").css('font-family'));   //获取h1标签的字体\n\nvar cssValues={\n    'border':'thick double red',\n    'font-size':'1.5em'\n};\n$(\"label\").css(cssValues);   //同时设置多个属性\n\n```\n\n## text\n>**`text()` 方法方法设置或返回被选元素的文本内容。当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容(会删除 `HTML` 标记)**\n\n>**语法：**\n\n>* `$(selector).text()`   当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容（会删除 `HTML` 标记）。\n>* `$(selector).text(content)`  当该方法用于设置值时，它会覆盖被选元素的所有内容。\n>* `$(selector).text(function(index,oldcontent))`  `index`表示索引,`oldcontent`表示选择器当前的文本内容\n\n\n## html\n>**`html()` 方法返回或设置被选元素的内容 `(inner HTML)`。如果该方法未设置参数，则返回被选元素的当前内容。**\n\n>**语法：**\n\n>* `$(selector).html()`    当使用该方法返回一个值时，它会返回**第一个**匹配元素的内容。\n\n>* `$(selector).html(content)`   当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。\n\n>* `$(selector).html(function(index,oldcontent)) `  使用函数来设置所有匹配元素的内容。`index` - 可选。接收选择器的`index` 位置,`oldcontent` - 可选。接收选择器的当前内容\n\n\n## val\n>**`val()` 方法返回或设置被选元素的值,元素的值是通过 `value` 属性设置的。该方法大多用于 `input` 元素,如果该方法未设置参数，则返回被选元素的当前值**\n\n>**语法：**\n\n>* `$(selector).val(value)`    设置文本域的值为value\n>* `$(selector).val()`       得到文本域的值\n>* `$(selector).val(function(index,oldvalue))`  设置文本域的值，这里函数的返回值将会用来设置文本域的值，`index`表示元素索引，`oldvalue`表示选择器当前文本域的值\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/JQuery干货篇之处理元素.md","raw":"---\ntitle: JQuery干货篇之处理元素\ndate: 2017-04-22 21:45:23\ncategories: JQuery学习\ntags: JQuery\n---\n# JQuery干货篇之处理元素\n>**注意这里用的还是我前两篇用的例子，详情请看[我的博客](https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/)**\n## attr\n>**`attr()` 方法设置或返回被选元素的属性值。**\n\n>**语法：**\n>>* `$(selector).attr(attribute)` 返回被选元素的属性值。\n>>* `$(selector).attr(attribute,value)` 设置被选元素的属性和值\n>>* `$(selector).attr(attribute,function(index,oldvalue))` 设置被选元素的属性和值。\n\n| 参数 |  描述   |\n|:-----:|:-----:|\n|  `attribute `    |    规定属性的名称。   |\n|   `function(index,oldvalue)`    |  规定返回属性值的数。该函数可接收并使用选择器的 index 值和当前属性值。     |\n\n>**实例：**\n```javascript\n    $(\"img\").filter(\":first\").attr('src');   //得到属性\n\n$(\"img\").each(function (index,elem) {    \n        if(index%2==0)\n            $(elem).attr(\"src\",'lily.png');      //设置属性\n        console.log($(elem).attr(\"src\"));\n        })\n        \n        \n        $(\"img\").attr('src',function (index,oldValue) {  //这里的oldValue表示原来属性的值，index是索引\n        if(oldValue==\"rose.png\")\n            return 'lily.png';\n        else\n            return 'astor.png';\n    })\n    \n    \n    attrs={       //使用映射对象一次设置多个值\n        src:'lily.png',\n        style: 'border: thick double red'\n    };\n    $(\"img:eq(1)\").attr(attrs);\n```\n\n\n## removeAttr\n>**`removeAttr()` 方法从被选元素中移除属性。**\n\n>**语法：**\n\n>* `$(selector).removeAttr(attribute)`  这里的attribute是属性的名字\n\n>**实例：**\n\n```javascript\n$(\"img:first\").removeAttr(\"src\");  //删除属性src\n```\n\n## addClass\n>**`addClass()` 方法向被选元素添加一个或多个类**\n\n>**语法：**\n\n>* `$(selector).addClass(class)` 这里的class是类名如果需要添加多个类，中间用**空格**隔开\n\n>* `$(selector).addClass(function(index,oldclass))`  这里的index是索引，oldClass是原来就有的类名，都是**可选参数**。这个函数的返回的就是要添加的类名\n\n>**实例：**\n\n```javascript\n$(\"img:even\").addClass(\"redBar\");  //向偶数的img添加类redBar\n\n$(\"img\").addClass(function (index,currentClass) {    //这里的currentClass就是原来有的类名，可选\n        if(index==1)\n            return 'blueBar';   //第二个img应用blueBar这个类\n        else\n            return 'redBar';      //这里需要注意的是，对同一个img应用类的时候，因为这个类的定义有优先级，上面定义会被后面定义的覆盖，所以要注意类定义的位置\n    })\n    \n    \n    $(\"img\").filter(\":odd\").addClass(\"redBar\").end().filter(\":even\").addClass(\"blueBar\");  //链式调用\n    \n    $(\"img\").addClass(\"blueBar redBar\");   //添加两个类\n    \n```\n\n## hasClass\n>**`hasClass()` 方法检查被选元素是否包含指定的`class`**\n\n>**语法：**\n\n>* `$(selector).hasClass(class)`  //返回值是false和true\n\n>**实例：**\n\n```javascript\nconsole.log($(\"img:odd\").hasClass(\"redBar\"));     \n\n```\n\n## toggleClass\n>**toggleClass() 对设置或移除被选元素的一个或多个类进行切换。该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果**\n\n>**语法：**\n\n>* `$(selector).toggleClass(class,switch)`  `class`必需的，用来规定添加或移除`class`的指定元素，如需规定若干 `class`，请使用空格来分隔类名。`switch`是`boolean`可选参数，规定是否添加或移除`class`\n\n>* `$(selector).toggleClass(function(index,class),switch)`   `index`表示索引，`class`表示选择器当前拥有的类\n\n>**实例：**\n\n```javascript\n$(\"img\").toggleClass(\"redBar\");   //这里对所有的img在redBar这个类之间切换\n\n$(\"img\").toggleClass(\"redBar blueBar\");  //在两个类之间来回的切换\n\n\n\n$(\"<button>ToggleClass</button>\").appendTo(\"#buttonDiv\").click(function (e) {\n        $(\"img\").toggleClass('redBar blueBar');   //在两种class之间切换，如果有就删除，没有的就添加\n        e.preventDefault();    \n        })\n        \n        \n        //下面添加一个按钮，完成同时添加多个图片的效果\n    $(\"<button>ToggleClass</button>\").appendTo(\"#buttonDiv\").click(function (e) {\n        $(\"img\").toggleClass(function (index,currentClass) {\n            if(index%2==0)\n                return 'blueBar';   //动态的切换，这里是偶数就切换blue\n            else\n                return 'redBar blueBar';  //这里是奇数的图片在两种颜色来回的切换\n\n        });\n        e.preventDefault();\n\n    })\n```\n\n\n## css\n>**`css()` 方法返回或设置匹配的元素的一个或多个样式属性，这里只说`css`，还有其他的设置`css`样式请看[w3School](http://www.w3school.com.cn/jquery/jquery_ref_css.asp)**\n\n>**语法：**\n\n>* `$(selector).css(name)`  返回第一个匹配元素的 `CSS `属性值。`name`是`css`属性的名称\n\n>* `$(selector).css(name,value)` 设置所有匹配元素的指定 `CSS` 属性。`name`表示属性名称，`value`表示属性的值\n \n>* `$(selector).css(name,function(index,value))`   此函数返回要设置的属性值。接受两个参数，`index `为元素在对象集合中的索引位置，`value` 是原先的属性值。`name`表示要设置的属性名称，返回值就是要设置的属性值\n\n>**实例：**\n\n```javascript\n$(\"label\").css('font-size','30px');  //设置字体大小\n\n$(\"label\").css('font-size','+=10');  //使用相对值设置属性值，在原有的基础上加上10\n\nconsole.log($(\"h1\").css('font-family'));   //获取h1标签的字体\n\nvar cssValues={\n    'border':'thick double red',\n    'font-size':'1.5em'\n};\n$(\"label\").css(cssValues);   //同时设置多个属性\n\n```\n\n## text\n>**`text()` 方法方法设置或返回被选元素的文本内容。当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容(会删除 `HTML` 标记)**\n\n>**语法：**\n\n>* `$(selector).text()`   当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容（会删除 `HTML` 标记）。\n>* `$(selector).text(content)`  当该方法用于设置值时，它会覆盖被选元素的所有内容。\n>* `$(selector).text(function(index,oldcontent))`  `index`表示索引,`oldcontent`表示选择器当前的文本内容\n\n\n## html\n>**`html()` 方法返回或设置被选元素的内容 `(inner HTML)`。如果该方法未设置参数，则返回被选元素的当前内容。**\n\n>**语法：**\n\n>* `$(selector).html()`    当使用该方法返回一个值时，它会返回**第一个**匹配元素的内容。\n\n>* `$(selector).html(content)`   当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。\n\n>* `$(selector).html(function(index,oldcontent)) `  使用函数来设置所有匹配元素的内容。`index` - 可选。接收选择器的`index` 位置,`oldcontent` - 可选。接收选择器的当前内容\n\n\n## val\n>**`val()` 方法返回或设置被选元素的值,元素的值是通过 `value` 属性设置的。该方法大多用于 `input` 元素,如果该方法未设置参数，则返回被选元素的当前值**\n\n>**语法：**\n\n>* `$(selector).val(value)`    设置文本域的值为value\n>* `$(selector).val()`       得到文本域的值\n>* `$(selector).val(function(index,oldvalue))`  设置文本域的值，这里函数的返回值将会用来设置文本域的值，`index`表示元素索引，`oldvalue`表示选择器当前文本域的值\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"JQuery干货篇之处理元素","published":1,"updated":"2017-04-22T13:47:46.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwavi0003l0uzu77j8pqe","content":"<h1 id=\"JQuery干货篇之处理元素\"><a href=\"#JQuery干货篇之处理元素\" class=\"headerlink\" title=\"JQuery干货篇之处理元素\"></a>JQuery干货篇之处理元素</h1><blockquote>\n<p><strong>注意这里用的还是我前两篇用的例子，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/\">我的博客</a></strong></p>\n<h2 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\"attr\"></a>attr</h2><p><strong><code>attr()</code> 方法设置或返回被选元素的属性值。</strong></p>\n<p><strong>语法：</strong></p>\n<blockquote>\n<ul>\n<li><code>$(selector).attr(attribute)</code> 返回被选元素的属性值。</li>\n<li><code>$(selector).attr(attribute,value)</code> 设置被选元素的属性和值</li>\n<li><code>$(selector).attr(attribute,function(index,oldvalue))</code> 设置被选元素的属性和值。</li>\n</ul>\n</blockquote>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>attribute</code></td>\n<td style=\"text-align:center\">规定属性的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>function(index,oldvalue)</code></td>\n<td style=\"text-align:center\">规定返回属性值的数。该函数可接收并使用选择器的 index 值和当前属性值。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":first\"</span>).attr(<span class=\"string\">'src'</span>);   <span class=\"comment\">//得到属性</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">            $(elem).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">'lily.png'</span>);      <span class=\"comment\">//设置属性</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log($(elem).attr(<span class=\"string\">\"src\"</span>));</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).attr(<span class=\"string\">'src'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,oldValue</span>) </span>&#123;  <span class=\"comment\">//这里的oldValue表示原来属性的值，index是索引</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(oldValue==<span class=\"string\">\"rose.png\"</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'lily.png'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'astor.png'</span>;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    attrs=&#123;       <span class=\"comment\">//使用映射对象一次设置多个值</span></div><div class=\"line\">        src:<span class=\"string\">'lily.png'</span>,</div><div class=\"line\">        <span class=\"attr\">style</span>: <span class=\"string\">'border: thick double red'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    $(<span class=\"string\">\"img:eq(1)\"</span>).attr(attrs);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"removeAttr\"><a href=\"#removeAttr\" class=\"headerlink\" title=\"removeAttr\"></a>removeAttr</h2><blockquote>\n<p><strong><code>removeAttr()</code> 方法从被选元素中移除属性。</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).removeAttr(attribute)</code>  这里的attribute是属性的名字</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:first\"</span>).removeAttr(<span class=\"string\">\"src\"</span>);  <span class=\"comment\">//删除属性src</span></div></pre></td></tr></table></figure>\n<h2 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\"addClass\"></a>addClass</h2><blockquote>\n<p><strong><code>addClass()</code> 方法向被选元素添加一个或多个类</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).addClass(class)</code> 这里的class是类名如果需要添加多个类，中间用<strong>空格</strong>隔开</p>\n</li>\n<li><p><code>$(selector).addClass(function(index,oldclass))</code>  这里的index是索引，oldClass是原来就有的类名，都是<strong>可选参数</strong>。这个函数的返回的就是要添加的类名</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:even\"</span>).addClass(<span class=\"string\">\"redBar\"</span>);  <span class=\"comment\">//向偶数的img添加类redBar</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).addClass(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,currentClass</span>) </span>&#123;    <span class=\"comment\">//这里的currentClass就是原来有的类名，可选</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(index==<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'blueBar'</span>;   <span class=\"comment\">//第二个img应用blueBar这个类</span></div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'redBar'</span>;      <span class=\"comment\">//这里需要注意的是，对同一个img应用类的时候，因为这个类的定义有优先级，上面定义会被后面定义的覆盖，所以要注意类定义的位置</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":odd\"</span>).addClass(<span class=\"string\">\"redBar\"</span>).end().filter(<span class=\"string\">\":even\"</span>).addClass(<span class=\"string\">\"blueBar\"</span>);  <span class=\"comment\">//链式调用</span></div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).addClass(<span class=\"string\">\"blueBar redBar\"</span>);   <span class=\"comment\">//添加两个类</span></div></pre></td></tr></table></figure>\n<h2 id=\"hasClass\"><a href=\"#hasClass\" class=\"headerlink\" title=\"hasClass\"></a>hasClass</h2><blockquote>\n<p><strong><code>hasClass()</code> 方法检查被选元素是否包含指定的<code>class</code></strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).hasClass(class)</code>  //返回值是false和true</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"img:odd\"</span>).hasClass(<span class=\"string\">\"redBar\"</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\"toggleClass\"></a>toggleClass</h2><blockquote>\n<p><strong>toggleClass() 对设置或移除被选元素的一个或多个类进行切换。该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).toggleClass(class,switch)</code>  <code>class</code>必需的，用来规定添加或移除<code>class</code>的指定元素，如需规定若干 <code>class</code>，请使用空格来分隔类名。<code>switch</code>是<code>boolean</code>可选参数，规定是否添加或移除<code>class</code></p>\n</li>\n<li><p><code>$(selector).toggleClass(function(index,class),switch)</code>   <code>index</code>表示索引，<code>class</code>表示选择器当前拥有的类</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">\"redBar\"</span>);   <span class=\"comment\">//这里对所有的img在redBar这个类之间切换</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">\"redBar blueBar\"</span>);  <span class=\"comment\">//在两个类之间来回的切换</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"&lt;button&gt;ToggleClass&lt;/button&gt;\"</span>).appendTo(<span class=\"string\">\"#buttonDiv\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">'redBar blueBar'</span>);   <span class=\"comment\">//在两种class之间切换，如果有就删除，没有的就添加</span></div><div class=\"line\">        e.preventDefault();    </div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//下面添加一个按钮，完成同时添加多个图片的效果</span></div><div class=\"line\">    $(<span class=\"string\">\"&lt;button&gt;ToggleClass&lt;/button&gt;\"</span>).appendTo(<span class=\"string\">\"#buttonDiv\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,currentClass</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'blueBar'</span>;   <span class=\"comment\">//动态的切换，这里是偶数就切换blue</span></div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'redBar blueBar'</span>;  <span class=\"comment\">//这里是奇数的图片在两种颜色来回的切换</span></div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\">        e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><blockquote>\n<p><strong><code>css()</code> 方法返回或设置匹配的元素的一个或多个样式属性，这里只说<code>css</code>，还有其他的设置<code>css</code>样式请看<a href=\"http://www.w3school.com.cn/jquery/jquery_ref_css.asp\" target=\"_blank\" rel=\"external\">w3School</a></strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).css(name)</code>  返回第一个匹配元素的 <code>CSS</code>属性值。<code>name</code>是<code>css</code>属性的名称</p>\n</li>\n<li><p><code>$(selector).css(name,value)</code> 设置所有匹配元素的指定 <code>CSS</code> 属性。<code>name</code>表示属性名称，<code>value</code>表示属性的值</p>\n</li>\n<li><p><code>$(selector).css(name,function(index,value))</code>   此函数返回要设置的属性值。接受两个参数，<code>index</code>为元素在对象集合中的索引位置，<code>value</code> 是原先的属性值。<code>name</code>表示要设置的属性名称，返回值就是要设置的属性值</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(<span class=\"string\">'font-size'</span>,<span class=\"string\">'30px'</span>);  <span class=\"comment\">//设置字体大小</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(<span class=\"string\">'font-size'</span>,<span class=\"string\">'+=10'</span>);  <span class=\"comment\">//使用相对值设置属性值，在原有的基础上加上10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"h1\"</span>).css(<span class=\"string\">'font-family'</span>));   <span class=\"comment\">//获取h1标签的字体</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cssValues=&#123;</div><div class=\"line\">    <span class=\"string\">'border'</span>:<span class=\"string\">'thick double red'</span>,</div><div class=\"line\">    <span class=\"string\">'font-size'</span>:<span class=\"string\">'1.5em'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(cssValues);   <span class=\"comment\">//同时设置多个属性</span></div></pre></td></tr></table></figure>\n<h2 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text\"></a>text</h2><blockquote>\n<p><strong><code>text()</code> 方法方法设置或返回被选元素的文本内容。当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容(会删除 <code>HTML</code> 标记)</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).text()</code>   当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容（会删除 <code>HTML</code> 标记）。</li>\n<li><code>$(selector).text(content)</code>  当该方法用于设置值时，它会覆盖被选元素的所有内容。</li>\n<li><code>$(selector).text(function(index,oldcontent))</code>  <code>index</code>表示索引,<code>oldcontent</code>表示选择器当前的文本内容</li>\n</ul>\n</blockquote>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><blockquote>\n<p><strong><code>html()</code> 方法返回或设置被选元素的内容 <code>(inner HTML)</code>。如果该方法未设置参数，则返回被选元素的当前内容。</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).html()</code>    当使用该方法返回一个值时，它会返回<strong>第一个</strong>匹配元素的内容。</p>\n</li>\n<li><p><code>$(selector).html(content)</code>   当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。</p>\n</li>\n<li><p><code>$(selector).html(function(index,oldcontent))</code>  使用函数来设置所有匹配元素的内容。<code>index</code> - 可选。接收选择器的<code>index</code> 位置,<code>oldcontent</code> - 可选。接收选择器的当前内容</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\"val\"></a>val</h2><blockquote>\n<p><strong><code>val()</code> 方法返回或设置被选元素的值,元素的值是通过 <code>value</code> 属性设置的。该方法大多用于 <code>input</code> 元素,如果该方法未设置参数，则返回被选元素的当前值</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).val(value)</code>    设置文本域的值为value</li>\n<li><code>$(selector).val()</code>       得到文本域的值</li>\n<li><code>$(selector).val(function(index,oldvalue))</code>  设置文本域的值，这里函数的返回值将会用来设置文本域的值，<code>index</code>表示元素索引，<code>oldvalue</code>表示选择器当前文本域的值</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"JQuery干货篇之处理元素\"><a href=\"#JQuery干货篇之处理元素\" class=\"headerlink\" title=\"JQuery干货篇之处理元素\"></a>JQuery干货篇之处理元素</h1><blockquote>\n<p><strong>注意这里用的还是我前两篇用的例子，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/\">我的博客</a></strong></p>\n<h2 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\"attr\"></a>attr</h2><p><strong><code>attr()</code> 方法设置或返回被选元素的属性值。</strong></p>\n<p><strong>语法：</strong></p>\n<blockquote>\n<ul>\n<li><code>$(selector).attr(attribute)</code> 返回被选元素的属性值。</li>\n<li><code>$(selector).attr(attribute,value)</code> 设置被选元素的属性和值</li>\n<li><code>$(selector).attr(attribute,function(index,oldvalue))</code> 设置被选元素的属性和值。</li>\n</ul>\n</blockquote>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>attribute</code></td>\n<td style=\"text-align:center\">规定属性的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>function(index,oldvalue)</code></td>\n<td style=\"text-align:center\">规定返回属性值的数。该函数可接收并使用选择器的 index 值和当前属性值。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":first\"</span>).attr(<span class=\"string\">'src'</span>);   <span class=\"comment\">//得到属性</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">            $(elem).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">'lily.png'</span>);      <span class=\"comment\">//设置属性</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log($(elem).attr(<span class=\"string\">\"src\"</span>));</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).attr(<span class=\"string\">'src'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,oldValue</span>) </span>&#123;  <span class=\"comment\">//这里的oldValue表示原来属性的值，index是索引</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(oldValue==<span class=\"string\">\"rose.png\"</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'lily.png'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'astor.png'</span>;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    attrs=&#123;       <span class=\"comment\">//使用映射对象一次设置多个值</span></div><div class=\"line\">        src:<span class=\"string\">'lily.png'</span>,</div><div class=\"line\">        <span class=\"attr\">style</span>: <span class=\"string\">'border: thick double red'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    $(<span class=\"string\">\"img:eq(1)\"</span>).attr(attrs);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"removeAttr\"><a href=\"#removeAttr\" class=\"headerlink\" title=\"removeAttr\"></a>removeAttr</h2><blockquote>\n<p><strong><code>removeAttr()</code> 方法从被选元素中移除属性。</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).removeAttr(attribute)</code>  这里的attribute是属性的名字</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:first\"</span>).removeAttr(<span class=\"string\">\"src\"</span>);  <span class=\"comment\">//删除属性src</span></div></pre></td></tr></table></figure>\n<h2 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\"addClass\"></a>addClass</h2><blockquote>\n<p><strong><code>addClass()</code> 方法向被选元素添加一个或多个类</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).addClass(class)</code> 这里的class是类名如果需要添加多个类，中间用<strong>空格</strong>隔开</p>\n</li>\n<li><p><code>$(selector).addClass(function(index,oldclass))</code>  这里的index是索引，oldClass是原来就有的类名，都是<strong>可选参数</strong>。这个函数的返回的就是要添加的类名</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:even\"</span>).addClass(<span class=\"string\">\"redBar\"</span>);  <span class=\"comment\">//向偶数的img添加类redBar</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).addClass(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,currentClass</span>) </span>&#123;    <span class=\"comment\">//这里的currentClass就是原来有的类名，可选</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(index==<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'blueBar'</span>;   <span class=\"comment\">//第二个img应用blueBar这个类</span></div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'redBar'</span>;      <span class=\"comment\">//这里需要注意的是，对同一个img应用类的时候，因为这个类的定义有优先级，上面定义会被后面定义的覆盖，所以要注意类定义的位置</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":odd\"</span>).addClass(<span class=\"string\">\"redBar\"</span>).end().filter(<span class=\"string\">\":even\"</span>).addClass(<span class=\"string\">\"blueBar\"</span>);  <span class=\"comment\">//链式调用</span></div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).addClass(<span class=\"string\">\"blueBar redBar\"</span>);   <span class=\"comment\">//添加两个类</span></div></pre></td></tr></table></figure>\n<h2 id=\"hasClass\"><a href=\"#hasClass\" class=\"headerlink\" title=\"hasClass\"></a>hasClass</h2><blockquote>\n<p><strong><code>hasClass()</code> 方法检查被选元素是否包含指定的<code>class</code></strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).hasClass(class)</code>  //返回值是false和true</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"img:odd\"</span>).hasClass(<span class=\"string\">\"redBar\"</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\"toggleClass\"></a>toggleClass</h2><blockquote>\n<p><strong>toggleClass() 对设置或移除被选元素的一个或多个类进行切换。该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).toggleClass(class,switch)</code>  <code>class</code>必需的，用来规定添加或移除<code>class</code>的指定元素，如需规定若干 <code>class</code>，请使用空格来分隔类名。<code>switch</code>是<code>boolean</code>可选参数，规定是否添加或移除<code>class</code></p>\n</li>\n<li><p><code>$(selector).toggleClass(function(index,class),switch)</code>   <code>index</code>表示索引，<code>class</code>表示选择器当前拥有的类</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">\"redBar\"</span>);   <span class=\"comment\">//这里对所有的img在redBar这个类之间切换</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">\"redBar blueBar\"</span>);  <span class=\"comment\">//在两个类之间来回的切换</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"&lt;button&gt;ToggleClass&lt;/button&gt;\"</span>).appendTo(<span class=\"string\">\"#buttonDiv\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"string\">'redBar blueBar'</span>);   <span class=\"comment\">//在两种class之间切换，如果有就删除，没有的就添加</span></div><div class=\"line\">        e.preventDefault();    </div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//下面添加一个按钮，完成同时添加多个图片的效果</span></div><div class=\"line\">    $(<span class=\"string\">\"&lt;button&gt;ToggleClass&lt;/button&gt;\"</span>).appendTo(<span class=\"string\">\"#buttonDiv\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\"img\"</span>).toggleClass(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,currentClass</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'blueBar'</span>;   <span class=\"comment\">//动态的切换，这里是偶数就切换blue</span></div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'redBar blueBar'</span>;  <span class=\"comment\">//这里是奇数的图片在两种颜色来回的切换</span></div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\">        e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><blockquote>\n<p><strong><code>css()</code> 方法返回或设置匹配的元素的一个或多个样式属性，这里只说<code>css</code>，还有其他的设置<code>css</code>样式请看<a href=\"http://www.w3school.com.cn/jquery/jquery_ref_css.asp\">w3School</a></strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).css(name)</code>  返回第一个匹配元素的 <code>CSS</code>属性值。<code>name</code>是<code>css</code>属性的名称</p>\n</li>\n<li><p><code>$(selector).css(name,value)</code> 设置所有匹配元素的指定 <code>CSS</code> 属性。<code>name</code>表示属性名称，<code>value</code>表示属性的值</p>\n</li>\n<li><p><code>$(selector).css(name,function(index,value))</code>   此函数返回要设置的属性值。接受两个参数，<code>index</code>为元素在对象集合中的索引位置，<code>value</code> 是原先的属性值。<code>name</code>表示要设置的属性名称，返回值就是要设置的属性值</p>\n</li>\n</ul>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(<span class=\"string\">'font-size'</span>,<span class=\"string\">'30px'</span>);  <span class=\"comment\">//设置字体大小</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(<span class=\"string\">'font-size'</span>,<span class=\"string\">'+=10'</span>);  <span class=\"comment\">//使用相对值设置属性值，在原有的基础上加上10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"h1\"</span>).css(<span class=\"string\">'font-family'</span>));   <span class=\"comment\">//获取h1标签的字体</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cssValues=&#123;</div><div class=\"line\">    <span class=\"string\">'border'</span>:<span class=\"string\">'thick double red'</span>,</div><div class=\"line\">    <span class=\"string\">'font-size'</span>:<span class=\"string\">'1.5em'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).css(cssValues);   <span class=\"comment\">//同时设置多个属性</span></div></pre></td></tr></table></figure>\n<h2 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text\"></a>text</h2><blockquote>\n<p><strong><code>text()</code> 方法方法设置或返回被选元素的文本内容。当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容(会删除 <code>HTML</code> 标记)</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).text()</code>   当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容（会删除 <code>HTML</code> 标记）。</li>\n<li><code>$(selector).text(content)</code>  当该方法用于设置值时，它会覆盖被选元素的所有内容。</li>\n<li><code>$(selector).text(function(index,oldcontent))</code>  <code>index</code>表示索引,<code>oldcontent</code>表示选择器当前的文本内容</li>\n</ul>\n</blockquote>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><blockquote>\n<p><strong><code>html()</code> 方法返回或设置被选元素的内容 <code>(inner HTML)</code>。如果该方法未设置参数，则返回被选元素的当前内容。</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><p><code>$(selector).html()</code>    当使用该方法返回一个值时，它会返回<strong>第一个</strong>匹配元素的内容。</p>\n</li>\n<li><p><code>$(selector).html(content)</code>   当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。</p>\n</li>\n<li><p><code>$(selector).html(function(index,oldcontent))</code>  使用函数来设置所有匹配元素的内容。<code>index</code> - 可选。接收选择器的<code>index</code> 位置,<code>oldcontent</code> - 可选。接收选择器的当前内容</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\"val\"></a>val</h2><blockquote>\n<p><strong><code>val()</code> 方法返回或设置被选元素的值,元素的值是通过 <code>value</code> 属性设置的。该方法大多用于 <code>input</code> 元素,如果该方法未设置参数，则返回被选元素的当前值</strong></p>\n<p><strong>语法：</strong></p>\n<ul>\n<li><code>$(selector).val(value)</code>    设置文本域的值为value</li>\n<li><code>$(selector).val()</code>       得到文本域的值</li>\n<li><code>$(selector).val(function(index,oldvalue))</code>  设置文本域的值，这里函数的返回值将会用来设置文本域的值，<code>index</code>表示元素索引，<code>oldvalue</code>表示选择器当前文本域的值</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"BootStrap干货篇之表单","date":"2017-04-26T15:11:37.000Z","_content":"# BootStrap干货篇之表单\n\n## 基本介绍\n>**单独的表单控件会被自动赋予一些全局样式。所有设置了 `.form-control` 类的 `<input>`、`<textarea>` 和 `<select>` 元素都将被默认设置宽度属性为 `width: 100%`;。 将 `label `元素和前面提到的控件包裹在 `.form-group` 中可以获得最好的排列。**\n\n>**基本实例：**\n\n```htmlmixed\n    <div class='container'>\n    <form>\n  <div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">Email address</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"exampleInputPassword1\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"exampleInputFile\">File input</label>\n    <input type=\"file\" id=\"exampleInputFile\">\n    <p class=\"help-block\">Example block-level help text here.</p>\n  </div>\n  <div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> Check me out\n    </label>\n  </div>\n  <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n</form>\n    </div>\n```\n>**说明：这里的`form-control`是对所有的输入控件而言的,源码中将width设置为`100%`，表示会将这个输入控件占满一整行，`form-group`是用来对`label`和`input`更好的排版的，其中还有`form-group-sm`,`form-group-lg`，源码中分别利用这个对带有`form-control`的控件设置了不同的高度，具体看源码，不过正常情况下还是使用`form-group`**\n\n\n## 内联表单\n>**为 `<form>` 元素添加 `.form-inline` 类可使其内容左对齐并且表现为` inline-block `级别的控件。只适用于视口（`viewport`）至少在 `768px` 宽度时（视口宽度再小的话就会使表单折叠）从源码中可以看到对`form-inline`下的`form-group`,`form-control`,`form-control-static`,`input-group`,`radio`,`checkbox`都是用了`display:inline-block`**\n\n>**注意：**\n\n>* 在 `Bootstrap` 中，输入框和单选/多选框控件默认被设置为 `width`: `100%`; 宽度。在内联表单，我们将这些元素的宽度设置为` width: auto`;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。\n>* **一定要有`label`标签，如果不想要`label`标签可以设置`.sr-only`将其隐藏**如果你没有为每个输入控件设置 `label` 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 `aria-label`、`aria-labelledby `或 `title` 属性。如果这些都不存在，屏幕阅读器可能会采取使用 `placeholder` 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。\n\n\n>**实例:**\n\n```htmlmixed\n<form class=\"form-inline\">    <!--指定了form-inline类-->\n  <div class=\"form-group\">\n  <!--label中的for标签是用于绑定组件的，如果指定了for标签，input中的id也和for标签的内容相同，那么就会当鼠标点击<label>内容时会自动聚焦在input上-->\n    <label class=\"sr-only\" for=\"exampleInputEmail3\">Email address</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail3\" placeholder=\"Email\">\n  </div>\n  <div class=\"form-group\">\n    <label class=\"sr-only\" for=\"exampleInputPassword3\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword3\" placeholder=\"Password\">\n  </div>\n  <div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> Remember me\n    </label>\n  </div>\n  <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n```\n\n## 水平表单\n\n>**水平表单通过指定为form指定`form-horizontal`类来设定，其中可以使用`BootStrap`的栅栏系统设置水平间距，其中的`form-group`的`div`就表示一行了，相当于`<div class='row'></div>`,因此只需要在`label`和`input`中指定列就行了，但是`input`标签不能直接使用，要在外面加上`div`**\n\n>**实例：**\n\n```htmlmixed\n<form class=\"form-horizontal\">\n  <div class=\"form-group\">   \n    <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">Email</label>\n    <div class=\"col-sm-10\">\n      <input type=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Email\">\n    </div>\n  </div>\n  <div class=\"form-group\">   <!--相当与<div class='row'></div>-->\n    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">Password</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\">\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n      <div class=\"checkbox\">\n        <label>\n          <input type=\"checkbox\"> Remember me\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n      <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n    </div>\n  </div>\n</form>\n```\n>**说明上面的`label`标签中的`control-label`主要的作用是设置文字的对齐方式为左对齐，如果不加这个将会在右边出现很大的空白**\n\n\n## 多选和单选框\n>**多选框`（checkbox）`用于选择列表中的一个或多个选项，而单选框（`radio`）用于从多个选项中只选择一个。其中提供的类有`checkbox`,`checkbox-inline`,`radio`,`radio-inline`**\n\n#### 内联单选和多选框\n>**通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（`checkbox`）或单选框（`radio`）控件上，可以使这些控件排列在一行。**\n\n>**实例：**\n\n```htmlmixed\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\"> 1\n</label>\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox2\" value=\"option2\"> 2\n</label>\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox3\" value=\"option3\"> 3\n</label>\n\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"> 1\n</label>\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"> 2\n</label>\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio3\" value=\"option3\"> 3\n</label>\n\n\n\n<div class=\"checkbox-inline\">\n            <label for=\"sex\"><input type=\"checkbox\">男</label>\n    </div>\n    <div class=\"checkbox-inline\">\n        <label for=\"sex\"><input type=\"checkbox\">男</label>\n    </div> \n```\n\n#### 不带label文本的Checkbox 和 radio\n>**如果需要 `<label>` 内没有文字，输入框（`input`）正是你所期望的。 目前只适用于**非内联**的 `checkbox `和 `radio`。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 `label`（例如，使用 `aria-label`）。**\n\n>**实例：**\n\n```htmlmixed\n<div class=\"checkbox\">\n  <label>\n    <input type=\"checkbox\" id=\"blankCheckbox\" value=\"option1\" aria-label=\"...\">\n  </label>\n</div>\n<div class=\"radio\">\n  <label>\n    <input type=\"radio\" name=\"blankRadio\" id=\"blankRadio1\" value=\"option1\" aria-label=\"...\">\n  </label>\n</div>\n```\n\n#### 下拉列表（select）\n>**实例：**\n\n```htmlmixed\n<select class=\"form-control\">\n  <option>1</option>\n  <option>2</option>\n  <option>3</option>\n  <option>4</option>\n  <option>5</option>\n</select>\n```\n\n## 静态控件\n>**如果需要在表单中将一行纯文本和 `label` 元素放置于同一行，为`<p>`标签设置为`form-control-static`**\n\n>**实例：**\n\n```htmlmixed\n<form class=\"form-horizontal\">\n  <div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\">Email</label>\n    <div class=\"col-sm-10\">\n      <p class=\"form-control-static\">email@example.com</p>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"inputPassword\" class=\"col-sm-2 control-label\">Password</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\">\n    </div>\n  </div>\n</form>\n```\n\n## 参考文章\n>* [中文官网](http://v3.bootcss.com/css/#forms-controls-static)\n>* [文档手册](http://www.shouce.ren/api/view/a/779)\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/BootStrap干货篇之表单.md","raw":"---\ntitle: BootStrap干货篇之表单\ndate: 2017-04-26 23:11:37\ncategories: BootStrap学习\ntags: BootStrap\n---\n# BootStrap干货篇之表单\n\n## 基本介绍\n>**单独的表单控件会被自动赋予一些全局样式。所有设置了 `.form-control` 类的 `<input>`、`<textarea>` 和 `<select>` 元素都将被默认设置宽度属性为 `width: 100%`;。 将 `label `元素和前面提到的控件包裹在 `.form-group` 中可以获得最好的排列。**\n\n>**基本实例：**\n\n```htmlmixed\n    <div class='container'>\n    <form>\n  <div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">Email address</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"exampleInputPassword1\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"exampleInputFile\">File input</label>\n    <input type=\"file\" id=\"exampleInputFile\">\n    <p class=\"help-block\">Example block-level help text here.</p>\n  </div>\n  <div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> Check me out\n    </label>\n  </div>\n  <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n</form>\n    </div>\n```\n>**说明：这里的`form-control`是对所有的输入控件而言的,源码中将width设置为`100%`，表示会将这个输入控件占满一整行，`form-group`是用来对`label`和`input`更好的排版的，其中还有`form-group-sm`,`form-group-lg`，源码中分别利用这个对带有`form-control`的控件设置了不同的高度，具体看源码，不过正常情况下还是使用`form-group`**\n\n\n## 内联表单\n>**为 `<form>` 元素添加 `.form-inline` 类可使其内容左对齐并且表现为` inline-block `级别的控件。只适用于视口（`viewport`）至少在 `768px` 宽度时（视口宽度再小的话就会使表单折叠）从源码中可以看到对`form-inline`下的`form-group`,`form-control`,`form-control-static`,`input-group`,`radio`,`checkbox`都是用了`display:inline-block`**\n\n>**注意：**\n\n>* 在 `Bootstrap` 中，输入框和单选/多选框控件默认被设置为 `width`: `100%`; 宽度。在内联表单，我们将这些元素的宽度设置为` width: auto`;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。\n>* **一定要有`label`标签，如果不想要`label`标签可以设置`.sr-only`将其隐藏**如果你没有为每个输入控件设置 `label` 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 `aria-label`、`aria-labelledby `或 `title` 属性。如果这些都不存在，屏幕阅读器可能会采取使用 `placeholder` 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。\n\n\n>**实例:**\n\n```htmlmixed\n<form class=\"form-inline\">    <!--指定了form-inline类-->\n  <div class=\"form-group\">\n  <!--label中的for标签是用于绑定组件的，如果指定了for标签，input中的id也和for标签的内容相同，那么就会当鼠标点击<label>内容时会自动聚焦在input上-->\n    <label class=\"sr-only\" for=\"exampleInputEmail3\">Email address</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail3\" placeholder=\"Email\">\n  </div>\n  <div class=\"form-group\">\n    <label class=\"sr-only\" for=\"exampleInputPassword3\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword3\" placeholder=\"Password\">\n  </div>\n  <div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> Remember me\n    </label>\n  </div>\n  <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n```\n\n## 水平表单\n\n>**水平表单通过指定为form指定`form-horizontal`类来设定，其中可以使用`BootStrap`的栅栏系统设置水平间距，其中的`form-group`的`div`就表示一行了，相当于`<div class='row'></div>`,因此只需要在`label`和`input`中指定列就行了，但是`input`标签不能直接使用，要在外面加上`div`**\n\n>**实例：**\n\n```htmlmixed\n<form class=\"form-horizontal\">\n  <div class=\"form-group\">   \n    <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">Email</label>\n    <div class=\"col-sm-10\">\n      <input type=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Email\">\n    </div>\n  </div>\n  <div class=\"form-group\">   <!--相当与<div class='row'></div>-->\n    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">Password</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\">\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n      <div class=\"checkbox\">\n        <label>\n          <input type=\"checkbox\"> Remember me\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n      <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n    </div>\n  </div>\n</form>\n```\n>**说明上面的`label`标签中的`control-label`主要的作用是设置文字的对齐方式为左对齐，如果不加这个将会在右边出现很大的空白**\n\n\n## 多选和单选框\n>**多选框`（checkbox）`用于选择列表中的一个或多个选项，而单选框（`radio`）用于从多个选项中只选择一个。其中提供的类有`checkbox`,`checkbox-inline`,`radio`,`radio-inline`**\n\n#### 内联单选和多选框\n>**通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（`checkbox`）或单选框（`radio`）控件上，可以使这些控件排列在一行。**\n\n>**实例：**\n\n```htmlmixed\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\"> 1\n</label>\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox2\" value=\"option2\"> 2\n</label>\n<label class=\"checkbox-inline\">\n  <input type=\"checkbox\" id=\"inlineCheckbox3\" value=\"option3\"> 3\n</label>\n\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"> 1\n</label>\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"> 2\n</label>\n<label class=\"radio-inline\">\n  <input type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio3\" value=\"option3\"> 3\n</label>\n\n\n\n<div class=\"checkbox-inline\">\n            <label for=\"sex\"><input type=\"checkbox\">男</label>\n    </div>\n    <div class=\"checkbox-inline\">\n        <label for=\"sex\"><input type=\"checkbox\">男</label>\n    </div> \n```\n\n#### 不带label文本的Checkbox 和 radio\n>**如果需要 `<label>` 内没有文字，输入框（`input`）正是你所期望的。 目前只适用于**非内联**的 `checkbox `和 `radio`。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 `label`（例如，使用 `aria-label`）。**\n\n>**实例：**\n\n```htmlmixed\n<div class=\"checkbox\">\n  <label>\n    <input type=\"checkbox\" id=\"blankCheckbox\" value=\"option1\" aria-label=\"...\">\n  </label>\n</div>\n<div class=\"radio\">\n  <label>\n    <input type=\"radio\" name=\"blankRadio\" id=\"blankRadio1\" value=\"option1\" aria-label=\"...\">\n  </label>\n</div>\n```\n\n#### 下拉列表（select）\n>**实例：**\n\n```htmlmixed\n<select class=\"form-control\">\n  <option>1</option>\n  <option>2</option>\n  <option>3</option>\n  <option>4</option>\n  <option>5</option>\n</select>\n```\n\n## 静态控件\n>**如果需要在表单中将一行纯文本和 `label` 元素放置于同一行，为`<p>`标签设置为`form-control-static`**\n\n>**实例：**\n\n```htmlmixed\n<form class=\"form-horizontal\">\n  <div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\">Email</label>\n    <div class=\"col-sm-10\">\n      <p class=\"form-control-static\">email@example.com</p>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"inputPassword\" class=\"col-sm-2 control-label\">Password</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\">\n    </div>\n  </div>\n</form>\n```\n\n## 参考文章\n>* [中文官网](http://v3.bootcss.com/css/#forms-controls-static)\n>* [文档手册](http://www.shouce.ren/api/view/a/779)\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"BootStrap干货篇之表单","published":1,"updated":"2017-04-26T15:18:01.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwavy0006l0uz2wh7owi4","content":"<h1 id=\"BootStrap干货篇之表单\"><a href=\"#BootStrap干货篇之表单\" class=\"headerlink\" title=\"BootStrap干货篇之表单\"></a>BootStrap干货篇之表单</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><blockquote>\n<p><strong>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%</code>;。 将 <code>label</code>元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</strong></p>\n<p><strong>基本实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;div class=&apos;container&apos;&gt;</div><div class=\"line\">    &lt;form&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputEmail1&quot;&gt;Email address&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputPassword1&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputFile&quot;&gt;File input&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;file&quot; id=&quot;exampleInputFile&quot;&gt;</div><div class=\"line\">    &lt;p class=&quot;help-block&quot;&gt;Example block-level help text here.&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input type=&quot;checkbox&quot;&gt; Check me out</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">    &lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里的<code>form-control</code>是对所有的输入控件而言的,源码中将width设置为<code>100%</code>，表示会将这个输入控件占满一整行，<code>form-group</code>是用来对<code>label</code>和<code>input</code>更好的排版的，其中还有<code>form-group-sm</code>,<code>form-group-lg</code>，源码中分别利用这个对带有<code>form-control</code>的控件设置了不同的高度，具体看源码，不过正常情况下还是使用<code>form-group</code></strong></p>\n</blockquote>\n<h2 id=\"内联表单\"><a href=\"#内联表单\" class=\"headerlink\" title=\"内联表单\"></a>内联表单</h2><blockquote>\n<p><strong>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为<code>inline-block</code>级别的控件。只适用于视口（<code>viewport</code>）至少在 <code>768px</code> 宽度时（视口宽度再小的话就会使表单折叠）从源码中可以看到对<code>form-inline</code>下的<code>form-group</code>,<code>form-control</code>,<code>form-control-static</code>,<code>input-group</code>,<code>radio</code>,<code>checkbox</code>都是用了<code>display:inline-block</code></strong></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>在 <code>Bootstrap</code> 中，输入框和单选/多选框控件默认被设置为 <code>width</code>: <code>100%</code>; 宽度。在内联表单，我们将这些元素的宽度设置为<code>width: auto</code>;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。</li>\n<li><strong>一定要有<code>label</code>标签，如果不想要<code>label</code>标签可以设置<code>.sr-only</code>将其隐藏</strong>如果你没有为每个输入控件设置 <code>label</code> 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 <code>aria-label</code>、<code>aria-labelledby</code>或 <code>title</code> 属性。如果这些都不存在，屏幕阅读器可能会采取使用 <code>placeholder</code> 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。</li>\n</ul>\n<p><strong>实例:</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-inline&quot;&gt;    &lt;!--指定了form-inline类--&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">  &lt;!--label中的for标签是用于绑定组件的，如果指定了for标签，input中的id也和for标签的内容相同，那么就会当鼠标点击&lt;label&gt;内容时会自动聚焦在input上--&gt;</div><div class=\"line\">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputEmail3&quot;&gt;Email address&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputPassword3&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"水平表单\"><a href=\"#水平表单\" class=\"headerlink\" title=\"水平表单\"></a>水平表单</h2><blockquote>\n<p><strong>水平表单通过指定为form指定<code>form-horizontal</code>类来设定，其中可以使用<code>BootStrap</code>的栅栏系统设置水平间距，其中的<code>form-group</code>的<code>div</code>就表示一行了，相当于<code>&lt;div class=&#39;row&#39;&gt;&lt;/div&gt;</code>,因此只需要在<code>label</code>和<code>input</code>中指定列就行了，但是<code>input</code>标签不能直接使用，要在外面加上<code>div</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;   </div><div class=\"line\">    &lt;label for=&quot;inputEmail3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;   &lt;!--相当与&lt;div class=&apos;row&apos;&gt;&lt;/div&gt;--&gt;</div><div class=\"line\">    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">        &lt;label&gt;</div><div class=\"line\">          &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class=\"line\">        &lt;/label&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明上面的<code>label</code>标签中的<code>control-label</code>主要的作用是设置文字的对齐方式为左对齐，如果不加这个将会在右边出现很大的空白</strong></p>\n</blockquote>\n<h2 id=\"多选和单选框\"><a href=\"#多选和单选框\" class=\"headerlink\" title=\"多选和单选框\"></a>多选和单选框</h2><blockquote>\n<p><strong>多选框<code>（checkbox）</code>用于选择列表中的一个或多个选项，而单选框（<code>radio</code>）用于从多个选项中只选择一个。其中提供的类有<code>checkbox</code>,<code>checkbox-inline</code>,<code>radio</code>,<code>radio-inline</code></strong></p>\n</blockquote>\n<h4 id=\"内联单选和多选框\"><a href=\"#内联单选和多选框\" class=\"headerlink\" title=\"内联单选和多选框\"></a>内联单选和多选框</h4><blockquote>\n<p><strong>通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（<code>checkbox</code>）或单选框（<code>radio</code>）控件上，可以使这些控件排列在一行。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox1&quot; value=&quot;option1&quot;&gt; 1</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox2&quot; value=&quot;option2&quot;&gt; 2</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox3&quot; value=&quot;option3&quot;&gt; 3</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio1&quot; value=&quot;option1&quot;&gt; 1</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio2&quot; value=&quot;option2&quot;&gt; 2</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio3&quot; value=&quot;option3&quot;&gt; 3</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">        &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class=\"line\">    &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"不带label文本的Checkbox-和-radio\"><a href=\"#不带label文本的Checkbox-和-radio\" class=\"headerlink\" title=\"不带label文本的Checkbox 和 radio\"></a>不带label文本的Checkbox 和 radio</h4><blockquote>\n<p><strong>如果需要 <code>&lt;label&gt;</code> 内没有文字，输入框（<code>input</code>）正是你所期望的。 目前只适用于</strong>非内联<strong>的 <code>checkbox</code>和 <code>radio</code>。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 <code>label</code>（例如，使用 <code>aria-label</code>）。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;blankCheckbox&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=&quot;radio&quot;&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;blankRadio&quot; id=&quot;blankRadio1&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"下拉列表（select）\"><a href=\"#下拉列表（select）\" class=\"headerlink\" title=\"下拉列表（select）\"></a>下拉列表（select）</h4><blockquote>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select class=&quot;form-control&quot;&gt;</div><div class=\"line\">  &lt;option&gt;1&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;2&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;3&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;4&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;5&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"静态控件\"><a href=\"#静态控件\" class=\"headerlink\" title=\"静态控件\"></a>静态控件</h2><blockquote>\n<p><strong>如果需要在表单中将一行纯文本和 <code>label</code> 元素放置于同一行，为<code>&lt;p&gt;</code>标签设置为<code>form-control-static</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;p class=&quot;form-control-static&quot;&gt;email@example.com&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;inputPassword&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://v3.bootcss.com/css/#forms-controls-static\" target=\"_blank\" rel=\"external\">中文官网</a></li>\n<li><a href=\"http://www.shouce.ren/api/view/a/779\" target=\"_blank\" rel=\"external\">文档手册</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"BootStrap干货篇之表单\"><a href=\"#BootStrap干货篇之表单\" class=\"headerlink\" title=\"BootStrap干货篇之表单\"></a>BootStrap干货篇之表单</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><blockquote>\n<p><strong>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%</code>;。 将 <code>label</code>元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</strong></p>\n<p><strong>基本实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;div class=&apos;container&apos;&gt;</div><div class=\"line\">    &lt;form&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputEmail1&quot;&gt;Email address&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputPassword1&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;exampleInputFile&quot;&gt;File input&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;file&quot; id=&quot;exampleInputFile&quot;&gt;</div><div class=\"line\">    &lt;p class=&quot;help-block&quot;&gt;Example block-level help text here.&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input type=&quot;checkbox&quot;&gt; Check me out</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">    &lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里的<code>form-control</code>是对所有的输入控件而言的,源码中将width设置为<code>100%</code>，表示会将这个输入控件占满一整行，<code>form-group</code>是用来对<code>label</code>和<code>input</code>更好的排版的，其中还有<code>form-group-sm</code>,<code>form-group-lg</code>，源码中分别利用这个对带有<code>form-control</code>的控件设置了不同的高度，具体看源码，不过正常情况下还是使用<code>form-group</code></strong></p>\n</blockquote>\n<h2 id=\"内联表单\"><a href=\"#内联表单\" class=\"headerlink\" title=\"内联表单\"></a>内联表单</h2><blockquote>\n<p><strong>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为<code>inline-block</code>级别的控件。只适用于视口（<code>viewport</code>）至少在 <code>768px</code> 宽度时（视口宽度再小的话就会使表单折叠）从源码中可以看到对<code>form-inline</code>下的<code>form-group</code>,<code>form-control</code>,<code>form-control-static</code>,<code>input-group</code>,<code>radio</code>,<code>checkbox</code>都是用了<code>display:inline-block</code></strong></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>在 <code>Bootstrap</code> 中，输入框和单选/多选框控件默认被设置为 <code>width</code>: <code>100%</code>; 宽度。在内联表单，我们将这些元素的宽度设置为<code>width: auto</code>;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。</li>\n<li><strong>一定要有<code>label</code>标签，如果不想要<code>label</code>标签可以设置<code>.sr-only</code>将其隐藏</strong>如果你没有为每个输入控件设置 <code>label</code> 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 <code>aria-label</code>、<code>aria-labelledby</code>或 <code>title</code> 属性。如果这些都不存在，屏幕阅读器可能会采取使用 <code>placeholder</code> 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。</li>\n</ul>\n<p><strong>实例:</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-inline&quot;&gt;    &lt;!--指定了form-inline类--&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">  &lt;!--label中的for标签是用于绑定组件的，如果指定了for标签，input中的id也和for标签的内容相同，那么就会当鼠标点击&lt;label&gt;内容时会自动聚焦在input上--&gt;</div><div class=\"line\">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputEmail3&quot;&gt;Email address&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputPassword3&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"水平表单\"><a href=\"#水平表单\" class=\"headerlink\" title=\"水平表单\"></a>水平表单</h2><blockquote>\n<p><strong>水平表单通过指定为form指定<code>form-horizontal</code>类来设定，其中可以使用<code>BootStrap</code>的栅栏系统设置水平间距，其中的<code>form-group</code>的<code>div</code>就表示一行了，相当于<code>&lt;div class=&#39;row&#39;&gt;&lt;/div&gt;</code>,因此只需要在<code>label</code>和<code>input</code>中指定列就行了，但是<code>input</code>标签不能直接使用，要在外面加上<code>div</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;   </div><div class=\"line\">    &lt;label for=&quot;inputEmail3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;   &lt;!--相当与&lt;div class=&apos;row&apos;&gt;&lt;/div&gt;--&gt;</div><div class=\"line\">    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">        &lt;label&gt;</div><div class=\"line\">          &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class=\"line\">        &lt;/label&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明上面的<code>label</code>标签中的<code>control-label</code>主要的作用是设置文字的对齐方式为左对齐，如果不加这个将会在右边出现很大的空白</strong></p>\n</blockquote>\n<h2 id=\"多选和单选框\"><a href=\"#多选和单选框\" class=\"headerlink\" title=\"多选和单选框\"></a>多选和单选框</h2><blockquote>\n<p><strong>多选框<code>（checkbox）</code>用于选择列表中的一个或多个选项，而单选框（<code>radio</code>）用于从多个选项中只选择一个。其中提供的类有<code>checkbox</code>,<code>checkbox-inline</code>,<code>radio</code>,<code>radio-inline</code></strong></p>\n</blockquote>\n<h4 id=\"内联单选和多选框\"><a href=\"#内联单选和多选框\" class=\"headerlink\" title=\"内联单选和多选框\"></a>内联单选和多选框</h4><blockquote>\n<p><strong>通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（<code>checkbox</code>）或单选框（<code>radio</code>）控件上，可以使这些控件排列在一行。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox1&quot; value=&quot;option1&quot;&gt; 1</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox2&quot; value=&quot;option2&quot;&gt; 2</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox3&quot; value=&quot;option3&quot;&gt; 3</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio1&quot; value=&quot;option1&quot;&gt; 1</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio2&quot; value=&quot;option2&quot;&gt; 2</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio3&quot; value=&quot;option3&quot;&gt; 3</div><div class=\"line\">&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class=\"line\">        &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class=\"line\">    &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"不带label文本的Checkbox-和-radio\"><a href=\"#不带label文本的Checkbox-和-radio\" class=\"headerlink\" title=\"不带label文本的Checkbox 和 radio\"></a>不带label文本的Checkbox 和 radio</h4><blockquote>\n<p><strong>如果需要 <code>&lt;label&gt;</code> 内没有文字，输入框（<code>input</code>）正是你所期望的。 目前只适用于</strong>非内联<strong>的 <code>checkbox</code>和 <code>radio</code>。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 <code>label</code>（例如，使用 <code>aria-label</code>）。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;checkbox&quot;&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;blankCheckbox&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=&quot;radio&quot;&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;blankRadio&quot; id=&quot;blankRadio1&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"下拉列表（select）\"><a href=\"#下拉列表（select）\" class=\"headerlink\" title=\"下拉列表（select）\"></a>下拉列表（select）</h4><blockquote>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select class=&quot;form-control&quot;&gt;</div><div class=\"line\">  &lt;option&gt;1&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;2&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;3&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;4&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;5&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"静态控件\"><a href=\"#静态控件\" class=\"headerlink\" title=\"静态控件\"></a>静态控件</h2><blockquote>\n<p><strong>如果需要在表单中将一行纯文本和 <code>label</code> 元素放置于同一行，为<code>&lt;p&gt;</code>标签设置为<code>form-control-static</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;p class=&quot;form-control-static&quot;&gt;email@example.com&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;inputPassword&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword&quot; placeholder=&quot;Password&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://v3.bootcss.com/css/#forms-controls-static\">中文官网</a></li>\n<li><a href=\"http://www.shouce.ren/api/view/a/779\">文档手册</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"JQuery干货篇之操控DOM","date":"2017-04-21T09:53:16.000Z","_content":"# JQuery干货篇之插入元素\n\n**本次使用的html,css还是我上一篇的源代码，详情请看[上一篇文章](https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/)**\n\n## 分类\n\n1. **插入子元素：`append`,`prepend` ,`appendTo`,`prependTo`**\n2. **封装包裹元素：`wrap`,`wrapAll`,`wrapInner`**\n3. **插入兄弟元素：`after`,`before`,`insertAfter`,`insertBefore`**\n4. **替换元素：`replaceWith`,`replaceAll`**\n5. **删除元素：`remove`,`deatch`,`unwrap`,`empty`**\n\n## 创建新元素\n**通常在把新元素插入到`DOM`中的目标位置之前，要先创建一个新元素才能将它插入到指定位置**\n\n>**使用`$`创建元素**\n>>`$(<div><img src='rose.png' alt='玫瑰'></div>)`\n\n## clone\n>**克隆元素，使用`clone`方法以已有的元素为模子生成新的元素，这个在后面的插入元素起到关键作用，如果在要引用html中的一个标签内容的话，不使用`clone`方法，那么就会将这段内容移动，因此这里使用`clone`会很方便，详细请看`append`的用法实例**\n\n>**实例：**\n\n```javascript\n    $(\"div.dcell\").clone();    //这里的clone方法必须是JQuery对象调用\n```\n\n## 使用DOM API创建新元素\n>**`DOM API`是用`js`操作的，其实`jquery`在幕后悄悄的调用`DOM API`**\n\n>**实例：**\n\n```javascript\n     var divElem=document.createElement(\"div\");    //创建一个div元素\n     divElem.classList.add(\"dcell\");       //为div添加class=dcell\n\n    var imgElem=document.createElement(\"img\");\n    imgElem.src=\"lily.png\";\n\n    divElem.appendChild(imgElem);   //在新创建的元素后面插入img\n\n    var newElem=$(divElem);\n\n    newElem.each(function (index,elem) {\n        console.log(elem.tagName+\"    \"+elem.className);\n\n    });\n\n```\n\n\n## append\n>**把参数指定的元素插入到所有的`JQuery`内含元素内容末尾成为他们的最后一个子元素，形式有`append(html)`,`append(Jquery)`,`append(HTMLElements[])`，`append(function())`**\n\n>**实例：**\n\n```javascript\n//这里使用append元素创建了一个div元素，在末尾插入元素成为div的子元素\n//\n    var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");\n\n    var newElems = $(\"<div class='dcell'></div>\").append(\"<img src='lily.png'/>\")\n        .append(\"<label for='lily'>Lily:</label>\")\n        .append(\"<input name='lily' value='0' required>\")\n        .css(\"border\", 'thick double red');\n        \n    $(\"div.drow\").append(orchildElems);   //在末尾插入数据，这里的参数是jquery对象\n    \n    \n    $(\"div.drow\").append(function(index,elem){\n    \n    if(elem.id=='row1')\n        return orchildElems;\n    \n    else if(this.id='row2')\n        return newElems;\n    })\n    \n    \n    $(\"div.drow\").last().append(orchildElem,newElems);   //在其中添加两个参数，插入的先后按照参数的先后位置，当然其中的参数个数没有限制\n    \n    \n    \n        \n```\n\n## prepend\n>**和`append`完全相反,向当前元素的前面插入`html`节点作为当前元素的子元素,形式有`prepen d(Jquery)`,`prepend(html)`,`prepend(htmlElemnts[])`,`prepend(function())`**\n\n>**实例：**\n\n```javascript\n      var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");\n    $(\"div.dcell\").prepend(orchildElems);    //将orchildElems插入到div.dcell的最前面，作为他的子元素\n    \n    \n    $(\"div.dcell\").prepend(\"<img src='lily.png'>\"); //将参数html的内容插入到前面，作为子元素\n    \n    \n    \n    $(\"div.drow\").append(function (index) {     //参数是函数，index是索引，返回的内容就是要插入到前面的内容\n\n         if (this.id == 'row1')\n             return orchildElem;                //返回的对象可以是jquery对象，也可以是html标签，如：return \"<img src='lily.png'>\n\n         else if (this.id = 'row2')\n             return newElems;\n     });\n    \n\n```\n\n\n## appendTo\n>**`appendTo`是和`append`一样的函数，都是将指定的元素插入到指定元素的前面作为子元素，但是他们的参数就不同了，`append`是将指定的参数插入到当前调用它的的结果集中，而`appendTo`是将当前调用它的结果集插入到指定的参数中，主要的形式有`appendTo(jquery)`,`append(HTMLELments[])`**\n\n>**实例：**\n\n```javascript\n\n$(\"<img src='lily.png'>\").appendTo($(\"img\").last().parent());   //将图片插入到最后一个dcell中，这里参数是目标位置，开头调用的时想要插入的内容\n\n$(\"img:first\").clone().appendTo($(\"img\").last().parent()); //选择第一个图片插入到最后一个dcell中，这里必须用clone，否则就会将这张图片移到目标位置\n\n $($(\"div.dcell\").html()).appendTo($(\"img\").last().parent());   //这里的.html()是获取html文本内容\n\n```\n\n## prependTo\n>**`.prepend()`和`.prependTo()`实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 `.prepend()` 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 `.prependTo()` 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。**\n\n\n## after\n>**在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。形式有`after(content[content,])`,`after(function())`,这里的`content`内容有HTML字符串，`DOM` 元素，文本节点，元素和文本节点的数组，或者`jQuery`对象，用来插入到集合中每个匹配元素的后面**\n\n>**实例：**\n\n```javascript\n      var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");     //创建一个dcell内容\n        \n    \n        $(\"div.dcell\").after(orchildElems);   //插入元素作为兄弟元素，在当前元素的后面\n        \n        \n        $(\"#row1 div.dcell\").after(function (index, html) {    //index表示索引，html表示原来的html文本，指的是没有插入之前的html\n        console.log(html);\n        if (index == 0)return orchildElem;        //返回的可以是jquery对象，html文本\n        else if (index == 1)\n            return newElems;\n    });\n});\n        \n```\n\n## before\n>**根据参数设定，在匹配元素的前面插入内容,形式和`after`一样，内容也差不多**\n\n\n## insertBefore\n>**和`prependTo`的用法差不多，只是参数是要插入的目标位置，作为兄弟元素插入**\n\n>**实例：**\n\n```javascript\norchildElems.clone().insertBefore(\"#row2 div.dcell\");\n```\n\n## insertAfter\n>**和`append`用法差不多，只是参数是要插入的目标位置，这里的也是作为兄弟元素插入的**\n\n>**实例：**\n\n```javascript\norchildElems.insertAfter(\"#row1 div.dcell\");\n\n```\n\n## wrap\n>**在集合中匹配的每个元素周围包裹一个`HTML`结构，将会作为父元素存在。形式为`wrap(html)`,`wrap(jquery)`,`wrap(HtmlElements[])`,`wrap(function())`**\n\n>**实例：**\n\n```javascript\n    div=$(\"<div></div>\").css(\"border\",'thick double red');\n    $(\"div.drow\").wrap(div);     //在drow外层添加了一个div将作为父元素，可以看到现在的源代码变成了<div style...><div class='drow'>...</div></div>\n    \n    \n    $(\".drow\").wrap(function (index) {   //index是索引\n    //if($(this).has(\"img[src*=astor]\").length>0)\n    if(index==0)\n        return div;      //只在第一个drow中添加父元素div\n    else \n        return $(\"<div></div>\").css(\"border\",'thick double blue');\n})\n\n```\n\n## unwrap\n>**将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。形式为`unwrap()`,`unwrap(selector)`**\n\n>**实例：**\n\n```javascript\n  $(\"div.dcell\").css(\"border\",'thick double red');\n    $(\"div.dcell\").children(\"img\").first().unwrap();   //这里将第一个img元素的父级元素删除，并且保留了其中的子元素\n    \n    $(\"div.dcell\").children(\"img\").unwrap(\":first\");   //这里使用参数来筛选要删除父级元素的当前元素，这里选择第一个元素\n\n```\n\n## wrapAll\n>**在集合中所有匹配元素的外面包裹一个HTML结构,也就是为结果集中的所有元素都设置了一个相同的父级元素来包裹所有的元素，形式为`wrapAll(html)`,`wrapAll(jquery)`,`wrapAll(htmlElements[])`,`wrapAll(function())`**\n\n>**实例：**\n\n```javascript\nvar div = $(\"<div></div>\").css(\"border\", 'thick double red');\n$(\"div.drow\").wrapAll(div);    //这里的div成为了他共有的父级元素，原来的父级元素变成了祖先元素了\n$(\"img\").wrapAll(div);  //这里的img没有共同的父元素，那么就会强制的将所有的元素拉在一起为他们设置一个父级元素\n\n\n\n```\n\n## wrapInner\n>**在匹配元素里的内容外包一层结构,也就是为匹配元素的后代元素添加一个父级元素，但是这个父级元素是匹配元素的子代元素，也就是原来的匹配元素变成了祖先元素，形式为`wrapInner(html)`,`wrapInner(jquery)`,`wrapInner(htmlElements)`,`wrapInner(function())`**\n\n>**实例：**\n\n```javascript\n    var div = $(\"<div></div>\").css(\"border\", 'thick double red');\n    $(\".dcell\").wrapInner(div);    //这里的dcell元素将会变成祖先元素，而div将会变成内部后代元素新的父级元素\n\n```\n\n\n## replaceWith\n>**用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合,形式为`replace(html)`,`replaceWith(jquery)`,`replaceWith(function())`**\n\n>**实例：**\n\n```javascript\n var newElems = $(\"<div class='dcell'></div>\").append(\"<img src='lily.png'>\")\n .append(\"<label for='lily'>Lily</label>\").append(\"<input name='lily' value='0' required>\").css(\"border\", 'thick   double blue');\n$(\".dcell:first\").replaceWith(newElems);  //用newElems替换第一个dcell\n\n\n$(\"div.drow img\").replaceWith(function () {\n    if (this.src.indexOf(\"rose\") > -1)\n        return $(\"<img src='lily.png'>\").css(\"border\",'thick double red'); //返回的时替换的内容，可以是jquery或者html\n    else if (this.src.indexOf(\"peony\") > -1)\n        return newElems;\n    else return $(this.clone()).css(\"border\",'thick double blue');\n\n})\n```\n\n## replaceAll\n>**用集合的匹配元素替换每个目标元素。`.replaceAll()`和`.replaceWith()`功能类似，但是目标和源相反**\n\n>**实例：**\n\n```javascript\n $(\"<img src='lily.png'>\").replaceAll(\"#row1 img\");   //这里使用<img src='lily.png'>替换所有的img元素\n```\n\n## remove\n>**将匹配元素集合从`DOM`中删除,并且同时移除元素上的事件及 `jQuery` 数据**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").remove(\":has(img[src*=rose])\");  //删除img\n\n$(\"div.dcell:first()\").remove();    //不带参数\n\n\n```\n\n## detach\n>**从`DOM`中去掉所有匹配的元素,`.detach()` 方法和`.remove()`一样, 除了 `.detach()`保存所有`jQuery`数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").detach();\n\n$(\"div.dcell\").detach(\":has(img[src*=rose])\"); \n\n```\n\n## empty\n>**从`DOM`中移除集合中匹配元素的所有子节点。**\n\n```javascript=\n$(\"div.dcell:first\").empty();   //删除所有的子节点\n```\n    \n## 参考文章\n>* [JQuery中文文档](http://www.css88.com/jqapi-1.9/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/JQuery干货篇之操控DOM.md","raw":"---\ntitle: JQuery干货篇之操控DOM\ndate: 2017-04-21 17:53:16\ncategories: JQuery学习\ntags: JQuery\n---\n# JQuery干货篇之插入元素\n\n**本次使用的html,css还是我上一篇的源代码，详情请看[上一篇文章](https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/)**\n\n## 分类\n\n1. **插入子元素：`append`,`prepend` ,`appendTo`,`prependTo`**\n2. **封装包裹元素：`wrap`,`wrapAll`,`wrapInner`**\n3. **插入兄弟元素：`after`,`before`,`insertAfter`,`insertBefore`**\n4. **替换元素：`replaceWith`,`replaceAll`**\n5. **删除元素：`remove`,`deatch`,`unwrap`,`empty`**\n\n## 创建新元素\n**通常在把新元素插入到`DOM`中的目标位置之前，要先创建一个新元素才能将它插入到指定位置**\n\n>**使用`$`创建元素**\n>>`$(<div><img src='rose.png' alt='玫瑰'></div>)`\n\n## clone\n>**克隆元素，使用`clone`方法以已有的元素为模子生成新的元素，这个在后面的插入元素起到关键作用，如果在要引用html中的一个标签内容的话，不使用`clone`方法，那么就会将这段内容移动，因此这里使用`clone`会很方便，详细请看`append`的用法实例**\n\n>**实例：**\n\n```javascript\n    $(\"div.dcell\").clone();    //这里的clone方法必须是JQuery对象调用\n```\n\n## 使用DOM API创建新元素\n>**`DOM API`是用`js`操作的，其实`jquery`在幕后悄悄的调用`DOM API`**\n\n>**实例：**\n\n```javascript\n     var divElem=document.createElement(\"div\");    //创建一个div元素\n     divElem.classList.add(\"dcell\");       //为div添加class=dcell\n\n    var imgElem=document.createElement(\"img\");\n    imgElem.src=\"lily.png\";\n\n    divElem.appendChild(imgElem);   //在新创建的元素后面插入img\n\n    var newElem=$(divElem);\n\n    newElem.each(function (index,elem) {\n        console.log(elem.tagName+\"    \"+elem.className);\n\n    });\n\n```\n\n\n## append\n>**把参数指定的元素插入到所有的`JQuery`内含元素内容末尾成为他们的最后一个子元素，形式有`append(html)`,`append(Jquery)`,`append(HTMLElements[])`，`append(function())`**\n\n>**实例：**\n\n```javascript\n//这里使用append元素创建了一个div元素，在末尾插入元素成为div的子元素\n//\n    var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");\n\n    var newElems = $(\"<div class='dcell'></div>\").append(\"<img src='lily.png'/>\")\n        .append(\"<label for='lily'>Lily:</label>\")\n        .append(\"<input name='lily' value='0' required>\")\n        .css(\"border\", 'thick double red');\n        \n    $(\"div.drow\").append(orchildElems);   //在末尾插入数据，这里的参数是jquery对象\n    \n    \n    $(\"div.drow\").append(function(index,elem){\n    \n    if(elem.id=='row1')\n        return orchildElems;\n    \n    else if(this.id='row2')\n        return newElems;\n    })\n    \n    \n    $(\"div.drow\").last().append(orchildElem,newElems);   //在其中添加两个参数，插入的先后按照参数的先后位置，当然其中的参数个数没有限制\n    \n    \n    \n        \n```\n\n## prepend\n>**和`append`完全相反,向当前元素的前面插入`html`节点作为当前元素的子元素,形式有`prepen d(Jquery)`,`prepend(html)`,`prepend(htmlElemnts[])`,`prepend(function())`**\n\n>**实例：**\n\n```javascript\n      var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");\n    $(\"div.dcell\").prepend(orchildElems);    //将orchildElems插入到div.dcell的最前面，作为他的子元素\n    \n    \n    $(\"div.dcell\").prepend(\"<img src='lily.png'>\"); //将参数html的内容插入到前面，作为子元素\n    \n    \n    \n    $(\"div.drow\").append(function (index) {     //参数是函数，index是索引，返回的内容就是要插入到前面的内容\n\n         if (this.id == 'row1')\n             return orchildElem;                //返回的对象可以是jquery对象，也可以是html标签，如：return \"<img src='lily.png'>\n\n         else if (this.id = 'row2')\n             return newElems;\n     });\n    \n\n```\n\n\n## appendTo\n>**`appendTo`是和`append`一样的函数，都是将指定的元素插入到指定元素的前面作为子元素，但是他们的参数就不同了，`append`是将指定的参数插入到当前调用它的的结果集中，而`appendTo`是将当前调用它的结果集插入到指定的参数中，主要的形式有`appendTo(jquery)`,`append(HTMLELments[])`**\n\n>**实例：**\n\n```javascript\n\n$(\"<img src='lily.png'>\").appendTo($(\"img\").last().parent());   //将图片插入到最后一个dcell中，这里参数是目标位置，开头调用的时想要插入的内容\n\n$(\"img:first\").clone().appendTo($(\"img\").last().parent()); //选择第一个图片插入到最后一个dcell中，这里必须用clone，否则就会将这张图片移到目标位置\n\n $($(\"div.dcell\").html()).appendTo($(\"img\").last().parent());   //这里的.html()是获取html文本内容\n\n```\n\n## prependTo\n>**`.prepend()`和`.prependTo()`实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 `.prepend()` 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 `.prependTo()` 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。**\n\n\n## after\n>**在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。形式有`after(content[content,])`,`after(function())`,这里的`content`内容有HTML字符串，`DOM` 元素，文本节点，元素和文本节点的数组，或者`jQuery`对象，用来插入到集合中每个匹配元素的后面**\n\n>**实例：**\n\n```javascript\n      var orchildElems = $(\"<div class='dcell'></div>\").append(\"<img src='orchid.png'/>\")\n        .append(\"<label for='orchild'>Orchild:</label>\")\n        .append(\"<input name='orchild' value='0' required>\");     //创建一个dcell内容\n        \n    \n        $(\"div.dcell\").after(orchildElems);   //插入元素作为兄弟元素，在当前元素的后面\n        \n        \n        $(\"#row1 div.dcell\").after(function (index, html) {    //index表示索引，html表示原来的html文本，指的是没有插入之前的html\n        console.log(html);\n        if (index == 0)return orchildElem;        //返回的可以是jquery对象，html文本\n        else if (index == 1)\n            return newElems;\n    });\n});\n        \n```\n\n## before\n>**根据参数设定，在匹配元素的前面插入内容,形式和`after`一样，内容也差不多**\n\n\n## insertBefore\n>**和`prependTo`的用法差不多，只是参数是要插入的目标位置，作为兄弟元素插入**\n\n>**实例：**\n\n```javascript\norchildElems.clone().insertBefore(\"#row2 div.dcell\");\n```\n\n## insertAfter\n>**和`append`用法差不多，只是参数是要插入的目标位置，这里的也是作为兄弟元素插入的**\n\n>**实例：**\n\n```javascript\norchildElems.insertAfter(\"#row1 div.dcell\");\n\n```\n\n## wrap\n>**在集合中匹配的每个元素周围包裹一个`HTML`结构，将会作为父元素存在。形式为`wrap(html)`,`wrap(jquery)`,`wrap(HtmlElements[])`,`wrap(function())`**\n\n>**实例：**\n\n```javascript\n    div=$(\"<div></div>\").css(\"border\",'thick double red');\n    $(\"div.drow\").wrap(div);     //在drow外层添加了一个div将作为父元素，可以看到现在的源代码变成了<div style...><div class='drow'>...</div></div>\n    \n    \n    $(\".drow\").wrap(function (index) {   //index是索引\n    //if($(this).has(\"img[src*=astor]\").length>0)\n    if(index==0)\n        return div;      //只在第一个drow中添加父元素div\n    else \n        return $(\"<div></div>\").css(\"border\",'thick double blue');\n})\n\n```\n\n## unwrap\n>**将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。形式为`unwrap()`,`unwrap(selector)`**\n\n>**实例：**\n\n```javascript\n  $(\"div.dcell\").css(\"border\",'thick double red');\n    $(\"div.dcell\").children(\"img\").first().unwrap();   //这里将第一个img元素的父级元素删除，并且保留了其中的子元素\n    \n    $(\"div.dcell\").children(\"img\").unwrap(\":first\");   //这里使用参数来筛选要删除父级元素的当前元素，这里选择第一个元素\n\n```\n\n## wrapAll\n>**在集合中所有匹配元素的外面包裹一个HTML结构,也就是为结果集中的所有元素都设置了一个相同的父级元素来包裹所有的元素，形式为`wrapAll(html)`,`wrapAll(jquery)`,`wrapAll(htmlElements[])`,`wrapAll(function())`**\n\n>**实例：**\n\n```javascript\nvar div = $(\"<div></div>\").css(\"border\", 'thick double red');\n$(\"div.drow\").wrapAll(div);    //这里的div成为了他共有的父级元素，原来的父级元素变成了祖先元素了\n$(\"img\").wrapAll(div);  //这里的img没有共同的父元素，那么就会强制的将所有的元素拉在一起为他们设置一个父级元素\n\n\n\n```\n\n## wrapInner\n>**在匹配元素里的内容外包一层结构,也就是为匹配元素的后代元素添加一个父级元素，但是这个父级元素是匹配元素的子代元素，也就是原来的匹配元素变成了祖先元素，形式为`wrapInner(html)`,`wrapInner(jquery)`,`wrapInner(htmlElements)`,`wrapInner(function())`**\n\n>**实例：**\n\n```javascript\n    var div = $(\"<div></div>\").css(\"border\", 'thick double red');\n    $(\".dcell\").wrapInner(div);    //这里的dcell元素将会变成祖先元素，而div将会变成内部后代元素新的父级元素\n\n```\n\n\n## replaceWith\n>**用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合,形式为`replace(html)`,`replaceWith(jquery)`,`replaceWith(function())`**\n\n>**实例：**\n\n```javascript\n var newElems = $(\"<div class='dcell'></div>\").append(\"<img src='lily.png'>\")\n .append(\"<label for='lily'>Lily</label>\").append(\"<input name='lily' value='0' required>\").css(\"border\", 'thick   double blue');\n$(\".dcell:first\").replaceWith(newElems);  //用newElems替换第一个dcell\n\n\n$(\"div.drow img\").replaceWith(function () {\n    if (this.src.indexOf(\"rose\") > -1)\n        return $(\"<img src='lily.png'>\").css(\"border\",'thick double red'); //返回的时替换的内容，可以是jquery或者html\n    else if (this.src.indexOf(\"peony\") > -1)\n        return newElems;\n    else return $(this.clone()).css(\"border\",'thick double blue');\n\n})\n```\n\n## replaceAll\n>**用集合的匹配元素替换每个目标元素。`.replaceAll()`和`.replaceWith()`功能类似，但是目标和源相反**\n\n>**实例：**\n\n```javascript\n $(\"<img src='lily.png'>\").replaceAll(\"#row1 img\");   //这里使用<img src='lily.png'>替换所有的img元素\n```\n\n## remove\n>**将匹配元素集合从`DOM`中删除,并且同时移除元素上的事件及 `jQuery` 数据**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").remove(\":has(img[src*=rose])\");  //删除img\n\n$(\"div.dcell:first()\").remove();    //不带参数\n\n\n```\n\n## detach\n>**从`DOM`中去掉所有匹配的元素,`.detach()` 方法和`.remove()`一样, 除了 `.detach()`保存所有`jQuery`数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").detach();\n\n$(\"div.dcell\").detach(\":has(img[src*=rose])\"); \n\n```\n\n## empty\n>**从`DOM`中移除集合中匹配元素的所有子节点。**\n\n```javascript=\n$(\"div.dcell:first\").empty();   //删除所有的子节点\n```\n    \n## 参考文章\n>* [JQuery中文文档](http://www.css88.com/jqapi-1.9/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"JQuery干货篇之操控DOM","published":1,"updated":"2017-04-21T09:53:49.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaw10007l0uzt4auafdb","content":"<h1 id=\"JQuery干货篇之插入元素\"><a href=\"#JQuery干货篇之插入元素\" class=\"headerlink\" title=\"JQuery干货篇之插入元素\"></a>JQuery干货篇之插入元素</h1><p><strong>本次使用的html,css还是我上一篇的源代码，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/\">上一篇文章</a></strong></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ol>\n<li><strong>插入子元素：<code>append</code>,<code>prepend</code> ,<code>appendTo</code>,<code>prependTo</code></strong></li>\n<li><strong>封装包裹元素：<code>wrap</code>,<code>wrapAll</code>,<code>wrapInner</code></strong></li>\n<li><strong>插入兄弟元素：<code>after</code>,<code>before</code>,<code>insertAfter</code>,<code>insertBefore</code></strong></li>\n<li><strong>替换元素：<code>replaceWith</code>,<code>replaceAll</code></strong></li>\n<li><strong>删除元素：<code>remove</code>,<code>deatch</code>,<code>unwrap</code>,<code>empty</code></strong></li>\n</ol>\n<h2 id=\"创建新元素\"><a href=\"#创建新元素\" class=\"headerlink\" title=\"创建新元素\"></a>创建新元素</h2><p><strong>通常在把新元素插入到<code>DOM</code>中的目标位置之前，要先创建一个新元素才能将它插入到指定位置</strong></p>\n<blockquote>\n<p><strong>使用<code>$</code>创建元素</strong></p>\n<blockquote>\n<p><code>$(&lt;div&gt;&lt;img src=&#39;rose.png&#39; alt=&#39;玫瑰&#39;&gt;&lt;/div&gt;)</code></p>\n</blockquote>\n</blockquote>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h2><blockquote>\n<p><strong>克隆元素，使用<code>clone</code>方法以已有的元素为模子生成新的元素，这个在后面的插入元素起到关键作用，如果在要引用html中的一个标签内容的话，不使用<code>clone</code>方法，那么就会将这段内容移动，因此这里使用<code>clone</code>会很方便，详细请看<code>append</code>的用法实例</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).clone();    <span class=\"comment\">//这里的clone方法必须是JQuery对象调用</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用DOM-API创建新元素\"><a href=\"#使用DOM-API创建新元素\" class=\"headerlink\" title=\"使用DOM API创建新元素\"></a>使用DOM API创建新元素</h2><blockquote>\n<p><strong><code>DOM API</code>是用<code>js</code>操作的，其实<code>jquery</code>在幕后悄悄的调用<code>DOM API</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> divElem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);    <span class=\"comment\">//创建一个div元素</span></div><div class=\"line\"> divElem.classList.add(<span class=\"string\">\"dcell\"</span>);       <span class=\"comment\">//为div添加class=dcell</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> imgElem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">imgElem.src=<span class=\"string\">\"lily.png\"</span>;</div><div class=\"line\"></div><div class=\"line\">divElem.appendChild(imgElem);   <span class=\"comment\">//在新创建的元素后面插入img</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> newElem=$(divElem);</div><div class=\"line\"></div><div class=\"line\">newElem.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"    \"</span>+elem.className);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append\"></a>append</h2><blockquote>\n<p><strong>把参数指定的元素插入到所有的<code>JQuery</code>内含元素内容末尾成为他们的最后一个子元素，形式有<code>append(html)</code>,<code>append(Jquery)</code>,<code>append(HTMLElements[])</code>，<code>append(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里使用append元素创建了一个div元素，在末尾插入元素成为div的子元素</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> newElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='lily.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='lily'&gt;Lily:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='lily' value='0' required&gt;\"</span>)</div><div class=\"line\">        .css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">        </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).append(orchildElems);   <span class=\"comment\">//在末尾插入数据，这里的参数是jquery对象</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).append(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(elem.id==<span class=\"string\">'row1'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> orchildElems;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.id=<span class=\"string\">'row2'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).last().append(orchildElem,newElems);   <span class=\"comment\">//在其中添加两个参数，插入的先后按照参数的先后位置，当然其中的参数个数没有限制</span></div></pre></td></tr></table></figure>\n<h2 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\"prepend\"></a>prepend</h2><blockquote>\n<p><strong>和<code>append</code>完全相反,向当前元素的前面插入<code>html</code>节点作为当前元素的子元素,形式有<code>prepen d(Jquery)</code>,<code>prepend(html)</code>,<code>prepend(htmlElemnts[])</code>,<code>prepend(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).prepend(orchildElems);    <span class=\"comment\">//将orchildElems插入到div.dcell的最前面，作为他的子元素</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).prepend(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>); <span class=\"comment\">//将参数html的内容插入到前面，作为子元素</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.drow\"</span>).append(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;     <span class=\"comment\">//参数是函数，index是索引，返回的内容就是要插入到前面的内容</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id == <span class=\"string\">'row1'</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> orchildElem;                <span class=\"comment\">//返回的对象可以是jquery对象，也可以是html标签，如：return \"&lt;img src='lily.png'&gt;</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id = <span class=\"string\">'row2'</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> newElems;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"appendTo\"><a href=\"#appendTo\" class=\"headerlink\" title=\"appendTo\"></a>appendTo</h2><blockquote>\n<p><strong><code>appendTo</code>是和<code>append</code>一样的函数，都是将指定的元素插入到指定元素的前面作为子元素，但是他们的参数就不同了，<code>append</code>是将指定的参数插入到当前调用它的的结果集中，而<code>appendTo</code>是将当前调用它的结果集插入到指定的参数中，主要的形式有<code>appendTo(jquery)</code>,<code>append(HTMLELments[])</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).appendTo($(<span class=\"string\">\"img\"</span>).last().parent());   <span class=\"comment\">//将图片插入到最后一个dcell中，这里参数是目标位置，开头调用的时想要插入的内容</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img:first\"</span>).clone().appendTo($(<span class=\"string\">\"img\"</span>).last().parent()); <span class=\"comment\">//选择第一个图片插入到最后一个dcell中，这里必须用clone，否则就会将这张图片移到目标位置</span></div><div class=\"line\"></div><div class=\"line\"> $($(<span class=\"string\">\"div.dcell\"</span>).html()).appendTo($(<span class=\"string\">\"img\"</span>).last().parent());   <span class=\"comment\">//这里的.html()是获取html文本内容</span></div></pre></td></tr></table></figure>\n<h2 id=\"prependTo\"><a href=\"#prependTo\" class=\"headerlink\" title=\"prependTo\"></a>prependTo</h2><blockquote>\n<p><strong><code>.prepend()</code>和<code>.prependTo()</code>实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 <code>.prepend()</code> 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 <code>.prependTo()</code> 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。</strong></p>\n</blockquote>\n<h2 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h2><blockquote>\n<p><strong>在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。形式有<code>after(content[content,])</code>,<code>after(function())</code>,这里的<code>content</code>内容有HTML字符串，<code>DOM</code> 元素，文本节点，元素和文本节点的数组，或者<code>jQuery</code>对象，用来插入到集合中每个匹配元素的后面</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);     <span class=\"comment\">//创建一个dcell内容</span></div><div class=\"line\">        </div><div class=\"line\">    </div><div class=\"line\">        $(<span class=\"string\">\"div.dcell\"</span>).after(orchildElems);   <span class=\"comment\">//插入元素作为兄弟元素，在当前元素的后面</span></div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">\"#row1 div.dcell\"</span>).after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, html</span>) </span>&#123;    <span class=\"comment\">//index表示索引，html表示原来的html文本，指的是没有插入之前的html</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(html);</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> orchildElem;        <span class=\"comment\">//返回的可以是jquery对象，html文本</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index == <span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h2><blockquote>\n<p><strong>根据参数设定，在匹配元素的前面插入内容,形式和<code>after</code>一样，内容也差不多</strong></p>\n</blockquote>\n<h2 id=\"insertBefore\"><a href=\"#insertBefore\" class=\"headerlink\" title=\"insertBefore\"></a>insertBefore</h2><blockquote>\n<p><strong>和<code>prependTo</code>的用法差不多，只是参数是要插入的目标位置，作为兄弟元素插入</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">orchildElems.clone().insertBefore(<span class=\"string\">\"#row2 div.dcell\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"insertAfter\"><a href=\"#insertAfter\" class=\"headerlink\" title=\"insertAfter\"></a>insertAfter</h2><blockquote>\n<p><strong>和<code>append</code>用法差不多，只是参数是要插入的目标位置，这里的也是作为兄弟元素插入的</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">orchildElems.insertAfter(<span class=\"string\">\"#row1 div.dcell\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a>wrap</h2><blockquote>\n<p><strong>在集合中匹配的每个元素周围包裹一个<code>HTML</code>结构，将会作为父元素存在。形式为<code>wrap(html)</code>,<code>wrap(jquery)</code>,<code>wrap(HtmlElements[])</code>,<code>wrap(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div=$(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).wrap(div);     <span class=\"comment\">//在drow外层添加了一个div将作为父元素，可以看到现在的源代码变成了&lt;div style...&gt;&lt;div class='drow'&gt;...&lt;/div&gt;&lt;/div&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\".drow\"</span>).wrap(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;   <span class=\"comment\">//index是索引</span></div><div class=\"line\">    <span class=\"comment\">//if($(this).has(\"img[src*=astor]\").length&gt;0)</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> div;      <span class=\"comment\">//只在第一个drow中添加父元素div</span></div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span> $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double blue'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"unwrap\"><a href=\"#unwrap\" class=\"headerlink\" title=\"unwrap\"></a>unwrap</h2><blockquote>\n<p><strong>将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。形式为<code>unwrap()</code>,<code>unwrap(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">  $(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).first().unwrap();   <span class=\"comment\">//这里将第一个img元素的父级元素删除，并且保留了其中的子元素</span></div><div class=\"line\">  </div><div class=\"line\">  $(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).unwrap(<span class=\"string\">\":first\"</span>);   <span class=\"comment\">//这里使用参数来筛选要删除父级元素的当前元素，这里选择第一个元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"wrapAll\"><a href=\"#wrapAll\" class=\"headerlink\" title=\"wrapAll\"></a>wrapAll</h2><blockquote>\n<p><strong>在集合中所有匹配元素的外面包裹一个HTML结构,也就是为结果集中的所有元素都设置了一个相同的父级元素来包裹所有的元素，形式为<code>wrapAll(html)</code>,<code>wrapAll(jquery)</code>,<code>wrapAll(htmlElements[])</code>,<code>wrapAll(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.drow\"</span>).wrapAll(div);    <span class=\"comment\">//这里的div成为了他共有的父级元素，原来的父级元素变成了祖先元素了</span></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).wrapAll(div);  <span class=\"comment\">//这里的img没有共同的父元素，那么就会强制的将所有的元素拉在一起为他们设置一个父级元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"wrapInner\"><a href=\"#wrapInner\" class=\"headerlink\" title=\"wrapInner\"></a>wrapInner</h2><blockquote>\n<p><strong>在匹配元素里的内容外包一层结构,也就是为匹配元素的后代元素添加一个父级元素，但是这个父级元素是匹配元素的子代元素，也就是原来的匹配元素变成了祖先元素，形式为<code>wrapInner(html)</code>,<code>wrapInner(jquery)</code>,<code>wrapInner(htmlElements)</code>,<code>wrapInner(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">$(<span class=\"string\">\".dcell\"</span>).wrapInner(div);    <span class=\"comment\">//这里的dcell元素将会变成祖先元素，而div将会变成内部后代元素新的父级元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"replaceWith\"><a href=\"#replaceWith\" class=\"headerlink\" title=\"replaceWith\"></a>replaceWith</h2><blockquote>\n<p><strong>用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合,形式为<code>replace(html)</code>,<code>replaceWith(jquery)</code>,<code>replaceWith(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> newElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>)</div><div class=\"line\"> .append(<span class=\"string\">\"&lt;label for='lily'&gt;Lily&lt;/label&gt;\"</span>).append(<span class=\"string\">\"&lt;input name='lily' value='0' required&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick   double blue'</span>);</div><div class=\"line\">$(<span class=\"string\">\".dcell:first\"</span>).replaceWith(newElems);  <span class=\"comment\">//用newElems替换第一个dcell</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.drow img\"</span>).replaceWith(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.src.indexOf(<span class=\"string\">\"rose\"</span>) &gt; <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> $(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>); <span class=\"comment\">//返回的时替换的内容，可以是jquery或者html</span></div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.src.indexOf(<span class=\"string\">\"peony\"</span>) &gt; <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>.clone()).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double blue'</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"replaceAll\"><a href=\"#replaceAll\" class=\"headerlink\" title=\"replaceAll\"></a>replaceAll</h2><blockquote>\n<p><strong>用集合的匹配元素替换每个目标元素。<code>.replaceAll()</code>和<code>.replaceWith()</code>功能类似，但是目标和源相反</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).replaceAll(<span class=\"string\">\"#row1 img\"</span>);   <span class=\"comment\">//这里使用&lt;img src='lily.png'&gt;替换所有的img元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h2><blockquote>\n<p><strong>将匹配元素集合从<code>DOM</code>中删除,并且同时移除元素上的事件及 <code>jQuery</code> 数据</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).remove(<span class=\"string\">\":has(img[src*=rose])\"</span>);  <span class=\"comment\">//删除img</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell:first()\"</span>).remove();    <span class=\"comment\">//不带参数</span></div></pre></td></tr></table></figure>\n<h2 id=\"detach\"><a href=\"#detach\" class=\"headerlink\" title=\"detach\"></a>detach</h2><blockquote>\n<p><strong>从<code>DOM</code>中去掉所有匹配的元素,<code>.detach()</code> 方法和<code>.remove()</code>一样, 除了 <code>.detach()</code>保存所有<code>jQuery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).detach();</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).detach(<span class=\"string\">\":has(img[src*=rose])\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h2><blockquote>\n<p><strong>从<code>DOM</code>中移除集合中匹配元素的所有子节点。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;div.dcell:first&quot;).empty();   //删除所有的子节点</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://www.css88.com/jqapi-1.9/\" target=\"_blank\" rel=\"external\">JQuery中文文档</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"JQuery干货篇之插入元素\"><a href=\"#JQuery干货篇之插入元素\" class=\"headerlink\" title=\"JQuery干货篇之插入元素\"></a>JQuery干货篇之插入元素</h1><p><strong>本次使用的html,css还是我上一篇的源代码，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/\">上一篇文章</a></strong></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ol>\n<li><strong>插入子元素：<code>append</code>,<code>prepend</code> ,<code>appendTo</code>,<code>prependTo</code></strong></li>\n<li><strong>封装包裹元素：<code>wrap</code>,<code>wrapAll</code>,<code>wrapInner</code></strong></li>\n<li><strong>插入兄弟元素：<code>after</code>,<code>before</code>,<code>insertAfter</code>,<code>insertBefore</code></strong></li>\n<li><strong>替换元素：<code>replaceWith</code>,<code>replaceAll</code></strong></li>\n<li><strong>删除元素：<code>remove</code>,<code>deatch</code>,<code>unwrap</code>,<code>empty</code></strong></li>\n</ol>\n<h2 id=\"创建新元素\"><a href=\"#创建新元素\" class=\"headerlink\" title=\"创建新元素\"></a>创建新元素</h2><p><strong>通常在把新元素插入到<code>DOM</code>中的目标位置之前，要先创建一个新元素才能将它插入到指定位置</strong></p>\n<blockquote>\n<p><strong>使用<code>$</code>创建元素</strong></p>\n<blockquote>\n<p><code>$(&lt;div&gt;&lt;img src=&#39;rose.png&#39; alt=&#39;玫瑰&#39;&gt;&lt;/div&gt;)</code></p>\n</blockquote>\n</blockquote>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h2><blockquote>\n<p><strong>克隆元素，使用<code>clone</code>方法以已有的元素为模子生成新的元素，这个在后面的插入元素起到关键作用，如果在要引用html中的一个标签内容的话，不使用<code>clone</code>方法，那么就会将这段内容移动，因此这里使用<code>clone</code>会很方便，详细请看<code>append</code>的用法实例</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).clone();    <span class=\"comment\">//这里的clone方法必须是JQuery对象调用</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用DOM-API创建新元素\"><a href=\"#使用DOM-API创建新元素\" class=\"headerlink\" title=\"使用DOM API创建新元素\"></a>使用DOM API创建新元素</h2><blockquote>\n<p><strong><code>DOM API</code>是用<code>js</code>操作的，其实<code>jquery</code>在幕后悄悄的调用<code>DOM API</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> divElem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);    <span class=\"comment\">//创建一个div元素</span></div><div class=\"line\"> divElem.classList.add(<span class=\"string\">\"dcell\"</span>);       <span class=\"comment\">//为div添加class=dcell</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> imgElem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">imgElem.src=<span class=\"string\">\"lily.png\"</span>;</div><div class=\"line\"></div><div class=\"line\">divElem.appendChild(imgElem);   <span class=\"comment\">//在新创建的元素后面插入img</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> newElem=$(divElem);</div><div class=\"line\"></div><div class=\"line\">newElem.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"    \"</span>+elem.className);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append\"></a>append</h2><blockquote>\n<p><strong>把参数指定的元素插入到所有的<code>JQuery</code>内含元素内容末尾成为他们的最后一个子元素，形式有<code>append(html)</code>,<code>append(Jquery)</code>,<code>append(HTMLElements[])</code>，<code>append(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里使用append元素创建了一个div元素，在末尾插入元素成为div的子元素</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> newElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='lily.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='lily'&gt;Lily:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='lily' value='0' required&gt;\"</span>)</div><div class=\"line\">        .css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">        </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).append(orchildElems);   <span class=\"comment\">//在末尾插入数据，这里的参数是jquery对象</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).append(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(elem.id==<span class=\"string\">'row1'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> orchildElems;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.id=<span class=\"string\">'row2'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).last().append(orchildElem,newElems);   <span class=\"comment\">//在其中添加两个参数，插入的先后按照参数的先后位置，当然其中的参数个数没有限制</span></div></pre></td></tr></table></figure>\n<h2 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\"prepend\"></a>prepend</h2><blockquote>\n<p><strong>和<code>append</code>完全相反,向当前元素的前面插入<code>html</code>节点作为当前元素的子元素,形式有<code>prepen d(Jquery)</code>,<code>prepend(html)</code>,<code>prepend(htmlElemnts[])</code>,<code>prepend(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).prepend(orchildElems);    <span class=\"comment\">//将orchildElems插入到div.dcell的最前面，作为他的子元素</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).prepend(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>); <span class=\"comment\">//将参数html的内容插入到前面，作为子元素</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.drow\"</span>).append(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;     <span class=\"comment\">//参数是函数，index是索引，返回的内容就是要插入到前面的内容</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id == <span class=\"string\">'row1'</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> orchildElem;                <span class=\"comment\">//返回的对象可以是jquery对象，也可以是html标签，如：return \"&lt;img src='lily.png'&gt;</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id = <span class=\"string\">'row2'</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> newElems;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"appendTo\"><a href=\"#appendTo\" class=\"headerlink\" title=\"appendTo\"></a>appendTo</h2><blockquote>\n<p><strong><code>appendTo</code>是和<code>append</code>一样的函数，都是将指定的元素插入到指定元素的前面作为子元素，但是他们的参数就不同了，<code>append</code>是将指定的参数插入到当前调用它的的结果集中，而<code>appendTo</code>是将当前调用它的结果集插入到指定的参数中，主要的形式有<code>appendTo(jquery)</code>,<code>append(HTMLELments[])</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).appendTo($(<span class=\"string\">\"img\"</span>).last().parent());   <span class=\"comment\">//将图片插入到最后一个dcell中，这里参数是目标位置，开头调用的时想要插入的内容</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img:first\"</span>).clone().appendTo($(<span class=\"string\">\"img\"</span>).last().parent()); <span class=\"comment\">//选择第一个图片插入到最后一个dcell中，这里必须用clone，否则就会将这张图片移到目标位置</span></div><div class=\"line\"></div><div class=\"line\"> $($(<span class=\"string\">\"div.dcell\"</span>).html()).appendTo($(<span class=\"string\">\"img\"</span>).last().parent());   <span class=\"comment\">//这里的.html()是获取html文本内容</span></div></pre></td></tr></table></figure>\n<h2 id=\"prependTo\"><a href=\"#prependTo\" class=\"headerlink\" title=\"prependTo\"></a>prependTo</h2><blockquote>\n<p><strong><code>.prepend()</code>和<code>.prependTo()</code>实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 <code>.prepend()</code> 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 <code>.prependTo()</code> 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。</strong></p>\n</blockquote>\n<h2 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h2><blockquote>\n<p><strong>在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。形式有<code>after(content[content,])</code>,<code>after(function())</code>,这里的<code>content</code>内容有HTML字符串，<code>DOM</code> 元素，文本节点，元素和文本节点的数组，或者<code>jQuery</code>对象，用来插入到集合中每个匹配元素的后面</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"keyword\">var</span> orchildElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='orchid.png'/&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;\"</span>)</div><div class=\"line\">        .append(<span class=\"string\">\"&lt;input name='orchild' value='0' required&gt;\"</span>);     <span class=\"comment\">//创建一个dcell内容</span></div><div class=\"line\">        </div><div class=\"line\">    </div><div class=\"line\">        $(<span class=\"string\">\"div.dcell\"</span>).after(orchildElems);   <span class=\"comment\">//插入元素作为兄弟元素，在当前元素的后面</span></div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">\"#row1 div.dcell\"</span>).after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, html</span>) </span>&#123;    <span class=\"comment\">//index表示索引，html表示原来的html文本，指的是没有插入之前的html</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(html);</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> orchildElem;        <span class=\"comment\">//返回的可以是jquery对象，html文本</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index == <span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h2><blockquote>\n<p><strong>根据参数设定，在匹配元素的前面插入内容,形式和<code>after</code>一样，内容也差不多</strong></p>\n</blockquote>\n<h2 id=\"insertBefore\"><a href=\"#insertBefore\" class=\"headerlink\" title=\"insertBefore\"></a>insertBefore</h2><blockquote>\n<p><strong>和<code>prependTo</code>的用法差不多，只是参数是要插入的目标位置，作为兄弟元素插入</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">orchildElems.clone().insertBefore(<span class=\"string\">\"#row2 div.dcell\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"insertAfter\"><a href=\"#insertAfter\" class=\"headerlink\" title=\"insertAfter\"></a>insertAfter</h2><blockquote>\n<p><strong>和<code>append</code>用法差不多，只是参数是要插入的目标位置，这里的也是作为兄弟元素插入的</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">orchildElems.insertAfter(<span class=\"string\">\"#row1 div.dcell\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a>wrap</h2><blockquote>\n<p><strong>在集合中匹配的每个元素周围包裹一个<code>HTML</code>结构，将会作为父元素存在。形式为<code>wrap(html)</code>,<code>wrap(jquery)</code>,<code>wrap(HtmlElements[])</code>,<code>wrap(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div=$(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">    $(<span class=\"string\">\"div.drow\"</span>).wrap(div);     <span class=\"comment\">//在drow外层添加了一个div将作为父元素，可以看到现在的源代码变成了&lt;div style...&gt;&lt;div class='drow'&gt;...&lt;/div&gt;&lt;/div&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"string\">\".drow\"</span>).wrap(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;   <span class=\"comment\">//index是索引</span></div><div class=\"line\">    <span class=\"comment\">//if($(this).has(\"img[src*=astor]\").length&gt;0)</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> div;      <span class=\"comment\">//只在第一个drow中添加父元素div</span></div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span> $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double blue'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"unwrap\"><a href=\"#unwrap\" class=\"headerlink\" title=\"unwrap\"></a>unwrap</h2><blockquote>\n<p><strong>将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。形式为<code>unwrap()</code>,<code>unwrap(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">  $(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).first().unwrap();   <span class=\"comment\">//这里将第一个img元素的父级元素删除，并且保留了其中的子元素</span></div><div class=\"line\">  </div><div class=\"line\">  $(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).unwrap(<span class=\"string\">\":first\"</span>);   <span class=\"comment\">//这里使用参数来筛选要删除父级元素的当前元素，这里选择第一个元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"wrapAll\"><a href=\"#wrapAll\" class=\"headerlink\" title=\"wrapAll\"></a>wrapAll</h2><blockquote>\n<p><strong>在集合中所有匹配元素的外面包裹一个HTML结构,也就是为结果集中的所有元素都设置了一个相同的父级元素来包裹所有的元素，形式为<code>wrapAll(html)</code>,<code>wrapAll(jquery)</code>,<code>wrapAll(htmlElements[])</code>,<code>wrapAll(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.drow\"</span>).wrapAll(div);    <span class=\"comment\">//这里的div成为了他共有的父级元素，原来的父级元素变成了祖先元素了</span></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).wrapAll(div);  <span class=\"comment\">//这里的img没有共同的父元素，那么就会强制的将所有的元素拉在一起为他们设置一个父级元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"wrapInner\"><a href=\"#wrapInner\" class=\"headerlink\" title=\"wrapInner\"></a>wrapInner</h2><blockquote>\n<p><strong>在匹配元素里的内容外包一层结构,也就是为匹配元素的后代元素添加一个父级元素，但是这个父级元素是匹配元素的子代元素，也就是原来的匹配元素变成了祖先元素，形式为<code>wrapInner(html)</code>,<code>wrapInner(jquery)</code>,<code>wrapInner(htmlElements)</code>,<code>wrapInner(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick double red'</span>);</div><div class=\"line\">$(<span class=\"string\">\".dcell\"</span>).wrapInner(div);    <span class=\"comment\">//这里的dcell元素将会变成祖先元素，而div将会变成内部后代元素新的父级元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"replaceWith\"><a href=\"#replaceWith\" class=\"headerlink\" title=\"replaceWith\"></a>replaceWith</h2><blockquote>\n<p><strong>用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合,形式为<code>replace(html)</code>,<code>replaceWith(jquery)</code>,<code>replaceWith(function())</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> newElems = $(<span class=\"string\">\"&lt;div class='dcell'&gt;&lt;/div&gt;\"</span>).append(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>)</div><div class=\"line\"> .append(<span class=\"string\">\"&lt;label for='lily'&gt;Lily&lt;/label&gt;\"</span>).append(<span class=\"string\">\"&lt;input name='lily' value='0' required&gt;\"</span>).css(<span class=\"string\">\"border\"</span>, <span class=\"string\">'thick   double blue'</span>);</div><div class=\"line\">$(<span class=\"string\">\".dcell:first\"</span>).replaceWith(newElems);  <span class=\"comment\">//用newElems替换第一个dcell</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.drow img\"</span>).replaceWith(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.src.indexOf(<span class=\"string\">\"rose\"</span>) &gt; <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> $(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>); <span class=\"comment\">//返回的时替换的内容，可以是jquery或者html</span></div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.src.indexOf(<span class=\"string\">\"peony\"</span>) &gt; <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> newElems;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>.clone()).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double blue'</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"replaceAll\"><a href=\"#replaceAll\" class=\"headerlink\" title=\"replaceAll\"></a>replaceAll</h2><blockquote>\n<p><strong>用集合的匹配元素替换每个目标元素。<code>.replaceAll()</code>和<code>.replaceWith()</code>功能类似，但是目标和源相反</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"&lt;img src='lily.png'&gt;\"</span>).replaceAll(<span class=\"string\">\"#row1 img\"</span>);   <span class=\"comment\">//这里使用&lt;img src='lily.png'&gt;替换所有的img元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h2><blockquote>\n<p><strong>将匹配元素集合从<code>DOM</code>中删除,并且同时移除元素上的事件及 <code>jQuery</code> 数据</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).remove(<span class=\"string\">\":has(img[src*=rose])\"</span>);  <span class=\"comment\">//删除img</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell:first()\"</span>).remove();    <span class=\"comment\">//不带参数</span></div></pre></td></tr></table></figure>\n<h2 id=\"detach\"><a href=\"#detach\" class=\"headerlink\" title=\"detach\"></a>detach</h2><blockquote>\n<p><strong>从<code>DOM</code>中去掉所有匹配的元素,<code>.detach()</code> 方法和<code>.remove()</code>一样, 除了 <code>.detach()</code>保存所有<code>jQuery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).detach();</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).detach(<span class=\"string\">\":has(img[src*=rose])\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h2><blockquote>\n<p><strong>从<code>DOM</code>中移除集合中匹配元素的所有子节点。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;div.dcell:first&quot;).empty();   //删除所有的子节点</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://www.css88.com/jqapi-1.9/\">JQuery中文文档</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"JQuery干货篇之选择元素","date":"2017-04-20T06:55:07.000Z","_content":"# JQuery 干货篇之选择元素\n\n\n## 实验的HTML+CSS的代码\n\n>**html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n    <script src=\"jquery-3.2.1.min.js\" type=\"text/javascript\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"/>\n    <script src=\"main.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n<h1>Jacqui's Flower Shop</h1>\n<form method=\"post\">\n    <div id=\"oblock\">\n        <div class=\"dtable\">\n            <div id=\"row1\" class=\"drow\">\n                <div class=\"dcell\">\n                    <img src=\"astor.png\"/><label for=\"astor\">Astor:</label>\n                    <input name=\"astor\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"daffodil.png\"/><label for=\"daffodil\">Daffodil:</label>\n                    <input name=\"daffodil\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"rose.png\"/><label for=\"rose\">Rose:</label>\n                    <input name=\"rose\" value=\"0\" required>\n                </div>\n            </div>\n            <div id=\"row2\" class=\"drow\">\n                <div class=\"dcell\">\n                    <img src=\"peony.png\"/><label for=\"peony\">Peony:</label>\n                    <input name=\"peony\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"primula.png\"/><label for=\"primula\">Primula:</label>\n                    <input name=\"primula\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"snowdrop.png\"/><label for=\"snowdrop\">Snowdrop:</label>\n                    <input name=\"snowdrop\" value=\"0\" required>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id=\"buttonDiv\">\n        <button type=\"submit\">Place Order</button>\n    </div>\n</form>\n</body>\n</html>\n\n```\n\n>**css**\n\n```css\nh1 {\n    min-width: 70px;\n    border: thick double black;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: center;\n    font-size: x-large;\n    padding: .5em;\n    color: darkgreen;\n    background-image: url(\"border.png\");\n    background-size: contain;\n    margin-top: 0;\n}\n\n.dtable {\n    display: table;\n}\n\n.drow {\n    display: table-row;\n}\n\n.dcell {\n    display: table-cell;\n    padding: 10px;\n}\n\n.dcell > * {\n    vertical-align: middle\n}\n\ninput {\n    width: 2em;\n    text-align: right;\n    border: thin solid black;\n    padding: 2px;\n}\n\nlabel {\n    width: 5em;\n    padding-left: .5em;\n    display: inline-block;\n}\n\n#buttonDiv {\n    text-align: center;\n}\n\n#oblock {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    min-width: 700px;\n}\n\n.hover{\n    background: blue;\n    color: white;\n    height:300px;\n    width:300px;\n}\n```\n\n## 选择器\n>* `:animated` :选择正在处理动画的元素\n>* `:first`    :选择第一个元素\n>* `:last`     :选择最后一个元素\n>* `:eq(n)`    :选择第n个元素(从0开始)\n>* `:even `    :选择序号为偶数的元素\n>* `:odd`      :选择序号为奇数的元素\n>* `:gt(n)`    :选择序号**大于**n的元素\n>* `:lt(n)`    :选择序号小于n的元素\n>* `:text`     :选择所有的文本输入框\n>* `:contains(text)`   :选择包含指定文本的元素\n>* `file`     :选择所有文件上传输入框\n>* `:button`   :选择所有的按钮\n>* `:checkbox`  :选择所有的复选框\n>* `:hidden`     :选择隐藏的元素\n\n\n>**实例**\n>>`$(\"img:odd\").css(\"border\",\"thick double red\");`选择序号为奇数的`img`元素\n>> `$(\"img:first\").css(\"border\",\"thick double red\")`  选择第一个`img`元素\n\n## JQuery对象的方法\n\n>* `context` 选择元素时使用的上下文对象\n\n>> `$(\"img:odd\").context.TagName;`\n\n>* `each(function())` 在每个选中的元素上运行给定的函数\n\n```javascript\n\t$(\"img\").each(function(index,elem){\n\tconsole.log(ele.TagName+\"   \"+elem.id);//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象\n})\n```\n\n>* index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引\n\n>>`$(\"img\").index(\"img[src=*astor]\")` \n\n\n>* length || size()  返回的时jquery对象个数\n\n>>`$(\"img:odd\").length`\n\n>* toArray()  返回一个有jquery对象中包含的htmlEelments数组\n\n>>`var content=$(\"img:odd\").toArray()`  这里content返回的htmlElements数组\n\n\n\n\n## 把jquery当成数组\n\n```javascript\nvar content=$(\"img:odd\");\nfor(var i=0;i<content.length;i++)\n{\n    console.log(content[i].TagName+\"    \"+content[i].src);    //这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了\n}\n```\n\n## add\n>**`add`函数允许我们添加更多的项，常用的有`add(htmlElement[])`,`add(selector)`,`add(jquery)`**\n\n>**实例：**\n\n```javascript\n$(\"img:odd\").add(\"img:even\").css(\"border\",'thick double red');\n\nvar jq=$(\"img[src*=astor]\");\n$(\"img:even\").add(jq).add(\"img:even\").css(\"border\",'thick double red');\n\nvar label=document.getElementsByTagName(\"label\");\n$(\"img:odd\").add(label).css(\"border\",\"thick double red\");\n```\n\n\n## slice()\n>**用来获取特定的一组子元素**\n\n>**实例：**\n\n```javascript\n $(\"img\").slice(0,3).css(\"border\",\"thick double red\");   //获取0-2的元素\n \n  $(\"img\").slice(3).css(\"border\",\"thick double red\");   //获取3-结束\n \n \n```\n\n\n## filter\n>**filter可以将不满足指定条件的元素剔除，常用的方法有`filter(jquery)`,`filter(htmlElement)`,`filter(function(index))`,`filter(selector)`**\n\n>**实例**\n\n```javascript\n   //这里填入的参数selector\n $(\"label\").filter(\"[for*=p]\").css(\"background-color\",'blue').css(\"font-size\",'20px').css(\"border\",\"2px solid red\");\n     \n      $(\"img\").filter(function (index) {     //index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素\n        if(index==4)\n        {\n            return true;\n        }\n        else return false;\n    }).css(\"border\",'thick double red');\n    \n    \n    var elem=document.getElementsByTagName(\"label\")[1];    //只选择第二个label\n    $(\"label\").filter(elem).css(\"font-size\",'30px')     //这里填入的参数是htmlElement对象\n \n \n```\n\n## not\n>**`not`方法是`filter`方法的补充，主要是删除匹配条件的元素，而`filter`则是保留满足匹配条件的元素，常用的方法有`not(selector)`,`not(htmlElement)`,`not(jquery)`,`not(function(index))`**\n\n>**实例：**\n\n```javascript\n $(\"label\").not(\"[for*=p]\").css(\"background-color\",'red');    //选择for不带p的label元素\n\n    $(\"label\").not(function (index) {   //哪个元素返回true就删除，false保留\n        if(index==0)\n            return true;      //这里就会删除第一个label元素，保留后面的元素\n        else\n            return false;\n\n    }).css(\"background-color\",\"yellow\");\n```\n\n## has\n>**选择拥有指定后代的选择器**\n\n>**实例：**\n```javascript\n    $(\"div.dcell\").has(\"img[src*=astor]\").css(\"border\",\"thick double red\");  //选择子代拥有img属性src带有astor的div.dcell元素\n    \n    var s=$(\"[for*=astor]\");\n    $(\"div.dcell\").has(s).css(\"border\",\"thick double red\");   //参数为jquery对象\n\n```\n\n## map\n>**以一个函数为参数，map方法能够帮助我们灵活的处理一个`jquery`对象，从而得到满足需要的一个`jquery`对象。针对源`jquery`对象中的每一个元素都调用一次这个函数，而函数返回的`HtmlElement`对象将会变成一个`jquery`对象，参数是`function(index,elem)`,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").map(function(index,elem){\n    return elem.getElementsByTagName(\"img\")[0];   //这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素\n}).css(\"border\",'thick double red');      //可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css\n\n\n$(\"img\").map(function(index,elem){\n    if(index==1)\n    return elem;   //返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象\n\n}).css(\"border\",'thick double red');      //可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css\n\n```\n\n## is\n>**`is`方法确定`jquery`对象中的某个或者某些元素是否满足测试条件，其中的形式有`is(selector)`,`is(HtmlElement)`,`is(jquery)`,`is(function(index))`如果结果集中至少有一个元素匹配指定的条件，那么就返回`true`,否则`false`**\n\n>**实例：**\n```javascript\nconsole.log($(\"img\").is(\"[src*=astor]\"));//这里是判断img中的src属性有没有astor字段的，如果存在返回true\n\n$(\"img\").is(function(index){\n\n})\n\n\nvar c=$(\"img\").is(function (index) {    //函数中如果至少有一个返回true，那么就会返回true，index是索引\n        return this.getAttribute('src')=='rose.png';   //判断属性\n    });\n    console.log(c);\n\n```\n\n## end\n\n>**当我们调用方法链来修改结果集的时候，`jquery`维护者一个历史结果集的查找，我们可以利用`end`回退到历史的结果集中,`end`用来扔掉当前的结果集，返回到上一层结果集**\n\n>**实例：**\n\n```javascript\n$(\"img\").filter(\"[src*=astor]\").end().css(\"border\",'thick double red');   //这里回退到$(\"img\")这个结果集中\n\n\n$(\"div.dcell\").find(\"img\").filter(\":odd\").filter(\":eq(0)\").end().end().css(\"border\",'thick double red'); //这里调用了两个end将结果集回退到$(\"div.dcell\").find(\"img\")中\n```\n\n## addBack\n>**得到当前结果集和上一个结果集的合集**\n\n>>**实例**\n\n```javascript\n$(\"div.dcell\").children(\"img\").addBack().css(\"border\",'thick double red');//这里得到的是$(\"div.dcell\")和$(\"div.dcell\").children(\"img\")的合集，并且应用css\n\n$(\"img\").slice(0,3).filter(\"[src*=astor]\").addBack().css(\"border\",'thick double red');//$(\"img\").slice(0,3)和$(\"img\").slice(0,3).filter(\"[src*=astor]\")的合集\n\n//这里的选择器参数过滤的是原结果集，相当于$(\"img\").slice(0,3).filter(\"[src*=daff]\")，\n$(\"img\").slice(0,3).filter(\"[src*=astor]\").addBack(\"[src*=daff]\").css(\"border\",'thick double red');\n\n```\n\n\n## children\n>**`children`是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足`selector`的子元素**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").children().css(\"border\",'thick double red');//得到所有div.dcell的子元素，包括其中的img和input元素\n\n$(\"div.dcell\").children(\"img\").css(\"border\",'thick double red');//得到所有子元素中的img元素\n```\n\n## find\n>**`find`是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有`find()`,`find(selector)`,`find(htmlElement)`,`find(jquery)`,`find(htmlElment[])`，这里会自动去掉含有重复的元素，因此可以用来过滤元素**\n\n\n>**实例**\n\n```javascript\n$(\"div.dcell\").find(\"img\");   //找到div.dcell的后代元素img\n\nvar content=document.getElementsByTagName(\"input\");\n$(\"div.dcell\").find(content).filter(\":first\").css(\"font-size\",'1.5em');//找到div.dcell后代元素中的input元素\n\n```\n\n\n## parent\n>**选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有`parent()`,`parent(selector)`**\n\n>**实例：**\n```javascript\n$(\"img\").parent();   //选取img的父元素\n\n$(\"img\").parent(\":first\");   //选取img父元素中的第一个元素\n```\n\n## parents\n>**选取祖先元素，包括父元素，形式有`parents()`,`parents(selector)`**\n\n>**实例：**\n```javascript\n$(\"img\").parents().each(function(index,elem){    //选取所有的祖先元素\n    console.log(elem.TagName+\"   \"+elem.id);\n})\n\n\n$(\"img\").parents(\"div.dcell\").css(\"border\",'thick double red');   //选择所有的div.dcell元素\n\n```\n\n\n## parentsUntil\n>**选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,`parentsUntil(selector)`,`parentsUntil(selector,selector)`，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止**\n\n>**实例：**\n\n```javascript\n    $(\"img\").parentsUntil(\"div.drow\");//找img的祖先元素，直到div.drow为止，不包括div.drow\n    \n     $(\"img\").parentsUntil(\"div.drow\",\":first\").css(\"border\",'thick double red');  //这里选择了结果集中的第一个元素应用了样式\n\n```\n\n\n## closest\n>**得到结果集中元素的祖先元素中匹配`selector`选择器最接近的那个祖先元素，形式为`closest(selector)`,`closest(selctor,context)`,`closest(htmlElemtent)`,`closest(jquery)`**\n\n>**实例：**\n\n```javascript\n\n$(\"img\").closest(\"div.drow\").each(function (index,elem) {   //选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系\n        console.log(elem.tagName+\"    \"+elem.id);\n    });\n    \n    \n    var jq=$(\"#row1,#row2,form\");   //传入jquery对象\n    $(\"img\").filter(\"[src*=astor]\").closest(jq).each(function (index,elem) {   //这里选取的是最接近第一张图的祖先元素，当然是<div id=\"row1\">\n        console.log(elem.tagName+\"   \"+elem.id);\n    })\n    \n```\n\n## offestParent\n>**得到距离最近的祖先定位元素，使用`fixed`,`absolute`,`relative`定位的元素，形式为`offestParent()`**\n\n\n## siblings\n>**得到所有的兄弟元素，可选的`selector`用来过滤结果，形式为`siblings()`,`siblings(selector)`**\n\n>**实例：**\n\n```javascript\n    $(\"img\").siblings().css(\"font-size\",'1.4em');// 得到img的所有兄弟元素，这里是input\n    \n    $(\"img\").siblings(\":last\");     //得到img所有兄弟元素中的最后一个元素\n```\n\n## prev\n>**得到上一个兄弟元素，形式为`prev()`,`prev(selector)`，其中的`selector`是用来过滤结果的**\n\n>**实例：**\n\n```javascript\n    $(\"input\").prev().css(\"border\",'thick double red');   //这里得到input的上一个元素Label元素\n\n```\n\n## prevAll\n>**得到当前元素的所有的上面的兄弟元素，形式为`prevALl()`,`prevAll(selector)`**\n\n>**实例：**\n\n```javascript\n$(\"input\").prevAll().css(\"border\",'thick double red');   //得到input上面的所有的兄弟元素\n\n$(\"input\").prev(\"img\").css(\"border\",'thick double red');   //得到input上面的所有的img元素\n```\n\n### prevUntil\n>**这个和parentsUntil一样，直到匹配`selector`就结束了，不包括**\n\n>**实例：**\n\n```javascript\n$(\"input\").prevUntil(\"i\").css(\"border\",'thick double red');\n```\n\n## next\n>**选择当前元素下面的一个兄弟元素，和`prev`一样**\n\n## nextAll\n>**选择当前元素下面的所有兄弟元素，和`prevAll`一样**\n\n## nextUntil\n>**和`prevUntil`一样**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/JQuery干货篇之选择元素.md","raw":"---\ntitle: JQuery干货篇之选择元素\ndate: 2017-04-20 14:55:07\ncategories: JQuery学习\ntags: JQuery\n---\n# JQuery 干货篇之选择元素\n\n\n## 实验的HTML+CSS的代码\n\n>**html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n    <script src=\"jquery-3.2.1.min.js\" type=\"text/javascript\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"/>\n    <script src=\"main.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n<h1>Jacqui's Flower Shop</h1>\n<form method=\"post\">\n    <div id=\"oblock\">\n        <div class=\"dtable\">\n            <div id=\"row1\" class=\"drow\">\n                <div class=\"dcell\">\n                    <img src=\"astor.png\"/><label for=\"astor\">Astor:</label>\n                    <input name=\"astor\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"daffodil.png\"/><label for=\"daffodil\">Daffodil:</label>\n                    <input name=\"daffodil\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"rose.png\"/><label for=\"rose\">Rose:</label>\n                    <input name=\"rose\" value=\"0\" required>\n                </div>\n            </div>\n            <div id=\"row2\" class=\"drow\">\n                <div class=\"dcell\">\n                    <img src=\"peony.png\"/><label for=\"peony\">Peony:</label>\n                    <input name=\"peony\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"primula.png\"/><label for=\"primula\">Primula:</label>\n                    <input name=\"primula\" value=\"0\" required>\n                </div>\n                <div class=\"dcell\">\n                    <img src=\"snowdrop.png\"/><label for=\"snowdrop\">Snowdrop:</label>\n                    <input name=\"snowdrop\" value=\"0\" required>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id=\"buttonDiv\">\n        <button type=\"submit\">Place Order</button>\n    </div>\n</form>\n</body>\n</html>\n\n```\n\n>**css**\n\n```css\nh1 {\n    min-width: 70px;\n    border: thick double black;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: center;\n    font-size: x-large;\n    padding: .5em;\n    color: darkgreen;\n    background-image: url(\"border.png\");\n    background-size: contain;\n    margin-top: 0;\n}\n\n.dtable {\n    display: table;\n}\n\n.drow {\n    display: table-row;\n}\n\n.dcell {\n    display: table-cell;\n    padding: 10px;\n}\n\n.dcell > * {\n    vertical-align: middle\n}\n\ninput {\n    width: 2em;\n    text-align: right;\n    border: thin solid black;\n    padding: 2px;\n}\n\nlabel {\n    width: 5em;\n    padding-left: .5em;\n    display: inline-block;\n}\n\n#buttonDiv {\n    text-align: center;\n}\n\n#oblock {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    min-width: 700px;\n}\n\n.hover{\n    background: blue;\n    color: white;\n    height:300px;\n    width:300px;\n}\n```\n\n## 选择器\n>* `:animated` :选择正在处理动画的元素\n>* `:first`    :选择第一个元素\n>* `:last`     :选择最后一个元素\n>* `:eq(n)`    :选择第n个元素(从0开始)\n>* `:even `    :选择序号为偶数的元素\n>* `:odd`      :选择序号为奇数的元素\n>* `:gt(n)`    :选择序号**大于**n的元素\n>* `:lt(n)`    :选择序号小于n的元素\n>* `:text`     :选择所有的文本输入框\n>* `:contains(text)`   :选择包含指定文本的元素\n>* `file`     :选择所有文件上传输入框\n>* `:button`   :选择所有的按钮\n>* `:checkbox`  :选择所有的复选框\n>* `:hidden`     :选择隐藏的元素\n\n\n>**实例**\n>>`$(\"img:odd\").css(\"border\",\"thick double red\");`选择序号为奇数的`img`元素\n>> `$(\"img:first\").css(\"border\",\"thick double red\")`  选择第一个`img`元素\n\n## JQuery对象的方法\n\n>* `context` 选择元素时使用的上下文对象\n\n>> `$(\"img:odd\").context.TagName;`\n\n>* `each(function())` 在每个选中的元素上运行给定的函数\n\n```javascript\n\t$(\"img\").each(function(index,elem){\n\tconsole.log(ele.TagName+\"   \"+elem.id);//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象\n})\n```\n\n>* index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引\n\n>>`$(\"img\").index(\"img[src=*astor]\")` \n\n\n>* length || size()  返回的时jquery对象个数\n\n>>`$(\"img:odd\").length`\n\n>* toArray()  返回一个有jquery对象中包含的htmlEelments数组\n\n>>`var content=$(\"img:odd\").toArray()`  这里content返回的htmlElements数组\n\n\n\n\n## 把jquery当成数组\n\n```javascript\nvar content=$(\"img:odd\");\nfor(var i=0;i<content.length;i++)\n{\n    console.log(content[i].TagName+\"    \"+content[i].src);    //这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了\n}\n```\n\n## add\n>**`add`函数允许我们添加更多的项，常用的有`add(htmlElement[])`,`add(selector)`,`add(jquery)`**\n\n>**实例：**\n\n```javascript\n$(\"img:odd\").add(\"img:even\").css(\"border\",'thick double red');\n\nvar jq=$(\"img[src*=astor]\");\n$(\"img:even\").add(jq).add(\"img:even\").css(\"border\",'thick double red');\n\nvar label=document.getElementsByTagName(\"label\");\n$(\"img:odd\").add(label).css(\"border\",\"thick double red\");\n```\n\n\n## slice()\n>**用来获取特定的一组子元素**\n\n>**实例：**\n\n```javascript\n $(\"img\").slice(0,3).css(\"border\",\"thick double red\");   //获取0-2的元素\n \n  $(\"img\").slice(3).css(\"border\",\"thick double red\");   //获取3-结束\n \n \n```\n\n\n## filter\n>**filter可以将不满足指定条件的元素剔除，常用的方法有`filter(jquery)`,`filter(htmlElement)`,`filter(function(index))`,`filter(selector)`**\n\n>**实例**\n\n```javascript\n   //这里填入的参数selector\n $(\"label\").filter(\"[for*=p]\").css(\"background-color\",'blue').css(\"font-size\",'20px').css(\"border\",\"2px solid red\");\n     \n      $(\"img\").filter(function (index) {     //index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素\n        if(index==4)\n        {\n            return true;\n        }\n        else return false;\n    }).css(\"border\",'thick double red');\n    \n    \n    var elem=document.getElementsByTagName(\"label\")[1];    //只选择第二个label\n    $(\"label\").filter(elem).css(\"font-size\",'30px')     //这里填入的参数是htmlElement对象\n \n \n```\n\n## not\n>**`not`方法是`filter`方法的补充，主要是删除匹配条件的元素，而`filter`则是保留满足匹配条件的元素，常用的方法有`not(selector)`,`not(htmlElement)`,`not(jquery)`,`not(function(index))`**\n\n>**实例：**\n\n```javascript\n $(\"label\").not(\"[for*=p]\").css(\"background-color\",'red');    //选择for不带p的label元素\n\n    $(\"label\").not(function (index) {   //哪个元素返回true就删除，false保留\n        if(index==0)\n            return true;      //这里就会删除第一个label元素，保留后面的元素\n        else\n            return false;\n\n    }).css(\"background-color\",\"yellow\");\n```\n\n## has\n>**选择拥有指定后代的选择器**\n\n>**实例：**\n```javascript\n    $(\"div.dcell\").has(\"img[src*=astor]\").css(\"border\",\"thick double red\");  //选择子代拥有img属性src带有astor的div.dcell元素\n    \n    var s=$(\"[for*=astor]\");\n    $(\"div.dcell\").has(s).css(\"border\",\"thick double red\");   //参数为jquery对象\n\n```\n\n## map\n>**以一个函数为参数，map方法能够帮助我们灵活的处理一个`jquery`对象，从而得到满足需要的一个`jquery`对象。针对源`jquery`对象中的每一个元素都调用一次这个函数，而函数返回的`HtmlElement`对象将会变成一个`jquery`对象，参数是`function(index,elem)`,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").map(function(index,elem){\n    return elem.getElementsByTagName(\"img\")[0];   //这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素\n}).css(\"border\",'thick double red');      //可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css\n\n\n$(\"img\").map(function(index,elem){\n    if(index==1)\n    return elem;   //返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象\n\n}).css(\"border\",'thick double red');      //可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css\n\n```\n\n## is\n>**`is`方法确定`jquery`对象中的某个或者某些元素是否满足测试条件，其中的形式有`is(selector)`,`is(HtmlElement)`,`is(jquery)`,`is(function(index))`如果结果集中至少有一个元素匹配指定的条件，那么就返回`true`,否则`false`**\n\n>**实例：**\n```javascript\nconsole.log($(\"img\").is(\"[src*=astor]\"));//这里是判断img中的src属性有没有astor字段的，如果存在返回true\n\n$(\"img\").is(function(index){\n\n})\n\n\nvar c=$(\"img\").is(function (index) {    //函数中如果至少有一个返回true，那么就会返回true，index是索引\n        return this.getAttribute('src')=='rose.png';   //判断属性\n    });\n    console.log(c);\n\n```\n\n## end\n\n>**当我们调用方法链来修改结果集的时候，`jquery`维护者一个历史结果集的查找，我们可以利用`end`回退到历史的结果集中,`end`用来扔掉当前的结果集，返回到上一层结果集**\n\n>**实例：**\n\n```javascript\n$(\"img\").filter(\"[src*=astor]\").end().css(\"border\",'thick double red');   //这里回退到$(\"img\")这个结果集中\n\n\n$(\"div.dcell\").find(\"img\").filter(\":odd\").filter(\":eq(0)\").end().end().css(\"border\",'thick double red'); //这里调用了两个end将结果集回退到$(\"div.dcell\").find(\"img\")中\n```\n\n## addBack\n>**得到当前结果集和上一个结果集的合集**\n\n>>**实例**\n\n```javascript\n$(\"div.dcell\").children(\"img\").addBack().css(\"border\",'thick double red');//这里得到的是$(\"div.dcell\")和$(\"div.dcell\").children(\"img\")的合集，并且应用css\n\n$(\"img\").slice(0,3).filter(\"[src*=astor]\").addBack().css(\"border\",'thick double red');//$(\"img\").slice(0,3)和$(\"img\").slice(0,3).filter(\"[src*=astor]\")的合集\n\n//这里的选择器参数过滤的是原结果集，相当于$(\"img\").slice(0,3).filter(\"[src*=daff]\")，\n$(\"img\").slice(0,3).filter(\"[src*=astor]\").addBack(\"[src*=daff]\").css(\"border\",'thick double red');\n\n```\n\n\n## children\n>**`children`是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足`selector`的子元素**\n\n>**实例：**\n\n```javascript\n$(\"div.dcell\").children().css(\"border\",'thick double red');//得到所有div.dcell的子元素，包括其中的img和input元素\n\n$(\"div.dcell\").children(\"img\").css(\"border\",'thick double red');//得到所有子元素中的img元素\n```\n\n## find\n>**`find`是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有`find()`,`find(selector)`,`find(htmlElement)`,`find(jquery)`,`find(htmlElment[])`，这里会自动去掉含有重复的元素，因此可以用来过滤元素**\n\n\n>**实例**\n\n```javascript\n$(\"div.dcell\").find(\"img\");   //找到div.dcell的后代元素img\n\nvar content=document.getElementsByTagName(\"input\");\n$(\"div.dcell\").find(content).filter(\":first\").css(\"font-size\",'1.5em');//找到div.dcell后代元素中的input元素\n\n```\n\n\n## parent\n>**选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有`parent()`,`parent(selector)`**\n\n>**实例：**\n```javascript\n$(\"img\").parent();   //选取img的父元素\n\n$(\"img\").parent(\":first\");   //选取img父元素中的第一个元素\n```\n\n## parents\n>**选取祖先元素，包括父元素，形式有`parents()`,`parents(selector)`**\n\n>**实例：**\n```javascript\n$(\"img\").parents().each(function(index,elem){    //选取所有的祖先元素\n    console.log(elem.TagName+\"   \"+elem.id);\n})\n\n\n$(\"img\").parents(\"div.dcell\").css(\"border\",'thick double red');   //选择所有的div.dcell元素\n\n```\n\n\n## parentsUntil\n>**选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,`parentsUntil(selector)`,`parentsUntil(selector,selector)`，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止**\n\n>**实例：**\n\n```javascript\n    $(\"img\").parentsUntil(\"div.drow\");//找img的祖先元素，直到div.drow为止，不包括div.drow\n    \n     $(\"img\").parentsUntil(\"div.drow\",\":first\").css(\"border\",'thick double red');  //这里选择了结果集中的第一个元素应用了样式\n\n```\n\n\n## closest\n>**得到结果集中元素的祖先元素中匹配`selector`选择器最接近的那个祖先元素，形式为`closest(selector)`,`closest(selctor,context)`,`closest(htmlElemtent)`,`closest(jquery)`**\n\n>**实例：**\n\n```javascript\n\n$(\"img\").closest(\"div.drow\").each(function (index,elem) {   //选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系\n        console.log(elem.tagName+\"    \"+elem.id);\n    });\n    \n    \n    var jq=$(\"#row1,#row2,form\");   //传入jquery对象\n    $(\"img\").filter(\"[src*=astor]\").closest(jq).each(function (index,elem) {   //这里选取的是最接近第一张图的祖先元素，当然是<div id=\"row1\">\n        console.log(elem.tagName+\"   \"+elem.id);\n    })\n    \n```\n\n## offestParent\n>**得到距离最近的祖先定位元素，使用`fixed`,`absolute`,`relative`定位的元素，形式为`offestParent()`**\n\n\n## siblings\n>**得到所有的兄弟元素，可选的`selector`用来过滤结果，形式为`siblings()`,`siblings(selector)`**\n\n>**实例：**\n\n```javascript\n    $(\"img\").siblings().css(\"font-size\",'1.4em');// 得到img的所有兄弟元素，这里是input\n    \n    $(\"img\").siblings(\":last\");     //得到img所有兄弟元素中的最后一个元素\n```\n\n## prev\n>**得到上一个兄弟元素，形式为`prev()`,`prev(selector)`，其中的`selector`是用来过滤结果的**\n\n>**实例：**\n\n```javascript\n    $(\"input\").prev().css(\"border\",'thick double red');   //这里得到input的上一个元素Label元素\n\n```\n\n## prevAll\n>**得到当前元素的所有的上面的兄弟元素，形式为`prevALl()`,`prevAll(selector)`**\n\n>**实例：**\n\n```javascript\n$(\"input\").prevAll().css(\"border\",'thick double red');   //得到input上面的所有的兄弟元素\n\n$(\"input\").prev(\"img\").css(\"border\",'thick double red');   //得到input上面的所有的img元素\n```\n\n### prevUntil\n>**这个和parentsUntil一样，直到匹配`selector`就结束了，不包括**\n\n>**实例：**\n\n```javascript\n$(\"input\").prevUntil(\"i\").css(\"border\",'thick double red');\n```\n\n## next\n>**选择当前元素下面的一个兄弟元素，和`prev`一样**\n\n## nextAll\n>**选择当前元素下面的所有兄弟元素，和`prevAll`一样**\n\n## nextUntil\n>**和`prevUntil`一样**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"JQuery干货篇之选择元素","published":1,"updated":"2017-04-20T07:02:07.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaw50008l0uz6fwao1he","content":"<h1 id=\"JQuery-干货篇之选择元素\"><a href=\"#JQuery-干货篇之选择元素\" class=\"headerlink\" title=\"JQuery 干货篇之选择元素\"></a>JQuery 干货篇之选择元素</h1><h2 id=\"实验的HTML-CSS的代码\"><a href=\"#实验的HTML-CSS的代码\" class=\"headerlink\" title=\"实验的HTML+CSS的代码\"></a>实验的HTML+CSS的代码</h2><blockquote>\n<p><strong>html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery-3.2.1.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Jacqui's Flower Shop<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"oblock\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dtable\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"row1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drow\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"astor.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"astor\"</span>&gt;</span>Astor:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"astor\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"daffodil.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"daffodil\"</span>&gt;</span>Daffodil:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"daffodil\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"rose.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rose\"</span>&gt;</span>Rose:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rose\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"row2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drow\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"peony.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"peony\"</span>&gt;</span>Peony:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"peony\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"primula.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"primula\"</span>&gt;</span>Primula:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"primula\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"snowdrop.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"snowdrop\"</span>&gt;</span>Snowdrop:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"snowdrop\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"buttonDiv\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Place Order<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>css</strong></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">70px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: thick double black;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: x-large;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: darkgreen;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"border.png\"</span>);</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dtable</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.drow</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-row;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dcell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dcell</span> &gt; * &#123;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: right;</div><div class=\"line\">    <span class=\"attribute\">border</span>: thin solid black;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: .<span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#buttonDiv</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#oblock</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">700px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.hover</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: blue;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><blockquote>\n<ul>\n<li><code>:animated</code> :选择正在处理动画的元素</li>\n<li><code>:first</code>    :选择第一个元素</li>\n<li><code>:last</code>     :选择最后一个元素</li>\n<li><code>:eq(n)</code>    :选择第n个元素(从0开始)</li>\n<li><code>:even</code>    :选择序号为偶数的元素</li>\n<li><code>:odd</code>      :选择序号为奇数的元素</li>\n<li><code>:gt(n)</code>    :选择序号<strong>大于</strong>n的元素</li>\n<li><code>:lt(n)</code>    :选择序号小于n的元素</li>\n<li><code>:text</code>     :选择所有的文本输入框</li>\n<li><code>:contains(text)</code>   :选择包含指定文本的元素</li>\n<li><code>file</code>     :选择所有文件上传输入框</li>\n<li><code>:button</code>   :选择所有的按钮</li>\n<li><code>:checkbox</code>  :选择所有的复选框</li>\n<li><code>:hidden</code>     :选择隐藏的元素</li>\n</ul>\n<p><strong>实例</strong></p>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).css(&quot;border&quot;,&quot;thick double red&quot;);</code>选择序号为奇数的<code>img</code>元素<br><code>$(&quot;img:first&quot;).css(&quot;border&quot;,&quot;thick double red&quot;)</code>  选择第一个<code>img</code>元素</p>\n</blockquote>\n</blockquote>\n<h2 id=\"JQuery对象的方法\"><a href=\"#JQuery对象的方法\" class=\"headerlink\" title=\"JQuery对象的方法\"></a>JQuery对象的方法</h2><blockquote>\n<ul>\n<li><code>context</code> 选择元素时使用的上下文对象</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).context.TagName;</code></p>\n</blockquote>\n<ul>\n<li><code>each(function())</code> 在每个选中的元素上运行给定的函数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t$(<span class=\"string\">\"img\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(ele.TagName+<span class=\"string\">\"   \"</span>+elem.id);<span class=\"comment\">//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img&quot;).index(&quot;img[src=*astor]&quot;)</code> </p>\n</blockquote>\n<ul>\n<li>length || size()  返回的时jquery对象个数</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).length</code></p>\n</blockquote>\n<ul>\n<li>toArray()  返回一个有jquery对象中包含的htmlEelments数组</li>\n</ul>\n<blockquote>\n<p><code>var content=$(&quot;img:odd&quot;).toArray()</code>  这里content返回的htmlElements数组</p>\n</blockquote>\n</blockquote>\n<h2 id=\"把jquery当成数组\"><a href=\"#把jquery当成数组\" class=\"headerlink\" title=\"把jquery当成数组\"></a>把jquery当成数组</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content=$(<span class=\"string\">\"img:odd\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;content.length;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(content[i].TagName+<span class=\"string\">\"    \"</span>+content[i].src);    <span class=\"comment\">//这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><blockquote>\n<p><strong><code>add</code>函数允许我们添加更多的项，常用的有<code>add(htmlElement[])</code>,<code>add(selector)</code>,<code>add(jquery)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:odd\"</span>).add(<span class=\"string\">\"img:even\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> jq=$(<span class=\"string\">\"img[src*=astor]\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"img:even\"</span>).add(jq).add(<span class=\"string\">\"img:even\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> label=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"label\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"img:odd\"</span>).add(label).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h2><blockquote>\n<p><strong>用来获取特定的一组子元素</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//获取0-2的元素</span></div><div class=\"line\"></div><div class=\"line\"> $(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">3</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//获取3-结束</span></div></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><blockquote>\n<p><strong>filter可以将不满足指定条件的元素剔除，常用的方法有<code>filter(jquery)</code>,<code>filter(htmlElement)</code>,<code>filter(function(index))</code>,<code>filter(selector)</code></strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//这里填入的参数selector</span></div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).filter(<span class=\"string\">\"[for*=p]\"</span>).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">'blue'</span>).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'20px'</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"2px solid red\"</span>);</div><div class=\"line\">    </div><div class=\"line\">     $(<span class=\"string\">\"img\"</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;     <span class=\"comment\">//index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(index==<span class=\"number\">4</span>)</div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">   &#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"label\"</span>)[<span class=\"number\">1</span>];    <span class=\"comment\">//只选择第二个label</span></div><div class=\"line\">   $(<span class=\"string\">\"label\"</span>).filter(elem).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'30px'</span>)     <span class=\"comment\">//这里填入的参数是htmlElement对象</span></div></pre></td></tr></table></figure>\n<h2 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a>not</h2><blockquote>\n<p><strong><code>not</code>方法是<code>filter</code>方法的补充，主要是删除匹配条件的元素，而<code>filter</code>则是保留满足匹配条件的元素，常用的方法有<code>not(selector)</code>,<code>not(htmlElement)</code>,<code>not(jquery)</code>,<code>not(function(index))</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"label\"</span>).not(<span class=\"string\">\"[for*=p]\"</span>).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">'red'</span>);    <span class=\"comment\">//选择for不带p的label元素</span></div><div class=\"line\"></div><div class=\"line\">   $(<span class=\"string\">\"label\"</span>).not(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;   <span class=\"comment\">//哪个元素返回true就删除，false保留</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//这里就会删除第一个label元素，保留后面的元素</span></div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">   &#125;).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">\"yellow\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has\"></a>has</h2><blockquote>\n<p><strong>选择拥有指定后代的选择器</strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).has(<span class=\"string\">\"img[src*=astor]\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);  <span class=\"comment\">//选择子代拥有img属性src带有astor的div.dcell元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s=$(<span class=\"string\">\"[for*=astor]\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).has(s).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//参数为jquery对象</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><blockquote>\n<p><strong>以一个函数为参数，map方法能够帮助我们灵活的处理一个<code>jquery</code>对象，从而得到满足需要的一个<code>jquery</code>对象。针对源<code>jquery</code>对象中的每一个元素都调用一次这个函数，而函数返回的<code>HtmlElement</code>对象将会变成一个<code>jquery</code>对象，参数是<code>function(index,elem)</code>,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> elem.getElementsByTagName(<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>];   <span class=\"comment\">//这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素</span></div><div class=\"line\">&#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);      <span class=\"comment\">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> elem;   <span class=\"comment\">//返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象</span></div><div class=\"line\"></div><div class=\"line\">&#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);      <span class=\"comment\">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div></pre></td></tr></table></figure>\n<h2 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h2><blockquote>\n<p><strong><code>is</code>方法确定<code>jquery</code>对象中的某个或者某些元素是否满足测试条件，其中的形式有<code>is(selector)</code>,<code>is(HtmlElement)</code>,<code>is(jquery)</code>,<code>is(function(index))</code>如果结果集中至少有一个元素匹配指定的条件，那么就返回<code>true</code>,否则<code>false</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"img\"</span>).is(<span class=\"string\">\"[src*=astor]\"</span>));<span class=\"comment\">//这里是判断img中的src属性有没有astor字段的，如果存在返回true</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).is(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c=$(<span class=\"string\">\"img\"</span>).is(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;    <span class=\"comment\">//函数中如果至少有一个返回true，那么就会返回true，index是索引</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAttribute(<span class=\"string\">'src'</span>)==<span class=\"string\">'rose.png'</span>;   <span class=\"comment\">//判断属性</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><blockquote>\n<p><strong>当我们调用方法链来修改结果集的时候，<code>jquery</code>维护者一个历史结果集的查找，我们可以利用<code>end</code>回退到历史的结果集中,<code>end</code>用来扔掉当前的结果集，返回到上一层结果集</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).end().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//这里回退到$(\"img\")这个结果集中</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":odd\"</span>).filter(<span class=\"string\">\":eq(0)\"</span>).end().end().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>); <span class=\"comment\">//这里调用了两个end将结果集回退到$(\"div.dcell\").find(\"img\")中</span></div></pre></td></tr></table></figure>\n<h2 id=\"addBack\"><a href=\"#addBack\" class=\"headerlink\" title=\"addBack\"></a>addBack</h2><blockquote>\n<p><strong>得到当前结果集和上一个结果集的合集</strong></p>\n<blockquote>\n<p><strong>实例</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).addBack().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//这里得到的是$(\"div.dcell\")和$(\"div.dcell\").children(\"img\")的合集，并且应用css</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).addBack().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//$(\"img\").slice(0,3)和$(\"img\").slice(0,3).filter(\"[src*=astor]\")的合集</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的选择器参数过滤的是原结果集，相当于$(\"img\").slice(0,3).filter(\"[src*=daff]\")，</span></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).addBack(<span class=\"string\">\"[src*=daff]\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h2><blockquote>\n<p><strong><code>children</code>是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足<code>selector</code>的子元素</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//得到所有div.dcell的子元素，包括其中的img和input元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//得到所有子元素中的img元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><blockquote>\n<p><strong><code>find</code>是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有<code>find()</code>,<code>find(selector)</code>,<code>find(htmlElement)</code>,<code>find(jquery)</code>,<code>find(htmlElment[])</code>，这里会自动去掉含有重复的元素，因此可以用来过滤元素</strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(<span class=\"string\">\"img\"</span>);   <span class=\"comment\">//找到div.dcell的后代元素img</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(content).filter(<span class=\"string\">\":first\"</span>).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'1.5em'</span>);<span class=\"comment\">//找到div.dcell后代元素中的input元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h2><blockquote>\n<p><strong>选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有<code>parent()</code>,<code>parent(selector)</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parent();   <span class=\"comment\">//选取img的父元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parent(<span class=\"string\">\":first\"</span>);   <span class=\"comment\">//选取img父元素中的第一个元素</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"parents\"><a href=\"#parents\" class=\"headerlink\" title=\"parents\"></a>parents</h2><blockquote>\n<p><strong>选取祖先元素，包括父元素，形式有<code>parents()</code>,<code>parents(selector)</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parents().each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;    <span class=\"comment\">//选取所有的祖先元素</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elem.TagName+<span class=\"string\">\"   \"</span>+elem.id);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parents(<span class=\"string\">\"div.dcell\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//选择所有的div.dcell元素</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"parentsUntil\"><a href=\"#parentsUntil\" class=\"headerlink\" title=\"parentsUntil\"></a>parentsUntil</h2><blockquote>\n<p><strong>选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,<code>parentsUntil(selector)</code>,<code>parentsUntil(selector,selector)</code>，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parentsUntil(<span class=\"string\">\"div.drow\"</span>);<span class=\"comment\">//找img的祖先元素，直到div.drow为止，不包括div.drow</span></div><div class=\"line\"></div><div class=\"line\"> $(<span class=\"string\">\"img\"</span>).parentsUntil(<span class=\"string\">\"div.drow\"</span>,<span class=\"string\">\":first\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);  <span class=\"comment\">//这里选择了结果集中的第一个元素应用了样式</span></div></pre></td></tr></table></figure>\n<h2 id=\"closest\"><a href=\"#closest\" class=\"headerlink\" title=\"closest\"></a>closest</h2><blockquote>\n<p><strong>得到结果集中元素的祖先元素中匹配<code>selector</code>选择器最接近的那个祖先元素，形式为<code>closest(selector)</code>,<code>closest(selctor,context)</code>,<code>closest(htmlElemtent)</code>,<code>closest(jquery)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).closest(<span class=\"string\">\"div.drow\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;   <span class=\"comment\">//选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"    \"</span>+elem.id);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> jq=$(<span class=\"string\">\"#row1,#row2,form\"</span>);   <span class=\"comment\">//传入jquery对象</span></div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).closest(jq).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;   <span class=\"comment\">//这里选取的是最接近第一张图的祖先元素，当然是&lt;div id=\"row1\"&gt;</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"   \"</span>+elem.id);</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"offestParent\"><a href=\"#offestParent\" class=\"headerlink\" title=\"offestParent\"></a>offestParent</h2><blockquote>\n<p><strong>得到距离最近的祖先定位元素，使用<code>fixed</code>,<code>absolute</code>,<code>relative</code>定位的元素，形式为<code>offestParent()</code></strong></p>\n</blockquote>\n<h2 id=\"siblings\"><a href=\"#siblings\" class=\"headerlink\" title=\"siblings\"></a>siblings</h2><blockquote>\n<p><strong>得到所有的兄弟元素，可选的<code>selector</code>用来过滤结果，形式为<code>siblings()</code>,<code>siblings(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).siblings().css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'1.4em'</span>);<span class=\"comment\">// 得到img的所有兄弟元素，这里是input</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).siblings(<span class=\"string\">\":last\"</span>);     <span class=\"comment\">//得到img所有兄弟元素中的最后一个元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\"prev\"></a>prev</h2><blockquote>\n<p><strong>得到上一个兄弟元素，形式为<code>prev()</code>,<code>prev(selector)</code>，其中的<code>selector</code>是用来过滤结果的</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prev().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//这里得到input的上一个元素Label元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"prevAll\"><a href=\"#prevAll\" class=\"headerlink\" title=\"prevAll\"></a>prevAll</h2><blockquote>\n<p><strong>得到当前元素的所有的上面的兄弟元素，形式为<code>prevALl()</code>,<code>prevAll(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prevAll().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//得到input上面的所有的兄弟元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prev(<span class=\"string\">\"img\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//得到input上面的所有的img元素</span></div></pre></td></tr></table></figure>\n<h3 id=\"prevUntil\"><a href=\"#prevUntil\" class=\"headerlink\" title=\"prevUntil\"></a>prevUntil</h3><blockquote>\n<p><strong>这个和parentsUntil一样，直到匹配<code>selector</code>就结束了，不包括</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prevUntil(<span class=\"string\">\"i\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next\"></a>next</h2><blockquote>\n<p><strong>选择当前元素下面的一个兄弟元素，和<code>prev</code>一样</strong></p>\n</blockquote>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><blockquote>\n<p><strong>选择当前元素下面的所有兄弟元素，和<code>prevAll</code>一样</strong></p>\n</blockquote>\n<h2 id=\"nextUntil\"><a href=\"#nextUntil\" class=\"headerlink\" title=\"nextUntil\"></a>nextUntil</h2><blockquote>\n<p><strong>和<code>prevUntil</code>一样</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"JQuery-干货篇之选择元素\"><a href=\"#JQuery-干货篇之选择元素\" class=\"headerlink\" title=\"JQuery 干货篇之选择元素\"></a>JQuery 干货篇之选择元素</h1><h2 id=\"实验的HTML-CSS的代码\"><a href=\"#实验的HTML-CSS的代码\" class=\"headerlink\" title=\"实验的HTML+CSS的代码\"></a>实验的HTML+CSS的代码</h2><blockquote>\n<p><strong>html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery-3.2.1.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Jacqui's Flower Shop<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"oblock\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dtable\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"row1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drow\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"astor.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"astor\"</span>&gt;</span>Astor:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"astor\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"daffodil.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"daffodil\"</span>&gt;</span>Daffodil:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"daffodil\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"rose.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rose\"</span>&gt;</span>Rose:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rose\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"row2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drow\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"peony.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"peony\"</span>&gt;</span>Peony:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"peony\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"primula.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"primula\"</span>&gt;</span>Primula:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"primula\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dcell\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"snowdrop.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"snowdrop\"</span>&gt;</span>Snowdrop:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"snowdrop\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"buttonDiv\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Place Order<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>css</strong></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">70px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: thick double black;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: x-large;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: darkgreen;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"border.png\"</span>);</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dtable</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.drow</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-row;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dcell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dcell</span> &gt; * &#123;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: right;</div><div class=\"line\">    <span class=\"attribute\">border</span>: thin solid black;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: .<span class=\"number\">5em</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#buttonDiv</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#oblock</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">700px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.hover</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: blue;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><blockquote>\n<ul>\n<li><code>:animated</code> :选择正在处理动画的元素</li>\n<li><code>:first</code>    :选择第一个元素</li>\n<li><code>:last</code>     :选择最后一个元素</li>\n<li><code>:eq(n)</code>    :选择第n个元素(从0开始)</li>\n<li><code>:even</code>    :选择序号为偶数的元素</li>\n<li><code>:odd</code>      :选择序号为奇数的元素</li>\n<li><code>:gt(n)</code>    :选择序号<strong>大于</strong>n的元素</li>\n<li><code>:lt(n)</code>    :选择序号小于n的元素</li>\n<li><code>:text</code>     :选择所有的文本输入框</li>\n<li><code>:contains(text)</code>   :选择包含指定文本的元素</li>\n<li><code>file</code>     :选择所有文件上传输入框</li>\n<li><code>:button</code>   :选择所有的按钮</li>\n<li><code>:checkbox</code>  :选择所有的复选框</li>\n<li><code>:hidden</code>     :选择隐藏的元素</li>\n</ul>\n<p><strong>实例</strong></p>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).css(&quot;border&quot;,&quot;thick double red&quot;);</code>选择序号为奇数的<code>img</code>元素<br><code>$(&quot;img:first&quot;).css(&quot;border&quot;,&quot;thick double red&quot;)</code>  选择第一个<code>img</code>元素</p>\n</blockquote>\n</blockquote>\n<h2 id=\"JQuery对象的方法\"><a href=\"#JQuery对象的方法\" class=\"headerlink\" title=\"JQuery对象的方法\"></a>JQuery对象的方法</h2><blockquote>\n<ul>\n<li><code>context</code> 选择元素时使用的上下文对象</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).context.TagName;</code></p>\n</blockquote>\n<ul>\n<li><code>each(function())</code> 在每个选中的元素上运行给定的函数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t$(<span class=\"string\">\"img\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(ele.TagName+<span class=\"string\">\"   \"</span>+elem.id);<span class=\"comment\">//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img&quot;).index(&quot;img[src=*astor]&quot;)</code> </p>\n</blockquote>\n<ul>\n<li>length || size()  返回的时jquery对象个数</li>\n</ul>\n<blockquote>\n<p><code>$(&quot;img:odd&quot;).length</code></p>\n</blockquote>\n<ul>\n<li>toArray()  返回一个有jquery对象中包含的htmlEelments数组</li>\n</ul>\n<blockquote>\n<p><code>var content=$(&quot;img:odd&quot;).toArray()</code>  这里content返回的htmlElements数组</p>\n</blockquote>\n</blockquote>\n<h2 id=\"把jquery当成数组\"><a href=\"#把jquery当成数组\" class=\"headerlink\" title=\"把jquery当成数组\"></a>把jquery当成数组</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content=$(<span class=\"string\">\"img:odd\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;content.length;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(content[i].TagName+<span class=\"string\">\"    \"</span>+content[i].src);    <span class=\"comment\">//这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><blockquote>\n<p><strong><code>add</code>函数允许我们添加更多的项，常用的有<code>add(htmlElement[])</code>,<code>add(selector)</code>,<code>add(jquery)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img:odd\"</span>).add(<span class=\"string\">\"img:even\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> jq=$(<span class=\"string\">\"img[src*=astor]\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"img:even\"</span>).add(jq).add(<span class=\"string\">\"img:even\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> label=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"label\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"img:odd\"</span>).add(label).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h2><blockquote>\n<p><strong>用来获取特定的一组子元素</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//获取0-2的元素</span></div><div class=\"line\"></div><div class=\"line\"> $(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">3</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//获取3-结束</span></div></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><blockquote>\n<p><strong>filter可以将不满足指定条件的元素剔除，常用的方法有<code>filter(jquery)</code>,<code>filter(htmlElement)</code>,<code>filter(function(index))</code>,<code>filter(selector)</code></strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//这里填入的参数selector</span></div><div class=\"line\">$(<span class=\"string\">\"label\"</span>).filter(<span class=\"string\">\"[for*=p]\"</span>).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">'blue'</span>).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'20px'</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"2px solid red\"</span>);</div><div class=\"line\">    </div><div class=\"line\">     $(<span class=\"string\">\"img\"</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;     <span class=\"comment\">//index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(index==<span class=\"number\">4</span>)</div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">   &#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"label\"</span>)[<span class=\"number\">1</span>];    <span class=\"comment\">//只选择第二个label</span></div><div class=\"line\">   $(<span class=\"string\">\"label\"</span>).filter(elem).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'30px'</span>)     <span class=\"comment\">//这里填入的参数是htmlElement对象</span></div></pre></td></tr></table></figure>\n<h2 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a>not</h2><blockquote>\n<p><strong><code>not</code>方法是<code>filter</code>方法的补充，主要是删除匹配条件的元素，而<code>filter</code>则是保留满足匹配条件的元素，常用的方法有<code>not(selector)</code>,<code>not(htmlElement)</code>,<code>not(jquery)</code>,<code>not(function(index))</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"label\"</span>).not(<span class=\"string\">\"[for*=p]\"</span>).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">'red'</span>);    <span class=\"comment\">//选择for不带p的label元素</span></div><div class=\"line\"></div><div class=\"line\">   $(<span class=\"string\">\"label\"</span>).not(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;   <span class=\"comment\">//哪个元素返回true就删除，false保留</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//这里就会删除第一个label元素，保留后面的元素</span></div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">   &#125;).css(<span class=\"string\">\"background-color\"</span>,<span class=\"string\">\"yellow\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has\"></a>has</h2><blockquote>\n<p><strong>选择拥有指定后代的选择器</strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).has(<span class=\"string\">\"img[src*=astor]\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);  <span class=\"comment\">//选择子代拥有img属性src带有astor的div.dcell元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s=$(<span class=\"string\">\"[for*=astor]\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).has(s).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">\"thick double red\"</span>);   <span class=\"comment\">//参数为jquery对象</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><blockquote>\n<p><strong>以一个函数为参数，map方法能够帮助我们灵活的处理一个<code>jquery</code>对象，从而得到满足需要的一个<code>jquery</code>对象。针对源<code>jquery</code>对象中的每一个元素都调用一次这个函数，而函数返回的<code>HtmlElement</code>对象将会变成一个<code>jquery</code>对象，参数是<code>function(index,elem)</code>,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> elem.getElementsByTagName(<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>];   <span class=\"comment\">//这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素</span></div><div class=\"line\">&#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);      <span class=\"comment\">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> elem;   <span class=\"comment\">//返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象</span></div><div class=\"line\"></div><div class=\"line\">&#125;).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);      <span class=\"comment\">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div></pre></td></tr></table></figure>\n<h2 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h2><blockquote>\n<p><strong><code>is</code>方法确定<code>jquery</code>对象中的某个或者某些元素是否满足测试条件，其中的形式有<code>is(selector)</code>,<code>is(HtmlElement)</code>,<code>is(jquery)</code>,<code>is(function(index))</code>如果结果集中至少有一个元素匹配指定的条件，那么就返回<code>true</code>,否则<code>false</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">\"img\"</span>).is(<span class=\"string\">\"[src*=astor]\"</span>));<span class=\"comment\">//这里是判断img中的src属性有没有astor字段的，如果存在返回true</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).is(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c=$(<span class=\"string\">\"img\"</span>).is(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;    <span class=\"comment\">//函数中如果至少有一个返回true，那么就会返回true，index是索引</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAttribute(<span class=\"string\">'src'</span>)==<span class=\"string\">'rose.png'</span>;   <span class=\"comment\">//判断属性</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><blockquote>\n<p><strong>当我们调用方法链来修改结果集的时候，<code>jquery</code>维护者一个历史结果集的查找，我们可以利用<code>end</code>回退到历史的结果集中,<code>end</code>用来扔掉当前的结果集，返回到上一层结果集</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).end().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//这里回退到$(\"img\")这个结果集中</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\":odd\"</span>).filter(<span class=\"string\">\":eq(0)\"</span>).end().end().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>); <span class=\"comment\">//这里调用了两个end将结果集回退到$(\"div.dcell\").find(\"img\")中</span></div></pre></td></tr></table></figure>\n<h2 id=\"addBack\"><a href=\"#addBack\" class=\"headerlink\" title=\"addBack\"></a>addBack</h2><blockquote>\n<p><strong>得到当前结果集和上一个结果集的合集</strong></p>\n<blockquote>\n<p><strong>实例</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).addBack().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//这里得到的是$(\"div.dcell\")和$(\"div.dcell\").children(\"img\")的合集，并且应用css</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).addBack().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//$(\"img\").slice(0,3)和$(\"img\").slice(0,3).filter(\"[src*=astor]\")的合集</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的选择器参数过滤的是原结果集，相当于$(\"img\").slice(0,3).filter(\"[src*=daff]\")，</span></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).addBack(<span class=\"string\">\"[src*=daff]\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h2><blockquote>\n<p><strong><code>children</code>是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足<code>selector</code>的子元素</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//得到所有div.dcell的子元素，包括其中的img和input元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).children(<span class=\"string\">\"img\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);<span class=\"comment\">//得到所有子元素中的img元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><blockquote>\n<p><strong><code>find</code>是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有<code>find()</code>,<code>find(selector)</code>,<code>find(htmlElement)</code>,<code>find(jquery)</code>,<code>find(htmlElment[])</code>，这里会自动去掉含有重复的元素，因此可以用来过滤元素</strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(<span class=\"string\">\"img\"</span>);   <span class=\"comment\">//找到div.dcell的后代元素img</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">$(<span class=\"string\">\"div.dcell\"</span>).find(content).filter(<span class=\"string\">\":first\"</span>).css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'1.5em'</span>);<span class=\"comment\">//找到div.dcell后代元素中的input元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h2><blockquote>\n<p><strong>选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有<code>parent()</code>,<code>parent(selector)</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parent();   <span class=\"comment\">//选取img的父元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parent(<span class=\"string\">\":first\"</span>);   <span class=\"comment\">//选取img父元素中的第一个元素</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"parents\"><a href=\"#parents\" class=\"headerlink\" title=\"parents\"></a>parents</h2><blockquote>\n<p><strong>选取祖先元素，包括父元素，形式有<code>parents()</code>,<code>parents(selector)</code></strong></p>\n<p><strong>实例：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parents().each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,elem</span>)</span>&#123;    <span class=\"comment\">//选取所有的祖先元素</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elem.TagName+<span class=\"string\">\"   \"</span>+elem.id);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parents(<span class=\"string\">\"div.dcell\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//选择所有的div.dcell元素</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"parentsUntil\"><a href=\"#parentsUntil\" class=\"headerlink\" title=\"parentsUntil\"></a>parentsUntil</h2><blockquote>\n<p><strong>选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,<code>parentsUntil(selector)</code>,<code>parentsUntil(selector,selector)</code>，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).parentsUntil(<span class=\"string\">\"div.drow\"</span>);<span class=\"comment\">//找img的祖先元素，直到div.drow为止，不包括div.drow</span></div><div class=\"line\"></div><div class=\"line\"> $(<span class=\"string\">\"img\"</span>).parentsUntil(<span class=\"string\">\"div.drow\"</span>,<span class=\"string\">\":first\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);  <span class=\"comment\">//这里选择了结果集中的第一个元素应用了样式</span></div></pre></td></tr></table></figure>\n<h2 id=\"closest\"><a href=\"#closest\" class=\"headerlink\" title=\"closest\"></a>closest</h2><blockquote>\n<p><strong>得到结果集中元素的祖先元素中匹配<code>selector</code>选择器最接近的那个祖先元素，形式为<code>closest(selector)</code>,<code>closest(selctor,context)</code>,<code>closest(htmlElemtent)</code>,<code>closest(jquery)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).closest(<span class=\"string\">\"div.drow\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;   <span class=\"comment\">//选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"    \"</span>+elem.id);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> jq=$(<span class=\"string\">\"#row1,#row2,form\"</span>);   <span class=\"comment\">//传入jquery对象</span></div><div class=\"line\">    $(<span class=\"string\">\"img\"</span>).filter(<span class=\"string\">\"[src*=astor]\"</span>).closest(jq).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index,elem</span>) </span>&#123;   <span class=\"comment\">//这里选取的是最接近第一张图的祖先元素，当然是&lt;div id=\"row1\"&gt;</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(elem.tagName+<span class=\"string\">\"   \"</span>+elem.id);</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"offestParent\"><a href=\"#offestParent\" class=\"headerlink\" title=\"offestParent\"></a>offestParent</h2><blockquote>\n<p><strong>得到距离最近的祖先定位元素，使用<code>fixed</code>,<code>absolute</code>,<code>relative</code>定位的元素，形式为<code>offestParent()</code></strong></p>\n</blockquote>\n<h2 id=\"siblings\"><a href=\"#siblings\" class=\"headerlink\" title=\"siblings\"></a>siblings</h2><blockquote>\n<p><strong>得到所有的兄弟元素，可选的<code>selector</code>用来过滤结果，形式为<code>siblings()</code>,<code>siblings(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"img\"</span>).siblings().css(<span class=\"string\">\"font-size\"</span>,<span class=\"string\">'1.4em'</span>);<span class=\"comment\">// 得到img的所有兄弟元素，这里是input</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).siblings(<span class=\"string\">\":last\"</span>);     <span class=\"comment\">//得到img所有兄弟元素中的最后一个元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\"prev\"></a>prev</h2><blockquote>\n<p><strong>得到上一个兄弟元素，形式为<code>prev()</code>,<code>prev(selector)</code>，其中的<code>selector</code>是用来过滤结果的</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prev().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//这里得到input的上一个元素Label元素</span></div></pre></td></tr></table></figure>\n<h2 id=\"prevAll\"><a href=\"#prevAll\" class=\"headerlink\" title=\"prevAll\"></a>prevAll</h2><blockquote>\n<p><strong>得到当前元素的所有的上面的兄弟元素，形式为<code>prevALl()</code>,<code>prevAll(selector)</code></strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prevAll().css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//得到input上面的所有的兄弟元素</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prev(<span class=\"string\">\"img\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);   <span class=\"comment\">//得到input上面的所有的img元素</span></div></pre></td></tr></table></figure>\n<h3 id=\"prevUntil\"><a href=\"#prevUntil\" class=\"headerlink\" title=\"prevUntil\"></a>prevUntil</h3><blockquote>\n<p><strong>这个和parentsUntil一样，直到匹配<code>selector</code>就结束了，不包括</strong></p>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input\"</span>).prevUntil(<span class=\"string\">\"i\"</span>).css(<span class=\"string\">\"border\"</span>,<span class=\"string\">'thick double red'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next\"></a>next</h2><blockquote>\n<p><strong>选择当前元素下面的一个兄弟元素，和<code>prev</code>一样</strong></p>\n</blockquote>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><blockquote>\n<p><strong>选择当前元素下面的所有兄弟元素，和<code>prevAll</code>一样</strong></p>\n</blockquote>\n<h2 id=\"nextUntil\"><a href=\"#nextUntil\" class=\"headerlink\" title=\"nextUntil\"></a>nextUntil</h2><blockquote>\n<p><strong>和<code>prevUntil</code>一样</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"Linux干货篇一","date":"2017-04-13T04:29:34.000Z","_content":"# Linux干货篇一\n## 虚拟机的安装(VMware)\n>1. **选择文件->新建虚拟机**\n>2. 选择**自定义**\n>1. 设置安装来源，选择**稍后安装**\n>1. 选择安装的操作系统，选择**Linux**,然后选择自己安装的对应版本即可\n>1. 设置虚拟机的安装路径，自己选择\n>1. 指定磁盘容量，选择默认20G,然后选择**将虚拟磁盘存储为单个文件**\n>1. 设置cpu数量，内存大小，默认即可\n>1. 设置Linux安装镜像文件路径\n>1. 点击开启虚拟机即可根据对应的设置安装\n\n## 目录文件\n>* `/boot`:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)\n>* `/bin`:存放可执行程序\n>* `/etc`:存放系统配置文件\n>* `/home`:普通用户的主目录所在位置\n>* `/lib`:存放基本的共享文件和内核模块\n>* `/mnt(mount)`:用户为需要挂载的文件系统提供挂载点\n>* `/proc(process)`:存放与内核进程有关的信息\n>* `/root`:根用户的主目录\n>* `/tmp(temporary)`:存放临时性文件\n>* `/usr(user)`:存放可共享的只读文件\n>* `/var(variable)`:存放各类的数据文件\n\n## ls\n#### 重要选项\n>* `-a(all)` 列出目录中的所有项，包括\".\"开头的隐藏文件\n>* `-l(list)` 以列表的方式显示文件\n>* `-R(recursive)`  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件\n>* `-d`仅仅列出目录本身的信息\n#### 实例\n>* `ls -al /etc`     以列表的方式列出ect目录下的所有文件\n\n\n## pwd   显示当前路径\n\n## cd(切换目录)\n>* `cd ..`   跳闸到当前目录的上一级\n>* `cd ~`    跳转到当前用户的主目录\n\n#### 例子\n> * `cd /tmp/testdir`   跳转到tmp文件下的testdir目录\n\n\n## stat\n>**获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。**\n\n\n#### 实例\n>* `stat test `    查看test文件的基本信息\n\n\n## touch\n>**创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件**\n\n#### 实例\n>* `touch /tmp/testdir/test`    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间\n\n\n## mkdir(创建目录)\n>* `mkdir /tmp/testdir/test_file`    在/tmp/testdir目录下创建一个test_file文件夹\n\n## mv\n>**移动或者重命名文件或目录**\n\n\n#### 重要选项\n>* `b(backup)`:若存在同名文件，覆盖前先备份原来的文件\n>* `f(force)`:强制覆盖同名的文件\n\n#### 实例\n```\nmkdir /tmp/testdir    //创建一个目录testdir\ntouch test1 test2     //创建两个文件test1  test2\nmv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~\n\nmv -b test1 /tmp/testdir1/test    //移动文件到指定目录下\n\n```\n\n\n## cp(copy)\n>**复制文件和目录**\n\n#### 选项\n>* `-b`: 若存在同名文件，覆盖前先备份\n>* `-f` :强制覆盖同名文件\n>* `-r` : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制\n\n#### 实例\n> * `cp /tmp/testdir tmp/testdir1`  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 ->  \n> * `cp -r /tmp/testdir /tmp/testdir1`   可以复制，复制到/tmp文件夹下命名为testdir1\n> * `cp -b /tmp/testdir/test1  /tmp/testdir1/test`    将文件test1复制到testdir1文件夹下命名为test\n\n## rm\n>**删除命令**\n\n#### 选项\n>* `-f` 强制删除\n>* `-r` 删除文件夹（递归删除）\n\n#### 实例\n> * `rm -rf /tmp/testdir`   强制删除testdir目录\n\n## rmdir \n> **删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r**\n\n## cat\n>**查看文件内容**\n\n#### 重要选项\n> * `-n` 显示行数\n\n#### 实例\n>* `cat -n /tmp/testdir/test`    查看文件test的内容，显示行数\n\n## more\n>**分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容**\n\n#### 实例\n> * `more /tmp/testdir/test`\n\n## tail\n>**显示文本文件结尾的部分，默认显示最后10行**\n\n#### 重要选项\n>* `-n` 指定显示的行数\n\n\n## head\n>**显示开头的内容，与`tail`类似**\n\n## wc\n>**一次显示文本文件的行数，单词数，字节数**\n\n#### 重要选项\n> * `-c`  显示文件字节数\n> * `-l(line)`   显示文件行数\n> * `-w(word)`   显示文件单词数\n\n#### 实例\n>* `wc -cl  /tmp/testdir/test`   查看文件的字数和文件的行数\n\n## date\n**查看或者修改系统命令**\n\n#### 实例\n>* `date`  查看系统时间\n>* `date 09012017`    修改系统时间为2017-09-01\n\n## who\n**列出当前系统的登录用户**\n\n#### 重要选项\n>* `-r` 显示系统当前的运行级\n>* `-q` 显示当前所有登录的用户名称和在线人数\n\n\n## shutdown\n**关闭重启系统**\n\n#### 重要选项\n>* `-r(reboot)`  重启系统\n>* `-h(halt)`   关闭系统\n>* `-P(poweroff)`  关闭系统同时关闭电源\n\n#### 注意\n**上面选项均可给出数字参数指定多少分钟之后执行操作**\n\n#### 实例\n>* `shutdown -h 10`    设置10分钟后关闭系统\n\n\n## clear\n**清楚当前终端的屏幕内容**\n\n## man\n**显示命令的使用手册，按上下键移动光标，Q键退出**\n\n#### 实例\n>* `man cat`     快速查询cat命令的手册\n\n## histroy\n**查看shell命令的历史记录**\n\n#### 实例\n>* `histroy 5`  显示最近的5条记录\n\n## vim\n**调用`vim`编辑器，按`i`键插入，`w`键保存，`q`键退出，`wq`保存后退出**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Linux干货篇一.md","raw":"---\ntitle: Linux干货篇一\ndate: 2017-04-13 12:29:34\ncategories: Linux\ntags: Linux\n---\n# Linux干货篇一\n## 虚拟机的安装(VMware)\n>1. **选择文件->新建虚拟机**\n>2. 选择**自定义**\n>1. 设置安装来源，选择**稍后安装**\n>1. 选择安装的操作系统，选择**Linux**,然后选择自己安装的对应版本即可\n>1. 设置虚拟机的安装路径，自己选择\n>1. 指定磁盘容量，选择默认20G,然后选择**将虚拟磁盘存储为单个文件**\n>1. 设置cpu数量，内存大小，默认即可\n>1. 设置Linux安装镜像文件路径\n>1. 点击开启虚拟机即可根据对应的设置安装\n\n## 目录文件\n>* `/boot`:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)\n>* `/bin`:存放可执行程序\n>* `/etc`:存放系统配置文件\n>* `/home`:普通用户的主目录所在位置\n>* `/lib`:存放基本的共享文件和内核模块\n>* `/mnt(mount)`:用户为需要挂载的文件系统提供挂载点\n>* `/proc(process)`:存放与内核进程有关的信息\n>* `/root`:根用户的主目录\n>* `/tmp(temporary)`:存放临时性文件\n>* `/usr(user)`:存放可共享的只读文件\n>* `/var(variable)`:存放各类的数据文件\n\n## ls\n#### 重要选项\n>* `-a(all)` 列出目录中的所有项，包括\".\"开头的隐藏文件\n>* `-l(list)` 以列表的方式显示文件\n>* `-R(recursive)`  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件\n>* `-d`仅仅列出目录本身的信息\n#### 实例\n>* `ls -al /etc`     以列表的方式列出ect目录下的所有文件\n\n\n## pwd   显示当前路径\n\n## cd(切换目录)\n>* `cd ..`   跳闸到当前目录的上一级\n>* `cd ~`    跳转到当前用户的主目录\n\n#### 例子\n> * `cd /tmp/testdir`   跳转到tmp文件下的testdir目录\n\n\n## stat\n>**获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。**\n\n\n#### 实例\n>* `stat test `    查看test文件的基本信息\n\n\n## touch\n>**创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件**\n\n#### 实例\n>* `touch /tmp/testdir/test`    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间\n\n\n## mkdir(创建目录)\n>* `mkdir /tmp/testdir/test_file`    在/tmp/testdir目录下创建一个test_file文件夹\n\n## mv\n>**移动或者重命名文件或目录**\n\n\n#### 重要选项\n>* `b(backup)`:若存在同名文件，覆盖前先备份原来的文件\n>* `f(force)`:强制覆盖同名的文件\n\n#### 实例\n```\nmkdir /tmp/testdir    //创建一个目录testdir\ntouch test1 test2     //创建两个文件test1  test2\nmv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~\n\nmv -b test1 /tmp/testdir1/test    //移动文件到指定目录下\n\n```\n\n\n## cp(copy)\n>**复制文件和目录**\n\n#### 选项\n>* `-b`: 若存在同名文件，覆盖前先备份\n>* `-f` :强制覆盖同名文件\n>* `-r` : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制\n\n#### 实例\n> * `cp /tmp/testdir tmp/testdir1`  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 ->  \n> * `cp -r /tmp/testdir /tmp/testdir1`   可以复制，复制到/tmp文件夹下命名为testdir1\n> * `cp -b /tmp/testdir/test1  /tmp/testdir1/test`    将文件test1复制到testdir1文件夹下命名为test\n\n## rm\n>**删除命令**\n\n#### 选项\n>* `-f` 强制删除\n>* `-r` 删除文件夹（递归删除）\n\n#### 实例\n> * `rm -rf /tmp/testdir`   强制删除testdir目录\n\n## rmdir \n> **删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r**\n\n## cat\n>**查看文件内容**\n\n#### 重要选项\n> * `-n` 显示行数\n\n#### 实例\n>* `cat -n /tmp/testdir/test`    查看文件test的内容，显示行数\n\n## more\n>**分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容**\n\n#### 实例\n> * `more /tmp/testdir/test`\n\n## tail\n>**显示文本文件结尾的部分，默认显示最后10行**\n\n#### 重要选项\n>* `-n` 指定显示的行数\n\n\n## head\n>**显示开头的内容，与`tail`类似**\n\n## wc\n>**一次显示文本文件的行数，单词数，字节数**\n\n#### 重要选项\n> * `-c`  显示文件字节数\n> * `-l(line)`   显示文件行数\n> * `-w(word)`   显示文件单词数\n\n#### 实例\n>* `wc -cl  /tmp/testdir/test`   查看文件的字数和文件的行数\n\n## date\n**查看或者修改系统命令**\n\n#### 实例\n>* `date`  查看系统时间\n>* `date 09012017`    修改系统时间为2017-09-01\n\n## who\n**列出当前系统的登录用户**\n\n#### 重要选项\n>* `-r` 显示系统当前的运行级\n>* `-q` 显示当前所有登录的用户名称和在线人数\n\n\n## shutdown\n**关闭重启系统**\n\n#### 重要选项\n>* `-r(reboot)`  重启系统\n>* `-h(halt)`   关闭系统\n>* `-P(poweroff)`  关闭系统同时关闭电源\n\n#### 注意\n**上面选项均可给出数字参数指定多少分钟之后执行操作**\n\n#### 实例\n>* `shutdown -h 10`    设置10分钟后关闭系统\n\n\n## clear\n**清楚当前终端的屏幕内容**\n\n## man\n**显示命令的使用手册，按上下键移动光标，Q键退出**\n\n#### 实例\n>* `man cat`     快速查询cat命令的手册\n\n## histroy\n**查看shell命令的历史记录**\n\n#### 实例\n>* `histroy 5`  显示最近的5条记录\n\n## vim\n**调用`vim`编辑器，按`i`键插入，`w`键保存，`q`键退出，`wq`保存后退出**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Linux干货篇一","published":1,"updated":"2017-04-13T04:32:08.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwawe000cl0uzbxhsw1mx","content":"<h1 id=\"Linux干货篇一\"><a href=\"#Linux干货篇一\" class=\"headerlink\" title=\"Linux干货篇一\"></a>Linux干货篇一</h1><h2 id=\"虚拟机的安装-VMware\"><a href=\"#虚拟机的安装-VMware\" class=\"headerlink\" title=\"虚拟机的安装(VMware)\"></a>虚拟机的安装(VMware)</h2><blockquote>\n<ol>\n<li><strong>选择文件-&gt;新建虚拟机</strong></li>\n<li>选择<strong>自定义</strong></li>\n<li>设置安装来源，选择<strong>稍后安装</strong></li>\n<li>选择安装的操作系统，选择<strong>Linux</strong>,然后选择自己安装的对应版本即可</li>\n<li>设置虚拟机的安装路径，自己选择</li>\n<li>指定磁盘容量，选择默认20G,然后选择<strong>将虚拟磁盘存储为单个文件</strong></li>\n<li>设置cpu数量，内存大小，默认即可</li>\n<li>设置Linux安装镜像文件路径</li>\n<li>点击开启虚拟机即可根据对应的设置安装</li>\n</ol>\n</blockquote>\n<h2 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h2><blockquote>\n<ul>\n<li><code>/boot</code>:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)</li>\n<li><code>/bin</code>:存放可执行程序</li>\n<li><code>/etc</code>:存放系统配置文件</li>\n<li><code>/home</code>:普通用户的主目录所在位置</li>\n<li><code>/lib</code>:存放基本的共享文件和内核模块</li>\n<li><code>/mnt(mount)</code>:用户为需要挂载的文件系统提供挂载点</li>\n<li><code>/proc(process)</code>:存放与内核进程有关的信息</li>\n<li><code>/root</code>:根用户的主目录</li>\n<li><code>/tmp(temporary)</code>:存放临时性文件</li>\n<li><code>/usr(user)</code>:存放可共享的只读文件</li>\n<li><code>/var(variable)</code>:存放各类的数据文件</li>\n</ul>\n</blockquote>\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><h4 id=\"重要选项\"><a href=\"#重要选项\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-a(all)</code> 列出目录中的所有项，包括”.”开头的隐藏文件</li>\n<li><code>-l(list)</code> 以列表的方式显示文件</li>\n<li><code>-R(recursive)</code>  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件</li>\n<li><code>-d</code>仅仅列出目录本身的信息<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4></li>\n<li><code>ls -al /etc</code>     以列表的方式列出ect目录下的所有文件</li>\n</ul>\n</blockquote>\n<h2 id=\"pwd-显示当前路径\"><a href=\"#pwd-显示当前路径\" class=\"headerlink\" title=\"pwd   显示当前路径\"></a>pwd   显示当前路径</h2><h2 id=\"cd-切换目录\"><a href=\"#cd-切换目录\" class=\"headerlink\" title=\"cd(切换目录)\"></a>cd(切换目录)</h2><blockquote>\n<ul>\n<li><code>cd ..</code>   跳闸到当前目录的上一级</li>\n<li><code>cd ~</code>    跳转到当前用户的主目录</li>\n</ul>\n</blockquote>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><blockquote>\n<ul>\n<li><code>cd /tmp/testdir</code>   跳转到tmp文件下的testdir目录</li>\n</ul>\n</blockquote>\n<h2 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h2><blockquote>\n<p><strong>获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。</strong></p>\n</blockquote>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>stat test</code>    查看test文件的基本信息</li>\n</ul>\n</blockquote>\n<h2 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h2><blockquote>\n<p><strong>创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件</strong></p>\n</blockquote>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>touch /tmp/testdir/test</code>    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间</li>\n</ul>\n</blockquote>\n<h2 id=\"mkdir-创建目录\"><a href=\"#mkdir-创建目录\" class=\"headerlink\" title=\"mkdir(创建目录)\"></a>mkdir(创建目录)</h2><blockquote>\n<ul>\n<li><code>mkdir /tmp/testdir/test_file</code>    在/tmp/testdir目录下创建一个test_file文件夹</li>\n</ul>\n</blockquote>\n<h2 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h2><blockquote>\n<p><strong>移动或者重命名文件或目录</strong></p>\n</blockquote>\n<h4 id=\"重要选项-1\"><a href=\"#重要选项-1\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>b(backup)</code>:若存在同名文件，覆盖前先备份原来的文件</li>\n<li><code>f(force)</code>:强制覆盖同名的文件</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /tmp/testdir    //创建一个目录testdir</div><div class=\"line\">touch test1 test2     //创建两个文件test1  test2</div><div class=\"line\">mv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~</div><div class=\"line\"></div><div class=\"line\">mv -b test1 /tmp/testdir1/test    //移动文件到指定目录下</div></pre></td></tr></table></figure>\n<h2 id=\"cp-copy\"><a href=\"#cp-copy\" class=\"headerlink\" title=\"cp(copy)\"></a>cp(copy)</h2><blockquote>\n<p><strong>复制文件和目录</strong></p>\n</blockquote>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><blockquote>\n<ul>\n<li><code>-b</code>: 若存在同名文件，覆盖前先备份</li>\n<li><code>-f</code> :强制覆盖同名文件</li>\n<li><code>-r</code> : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>cp /tmp/testdir tmp/testdir1</code>  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 -&gt;  </li>\n<li><code>cp -r /tmp/testdir /tmp/testdir1</code>   可以复制，复制到/tmp文件夹下命名为testdir1</li>\n<li><code>cp -b /tmp/testdir/test1  /tmp/testdir1/test</code>    将文件test1复制到testdir1文件夹下命名为test</li>\n</ul>\n</blockquote>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><blockquote>\n<p><strong>删除命令</strong></p>\n</blockquote>\n<h4 id=\"选项-1\"><a href=\"#选项-1\" class=\"headerlink\" title=\"选项\"></a>选项</h4><blockquote>\n<ul>\n<li><code>-f</code> 强制删除</li>\n<li><code>-r</code> 删除文件夹（递归删除）</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>rm -rf /tmp/testdir</code>   强制删除testdir目录</li>\n</ul>\n</blockquote>\n<h2 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h2><blockquote>\n<p><strong>删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r</strong></p>\n</blockquote>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h2><blockquote>\n<p><strong>查看文件内容</strong></p>\n</blockquote>\n<h4 id=\"重要选项-2\"><a href=\"#重要选项-2\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-n</code> 显示行数</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>cat -n /tmp/testdir/test</code>    查看文件test的内容，显示行数</li>\n</ul>\n</blockquote>\n<h2 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h2><blockquote>\n<p><strong>分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容</strong></p>\n</blockquote>\n<h4 id=\"实例-7\"><a href=\"#实例-7\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>more /tmp/testdir/test</code></li>\n</ul>\n</blockquote>\n<h2 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h2><blockquote>\n<p><strong>显示文本文件结尾的部分，默认显示最后10行</strong></p>\n</blockquote>\n<h4 id=\"重要选项-3\"><a href=\"#重要选项-3\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-n</code> 指定显示的行数</li>\n</ul>\n</blockquote>\n<h2 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h2><blockquote>\n<p><strong>显示开头的内容，与<code>tail</code>类似</strong></p>\n</blockquote>\n<h2 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h2><blockquote>\n<p><strong>一次显示文本文件的行数，单词数，字节数</strong></p>\n</blockquote>\n<h4 id=\"重要选项-4\"><a href=\"#重要选项-4\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-c</code>  显示文件字节数</li>\n<li><code>-l(line)</code>   显示文件行数</li>\n<li><code>-w(word)</code>   显示文件单词数</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-8\"><a href=\"#实例-8\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>wc -cl  /tmp/testdir/test</code>   查看文件的字数和文件的行数</li>\n</ul>\n</blockquote>\n<h2 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h2><p><strong>查看或者修改系统命令</strong></p>\n<h4 id=\"实例-9\"><a href=\"#实例-9\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>date</code>  查看系统时间</li>\n<li><code>date 09012017</code>    修改系统时间为2017-09-01</li>\n</ul>\n</blockquote>\n<h2 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h2><p><strong>列出当前系统的登录用户</strong></p>\n<h4 id=\"重要选项-5\"><a href=\"#重要选项-5\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-r</code> 显示系统当前的运行级</li>\n<li><code>-q</code> 显示当前所有登录的用户名称和在线人数</li>\n</ul>\n</blockquote>\n<h2 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h2><p><strong>关闭重启系统</strong></p>\n<h4 id=\"重要选项-6\"><a href=\"#重要选项-6\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-r(reboot)</code>  重启系统</li>\n<li><code>-h(halt)</code>   关闭系统</li>\n<li><code>-P(poweroff)</code>  关闭系统同时关闭电源</li>\n</ul>\n</blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><strong>上面选项均可给出数字参数指定多少分钟之后执行操作</strong></p>\n<h4 id=\"实例-10\"><a href=\"#实例-10\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>shutdown -h 10</code>    设置10分钟后关闭系统</li>\n</ul>\n</blockquote>\n<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h2><p><strong>清楚当前终端的屏幕内容</strong></p>\n<h2 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h2><p><strong>显示命令的使用手册，按上下键移动光标，Q键退出</strong></p>\n<h4 id=\"实例-11\"><a href=\"#实例-11\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>man cat</code>     快速查询cat命令的手册</li>\n</ul>\n</blockquote>\n<h2 id=\"histroy\"><a href=\"#histroy\" class=\"headerlink\" title=\"histroy\"></a>histroy</h2><p><strong>查看shell命令的历史记录</strong></p>\n<h4 id=\"实例-12\"><a href=\"#实例-12\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>histroy 5</code>  显示最近的5条记录</li>\n</ul>\n</blockquote>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><p><strong>调用<code>vim</code>编辑器，按<code>i</code>键插入，<code>w</code>键保存，<code>q</code>键退出，<code>wq</code>保存后退出</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Linux干货篇一\"><a href=\"#Linux干货篇一\" class=\"headerlink\" title=\"Linux干货篇一\"></a>Linux干货篇一</h1><h2 id=\"虚拟机的安装-VMware\"><a href=\"#虚拟机的安装-VMware\" class=\"headerlink\" title=\"虚拟机的安装(VMware)\"></a>虚拟机的安装(VMware)</h2><blockquote>\n<ol>\n<li><strong>选择文件-&gt;新建虚拟机</strong></li>\n<li>选择<strong>自定义</strong></li>\n<li>设置安装来源，选择<strong>稍后安装</strong></li>\n<li>选择安装的操作系统，选择<strong>Linux</strong>,然后选择自己安装的对应版本即可</li>\n<li>设置虚拟机的安装路径，自己选择</li>\n<li>指定磁盘容量，选择默认20G,然后选择<strong>将虚拟磁盘存储为单个文件</strong></li>\n<li>设置cpu数量，内存大小，默认即可</li>\n<li>设置Linux安装镜像文件路径</li>\n<li>点击开启虚拟机即可根据对应的设置安装</li>\n</ol>\n</blockquote>\n<h2 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h2><blockquote>\n<ul>\n<li><code>/boot</code>:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)</li>\n<li><code>/bin</code>:存放可执行程序</li>\n<li><code>/etc</code>:存放系统配置文件</li>\n<li><code>/home</code>:普通用户的主目录所在位置</li>\n<li><code>/lib</code>:存放基本的共享文件和内核模块</li>\n<li><code>/mnt(mount)</code>:用户为需要挂载的文件系统提供挂载点</li>\n<li><code>/proc(process)</code>:存放与内核进程有关的信息</li>\n<li><code>/root</code>:根用户的主目录</li>\n<li><code>/tmp(temporary)</code>:存放临时性文件</li>\n<li><code>/usr(user)</code>:存放可共享的只读文件</li>\n<li><code>/var(variable)</code>:存放各类的数据文件</li>\n</ul>\n</blockquote>\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><h4 id=\"重要选项\"><a href=\"#重要选项\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-a(all)</code> 列出目录中的所有项，包括”.”开头的隐藏文件</li>\n<li><code>-l(list)</code> 以列表的方式显示文件</li>\n<li><code>-R(recursive)</code>  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件</li>\n<li><code>-d</code>仅仅列出目录本身的信息<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4></li>\n<li><code>ls -al /etc</code>     以列表的方式列出ect目录下的所有文件</li>\n</ul>\n</blockquote>\n<h2 id=\"pwd-显示当前路径\"><a href=\"#pwd-显示当前路径\" class=\"headerlink\" title=\"pwd   显示当前路径\"></a>pwd   显示当前路径</h2><h2 id=\"cd-切换目录\"><a href=\"#cd-切换目录\" class=\"headerlink\" title=\"cd(切换目录)\"></a>cd(切换目录)</h2><blockquote>\n<ul>\n<li><code>cd ..</code>   跳闸到当前目录的上一级</li>\n<li><code>cd ~</code>    跳转到当前用户的主目录</li>\n</ul>\n</blockquote>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><blockquote>\n<ul>\n<li><code>cd /tmp/testdir</code>   跳转到tmp文件下的testdir目录</li>\n</ul>\n</blockquote>\n<h2 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h2><blockquote>\n<p><strong>获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。</strong></p>\n</blockquote>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>stat test</code>    查看test文件的基本信息</li>\n</ul>\n</blockquote>\n<h2 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h2><blockquote>\n<p><strong>创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件</strong></p>\n</blockquote>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>touch /tmp/testdir/test</code>    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间</li>\n</ul>\n</blockquote>\n<h2 id=\"mkdir-创建目录\"><a href=\"#mkdir-创建目录\" class=\"headerlink\" title=\"mkdir(创建目录)\"></a>mkdir(创建目录)</h2><blockquote>\n<ul>\n<li><code>mkdir /tmp/testdir/test_file</code>    在/tmp/testdir目录下创建一个test_file文件夹</li>\n</ul>\n</blockquote>\n<h2 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h2><blockquote>\n<p><strong>移动或者重命名文件或目录</strong></p>\n</blockquote>\n<h4 id=\"重要选项-1\"><a href=\"#重要选项-1\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>b(backup)</code>:若存在同名文件，覆盖前先备份原来的文件</li>\n<li><code>f(force)</code>:强制覆盖同名的文件</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /tmp/testdir    //创建一个目录testdir</div><div class=\"line\">touch test1 test2     //创建两个文件test1  test2</div><div class=\"line\">mv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~</div><div class=\"line\"></div><div class=\"line\">mv -b test1 /tmp/testdir1/test    //移动文件到指定目录下</div></pre></td></tr></table></figure>\n<h2 id=\"cp-copy\"><a href=\"#cp-copy\" class=\"headerlink\" title=\"cp(copy)\"></a>cp(copy)</h2><blockquote>\n<p><strong>复制文件和目录</strong></p>\n</blockquote>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><blockquote>\n<ul>\n<li><code>-b</code>: 若存在同名文件，覆盖前先备份</li>\n<li><code>-f</code> :强制覆盖同名文件</li>\n<li><code>-r</code> : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>cp /tmp/testdir tmp/testdir1</code>  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 -&gt;  </li>\n<li><code>cp -r /tmp/testdir /tmp/testdir1</code>   可以复制，复制到/tmp文件夹下命名为testdir1</li>\n<li><code>cp -b /tmp/testdir/test1  /tmp/testdir1/test</code>    将文件test1复制到testdir1文件夹下命名为test</li>\n</ul>\n</blockquote>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><blockquote>\n<p><strong>删除命令</strong></p>\n</blockquote>\n<h4 id=\"选项-1\"><a href=\"#选项-1\" class=\"headerlink\" title=\"选项\"></a>选项</h4><blockquote>\n<ul>\n<li><code>-f</code> 强制删除</li>\n<li><code>-r</code> 删除文件夹（递归删除）</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>rm -rf /tmp/testdir</code>   强制删除testdir目录</li>\n</ul>\n</blockquote>\n<h2 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h2><blockquote>\n<p><strong>删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r</strong></p>\n</blockquote>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h2><blockquote>\n<p><strong>查看文件内容</strong></p>\n</blockquote>\n<h4 id=\"重要选项-2\"><a href=\"#重要选项-2\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-n</code> 显示行数</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>cat -n /tmp/testdir/test</code>    查看文件test的内容，显示行数</li>\n</ul>\n</blockquote>\n<h2 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h2><blockquote>\n<p><strong>分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容</strong></p>\n</blockquote>\n<h4 id=\"实例-7\"><a href=\"#实例-7\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>more /tmp/testdir/test</code></li>\n</ul>\n</blockquote>\n<h2 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h2><blockquote>\n<p><strong>显示文本文件结尾的部分，默认显示最后10行</strong></p>\n</blockquote>\n<h4 id=\"重要选项-3\"><a href=\"#重要选项-3\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-n</code> 指定显示的行数</li>\n</ul>\n</blockquote>\n<h2 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h2><blockquote>\n<p><strong>显示开头的内容，与<code>tail</code>类似</strong></p>\n</blockquote>\n<h2 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h2><blockquote>\n<p><strong>一次显示文本文件的行数，单词数，字节数</strong></p>\n</blockquote>\n<h4 id=\"重要选项-4\"><a href=\"#重要选项-4\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-c</code>  显示文件字节数</li>\n<li><code>-l(line)</code>   显示文件行数</li>\n<li><code>-w(word)</code>   显示文件单词数</li>\n</ul>\n</blockquote>\n<h4 id=\"实例-8\"><a href=\"#实例-8\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>wc -cl  /tmp/testdir/test</code>   查看文件的字数和文件的行数</li>\n</ul>\n</blockquote>\n<h2 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h2><p><strong>查看或者修改系统命令</strong></p>\n<h4 id=\"实例-9\"><a href=\"#实例-9\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>date</code>  查看系统时间</li>\n<li><code>date 09012017</code>    修改系统时间为2017-09-01</li>\n</ul>\n</blockquote>\n<h2 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h2><p><strong>列出当前系统的登录用户</strong></p>\n<h4 id=\"重要选项-5\"><a href=\"#重要选项-5\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-r</code> 显示系统当前的运行级</li>\n<li><code>-q</code> 显示当前所有登录的用户名称和在线人数</li>\n</ul>\n</blockquote>\n<h2 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h2><p><strong>关闭重启系统</strong></p>\n<h4 id=\"重要选项-6\"><a href=\"#重要选项-6\" class=\"headerlink\" title=\"重要选项\"></a>重要选项</h4><blockquote>\n<ul>\n<li><code>-r(reboot)</code>  重启系统</li>\n<li><code>-h(halt)</code>   关闭系统</li>\n<li><code>-P(poweroff)</code>  关闭系统同时关闭电源</li>\n</ul>\n</blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><strong>上面选项均可给出数字参数指定多少分钟之后执行操作</strong></p>\n<h4 id=\"实例-10\"><a href=\"#实例-10\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>shutdown -h 10</code>    设置10分钟后关闭系统</li>\n</ul>\n</blockquote>\n<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h2><p><strong>清楚当前终端的屏幕内容</strong></p>\n<h2 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h2><p><strong>显示命令的使用手册，按上下键移动光标，Q键退出</strong></p>\n<h4 id=\"实例-11\"><a href=\"#实例-11\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>man cat</code>     快速查询cat命令的手册</li>\n</ul>\n</blockquote>\n<h2 id=\"histroy\"><a href=\"#histroy\" class=\"headerlink\" title=\"histroy\"></a>histroy</h2><p><strong>查看shell命令的历史记录</strong></p>\n<h4 id=\"实例-12\"><a href=\"#实例-12\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>histroy 5</code>  显示最近的5条记录</li>\n</ul>\n</blockquote>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><p><strong>调用<code>vim</code>编辑器，按<code>i</code>键插入，<code>w</code>键保存，<code>q</code>键退出，<code>wq</code>保存后退出</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"MongoDB干货篇之安装","date":"2017-04-28T02:53:32.000Z","_content":"\n# MongoDB干货篇之安装\n\n## 安装\n\n>* **[下载地址](http://www.mongodb.org/downloads)**\n\n>* **点击安装,选择自定义，后选择安装路径，不过最好安装在根目录下(`C盘`)，然后点解`next`,这里我安装的路径是`C:\\MongoDB`**\n\n>* **创建文件夹:在`C:\\MongoDB`下创建一个文件夹`data`,然后在`data`文件夹下创建`db`,`log`两个子文件夹,在`log`文件下创建一个`MongoDB.log`文档，总得来说创建了`C:\\MongoDB\\data`,`C:\\MongoDB\\data\\db`,`C:\\MongoDB\\data\\log`,`C:\\MongoDB\\data\\log\\MongoDB.log`**\n\n>* **在`C:\\MongoDB\\bin`文件夹下运行`cmd.exe`进入`dos`命令，执行以下命令：**\n>> * **然后在`cmd`下输入`mongod -dbpath \"C:\\MongoDB\\data\\db`,将会看到一些信息，说明已经安装成功了**\n\n## 测试连接\n\n>* **在`C:\\MongoDB\\bin`文件夹下运行`cmd.exe`,输入`mongo`或者`mongo.exe`,将会出现连接的信息，说明已经连接成功了**\n\n>* **然后在另外一个`cmd.exe`在`bin`目录下运行`mongo`可以看到已经连接上`MongoDB`了，注意上面打开的终端不能关闭，否则不能成功连接，这是比较麻烦的，需要每次连接都要启动，下面我们需要把它安装为`windows`服务**\n\n## 安装程windows服务\n**注意在管理员的`cmd.exe`中运行以下命令，否则在`MongoDB.log`文件里出现遭到拒绝**\n\n>* **运行`cmd`，进入`bin`目录，执行以下命令:**\n>>* **`mongod --dbpath \"C:\\MongoDB\\data\\db\" --logpath \"D:\\MongoDB\\data\\log\\MongoDB.log\" --install --serviceName \"MongoDB\"`,这里的服务名为`MongoDB`，可以在`C:\\MongoDB\\data\\log\\MongoDB.log`文件里查看相关信息，如果出现遭到拒绝就是没有在管理员的权限下执行命令**\n\n>* **接下来就是启动服务了，现在在`cmd.exe`中运行`NET START MongoDB`，如果看到服务成功启动，那么就成功了，但是我在启动的时候出现`48`错误，下面将会做出解决方法：**\n>> * **先删除服务:`mongod --dbpath \"C:\\MongoDB\\data\\db\" --logpath \"C:\\MongoDB\\data\\log\\MongoDB.log\" --remove --serviceName \"MongoDB\"`**\n>> * **删除`MongoDB`目录下的`mongod.lock`**\n>> * **然后就是重新安装了,执行以下命令：**\n>>>* **`mongod --logpath \"C:\\MongoDB\\data\\log\\MongoDB.log\" --logappend --dbpath \"C:\\Mongodb\\data\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install`**\n>> * **接下来重新启动服务，`net start MongoDB`,可以看到成功启动了**\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/MongoDB干货篇之安装.md","raw":"---\ntitle: MongoDB干货篇之安装\ndate: 2017-04-28 10:53:32\ncategories: 数据库干货篇\ntags: MongoDB\n---\n\n# MongoDB干货篇之安装\n\n## 安装\n\n>* **[下载地址](http://www.mongodb.org/downloads)**\n\n>* **点击安装,选择自定义，后选择安装路径，不过最好安装在根目录下(`C盘`)，然后点解`next`,这里我安装的路径是`C:\\MongoDB`**\n\n>* **创建文件夹:在`C:\\MongoDB`下创建一个文件夹`data`,然后在`data`文件夹下创建`db`,`log`两个子文件夹,在`log`文件下创建一个`MongoDB.log`文档，总得来说创建了`C:\\MongoDB\\data`,`C:\\MongoDB\\data\\db`,`C:\\MongoDB\\data\\log`,`C:\\MongoDB\\data\\log\\MongoDB.log`**\n\n>* **在`C:\\MongoDB\\bin`文件夹下运行`cmd.exe`进入`dos`命令，执行以下命令：**\n>> * **然后在`cmd`下输入`mongod -dbpath \"C:\\MongoDB\\data\\db`,将会看到一些信息，说明已经安装成功了**\n\n## 测试连接\n\n>* **在`C:\\MongoDB\\bin`文件夹下运行`cmd.exe`,输入`mongo`或者`mongo.exe`,将会出现连接的信息，说明已经连接成功了**\n\n>* **然后在另外一个`cmd.exe`在`bin`目录下运行`mongo`可以看到已经连接上`MongoDB`了，注意上面打开的终端不能关闭，否则不能成功连接，这是比较麻烦的，需要每次连接都要启动，下面我们需要把它安装为`windows`服务**\n\n## 安装程windows服务\n**注意在管理员的`cmd.exe`中运行以下命令，否则在`MongoDB.log`文件里出现遭到拒绝**\n\n>* **运行`cmd`，进入`bin`目录，执行以下命令:**\n>>* **`mongod --dbpath \"C:\\MongoDB\\data\\db\" --logpath \"D:\\MongoDB\\data\\log\\MongoDB.log\" --install --serviceName \"MongoDB\"`,这里的服务名为`MongoDB`，可以在`C:\\MongoDB\\data\\log\\MongoDB.log`文件里查看相关信息，如果出现遭到拒绝就是没有在管理员的权限下执行命令**\n\n>* **接下来就是启动服务了，现在在`cmd.exe`中运行`NET START MongoDB`，如果看到服务成功启动，那么就成功了，但是我在启动的时候出现`48`错误，下面将会做出解决方法：**\n>> * **先删除服务:`mongod --dbpath \"C:\\MongoDB\\data\\db\" --logpath \"C:\\MongoDB\\data\\log\\MongoDB.log\" --remove --serviceName \"MongoDB\"`**\n>> * **删除`MongoDB`目录下的`mongod.lock`**\n>> * **然后就是重新安装了,执行以下命令：**\n>>>* **`mongod --logpath \"C:\\MongoDB\\data\\log\\MongoDB.log\" --logappend --dbpath \"C:\\Mongodb\\data\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install`**\n>> * **接下来重新启动服务，`net start MongoDB`,可以看到成功启动了**\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"MongoDB干货篇之安装","published":1,"updated":"2017-04-28T02:59:18.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwawj000el0uz91mli5cq","content":"<h1 id=\"MongoDB干货篇之安装\"><a href=\"#MongoDB干货篇之安装\" class=\"headerlink\" title=\"MongoDB干货篇之安装\"></a>MongoDB干货篇之安装</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<ul>\n<li><p><strong><a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"external\">下载地址</a></strong></p>\n</li>\n<li><p><strong>点击安装,选择自定义，后选择安装路径，不过最好安装在根目录下(<code>C盘</code>)，然后点解<code>next</code>,这里我安装的路径是<code>C:\\MongoDB</code></strong></p>\n</li>\n<li><p><strong>创建文件夹:在<code>C:\\MongoDB</code>下创建一个文件夹<code>data</code>,然后在<code>data</code>文件夹下创建<code>db</code>,<code>log</code>两个子文件夹,在<code>log</code>文件下创建一个<code>MongoDB.log</code>文档，总得来说创建了<code>C:\\MongoDB\\data</code>,<code>C:\\MongoDB\\data\\db</code>,<code>C:\\MongoDB\\data\\log</code>,<code>C:\\MongoDB\\data\\log\\MongoDB.log</code></strong></p>\n</li>\n<li><p><strong>在<code>C:\\MongoDB\\bin</code>文件夹下运行<code>cmd.exe</code>进入<code>dos</code>命令，执行以下命令：</strong></p>\n<blockquote>\n<ul>\n<li><strong>然后在<code>cmd</code>下输入<code>mongod -dbpath &quot;C:\\MongoDB\\data\\db</code>,将会看到一些信息，说明已经安装成功了</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><blockquote>\n<ul>\n<li><p><strong>在<code>C:\\MongoDB\\bin</code>文件夹下运行<code>cmd.exe</code>,输入<code>mongo</code>或者<code>mongo.exe</code>,将会出现连接的信息，说明已经连接成功了</strong></p>\n</li>\n<li><p><strong>然后在另外一个<code>cmd.exe</code>在<code>bin</code>目录下运行<code>mongo</code>可以看到已经连接上<code>MongoDB</code>了，注意上面打开的终端不能关闭，否则不能成功连接，这是比较麻烦的，需要每次连接都要启动，下面我们需要把它安装为<code>windows</code>服务</strong></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装程windows服务\"><a href=\"#安装程windows服务\" class=\"headerlink\" title=\"安装程windows服务\"></a>安装程windows服务</h2><p><strong>注意在管理员的<code>cmd.exe</code>中运行以下命令，否则在<code>MongoDB.log</code>文件里出现遭到拒绝</strong></p>\n<blockquote>\n<ul>\n<li><p><strong>运行<code>cmd</code>，进入<code>bin</code>目录，执行以下命令:</strong></p>\n<blockquote>\n<ul>\n<li><strong><code>mongod --dbpath &quot;C:\\MongoDB\\data\\db&quot; --logpath &quot;D:\\MongoDB\\data\\log\\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;</code>,这里的服务名为<code>MongoDB</code>，可以在<code>C:\\MongoDB\\data\\log\\MongoDB.log</code>文件里查看相关信息，如果出现遭到拒绝就是没有在管理员的权限下执行命令</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>接下来就是启动服务了，现在在<code>cmd.exe</code>中运行<code>NET START MongoDB</code>，如果看到服务成功启动，那么就成功了，但是我在启动的时候出现<code>48</code>错误，下面将会做出解决方法：</strong></p>\n<blockquote>\n<ul>\n<li><strong>先删除服务:<code>mongod --dbpath &quot;C:\\MongoDB\\data\\db&quot; --logpath &quot;C:\\MongoDB\\data\\log\\MongoDB.log&quot; --remove --serviceName &quot;MongoDB&quot;</code></strong></li>\n<li><strong>删除<code>MongoDB</code>目录下的<code>mongod.lock</code></strong></li>\n<li><strong>然后就是重新安装了,执行以下命令：</strong><blockquote>\n<ul>\n<li><strong><code>mongod --logpath &quot;C:\\MongoDB\\data\\log\\MongoDB.log&quot; --logappend --dbpath &quot;C:\\Mongodb\\data&quot; --directoryperdb --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install</code></strong></li>\n</ul>\n</blockquote>\n</li>\n<li><strong>接下来重新启动服务，<code>net start MongoDB</code>,可以看到成功启动了</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"MongoDB干货篇之安装\"><a href=\"#MongoDB干货篇之安装\" class=\"headerlink\" title=\"MongoDB干货篇之安装\"></a>MongoDB干货篇之安装</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<ul>\n<li><p><strong><a href=\"http://www.mongodb.org/downloads\">下载地址</a></strong></p>\n</li>\n<li><p><strong>点击安装,选择自定义，后选择安装路径，不过最好安装在根目录下(<code>C盘</code>)，然后点解<code>next</code>,这里我安装的路径是<code>C:\\MongoDB</code></strong></p>\n</li>\n<li><p><strong>创建文件夹:在<code>C:\\MongoDB</code>下创建一个文件夹<code>data</code>,然后在<code>data</code>文件夹下创建<code>db</code>,<code>log</code>两个子文件夹,在<code>log</code>文件下创建一个<code>MongoDB.log</code>文档，总得来说创建了<code>C:\\MongoDB\\data</code>,<code>C:\\MongoDB\\data\\db</code>,<code>C:\\MongoDB\\data\\log</code>,<code>C:\\MongoDB\\data\\log\\MongoDB.log</code></strong></p>\n</li>\n<li><p><strong>在<code>C:\\MongoDB\\bin</code>文件夹下运行<code>cmd.exe</code>进入<code>dos</code>命令，执行以下命令：</strong></p>\n<blockquote>\n<ul>\n<li><strong>然后在<code>cmd</code>下输入<code>mongod -dbpath &quot;C:\\MongoDB\\data\\db</code>,将会看到一些信息，说明已经安装成功了</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><blockquote>\n<ul>\n<li><p><strong>在<code>C:\\MongoDB\\bin</code>文件夹下运行<code>cmd.exe</code>,输入<code>mongo</code>或者<code>mongo.exe</code>,将会出现连接的信息，说明已经连接成功了</strong></p>\n</li>\n<li><p><strong>然后在另外一个<code>cmd.exe</code>在<code>bin</code>目录下运行<code>mongo</code>可以看到已经连接上<code>MongoDB</code>了，注意上面打开的终端不能关闭，否则不能成功连接，这是比较麻烦的，需要每次连接都要启动，下面我们需要把它安装为<code>windows</code>服务</strong></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装程windows服务\"><a href=\"#安装程windows服务\" class=\"headerlink\" title=\"安装程windows服务\"></a>安装程windows服务</h2><p><strong>注意在管理员的<code>cmd.exe</code>中运行以下命令，否则在<code>MongoDB.log</code>文件里出现遭到拒绝</strong></p>\n<blockquote>\n<ul>\n<li><p><strong>运行<code>cmd</code>，进入<code>bin</code>目录，执行以下命令:</strong></p>\n<blockquote>\n<ul>\n<li><strong><code>mongod --dbpath &quot;C:\\MongoDB\\data\\db&quot; --logpath &quot;D:\\MongoDB\\data\\log\\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;</code>,这里的服务名为<code>MongoDB</code>，可以在<code>C:\\MongoDB\\data\\log\\MongoDB.log</code>文件里查看相关信息，如果出现遭到拒绝就是没有在管理员的权限下执行命令</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>接下来就是启动服务了，现在在<code>cmd.exe</code>中运行<code>NET START MongoDB</code>，如果看到服务成功启动，那么就成功了，但是我在启动的时候出现<code>48</code>错误，下面将会做出解决方法：</strong></p>\n<blockquote>\n<ul>\n<li><strong>先删除服务:<code>mongod --dbpath &quot;C:\\MongoDB\\data\\db&quot; --logpath &quot;C:\\MongoDB\\data\\log\\MongoDB.log&quot; --remove --serviceName &quot;MongoDB&quot;</code></strong></li>\n<li><strong>删除<code>MongoDB</code>目录下的<code>mongod.lock</code></strong></li>\n<li><strong>然后就是重新安装了,执行以下命令：</strong><blockquote>\n<ul>\n<li><strong><code>mongod --logpath &quot;C:\\MongoDB\\data\\log\\MongoDB.log&quot; --logappend --dbpath &quot;C:\\Mongodb\\data&quot; --directoryperdb --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install</code></strong></li>\n</ul>\n</blockquote>\n</li>\n<li><strong>接下来重新启动服务，<code>net start MongoDB</code>,可以看到成功启动了</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"MongoDB干货篇之更新数据","date":"2017-05-01T00:13:32.000Z","_content":"\n# MongoDB干货篇之数据更新\n\n## 常用的函数\n>* `update(<query>,<update>,<upsert>,<multi>)`,其中`<query>`表示筛选的条件，`<update>`是要更新的数据\n\n>* `updateMany()`   更新所有匹配到的数据\n\n### upsert\n>`upsert`是一个布尔类型的数据，如果为`true`时，当根据`query`条件没有找到匹配的数据时，就表示插入此条数据，如果为`false`就表示不插入数据\n\n>下面将会在一个空的集合中更新数据\n```javascript\n//就会插入此条数据，因为没有找到匹配的信息\ndb.user.update({'name':'chenjiabing','age':22,'sex':\"Man\"},{$set:{'hobby':'read'}},{'upsert':true});  \n\ndb.user.update({'name':'chenjiabing','age':22,'sex':\"Man\"},{$set:{'hobby':'read'}},true);   //和上面的语句等价\n\n//输出  db.user.find()\n{ \"_id\" : ObjectId(\"59067b70856d5893a687655f\"), \"age\" : 22, \"name\" : \"chenjiabing\", \"sex\" : \"Man\", \"hobby\" : \"read\" }\n\n\n```\n\n\n### multi\n>*如果这个参数为`true`,就把按条件查出来多条记录全部更新。默认为`false`,如果为`true`的话和`updateMany()`一样的效果*\n\n>下面将会更新所有匹配到的数据\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$set:{'hobby':'code'}},{'multi':true});   \n```\n\n\n\n\n\n\n\n## 字段更新操作符 Field Update Operators\n### $set\n\n>`$set`用来指定一个键的值。如果这个键不存在，则创建它。**注意这里的更新默认是只更新第一条匹配到的数据，如果第一条匹配的数据已经满足修改后的条件，那么将不会执行下面匹配的信息**\n\n>* 下面我们将会添加一条信息在数据库中\n\n```javascript\n    db.user.insert({\"name\":'jack',\"age\":22,\"sex\":'Man','school':{'name':'jsnu','city':'xuzhou'}});\n    \n```\n\n>>运行下面的代码，将该用户的兴趣设置为“读书”并添加至文档中(此时文档中`hobby`键是不存在，该条文档就会创建它)\n\n```javascript\ndb.user.update({name:'jack'},{$set:{'hobby':'read'}})\n```\n>>下面将会修改用户的**年龄**\n\n```javascript\n    db.user.update({'name':'jack'},{$set:{'age':20}})   \n```\n\n>>下面用`$set`修改**数据类型**，将`sex`设置为`1`\n\n```javascript\n    db.user.update({'name':'jack'},{$set:{'sex':1}})\n```\n\n>>下面用`$set`修改**内嵌文档**，必须指定文档的名字和键值\n\n```javascript\ndb.user.update({name:'jack'},{$set:{'school.name':'shida','school.city':'beijing'}})\n```\n\n\n### $unset\n\n>从文档中**移除**指定的键\n\n>下面将要删除上面插入的`hobby`键\n\n```javascript\ndb.user.update({name:'jack'},{$unset:{'hobby':1}})   //这里的值是任意给的，随便什么值\n```\n\n### $inc\n>`$inc`修改器用来**增加**已有键的值，**或者在键不存在时创建一个键**`$inc`就是专门来增加（和减少）数字的。`$inc`只能用于**整数、长整数或双精度浮点数**。要是用在其他类型的数据上就会导致操作失败\n\n>例如毎次有人访问该博文，该条博文的浏览数就加`1`，用键`pageViews`保存浏览数信息。这个键值上面没有定义过，所以会自动创建一个\n\n```javascript\ndb.user.update({name:'jack'},{$inc:{'pageViews':1}});    //起初没有就会自动创建一个键\n\n```\n\n>下面演示增加和减少\n\n```javascript\ndb.user.update({name:'jack'},{$inc:{'pageViews':100}})  ;  //这里是在上面的基础上加上100，此时变成了101\n\ndb.user.update({name:'jack'},{$inc:{\"pageViews\":-100}}) ;   //这里是在上面的基础上减去100,此时还是变成了1\n```\n\n### $rename\n\n>**语法：**`{$rename: { <old name1>: <new name1>, <old name2>: <new name2>, ... } }`\n\n>`$rename`操作符可以**重命名字段名称**，新的字段名称不能和文档中现有的字段名相同。\n\n>下面重新插入一条数据，并且改变这条数据的键的名称\n\n```javascript\ndb.user.insert({name:'chenjiabing','age':22,'sex':'Man','school':{'name':'jsnu','city':'beijing'}});\n\ndb.user.update({name:'chenjiabing'},{$rename:{'age':'Age'}})   //重命名age为Age\n\n```\n\n>下面将要演示怎样改变内嵌文档的键的名称，**注意一定要带上文档的名字**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{'school.name':'school.Name','school.city':'school.City'}});\n```\n\n>如果重命名的字段字和集合中原有的字段名字相同的话就会**覆盖**原有的字段名称，那么就会造成数据的丢失\n\n```javascript\ndb.user.update({name:'chenjiabing'},{'$rename':{'sex','age'}});  //这里sex变成age和原来的age相同，那么原来的age就会丢失\n\ndb.user.find({name:'chenjiabing'});  \n\n//输出，可以看到原来的age没有了,变成了覆盖之后的\n\n{ \"_id\" : ObjectId(\"590674ce30b9f88dd43d7ee4\"), \"name\" : \"chenjiabing\", \"age\" : \"Man\", \"school\" : { \"name\" : \"jsnu\", \"city\" : \"beijing\" } }   \n```\n\n>**如果指定的字段不存在，那么将不会更新，对原来的字段没有影响**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{value:'name'}});  //将不会有任何的改变，因为value这个字段根本不存在\n```\n\n>**`$rename`操作符也可以将子文档中键值移到其他子文档中**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{'school.name':'contact.name'}});// 这里将会将school.name这个字段的值移到contact.name之中，如果contact不存在，那么就会创建一个\n\n//输出\n\n{ \"_id\" : ObjectId(\"590674ce30b9f88dd43d7ee4\"), \"name\" : \"chenjiabing\", \"age\" : \"Man\", \"school\" : { \"city\" : \"beijing\" }, \"contact\" : { \"name\" : \"jsnu\" } }\n\n\n```\n\n## 数组更新操作符 Array Update Operators\n\n>*只能用在键值为数组的键上的数组操作。*\n\n### $ (query)\n>**语法**:` { \"<array>.$\" : value }`\n\n>当对数组字段进行更新时，且没有明确指定的元素在数组中的位置，我们使用定位操作符`$`标识一个元素，数字都是以`0`开始的。\n\n>**注意:**\n>* 定位操作符(\"$\")作为第一个匹配查询条件的元素的占位符，也就是在数组中的索引值。\n>* 数组字段必须出现查询文档中。\n\n\n>向集合中插入两条数据\n\n```javascript\ndb.students.insert({ \"_id\" : 1, \"grades\" : [ 78, 88, 88 ] });\ndb.students.insert({ \"_id\" : 2, \"grades\" : [ 88, 90, 92 ] });\n```\n\n>执行下列操作\n\n```javascript\n//查询匹配的文档中，数组有2个88，只更新第一个匹配的元素，也就是\"grades.1\"\ndb.students.update( { _id: 1, grades: 88 }, { $set: { \"grades.$\" : 82 } }) ;\n//查询文档中没有出现grades字段，查询报错\ndb.students.update( { _id: 2 }, { $set: { \"grades.$\" : 82 } } );\n```\n\n### $push\n>*如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。*\n\n>下面我们将使用`$push`对该文档添加一条评论信息。\n\n```javascript\n\n//将会创建一个comments数组，因为一开始这个数组没有存在\ndb.user.update({name:'chenjiabing'},{$push:{comments:{'name':'jack','content':'hello thanks'}}})\n\n\n//继续添加一条，在comments的末尾进行添加，此时comments变成两条数据了\ndb.user.update({name:'chenjiabing'},{$push:{comments:{'name':'john','content':'hello'}}})\n\n```\n\n### $pull\n>**语法**：`db.collection.update( { field: <query> }, { $pull: { field: <query> } } );`\n\n>*`$pull`操作符移除指定字段值为数组，且匹配`$pull`操作符移除指定字段值为数组，且匹配`$pull`语句声明的查询条件的所有元素。*\n\n>执行如下操作\n\n```javascript\n\n//插入一条文档\ndb.profiles.insert({ votes: [ 3, 5, 6, 7, 7, 8 ] });\n//移除数组中所有元素7\ndb.profiles.update( { votes: 3 }, { $pull: { votes: 7 } } );\n//移除数组中所有大于6的元素\ndb.profiles.update( { votes: 3 }, { $pull: { votes: { $gt: 6 } } } );\n\n//Result\n{ votes: [ 3, 5, 6, 8 ] }\n\n{ votes: [ 3, 5, 6 ] }\n\n\n```\n\n\n\n\n\n\n\n\n","source":"_posts/MongoDB干货篇之更新数据.md","raw":"---\ntitle: MongoDB干货篇之更新数据\ndate: 2017-05-01 08:13:32\ncategories: 数据库干货篇\ntags: MongoDB\n---\n\n# MongoDB干货篇之数据更新\n\n## 常用的函数\n>* `update(<query>,<update>,<upsert>,<multi>)`,其中`<query>`表示筛选的条件，`<update>`是要更新的数据\n\n>* `updateMany()`   更新所有匹配到的数据\n\n### upsert\n>`upsert`是一个布尔类型的数据，如果为`true`时，当根据`query`条件没有找到匹配的数据时，就表示插入此条数据，如果为`false`就表示不插入数据\n\n>下面将会在一个空的集合中更新数据\n```javascript\n//就会插入此条数据，因为没有找到匹配的信息\ndb.user.update({'name':'chenjiabing','age':22,'sex':\"Man\"},{$set:{'hobby':'read'}},{'upsert':true});  \n\ndb.user.update({'name':'chenjiabing','age':22,'sex':\"Man\"},{$set:{'hobby':'read'}},true);   //和上面的语句等价\n\n//输出  db.user.find()\n{ \"_id\" : ObjectId(\"59067b70856d5893a687655f\"), \"age\" : 22, \"name\" : \"chenjiabing\", \"sex\" : \"Man\", \"hobby\" : \"read\" }\n\n\n```\n\n\n### multi\n>*如果这个参数为`true`,就把按条件查出来多条记录全部更新。默认为`false`,如果为`true`的话和`updateMany()`一样的效果*\n\n>下面将会更新所有匹配到的数据\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$set:{'hobby':'code'}},{'multi':true});   \n```\n\n\n\n\n\n\n\n## 字段更新操作符 Field Update Operators\n### $set\n\n>`$set`用来指定一个键的值。如果这个键不存在，则创建它。**注意这里的更新默认是只更新第一条匹配到的数据，如果第一条匹配的数据已经满足修改后的条件，那么将不会执行下面匹配的信息**\n\n>* 下面我们将会添加一条信息在数据库中\n\n```javascript\n    db.user.insert({\"name\":'jack',\"age\":22,\"sex\":'Man','school':{'name':'jsnu','city':'xuzhou'}});\n    \n```\n\n>>运行下面的代码，将该用户的兴趣设置为“读书”并添加至文档中(此时文档中`hobby`键是不存在，该条文档就会创建它)\n\n```javascript\ndb.user.update({name:'jack'},{$set:{'hobby':'read'}})\n```\n>>下面将会修改用户的**年龄**\n\n```javascript\n    db.user.update({'name':'jack'},{$set:{'age':20}})   \n```\n\n>>下面用`$set`修改**数据类型**，将`sex`设置为`1`\n\n```javascript\n    db.user.update({'name':'jack'},{$set:{'sex':1}})\n```\n\n>>下面用`$set`修改**内嵌文档**，必须指定文档的名字和键值\n\n```javascript\ndb.user.update({name:'jack'},{$set:{'school.name':'shida','school.city':'beijing'}})\n```\n\n\n### $unset\n\n>从文档中**移除**指定的键\n\n>下面将要删除上面插入的`hobby`键\n\n```javascript\ndb.user.update({name:'jack'},{$unset:{'hobby':1}})   //这里的值是任意给的，随便什么值\n```\n\n### $inc\n>`$inc`修改器用来**增加**已有键的值，**或者在键不存在时创建一个键**`$inc`就是专门来增加（和减少）数字的。`$inc`只能用于**整数、长整数或双精度浮点数**。要是用在其他类型的数据上就会导致操作失败\n\n>例如毎次有人访问该博文，该条博文的浏览数就加`1`，用键`pageViews`保存浏览数信息。这个键值上面没有定义过，所以会自动创建一个\n\n```javascript\ndb.user.update({name:'jack'},{$inc:{'pageViews':1}});    //起初没有就会自动创建一个键\n\n```\n\n>下面演示增加和减少\n\n```javascript\ndb.user.update({name:'jack'},{$inc:{'pageViews':100}})  ;  //这里是在上面的基础上加上100，此时变成了101\n\ndb.user.update({name:'jack'},{$inc:{\"pageViews\":-100}}) ;   //这里是在上面的基础上减去100,此时还是变成了1\n```\n\n### $rename\n\n>**语法：**`{$rename: { <old name1>: <new name1>, <old name2>: <new name2>, ... } }`\n\n>`$rename`操作符可以**重命名字段名称**，新的字段名称不能和文档中现有的字段名相同。\n\n>下面重新插入一条数据，并且改变这条数据的键的名称\n\n```javascript\ndb.user.insert({name:'chenjiabing','age':22,'sex':'Man','school':{'name':'jsnu','city':'beijing'}});\n\ndb.user.update({name:'chenjiabing'},{$rename:{'age':'Age'}})   //重命名age为Age\n\n```\n\n>下面将要演示怎样改变内嵌文档的键的名称，**注意一定要带上文档的名字**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{'school.name':'school.Name','school.city':'school.City'}});\n```\n\n>如果重命名的字段字和集合中原有的字段名字相同的话就会**覆盖**原有的字段名称，那么就会造成数据的丢失\n\n```javascript\ndb.user.update({name:'chenjiabing'},{'$rename':{'sex','age'}});  //这里sex变成age和原来的age相同，那么原来的age就会丢失\n\ndb.user.find({name:'chenjiabing'});  \n\n//输出，可以看到原来的age没有了,变成了覆盖之后的\n\n{ \"_id\" : ObjectId(\"590674ce30b9f88dd43d7ee4\"), \"name\" : \"chenjiabing\", \"age\" : \"Man\", \"school\" : { \"name\" : \"jsnu\", \"city\" : \"beijing\" } }   \n```\n\n>**如果指定的字段不存在，那么将不会更新，对原来的字段没有影响**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{value:'name'}});  //将不会有任何的改变，因为value这个字段根本不存在\n```\n\n>**`$rename`操作符也可以将子文档中键值移到其他子文档中**\n\n```javascript\ndb.user.update({name:'chenjiabing'},{$rename:{'school.name':'contact.name'}});// 这里将会将school.name这个字段的值移到contact.name之中，如果contact不存在，那么就会创建一个\n\n//输出\n\n{ \"_id\" : ObjectId(\"590674ce30b9f88dd43d7ee4\"), \"name\" : \"chenjiabing\", \"age\" : \"Man\", \"school\" : { \"city\" : \"beijing\" }, \"contact\" : { \"name\" : \"jsnu\" } }\n\n\n```\n\n## 数组更新操作符 Array Update Operators\n\n>*只能用在键值为数组的键上的数组操作。*\n\n### $ (query)\n>**语法**:` { \"<array>.$\" : value }`\n\n>当对数组字段进行更新时，且没有明确指定的元素在数组中的位置，我们使用定位操作符`$`标识一个元素，数字都是以`0`开始的。\n\n>**注意:**\n>* 定位操作符(\"$\")作为第一个匹配查询条件的元素的占位符，也就是在数组中的索引值。\n>* 数组字段必须出现查询文档中。\n\n\n>向集合中插入两条数据\n\n```javascript\ndb.students.insert({ \"_id\" : 1, \"grades\" : [ 78, 88, 88 ] });\ndb.students.insert({ \"_id\" : 2, \"grades\" : [ 88, 90, 92 ] });\n```\n\n>执行下列操作\n\n```javascript\n//查询匹配的文档中，数组有2个88，只更新第一个匹配的元素，也就是\"grades.1\"\ndb.students.update( { _id: 1, grades: 88 }, { $set: { \"grades.$\" : 82 } }) ;\n//查询文档中没有出现grades字段，查询报错\ndb.students.update( { _id: 2 }, { $set: { \"grades.$\" : 82 } } );\n```\n\n### $push\n>*如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。*\n\n>下面我们将使用`$push`对该文档添加一条评论信息。\n\n```javascript\n\n//将会创建一个comments数组，因为一开始这个数组没有存在\ndb.user.update({name:'chenjiabing'},{$push:{comments:{'name':'jack','content':'hello thanks'}}})\n\n\n//继续添加一条，在comments的末尾进行添加，此时comments变成两条数据了\ndb.user.update({name:'chenjiabing'},{$push:{comments:{'name':'john','content':'hello'}}})\n\n```\n\n### $pull\n>**语法**：`db.collection.update( { field: <query> }, { $pull: { field: <query> } } );`\n\n>*`$pull`操作符移除指定字段值为数组，且匹配`$pull`操作符移除指定字段值为数组，且匹配`$pull`语句声明的查询条件的所有元素。*\n\n>执行如下操作\n\n```javascript\n\n//插入一条文档\ndb.profiles.insert({ votes: [ 3, 5, 6, 7, 7, 8 ] });\n//移除数组中所有元素7\ndb.profiles.update( { votes: 3 }, { $pull: { votes: 7 } } );\n//移除数组中所有大于6的元素\ndb.profiles.update( { votes: 3 }, { $pull: { votes: { $gt: 6 } } } );\n\n//Result\n{ votes: [ 3, 5, 6, 8 ] }\n\n{ votes: [ 3, 5, 6 ] }\n\n\n```\n\n\n\n\n\n\n\n\n","slug":"MongoDB干货篇之更新数据","published":1,"updated":"2017-05-01T00:16:55.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwawp000hl0uzs7mww090","content":"<h1 id=\"MongoDB干货篇之数据更新\"><a href=\"#MongoDB干货篇之数据更新\" class=\"headerlink\" title=\"MongoDB干货篇之数据更新\"></a>MongoDB干货篇之数据更新</h1><h2 id=\"常用的函数\"><a href=\"#常用的函数\" class=\"headerlink\" title=\"常用的函数\"></a>常用的函数</h2><blockquote>\n<ul>\n<li><p><code>update(&lt;query&gt;,&lt;update&gt;,&lt;upsert&gt;,&lt;multi&gt;)</code>,其中<code>&lt;query&gt;</code>表示筛选的条件，<code>&lt;update&gt;</code>是要更新的数据</p>\n</li>\n<li><p><code>updateMany()</code>   更新所有匹配到的数据</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"upsert\"><a href=\"#upsert\" class=\"headerlink\" title=\"upsert\"></a>upsert</h3><blockquote>\n<p><code>upsert</code>是一个布尔类型的数据，如果为<code>true</code>时，当根据<code>query</code>条件没有找到匹配的数据时，就表示插入此条数据，如果为<code>false</code>就表示不插入数据</p>\n<p>下面将会在一个空的集合中更新数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//就会插入此条数据，因为没有找到匹配的信息</span></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">\"Man\"</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;,&#123;<span class=\"string\">'upsert'</span>:<span class=\"literal\">true</span>&#125;);  </div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">\"Man\"</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;,<span class=\"literal\">true</span>);   <span class=\"comment\">//和上面的语句等价</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出  db.user.find()</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59067b70856d5893a687655f\"</span>), <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"hobby\"</span> : <span class=\"string\">\"read\"</span> &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"multi\"><a href=\"#multi\" class=\"headerlink\" title=\"multi\"></a>multi</h3><blockquote>\n<p><em>如果这个参数为<code>true</code>,就把按条件查出来多条记录全部更新。默认为<code>false</code>,如果为<code>true</code>的话和<code>updateMany()</code>一样的效果</em></p>\n<p>下面将会更新所有匹配到的数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'code'</span>&#125;&#125;,&#123;<span class=\"string\">'multi'</span>:<span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"字段更新操作符-Field-Update-Operators\"><a href=\"#字段更新操作符-Field-Update-Operators\" class=\"headerlink\" title=\"字段更新操作符 Field Update Operators\"></a>字段更新操作符 Field Update Operators</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><blockquote>\n<p><code>$set</code>用来指定一个键的值。如果这个键不存在，则创建它。<strong>注意这里的更新默认是只更新第一条匹配到的数据，如果第一条匹配的数据已经满足修改后的条件，那么将不会执行下面匹配的信息</strong></p>\n<ul>\n<li>下面我们将会添加一条信息在数据库中</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">'jack'</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">22</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">'Man'</span>,<span class=\"string\">'school'</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jsnu'</span>,<span class=\"string\">'city'</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>运行下面的代码，将该用户的兴趣设置为“读书”并添加至文档中(此时文档中<code>hobby</code>键是不存在，该条文档就会创建它)</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面将会修改用户的<strong>年龄</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'age'</span>:<span class=\"number\">20</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面用<code>$set</code>修改<strong>数据类型</strong>，将<code>sex</code>设置为<code>1</code></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'sex'</span>:<span class=\"number\">1</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面用<code>$set</code>修改<strong>内嵌文档</strong>，必须指定文档的名字和键值</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'shida'</span>,<span class=\"string\">'school.city'</span>:<span class=\"string\">'beijing'</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"unset\"><a href=\"#unset\" class=\"headerlink\" title=\"$unset\"></a>$unset</h3><blockquote>\n<p>从文档中<strong>移除</strong>指定的键</p>\n<p>下面将要删除上面插入的<code>hobby</code>键</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$unset</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"number\">1</span>&#125;&#125;)   <span class=\"comment\">//这里的值是任意给的，随便什么值</span></div></pre></td></tr></table></figure>\n<h3 id=\"inc\"><a href=\"#inc\" class=\"headerlink\" title=\"$inc\"></a>$inc</h3><blockquote>\n<p><code>$inc</code>修改器用来<strong>增加</strong>已有键的值，<strong>或者在键不存在时创建一个键</strong><code>$inc</code>就是专门来增加（和减少）数字的。<code>$inc</code>只能用于<strong>整数、长整数或双精度浮点数</strong>。要是用在其他类型的数据上就会导致操作失败</p>\n<p>例如毎次有人访问该博文，该条博文的浏览数就加<code>1</code>，用键<code>pageViews</code>保存浏览数信息。这个键值上面没有定义过，所以会自动创建一个</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">'pageViews'</span>:<span class=\"number\">1</span>&#125;&#125;);    <span class=\"comment\">//起初没有就会自动创建一个键</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面演示增加和减少</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">'pageViews'</span>:<span class=\"number\">100</span>&#125;&#125;)  ;  <span class=\"comment\">//这里是在上面的基础上加上100，此时变成了101</span></div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">\"pageViews\"</span>:<span class=\"number\">-100</span>&#125;&#125;) ;   <span class=\"comment\">//这里是在上面的基础上减去100,此时还是变成了1</span></div></pre></td></tr></table></figure>\n<h3 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"$rename\"></a>$rename</h3><blockquote>\n<p><strong>语法：</strong><code>{$rename: { &lt;old name1&gt;: &lt;new name1&gt;, &lt;old name2&gt;: &lt;new name2&gt;, ... } }</code></p>\n<p><code>$rename</code>操作符可以<strong>重命名字段名称</strong>，新的字段名称不能和文档中现有的字段名相同。</p>\n<p>下面重新插入一条数据，并且改变这条数据的键的名称</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">'Man'</span>,<span class=\"string\">'school'</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jsnu'</span>,<span class=\"string\">'city'</span>:<span class=\"string\">'beijing'</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'age'</span>:<span class=\"string\">'Age'</span>&#125;&#125;)   <span class=\"comment\">//重命名age为Age</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面将要演示怎样改变内嵌文档的键的名称，<strong>注意一定要带上文档的名字</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'school.Name'</span>,<span class=\"string\">'school.city'</span>:<span class=\"string\">'school.City'</span>&#125;&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果重命名的字段字和集合中原有的字段名字相同的话就会<strong>覆盖</strong>原有的字段名称，那么就会造成数据的丢失</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"string\">'$rename'</span>:&#123;<span class=\"string\">'sex'</span>,<span class=\"string\">'age'</span>&#125;&#125;);  <span class=\"comment\">//这里sex变成age和原来的age相同，那么原来的age就会丢失</span></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出，可以看到原来的age没有了,变成了覆盖之后的</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"590674ce30b9f88dd43d7ee4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jsnu\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"beijing\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>如果指定的字段不存在，那么将不会更新，对原来的字段没有影响</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"attr\">value</span>:<span class=\"string\">'name'</span>&#125;&#125;);  <span class=\"comment\">//将不会有任何的改变，因为value这个字段根本不存在</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><code>$rename</code>操作符也可以将子文档中键值移到其他子文档中</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'contact.name'</span>&#125;&#125;);<span class=\"comment\">// 这里将会将school.name这个字段的值移到contact.name之中，如果contact不存在，那么就会创建一个</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"590674ce30b9f88dd43d7ee4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"city\"</span> : <span class=\"string\">\"beijing\"</span> &#125;, <span class=\"string\">\"contact\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jsnu\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数组更新操作符-Array-Update-Operators\"><a href=\"#数组更新操作符-Array-Update-Operators\" class=\"headerlink\" title=\"数组更新操作符 Array Update Operators\"></a>数组更新操作符 Array Update Operators</h2><blockquote>\n<p><em>只能用在键值为数组的键上的数组操作。</em></p>\n</blockquote>\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"$ (query)\"></a>$ (query)</h3><blockquote>\n<p><strong>语法</strong>:<code>{ &quot;&lt;array&gt;.$&quot; : value }</code></p>\n<p>当对数组字段进行更新时，且没有明确指定的元素在数组中的位置，我们使用定位操作符<code>$</code>标识一个元素，数字都是以<code>0</code>开始的。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>定位操作符(“$”)作为第一个匹配查询条件的元素的占位符，也就是在数组中的索引值。</li>\n<li>数组字段必须出现查询文档中。</li>\n</ul>\n<p>向集合中插入两条数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.students.insert(&#123; <span class=\"string\">\"_id\"</span> : <span class=\"number\">1</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">78</span>, <span class=\"number\">88</span>, <span class=\"number\">88</span> ] &#125;);</div><div class=\"line\">db.students.insert(&#123; <span class=\"string\">\"_id\"</span> : <span class=\"number\">2</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">88</span>, <span class=\"number\">90</span>, <span class=\"number\">92</span> ] &#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行下列操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查询匹配的文档中，数组有2个88，只更新第一个匹配的元素，也就是\"grades.1\"</span></div><div class=\"line\">db.students.update( &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grades</span>: <span class=\"number\">88</span> &#125;, &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"string\">\"grades.$\"</span> : <span class=\"number\">82</span> &#125; &#125;) ;</div><div class=\"line\"><span class=\"comment\">//查询文档中没有出现grades字段，查询报错</span></div><div class=\"line\">db.students.update( &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"string\">\"grades.$\"</span> : <span class=\"number\">82</span> &#125; &#125; );</div></pre></td></tr></table></figure>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"$push\"></a>$push</h3><blockquote>\n<p><em>如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。</em></p>\n<p>下面我们将使用<code>$push</code>对该文档添加一条评论信息。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将会创建一个comments数组，因为一开始这个数组没有存在</span></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$push</span>:&#123;<span class=\"attr\">comments</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>,<span class=\"string\">'content'</span>:<span class=\"string\">'hello thanks'</span>&#125;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//继续添加一条，在comments的末尾进行添加，此时comments变成两条数据了</span></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$push</span>:&#123;<span class=\"attr\">comments</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'content'</span>:<span class=\"string\">'hello'</span>&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"$pull\"></a>$pull</h3><blockquote>\n<p><strong>语法</strong>：<code>db.collection.update( { field: &lt;query&gt; }, { $pull: { field: &lt;query&gt; } } );</code></p>\n<p><em><code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>语句声明的查询条件的所有元素。</em></p>\n<p>执行如下操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//插入一条文档</span></div><div class=\"line\">db.profiles.insert(&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> ] &#125;);</div><div class=\"line\"><span class=\"comment\">//移除数组中所有元素7</span></div><div class=\"line\">db.profiles.update( &#123; <span class=\"attr\">votes</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">$pull</span>: &#123; <span class=\"attr\">votes</span>: <span class=\"number\">7</span> &#125; &#125; );</div><div class=\"line\"><span class=\"comment\">//移除数组中所有大于6的元素</span></div><div class=\"line\">db.profiles.update( &#123; <span class=\"attr\">votes</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">$pull</span>: &#123; <span class=\"attr\">votes</span>: &#123; <span class=\"attr\">$gt</span>: <span class=\"number\">6</span> &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Result</span></div><div class=\"line\">&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span> ] &#125;</div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ] &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"MongoDB干货篇之数据更新\"><a href=\"#MongoDB干货篇之数据更新\" class=\"headerlink\" title=\"MongoDB干货篇之数据更新\"></a>MongoDB干货篇之数据更新</h1><h2 id=\"常用的函数\"><a href=\"#常用的函数\" class=\"headerlink\" title=\"常用的函数\"></a>常用的函数</h2><blockquote>\n<ul>\n<li><p><code>update(&lt;query&gt;,&lt;update&gt;,&lt;upsert&gt;,&lt;multi&gt;)</code>,其中<code>&lt;query&gt;</code>表示筛选的条件，<code>&lt;update&gt;</code>是要更新的数据</p>\n</li>\n<li><p><code>updateMany()</code>   更新所有匹配到的数据</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"upsert\"><a href=\"#upsert\" class=\"headerlink\" title=\"upsert\"></a>upsert</h3><blockquote>\n<p><code>upsert</code>是一个布尔类型的数据，如果为<code>true</code>时，当根据<code>query</code>条件没有找到匹配的数据时，就表示插入此条数据，如果为<code>false</code>就表示不插入数据</p>\n<p>下面将会在一个空的集合中更新数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//就会插入此条数据，因为没有找到匹配的信息</span></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">\"Man\"</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;,&#123;<span class=\"string\">'upsert'</span>:<span class=\"literal\">true</span>&#125;);  </div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">\"Man\"</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;,<span class=\"literal\">true</span>);   <span class=\"comment\">//和上面的语句等价</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出  db.user.find()</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59067b70856d5893a687655f\"</span>), <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"hobby\"</span> : <span class=\"string\">\"read\"</span> &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"multi\"><a href=\"#multi\" class=\"headerlink\" title=\"multi\"></a>multi</h3><blockquote>\n<p><em>如果这个参数为<code>true</code>,就把按条件查出来多条记录全部更新。默认为<code>false</code>,如果为<code>true</code>的话和<code>updateMany()</code>一样的效果</em></p>\n<p>下面将会更新所有匹配到的数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'code'</span>&#125;&#125;,&#123;<span class=\"string\">'multi'</span>:<span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"字段更新操作符-Field-Update-Operators\"><a href=\"#字段更新操作符-Field-Update-Operators\" class=\"headerlink\" title=\"字段更新操作符 Field Update Operators\"></a>字段更新操作符 Field Update Operators</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><blockquote>\n<p><code>$set</code>用来指定一个键的值。如果这个键不存在，则创建它。<strong>注意这里的更新默认是只更新第一条匹配到的数据，如果第一条匹配的数据已经满足修改后的条件，那么将不会执行下面匹配的信息</strong></p>\n<ul>\n<li>下面我们将会添加一条信息在数据库中</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">'jack'</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">22</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">'Man'</span>,<span class=\"string\">'school'</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jsnu'</span>,<span class=\"string\">'city'</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>运行下面的代码，将该用户的兴趣设置为“读书”并添加至文档中(此时文档中<code>hobby</code>键是不存在，该条文档就会创建它)</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"string\">'read'</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面将会修改用户的<strong>年龄</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'age'</span>:<span class=\"number\">20</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面用<code>$set</code>修改<strong>数据类型</strong>，将<code>sex</code>设置为<code>1</code></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'sex'</span>:<span class=\"number\">1</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>下面用<code>$set</code>修改<strong>内嵌文档</strong>，必须指定文档的名字和键值</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$set</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'shida'</span>,<span class=\"string\">'school.city'</span>:<span class=\"string\">'beijing'</span>&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"unset\"><a href=\"#unset\" class=\"headerlink\" title=\"$unset\"></a>$unset</h3><blockquote>\n<p>从文档中<strong>移除</strong>指定的键</p>\n<p>下面将要删除上面插入的<code>hobby</code>键</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$unset</span>:&#123;<span class=\"string\">'hobby'</span>:<span class=\"number\">1</span>&#125;&#125;)   <span class=\"comment\">//这里的值是任意给的，随便什么值</span></div></pre></td></tr></table></figure>\n<h3 id=\"inc\"><a href=\"#inc\" class=\"headerlink\" title=\"$inc\"></a>$inc</h3><blockquote>\n<p><code>$inc</code>修改器用来<strong>增加</strong>已有键的值，<strong>或者在键不存在时创建一个键</strong><code>$inc</code>就是专门来增加（和减少）数字的。<code>$inc</code>只能用于<strong>整数、长整数或双精度浮点数</strong>。要是用在其他类型的数据上就会导致操作失败</p>\n<p>例如毎次有人访问该博文，该条博文的浏览数就加<code>1</code>，用键<code>pageViews</code>保存浏览数信息。这个键值上面没有定义过，所以会自动创建一个</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">'pageViews'</span>:<span class=\"number\">1</span>&#125;&#125;);    <span class=\"comment\">//起初没有就会自动创建一个键</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面演示增加和减少</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">'pageViews'</span>:<span class=\"number\">100</span>&#125;&#125;)  ;  <span class=\"comment\">//这里是在上面的基础上加上100，此时变成了101</span></div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">$inc</span>:&#123;<span class=\"string\">\"pageViews\"</span>:<span class=\"number\">-100</span>&#125;&#125;) ;   <span class=\"comment\">//这里是在上面的基础上减去100,此时还是变成了1</span></div></pre></td></tr></table></figure>\n<h3 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"$rename\"></a>$rename</h3><blockquote>\n<p><strong>语法：</strong><code>{$rename: { &lt;old name1&gt;: &lt;new name1&gt;, &lt;old name2&gt;: &lt;new name2&gt;, ... } }</code></p>\n<p><code>$rename</code>操作符可以<strong>重命名字段名称</strong>，新的字段名称不能和文档中现有的字段名相同。</p>\n<p>下面重新插入一条数据，并且改变这条数据的键的名称</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">22</span>,<span class=\"string\">'sex'</span>:<span class=\"string\">'Man'</span>,<span class=\"string\">'school'</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jsnu'</span>,<span class=\"string\">'city'</span>:<span class=\"string\">'beijing'</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'age'</span>:<span class=\"string\">'Age'</span>&#125;&#125;)   <span class=\"comment\">//重命名age为Age</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面将要演示怎样改变内嵌文档的键的名称，<strong>注意一定要带上文档的名字</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'school.Name'</span>,<span class=\"string\">'school.city'</span>:<span class=\"string\">'school.City'</span>&#125;&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果重命名的字段字和集合中原有的字段名字相同的话就会<strong>覆盖</strong>原有的字段名称，那么就会造成数据的丢失</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"string\">'$rename'</span>:&#123;<span class=\"string\">'sex'</span>,<span class=\"string\">'age'</span>&#125;&#125;);  <span class=\"comment\">//这里sex变成age和原来的age相同，那么原来的age就会丢失</span></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出，可以看到原来的age没有了,变成了覆盖之后的</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"590674ce30b9f88dd43d7ee4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jsnu\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"beijing\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>如果指定的字段不存在，那么将不会更新，对原来的字段没有影响</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"attr\">value</span>:<span class=\"string\">'name'</span>&#125;&#125;);  <span class=\"comment\">//将不会有任何的改变，因为value这个字段根本不存在</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><code>$rename</code>操作符也可以将子文档中键值移到其他子文档中</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$rename</span>:&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'contact.name'</span>&#125;&#125;);<span class=\"comment\">// 这里将会将school.name这个字段的值移到contact.name之中，如果contact不存在，那么就会创建一个</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"590674ce30b9f88dd43d7ee4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"chenjiabing\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"city\"</span> : <span class=\"string\">\"beijing\"</span> &#125;, <span class=\"string\">\"contact\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jsnu\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数组更新操作符-Array-Update-Operators\"><a href=\"#数组更新操作符-Array-Update-Operators\" class=\"headerlink\" title=\"数组更新操作符 Array Update Operators\"></a>数组更新操作符 Array Update Operators</h2><blockquote>\n<p><em>只能用在键值为数组的键上的数组操作。</em></p>\n</blockquote>\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"$ (query)\"></a>$ (query)</h3><blockquote>\n<p><strong>语法</strong>:<code>{ &quot;&lt;array&gt;.$&quot; : value }</code></p>\n<p>当对数组字段进行更新时，且没有明确指定的元素在数组中的位置，我们使用定位操作符<code>$</code>标识一个元素，数字都是以<code>0</code>开始的。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>定位操作符(“$”)作为第一个匹配查询条件的元素的占位符，也就是在数组中的索引值。</li>\n<li>数组字段必须出现查询文档中。</li>\n</ul>\n<p>向集合中插入两条数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.students.insert(&#123; <span class=\"string\">\"_id\"</span> : <span class=\"number\">1</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">78</span>, <span class=\"number\">88</span>, <span class=\"number\">88</span> ] &#125;);</div><div class=\"line\">db.students.insert(&#123; <span class=\"string\">\"_id\"</span> : <span class=\"number\">2</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">88</span>, <span class=\"number\">90</span>, <span class=\"number\">92</span> ] &#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行下列操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查询匹配的文档中，数组有2个88，只更新第一个匹配的元素，也就是\"grades.1\"</span></div><div class=\"line\">db.students.update( &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grades</span>: <span class=\"number\">88</span> &#125;, &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"string\">\"grades.$\"</span> : <span class=\"number\">82</span> &#125; &#125;) ;</div><div class=\"line\"><span class=\"comment\">//查询文档中没有出现grades字段，查询报错</span></div><div class=\"line\">db.students.update( &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"string\">\"grades.$\"</span> : <span class=\"number\">82</span> &#125; &#125; );</div></pre></td></tr></table></figure>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"$push\"></a>$push</h3><blockquote>\n<p><em>如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。</em></p>\n<p>下面我们将使用<code>$push</code>对该文档添加一条评论信息。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将会创建一个comments数组，因为一开始这个数组没有存在</span></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$push</span>:&#123;<span class=\"attr\">comments</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'jack'</span>,<span class=\"string\">'content'</span>:<span class=\"string\">'hello thanks'</span>&#125;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//继续添加一条，在comments的末尾进行添加，此时comments变成两条数据了</span></div><div class=\"line\">db.user.update(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chenjiabing'</span>&#125;,&#123;<span class=\"attr\">$push</span>:&#123;<span class=\"attr\">comments</span>:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'content'</span>:<span class=\"string\">'hello'</span>&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"$pull\"></a>$pull</h3><blockquote>\n<p><strong>语法</strong>：<code>db.collection.update( { field: &lt;query&gt; }, { $pull: { field: &lt;query&gt; } } );</code></p>\n<p><em><code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>语句声明的查询条件的所有元素。</em></p>\n<p>执行如下操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//插入一条文档</span></div><div class=\"line\">db.profiles.insert(&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> ] &#125;);</div><div class=\"line\"><span class=\"comment\">//移除数组中所有元素7</span></div><div class=\"line\">db.profiles.update( &#123; <span class=\"attr\">votes</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">$pull</span>: &#123; <span class=\"attr\">votes</span>: <span class=\"number\">7</span> &#125; &#125; );</div><div class=\"line\"><span class=\"comment\">//移除数组中所有大于6的元素</span></div><div class=\"line\">db.profiles.update( &#123; <span class=\"attr\">votes</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">$pull</span>: &#123; <span class=\"attr\">votes</span>: &#123; <span class=\"attr\">$gt</span>: <span class=\"number\">6</span> &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Result</span></div><div class=\"line\">&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span> ] &#125;</div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">votes</span>: [ <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ] &#125;</div></pre></td></tr></table></figure>\n"},{"title":"MongoDB干货篇之查询数据","date":"2017-04-30T06:53:00.000Z","_content":"# MongoDB干货篇之查询\n## 准备工作\n>**在开始之前我们应该先准备数据方便演示，这里我插入的了几条数据，数据如下：**\n```javascript\n    db.user.insertMany(\n    [{\n    name:'jack',\n    age:22,\n    sex:'Man',\n    tags:['python','c++','c'],\n    grades:[22,33,44,55],\n    school:{\n    name:'shida',\n    city:'xuzhou'\n    }\n    },{\n    name:'jhon',\n    age:33,\n    sex:null,\n    tags:['python','java'],\n    grades:[66,22,44,88],\n    school:{\n    name:'kuangda',\n    city:'xuzhou'\n    }\n    },\n    {\n    name:'xiaoming',\n    age:33,\n    tags:['python','java'],\n    grades:[66,22,44,88],\n    school:{\n    name:'kuangda',\n    city:'xuzhou'\n    }\n    }\n    ]\n    )\n```\n\n## find()\n>**其中`query`表示查找的条件，相当于`mysql`中`where`子句,`projection`列出你想要查找的数据，格式为`db.collection.find(find(<query filter>, <projection>))`**\n\n### 实例：\n\n>* **下面不带参数的查找，将会查找出所有的结果**\n```javascript=\n    db.find().pretty();\n    \n    //输出结果\n    \n    \n{                                                     \n        \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \n        \"name\" : \"jack\",                              \n        \"age\" : 22,                                   \n        \"tags\" : [                                    \n                \"python\",                             \n                \"c++\",                                \n                \"c\"                                   \n        ],                                            \n        \"grades\" : [                                  \n                22,                                   \n                33,                                   \n                44,                                   \n                55                                    \n        ],                                            \n        \"school\" : {                                  \n                \"name\" : \"shida\",                     \n                \"city\" : \"xuzhou\"                     \n        }                                             \n}                                                     \n                                                    \n    \n    \n```\n\n>* **下面找出满足`name`为`jack`的数据，并且只输出`name`,`age`,这里的`_id`是默认输出的，如果不想输出将将它设置为`0`，想要输出那个字段将它设置为1**\n\n```javascript\n    db.user.find({name:'jack'},{name:1,age:1})\n    \n    //输出结果\n    { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22 }\n    \n    \n    db.user.find({name:'jack'},{name:1,age:1，_id:0})\n    \n    //输出结果\n    {\"name\" : \"jack\", \"age\" : 22 }\n    \n\n```\n>>**注意这里的一个 `projection`不能 同时 指定包括和排除字段，除了排除 `_id `字段。 在 显式包括 字段的映射中，`_id` 字段是唯一一个您可以 显式排除 的。\n\n## 查询内嵌文档\n>**上述例子中插入的`school`数据就表示内嵌文档**\n\n### 完全匹配查询\n>**完全匹配查询表示`school`中的查询数组必须和插入的数组完全一样，顺序都必须一样才能查找出来**\n\n```javascript\n db.user.find({name:'jack',school:{name:'shida',city:'xuzhou'}});\n \n //输出结果\n \n { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n \n \n //下面是指定输出的字段，这里的school.name表示只输出school文档中name字段，必须加引号\n db.user.find({name:'jack',school:{name:'shida',city:'xuzhou'}},{name:1,age:1,'school.name':1});\n //输出结果\n { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"school\" : { \"name\" : \"shida\" } }\n \n```\n\n### 键值对查询\n>**可以通过键值对查询，不用考虑顺序，比如`'school.name':'shida'`，表示查询学校名字为`shida`的数据，这里的引号是必须要的**\n\n```javascript\n    db.user.find({'school.name':'shida'},{name:1,school:1});\n    \n    //输出结果\n    \n    { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n## 查询操作符\n>**下面我们将配合查询操作符来执行复杂的查询操作，比如元素查询、 逻辑查询 、比较查询操作。我们使用下面的比较操作符`\"$gt\"` 、`\"$gte\"`、 `\"$lt\"`、 `\"$lte\"`(分别对应`\">\"`、 `\">=\"` 、`\"<\"` 、`\"<=\"`)**\n\n### 实例\n>**下面查询年龄在`20-30`之间的信息**\n\n```javascript\ndb.user.find({\nage:{$gt:20,$lt:30}  \n})\n\n//输出\n{ \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n```\n\n### $ne\n>**`$ne`表示不相等，例如查询年龄不等于`22`岁的信息**\n\n```javascript\ndb.user.find({age:{$ne:22}})\n\n//输出\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31e0\"), \"name\" : \"jhon\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n### slice\n>**`$slice`操作符控制查询返回的数组中元素的个数。此操作符根据参数`{ field: value }` 指定键名和键值选择出文档集合，并且该文档集合中指定`array`键将返回从指定数量的元素。如果`count`的值大于数组中元素的数量，该查询返回数组中的所有元素的。**\n\n>**语法：`db.collection.find( { field: value }, { array: {$slice: count }})`;**\n\n>* **下面将查询`grades`中的前两个数**\n\n```javascript\ndb.user.find({name:'jack'},{grades:{$slice:2},name:1,age:1,'school.name':1});\n\n//输出，可以看出这里的grades只输出了前面两个\n\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31df\"), \"name\" : \"jack\", \"age\" : 22, \"grades\" : [ 22, 33 ], \"school\" : { \"name\" : \"shida\" } }\n```\n\n>* **下面将输出后3个数据**\n\n```javascript\ndb.user.find({name:'jhon'},{grades:{$slice:-3},name:1});\n\n//输出\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31e0\"), \"name\" : \"jhon\", \"grades\" : [ 22, 44, 88 ] }\n\n```\n\n>* **下面介绍指定一个数组作为参数。数组参数使用`[ skip , limit ]` 格式，其中第一个值表示在数组中跳过的项目数,第二个值表示返回的项目数。**\n\n```javascript\ndb.user.find({name:'jack'},{grades:{$slice:[2,2]},name:1});  //这里将会跳过前面的两个，直接得到后面的两个数据\n\n\n//输出\n\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31df\"), \"name\" : \"jack\", \"grades\" : [ 44, 55 ] }\n```\n\n### $exists\n\n>**如果`$exists`的值为`true`,选择存在该字段的文档,若值为`false`则选择不包含该字段的文档**\n\n>**下面将会查询不存在sex这一项的信息**\n\n```javascript\ndb.user.find({sex:{$exists:false}})\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n\ndb.user.find({sex:{$exists:true}});\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $or\n>**执行逻辑`OR`运算,指定一个至少包含两个表达式的数组，选择出至少满足数组中一条表达式的文档。**\n>**语法：`{ $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }`**\n\n>* **下面将要查找`age`等于`22`或者`age`等于`33`的值**\n\n```javascript\ndb.user.find({$or:[{age:22},{age:33}]})\n\n//结果\n\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n>* **下面将会查找出年龄为22或者33并且姓名为`jack`的人的信息**\n\n```javascript\ndb.user.find({name:'jack',$or:[{age:33},{age:22}]})\n\n//结果\n\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $and\n>**指定一个至少包含两个表达式的数组，选择出满足该数组中所有表达式的文档。`$and`操作符使用短路操作，若第一个表达式的值为“`false`”,余下的表达式将不会执行。**\n>**语法：`{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }`**\n\n>* **下面将会查找年龄在`20-30`之间的信息，对于下面使用逗号分隔符的表达式列表，`MongoDB`会提供一个隐式的`$and`操作：**\n\n```javascript\ndb.user.find({$and:[{age:{$gt:20}},{age:{$lt:30}}]})\n//上述语句相当于db.user.find({age:{$gt:20},age:{$lt:30}})\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $in\n>**匹配键值等于指定数组中任意值的文档。类似`sql`中`in`，只要匹配一个`value`就会输出**\n>**语法：`{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }`**\n\n>* **下面将会查找grades中存在22,33之间的任意一个数的信息**\n\n```javascript\n db.user.find({grades:{$in:[22,33]}})\n \n //输出\n \n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n```\n\n### $nin\n>**　匹配键不存在或者键值不等于指定数组的任意值的文档。类似`sql`中`not in`(SQL中字段不存在使用会有语法错误).**\n\n>* **查询出`grades`中不存在100或者44的文档**\n\n```javascript\ndb.user.find({grades:{$nin:[100,44]}})\n```\n\n### $not\n>**执行逻辑`NOT`运算，选择出不能匹配表达式的文档 ，包括没有指定键的文档。`$not`操作符不能独立使用，必须跟其他操作一起使用**\n\n>**语法:{ field: { $not: { <operator-expression> } } }**\n\n>* **查询年龄不大于30的信息**\n\n```javascript\ndb.user.find({age:{$not:{$gt:30}}})\n\n//输出\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n## 迭代游标的查询\n>**学过高级语言的朋友都知道迭代的问题，像java,下面使用迭代的方法查询**\n\n```javascript\n    var cursor=db.usr.find();\n    \n    //这里使用迭代输出所有的数据\n    while(cursor.hasNext())    //这里的hasNext()是判断是否下一个中还有可迭代的值，如果没有返回false\n    {\n        printjson(cursor.next());     //这里的cursor.next是迭代的输出，printjson是代替print(tojson()) \n    }\n    \n    \n    print cursor.count()    //输出其中有多少个数据\n    \n    cursor.forEach(printjson);   //forEach输出\n    \n    \n    var document=cursor.toArray();     //将迭代对象转换成数组\n    \n    print document[0];       //以数组的形式输出\n     \n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/MongoDB干货篇之查询数据.md","raw":"---\ntitle: MongoDB干货篇之查询数据\ndate: 2017-04-30 14:53:00\ncategories: 数据库干货篇\ntags: MongoDB\n---\n# MongoDB干货篇之查询\n## 准备工作\n>**在开始之前我们应该先准备数据方便演示，这里我插入的了几条数据，数据如下：**\n```javascript\n    db.user.insertMany(\n    [{\n    name:'jack',\n    age:22,\n    sex:'Man',\n    tags:['python','c++','c'],\n    grades:[22,33,44,55],\n    school:{\n    name:'shida',\n    city:'xuzhou'\n    }\n    },{\n    name:'jhon',\n    age:33,\n    sex:null,\n    tags:['python','java'],\n    grades:[66,22,44,88],\n    school:{\n    name:'kuangda',\n    city:'xuzhou'\n    }\n    },\n    {\n    name:'xiaoming',\n    age:33,\n    tags:['python','java'],\n    grades:[66,22,44,88],\n    school:{\n    name:'kuangda',\n    city:'xuzhou'\n    }\n    }\n    ]\n    )\n```\n\n## find()\n>**其中`query`表示查找的条件，相当于`mysql`中`where`子句,`projection`列出你想要查找的数据，格式为`db.collection.find(find(<query filter>, <projection>))`**\n\n### 实例：\n\n>* **下面不带参数的查找，将会查找出所有的结果**\n```javascript=\n    db.find().pretty();\n    \n    //输出结果\n    \n    \n{                                                     \n        \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \n        \"name\" : \"jack\",                              \n        \"age\" : 22,                                   \n        \"tags\" : [                                    \n                \"python\",                             \n                \"c++\",                                \n                \"c\"                                   \n        ],                                            \n        \"grades\" : [                                  \n                22,                                   \n                33,                                   \n                44,                                   \n                55                                    \n        ],                                            \n        \"school\" : {                                  \n                \"name\" : \"shida\",                     \n                \"city\" : \"xuzhou\"                     \n        }                                             \n}                                                     \n                                                    \n    \n    \n```\n\n>* **下面找出满足`name`为`jack`的数据，并且只输出`name`,`age`,这里的`_id`是默认输出的，如果不想输出将将它设置为`0`，想要输出那个字段将它设置为1**\n\n```javascript\n    db.user.find({name:'jack'},{name:1,age:1})\n    \n    //输出结果\n    { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22 }\n    \n    \n    db.user.find({name:'jack'},{name:1,age:1，_id:0})\n    \n    //输出结果\n    {\"name\" : \"jack\", \"age\" : 22 }\n    \n\n```\n>>**注意这里的一个 `projection`不能 同时 指定包括和排除字段，除了排除 `_id `字段。 在 显式包括 字段的映射中，`_id` 字段是唯一一个您可以 显式排除 的。\n\n## 查询内嵌文档\n>**上述例子中插入的`school`数据就表示内嵌文档**\n\n### 完全匹配查询\n>**完全匹配查询表示`school`中的查询数组必须和插入的数组完全一样，顺序都必须一样才能查找出来**\n\n```javascript\n db.user.find({name:'jack',school:{name:'shida',city:'xuzhou'}});\n \n //输出结果\n \n { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n \n \n //下面是指定输出的字段，这里的school.name表示只输出school文档中name字段，必须加引号\n db.user.find({name:'jack',school:{name:'shida',city:'xuzhou'}},{name:1,age:1,'school.name':1});\n //输出结果\n { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"school\" : { \"name\" : \"shida\" } }\n \n```\n\n### 键值对查询\n>**可以通过键值对查询，不用考虑顺序，比如`'school.name':'shida'`，表示查询学校名字为`shida`的数据，这里的引号是必须要的**\n\n```javascript\n    db.user.find({'school.name':'shida'},{name:1,school:1});\n    \n    //输出结果\n    \n    { \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n## 查询操作符\n>**下面我们将配合查询操作符来执行复杂的查询操作，比如元素查询、 逻辑查询 、比较查询操作。我们使用下面的比较操作符`\"$gt\"` 、`\"$gte\"`、 `\"$lt\"`、 `\"$lte\"`(分别对应`\">\"`、 `\">=\"` 、`\"<\"` 、`\"<=\"`)**\n\n### 实例\n>**下面查询年龄在`20-30`之间的信息**\n\n```javascript\ndb.user.find({\nage:{$gt:20,$lt:30}  \n})\n\n//输出\n{ \"_id\" : ObjectId(\"59056f81299fe049404b2899\"), \"name\" : \"jack\", \"age\" : 22, \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n```\n\n### $ne\n>**`$ne`表示不相等，例如查询年龄不等于`22`岁的信息**\n\n```javascript\ndb.user.find({age:{$ne:22}})\n\n//输出\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31e0\"), \"name\" : \"jhon\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n### slice\n>**`$slice`操作符控制查询返回的数组中元素的个数。此操作符根据参数`{ field: value }` 指定键名和键值选择出文档集合，并且该文档集合中指定`array`键将返回从指定数量的元素。如果`count`的值大于数组中元素的数量，该查询返回数组中的所有元素的。**\n\n>**语法：`db.collection.find( { field: value }, { array: {$slice: count }})`;**\n\n>* **下面将查询`grades`中的前两个数**\n\n```javascript\ndb.user.find({name:'jack'},{grades:{$slice:2},name:1,age:1,'school.name':1});\n\n//输出，可以看出这里的grades只输出了前面两个\n\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31df\"), \"name\" : \"jack\", \"age\" : 22, \"grades\" : [ 22, 33 ], \"school\" : { \"name\" : \"shida\" } }\n```\n\n>* **下面将输出后3个数据**\n\n```javascript\ndb.user.find({name:'jhon'},{grades:{$slice:-3},name:1});\n\n//输出\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31e0\"), \"name\" : \"jhon\", \"grades\" : [ 22, 44, 88 ] }\n\n```\n\n>* **下面介绍指定一个数组作为参数。数组参数使用`[ skip , limit ]` 格式，其中第一个值表示在数组中跳过的项目数,第二个值表示返回的项目数。**\n\n```javascript\ndb.user.find({name:'jack'},{grades:{$slice:[2,2]},name:1});  //这里将会跳过前面的两个，直接得到后面的两个数据\n\n\n//输出\n\n{ \"_id\" : ObjectId(\"59057c16f551d8c9003d31df\"), \"name\" : \"jack\", \"grades\" : [ 44, 55 ] }\n```\n\n### $exists\n\n>**如果`$exists`的值为`true`,选择存在该字段的文档,若值为`false`则选择不包含该字段的文档**\n\n>**下面将会查询不存在sex这一项的信息**\n\n```javascript\ndb.user.find({sex:{$exists:false}})\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n\ndb.user.find({sex:{$exists:true}});\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $or\n>**执行逻辑`OR`运算,指定一个至少包含两个表达式的数组，选择出至少满足数组中一条表达式的文档。**\n>**语法：`{ $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }`**\n\n>* **下面将要查找`age`等于`22`或者`age`等于`33`的值**\n\n```javascript\ndb.user.find({$or:[{age:22},{age:33}]})\n\n//结果\n\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n\n```\n\n>* **下面将会查找出年龄为22或者33并且姓名为`jack`的人的信息**\n\n```javascript\ndb.user.find({name:'jack',$or:[{age:33},{age:22}]})\n\n//结果\n\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $and\n>**指定一个至少包含两个表达式的数组，选择出满足该数组中所有表达式的文档。`$and`操作符使用短路操作，若第一个表达式的值为“`false`”,余下的表达式将不会执行。**\n>**语法：`{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }`**\n\n>* **下面将会查找年龄在`20-30`之间的信息，对于下面使用逗号分隔符的表达式列表，`MongoDB`会提供一个隐式的`$and`操作：**\n\n```javascript\ndb.user.find({$and:[{age:{$gt:20}},{age:{$lt:30}}]})\n//上述语句相当于db.user.find({age:{$gt:20},age:{$lt:30}})\n\n//结果\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n### $in\n>**匹配键值等于指定数组中任意值的文档。类似`sql`中`in`，只要匹配一个`value`就会输出**\n>**语法：`{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }`**\n\n>* **下面将会查找grades中存在22,33之间的任意一个数的信息**\n\n```javascript\n db.user.find({grades:{$in:[22,33]}})\n \n //输出\n \n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cc\"), \"name\" : \"jhon\", \"age\" : 33, \"sex\" : null, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cd\"), \"name\" : \"xiaoming\", \"age\" : 33, \"tags\" : [ \"python\", \"java\" ], \"grades\" : [ 66, 22, 44, 88 ], \"school\" : { \"name\" : \"kuangda\", \"city\" : \"xuzhou\" } }\n```\n\n### $nin\n>**　匹配键不存在或者键值不等于指定数组的任意值的文档。类似`sql`中`not in`(SQL中字段不存在使用会有语法错误).**\n\n>* **查询出`grades`中不存在100或者44的文档**\n\n```javascript\ndb.user.find({grades:{$nin:[100,44]}})\n```\n\n### $not\n>**执行逻辑`NOT`运算，选择出不能匹配表达式的文档 ，包括没有指定键的文档。`$not`操作符不能独立使用，必须跟其他操作一起使用**\n\n>**语法:{ field: { $not: { <operator-expression> } } }**\n\n>* **查询年龄不大于30的信息**\n\n```javascript\ndb.user.find({age:{$not:{$gt:30}}})\n\n//输出\n{ \"_id\" : ObjectId(\"59058460fe58ed1089f2a5cb\"), \"name\" : \"jack\", \"age\" : 22, \"sex\" : \"Man\", \"tags\" : [ \"python\", \"c++\", \"c\" ], \"grades\" : [ 22, 33, 44, 55 ], \"school\" : { \"name\" : \"shida\", \"city\" : \"xuzhou\" } }\n\n```\n\n## 迭代游标的查询\n>**学过高级语言的朋友都知道迭代的问题，像java,下面使用迭代的方法查询**\n\n```javascript\n    var cursor=db.usr.find();\n    \n    //这里使用迭代输出所有的数据\n    while(cursor.hasNext())    //这里的hasNext()是判断是否下一个中还有可迭代的值，如果没有返回false\n    {\n        printjson(cursor.next());     //这里的cursor.next是迭代的输出，printjson是代替print(tojson()) \n    }\n    \n    \n    print cursor.count()    //输出其中有多少个数据\n    \n    cursor.forEach(printjson);   //forEach输出\n    \n    \n    var document=cursor.toArray();     //将迭代对象转换成数组\n    \n    print document[0];       //以数组的形式输出\n     \n```\n\n\n\n\n\n\n\n\n\n","slug":"MongoDB干货篇之查询数据","published":1,"updated":"2017-04-30T21:10:23.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwawr000jl0uzf3qxmwjp","content":"<h1 id=\"MongoDB干货篇之查询\"><a href=\"#MongoDB干货篇之查询\" class=\"headerlink\" title=\"MongoDB干货篇之查询\"></a>MongoDB干货篇之查询</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<p><strong>在开始之前我们应该先准备数据方便演示，这里我插入的了几条数据，数据如下：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insertMany(</div><div class=\"line\">[&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">22</span>,</div><div class=\"line\"><span class=\"attr\">sex</span>:<span class=\"string\">'Man'</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'c++'</span>,<span class=\"string\">'c'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'jhon'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">33</span>,</div><div class=\"line\"><span class=\"attr\">sex</span>:<span class=\"literal\">null</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'java'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">44</span>,<span class=\"number\">88</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'kuangda'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'xiaoming'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">33</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'java'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">44</span>,<span class=\"number\">88</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'kuangda'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">]</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><blockquote>\n<p><strong>其中<code>query</code>表示查找的条件，相当于<code>mysql</code>中<code>where</code>子句,<code>projection</code>列出你想要查找的数据，格式为<code>db.collection.find(find(&lt;query filter&gt;, &lt;projection&gt;))</code></strong></p>\n</blockquote>\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><blockquote>\n<ul>\n<li><p><strong>下面不带参数的查找，将会查找出所有的结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">    db.find().pretty();</div><div class=\"line\">    </div><div class=\"line\">    //输出结果</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">&#123;                                                     </div><div class=\"line\">        &quot;_id&quot; : ObjectId(&quot;59056f81299fe049404b2899&quot;), </div><div class=\"line\">        &quot;name&quot; : &quot;jack&quot;,                              </div><div class=\"line\">        &quot;age&quot; : 22,                                   </div><div class=\"line\">        &quot;tags&quot; : [                                    </div><div class=\"line\">                &quot;python&quot;,                             </div><div class=\"line\">                &quot;c++&quot;,                                </div><div class=\"line\">                &quot;c&quot;                                   </div><div class=\"line\">        ],                                            </div><div class=\"line\">        &quot;grades&quot; : [                                  </div><div class=\"line\">                22,                                   </div><div class=\"line\">                33,                                   </div><div class=\"line\">                44,                                   </div><div class=\"line\">                55                                    </div><div class=\"line\">        ],                                            </div><div class=\"line\">        &quot;school&quot; : &#123;                                  </div><div class=\"line\">                &quot;name&quot; : &quot;shida&quot;,                     </div><div class=\"line\">                &quot;city&quot; : &quot;xuzhou&quot;                     </div><div class=\"line\">        &#125;                                             </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下面找出满足<code>name</code>为<code>jack</code>的数据，并且只输出<code>name</code>,<code>age</code>,这里的<code>_id</code>是默认输出的，如果不想输出将将它设置为<code>0</code>，想要输出那个字段将它设置为1</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span> &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>，_id:<span class=\"number\">0</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123;<span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span> &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>**注意这里的一个 <code>projection</code>不能 同时 指定包括和排除字段，除了排除 <code>_id</code>字段。 在 显式包括 字段的映射中，<code>_id</code> 字段是唯一一个您可以 显式排除 的。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"查询内嵌文档\"><a href=\"#查询内嵌文档\" class=\"headerlink\" title=\"查询内嵌文档\"></a>查询内嵌文档</h2><blockquote>\n<p><strong>上述例子中插入的<code>school</code>数据就表示内嵌文档</strong></p>\n</blockquote>\n<h3 id=\"完全匹配查询\"><a href=\"#完全匹配查询\" class=\"headerlink\" title=\"完全匹配查询\"></a>完全匹配查询</h3><blockquote>\n<p><strong>完全匹配查询表示<code>school</code>中的查询数组必须和插入的数组完全一样，顺序都必须一样才能查找出来</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">school</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,<span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面是指定输出的字段，这里的school.name表示只输出school文档中name字段，必须加引号</span></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">school</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,<span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"string\">'school.name'</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"键值对查询\"><a href=\"#键值对查询\" class=\"headerlink\" title=\"键值对查询\"></a>键值对查询</h3><blockquote>\n<p><strong>可以通过键值对查询，不用考虑顺序，比如<code>&#39;school.name&#39;:&#39;shida&#39;</code>，表示查询学校名字为<code>shida</code>的数据，这里的引号是必须要的</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'shida'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">school</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"查询操作符\"><a href=\"#查询操作符\" class=\"headerlink\" title=\"查询操作符\"></a>查询操作符</h2><blockquote>\n<p><strong>下面我们将配合查询操作符来执行复杂的查询操作，比如元素查询、 逻辑查询 、比较查询操作。我们使用下面的比较操作符<code>&quot;$gt&quot;</code> 、<code>&quot;$gte&quot;</code>、 <code>&quot;$lt&quot;</code>、 <code>&quot;$lte&quot;</code>(分别对应<code>&quot;&gt;&quot;</code>、 <code>&quot;&gt;=&quot;</code> 、<code>&quot;&lt;&quot;</code> 、<code>&quot;&lt;=&quot;</code>)</strong></p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p><strong>下面查询年龄在<code>20-30</code>之间的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;</div><div class=\"line\"><span class=\"attr\">age</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">20</span>,<span class=\"attr\">$lt</span>:<span class=\"number\">30</span>&#125;  </div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ne\"><a href=\"#ne\" class=\"headerlink\" title=\"$ne\"></a>$ne</h3><blockquote>\n<p><strong><code>$ne</code>表示不相等，例如查询年龄不等于<code>22</code>岁的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$ne</span>:<span class=\"number\">22</span>&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31e0\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><blockquote>\n<p><strong><code>$slice</code>操作符控制查询返回的数组中元素的个数。此操作符根据参数<code>{ field: value }</code> 指定键名和键值选择出文档集合，并且该文档集合中指定<code>array</code>键将返回从指定数量的元素。如果<code>count</code>的值大于数组中元素的数量，该查询返回数组中的所有元素的。</strong></p>\n<p><strong>语法：<code>db.collection.find( { field: value }, { array: {$slice: count }})</code>;</strong></p>\n<ul>\n<li><strong>下面将查询<code>grades</code>中的前两个数</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:<span class=\"number\">2</span>&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"string\">'school.name'</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出，可以看出这里的grades只输出了前面两个</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31df\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面将输出后3个数据</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jhon'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:<span class=\"number\">-3</span>&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31e0\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面介绍指定一个数组作为参数。数组参数使用<code>[ skip , limit ]</code> 格式，其中第一个值表示在数组中跳过的项目数,第二个值表示返回的项目数。</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:[<span class=\"number\">2</span>,<span class=\"number\">2</span>]&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;);  <span class=\"comment\">//这里将会跳过前面的两个，直接得到后面的两个数据</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31df\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">44</span>, <span class=\"number\">55</span> ] &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"$exists\"></a>$exists</h3><blockquote>\n<p><strong>如果<code>$exists</code>的值为<code>true</code>,选择存在该字段的文档,若值为<code>false</code>则选择不包含该字段的文档</strong></p>\n<p><strong>下面将会查询不存在sex这一项的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">sex</span>:&#123;<span class=\"attr\">$exists</span>:<span class=\"literal\">false</span>&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">sex</span>:&#123;<span class=\"attr\">$exists</span>:<span class=\"literal\">true</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"$or\"></a>$or</h3><blockquote>\n<p><strong>执行逻辑<code>OR</code>运算,指定一个至少包含两个表达式的数组，选择出至少满足数组中一条表达式的文档。</strong><br><strong>语法：<code>{ $or: [ { &lt;expression1&gt; }, { &lt;expression2&gt; }, ... , { &lt;expressionN&gt; } ] }</code></strong></p>\n<ul>\n<li><strong>下面将要查找<code>age</code>等于<code>22</code>或者<code>age</code>等于<code>33</code>的值</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">$or</span>:[&#123;<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;,&#123;<span class=\"attr\">age</span>:<span class=\"number\">33</span>&#125;]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面将会查找出年龄为22或者33并且姓名为<code>jack</code>的人的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">$or</span>:[&#123;<span class=\"attr\">age</span>:<span class=\"number\">33</span>&#125;,&#123;<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"$and\"></a>$and</h3><blockquote>\n<p><strong>指定一个至少包含两个表达式的数组，选择出满足该数组中所有表达式的文档。<code>$and</code>操作符使用短路操作，若第一个表达式的值为“<code>false</code>”,余下的表达式将不会执行。</strong><br><strong>语法：<code>{ $and: [ { &lt;expression1&gt; }, { &lt;expression2&gt; } , ... , { &lt;expressionN&gt; } ] }</code></strong></p>\n<ul>\n<li><strong>下面将会查找年龄在<code>20-30</code>之间的信息，对于下面使用逗号分隔符的表达式列表，<code>MongoDB</code>会提供一个隐式的<code>$and</code>操作：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">$and</span>:[&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">20</span>&#125;&#125;,&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$lt</span>:<span class=\"number\">30</span>&#125;&#125;]&#125;)</div><div class=\"line\"><span class=\"comment\">//上述语句相当于db.user.find(&#123;age:&#123;$gt:20&#125;,age:&#123;$lt:30&#125;&#125;)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"$in\"></a>$in</h3><blockquote>\n<p><strong>匹配键值等于指定数组中任意值的文档。类似<code>sql</code>中<code>in</code>，只要匹配一个<code>value</code>就会输出</strong><br><strong>语法：<code>{ field: { $in: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] } }</code></strong></p>\n<ul>\n<li><strong>下面将会查找grades中存在22,33之间的任意一个数的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> db.user.find(&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$in</span>:[<span class=\"number\">22</span>,<span class=\"number\">33</span>]&#125;&#125;)</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">//输出</span></div><div class=\"line\"> </div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"nin\"><a href=\"#nin\" class=\"headerlink\" title=\"$nin\"></a>$nin</h3><blockquote>\n<p><strong>　匹配键不存在或者键值不等于指定数组的任意值的文档。类似<code>sql</code>中<code>not in</code>(SQL中字段不存在使用会有语法错误).</strong></p>\n<ul>\n<li><strong>查询出<code>grades</code>中不存在100或者44的文档</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$nin</span>:[<span class=\"number\">100</span>,<span class=\"number\">44</span>]&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"$not\"></a>$not</h3><blockquote>\n<p><strong>执行逻辑<code>NOT</code>运算，选择出不能匹配表达式的文档 ，包括没有指定键的文档。<code>$not</code>操作符不能独立使用，必须跟其他操作一起使用</strong></p>\n<p><strong>语法:{ field: { $not: { <operator-expression> } } }</operator-expression></strong></p>\n<ul>\n<li><strong>查询年龄不大于30的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$not</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">30</span>&#125;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"迭代游标的查询\"><a href=\"#迭代游标的查询\" class=\"headerlink\" title=\"迭代游标的查询\"></a>迭代游标的查询</h2><blockquote>\n<p><strong>学过高级语言的朋友都知道迭代的问题，像java,下面使用迭代的方法查询</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cursor=db.usr.find();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里使用迭代输出所有的数据</span></div><div class=\"line\"><span class=\"keyword\">while</span>(cursor.hasNext())    <span class=\"comment\">//这里的hasNext()是判断是否下一个中还有可迭代的值，如果没有返回false</span></div><div class=\"line\">&#123;</div><div class=\"line\">    printjson(cursor.next());     <span class=\"comment\">//这里的cursor.next是迭代的输出，printjson是代替print(tojson()) </span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print cursor.count()    <span class=\"comment\">//输出其中有多少个数据</span></div><div class=\"line\"></div><div class=\"line\">cursor.forEach(printjson);   <span class=\"comment\">//forEach输出</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span>=cursor.toArray();     <span class=\"comment\">//将迭代对象转换成数组</span></div><div class=\"line\"></div><div class=\"line\">print <span class=\"built_in\">document</span>[<span class=\"number\">0</span>];       <span class=\"comment\">//以数组的形式输出</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"MongoDB干货篇之查询\"><a href=\"#MongoDB干货篇之查询\" class=\"headerlink\" title=\"MongoDB干货篇之查询\"></a>MongoDB干货篇之查询</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<p><strong>在开始之前我们应该先准备数据方便演示，这里我插入的了几条数据，数据如下：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insertMany(</div><div class=\"line\">[&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">22</span>,</div><div class=\"line\"><span class=\"attr\">sex</span>:<span class=\"string\">'Man'</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'c++'</span>,<span class=\"string\">'c'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'jhon'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">33</span>,</div><div class=\"line\"><span class=\"attr\">sex</span>:<span class=\"literal\">null</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'java'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">44</span>,<span class=\"number\">88</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'kuangda'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'xiaoming'</span>,</div><div class=\"line\"><span class=\"attr\">age</span>:<span class=\"number\">33</span>,</div><div class=\"line\"><span class=\"attr\">tags</span>:[<span class=\"string\">'python'</span>,<span class=\"string\">'java'</span>],</div><div class=\"line\"><span class=\"attr\">grades</span>:[<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">44</span>,<span class=\"number\">88</span>],</div><div class=\"line\"><span class=\"attr\">school</span>:&#123;</div><div class=\"line\"><span class=\"attr\">name</span>:<span class=\"string\">'kuangda'</span>,</div><div class=\"line\"><span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">]</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><blockquote>\n<p><strong>其中<code>query</code>表示查找的条件，相当于<code>mysql</code>中<code>where</code>子句,<code>projection</code>列出你想要查找的数据，格式为<code>db.collection.find(find(&lt;query filter&gt;, &lt;projection&gt;))</code></strong></p>\n</blockquote>\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><blockquote>\n<ul>\n<li><p><strong>下面不带参数的查找，将会查找出所有的结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">    db.find().pretty();</div><div class=\"line\">    </div><div class=\"line\">    //输出结果</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">&#123;                                                     </div><div class=\"line\">        &quot;_id&quot; : ObjectId(&quot;59056f81299fe049404b2899&quot;), </div><div class=\"line\">        &quot;name&quot; : &quot;jack&quot;,                              </div><div class=\"line\">        &quot;age&quot; : 22,                                   </div><div class=\"line\">        &quot;tags&quot; : [                                    </div><div class=\"line\">                &quot;python&quot;,                             </div><div class=\"line\">                &quot;c++&quot;,                                </div><div class=\"line\">                &quot;c&quot;                                   </div><div class=\"line\">        ],                                            </div><div class=\"line\">        &quot;grades&quot; : [                                  </div><div class=\"line\">                22,                                   </div><div class=\"line\">                33,                                   </div><div class=\"line\">                44,                                   </div><div class=\"line\">                55                                    </div><div class=\"line\">        ],                                            </div><div class=\"line\">        &quot;school&quot; : &#123;                                  </div><div class=\"line\">                &quot;name&quot; : &quot;shida&quot;,                     </div><div class=\"line\">                &quot;city&quot; : &quot;xuzhou&quot;                     </div><div class=\"line\">        &#125;                                             </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下面找出满足<code>name</code>为<code>jack</code>的数据，并且只输出<code>name</code>,<code>age</code>,这里的<code>_id</code>是默认输出的，如果不想输出将将它设置为<code>0</code>，想要输出那个字段将它设置为1</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span> &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>，_id:<span class=\"number\">0</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123;<span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span> &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>**注意这里的一个 <code>projection</code>不能 同时 指定包括和排除字段，除了排除 <code>_id</code>字段。 在 显式包括 字段的映射中，<code>_id</code> 字段是唯一一个您可以 显式排除 的。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"查询内嵌文档\"><a href=\"#查询内嵌文档\" class=\"headerlink\" title=\"查询内嵌文档\"></a>查询内嵌文档</h2><blockquote>\n<p><strong>上述例子中插入的<code>school</code>数据就表示内嵌文档</strong></p>\n</blockquote>\n<h3 id=\"完全匹配查询\"><a href=\"#完全匹配查询\" class=\"headerlink\" title=\"完全匹配查询\"></a>完全匹配查询</h3><blockquote>\n<p><strong>完全匹配查询表示<code>school</code>中的查询数组必须和插入的数组完全一样，顺序都必须一样才能查找出来</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">school</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,<span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面是指定输出的字段，这里的school.name表示只输出school文档中name字段，必须加引号</span></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">school</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'shida'</span>,<span class=\"attr\">city</span>:<span class=\"string\">'xuzhou'</span>&#125;&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"string\">'school.name'</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"键值对查询\"><a href=\"#键值对查询\" class=\"headerlink\" title=\"键值对查询\"></a>键值对查询</h3><blockquote>\n<p><strong>可以通过键值对查询，不用考虑顺序，比如<code>&#39;school.name&#39;:&#39;shida&#39;</code>，表示查询学校名字为<code>shida</code>的数据，这里的引号是必须要的</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"string\">'school.name'</span>:<span class=\"string\">'shida'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">school</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"查询操作符\"><a href=\"#查询操作符\" class=\"headerlink\" title=\"查询操作符\"></a>查询操作符</h2><blockquote>\n<p><strong>下面我们将配合查询操作符来执行复杂的查询操作，比如元素查询、 逻辑查询 、比较查询操作。我们使用下面的比较操作符<code>&quot;$gt&quot;</code> 、<code>&quot;$gte&quot;</code>、 <code>&quot;$lt&quot;</code>、 <code>&quot;$lte&quot;</code>(分别对应<code>&quot;&gt;&quot;</code>、 <code>&quot;&gt;=&quot;</code> 、<code>&quot;&lt;&quot;</code> 、<code>&quot;&lt;=&quot;</code>)</strong></p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p><strong>下面查询年龄在<code>20-30</code>之间的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;</div><div class=\"line\"><span class=\"attr\">age</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">20</span>,<span class=\"attr\">$lt</span>:<span class=\"number\">30</span>&#125;  </div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59056f81299fe049404b2899\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ne\"><a href=\"#ne\" class=\"headerlink\" title=\"$ne\"></a>$ne</h3><blockquote>\n<p><strong><code>$ne</code>表示不相等，例如查询年龄不等于<code>22</code>岁的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$ne</span>:<span class=\"number\">22</span>&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31e0\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><blockquote>\n<p><strong><code>$slice</code>操作符控制查询返回的数组中元素的个数。此操作符根据参数<code>{ field: value }</code> 指定键名和键值选择出文档集合，并且该文档集合中指定<code>array</code>键将返回从指定数量的元素。如果<code>count</code>的值大于数组中元素的数量，该查询返回数组中的所有元素的。</strong></p>\n<p><strong>语法：<code>db.collection.find( { field: value }, { array: {$slice: count }})</code>;</strong></p>\n<ul>\n<li><strong>下面将查询<code>grades</code>中的前两个数</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:<span class=\"number\">2</span>&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"string\">'school.name'</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出，可以看出这里的grades只输出了前面两个</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31df\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面将输出后3个数据</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jhon'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:<span class=\"number\">-3</span>&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31e0\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面介绍指定一个数组作为参数。数组参数使用<code>[ skip , limit ]</code> 格式，其中第一个值表示在数组中跳过的项目数,第二个值表示返回的项目数。</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;,&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$slice</span>:[<span class=\"number\">2</span>,<span class=\"number\">2</span>]&#125;,<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;);  <span class=\"comment\">//这里将会跳过前面的两个，直接得到后面的两个数据</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59057c16f551d8c9003d31df\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">44</span>, <span class=\"number\">55</span> ] &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"$exists\"></a>$exists</h3><blockquote>\n<p><strong>如果<code>$exists</code>的值为<code>true</code>,选择存在该字段的文档,若值为<code>false</code>则选择不包含该字段的文档</strong></p>\n<p><strong>下面将会查询不存在sex这一项的信息</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">sex</span>:&#123;<span class=\"attr\">$exists</span>:<span class=\"literal\">false</span>&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">db.user.find(&#123;<span class=\"attr\">sex</span>:&#123;<span class=\"attr\">$exists</span>:<span class=\"literal\">true</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"$or\"></a>$or</h3><blockquote>\n<p><strong>执行逻辑<code>OR</code>运算,指定一个至少包含两个表达式的数组，选择出至少满足数组中一条表达式的文档。</strong><br><strong>语法：<code>{ $or: [ { &lt;expression1&gt; }, { &lt;expression2&gt; }, ... , { &lt;expressionN&gt; } ] }</code></strong></p>\n<ul>\n<li><strong>下面将要查找<code>age</code>等于<code>22</code>或者<code>age</code>等于<code>33</code>的值</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">$or</span>:[&#123;<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;,&#123;<span class=\"attr\">age</span>:<span class=\"number\">33</span>&#125;]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面将会查找出年龄为22或者33并且姓名为<code>jack</code>的人的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">$or</span>:[&#123;<span class=\"attr\">age</span>:<span class=\"number\">33</span>&#125;,&#123;<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"$and\"></a>$and</h3><blockquote>\n<p><strong>指定一个至少包含两个表达式的数组，选择出满足该数组中所有表达式的文档。<code>$and</code>操作符使用短路操作，若第一个表达式的值为“<code>false</code>”,余下的表达式将不会执行。</strong><br><strong>语法：<code>{ $and: [ { &lt;expression1&gt; }, { &lt;expression2&gt; } , ... , { &lt;expressionN&gt; } ] }</code></strong></p>\n<ul>\n<li><strong>下面将会查找年龄在<code>20-30</code>之间的信息，对于下面使用逗号分隔符的表达式列表，<code>MongoDB</code>会提供一个隐式的<code>$and</code>操作：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">$and</span>:[&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">20</span>&#125;&#125;,&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$lt</span>:<span class=\"number\">30</span>&#125;&#125;]&#125;)</div><div class=\"line\"><span class=\"comment\">//上述语句相当于db.user.find(&#123;age:&#123;$gt:20&#125;,age:&#123;$lt:30&#125;&#125;)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"$in\"></a>$in</h3><blockquote>\n<p><strong>匹配键值等于指定数组中任意值的文档。类似<code>sql</code>中<code>in</code>，只要匹配一个<code>value</code>就会输出</strong><br><strong>语法：<code>{ field: { $in: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] } }</code></strong></p>\n<ul>\n<li><strong>下面将会查找grades中存在22,33之间的任意一个数的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> db.user.find(&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$in</span>:[<span class=\"number\">22</span>,<span class=\"number\">33</span>]&#125;&#125;)</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">//输出</span></div><div class=\"line\"> </div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cc\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jhon\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"sex\"</span> : <span class=\"literal\">null</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cd\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">33</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"java\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">66</span>, <span class=\"number\">22</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"kuangda\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"nin\"><a href=\"#nin\" class=\"headerlink\" title=\"$nin\"></a>$nin</h3><blockquote>\n<p><strong>　匹配键不存在或者键值不等于指定数组的任意值的文档。类似<code>sql</code>中<code>not in</code>(SQL中字段不存在使用会有语法错误).</strong></p>\n<ul>\n<li><strong>查询出<code>grades</code>中不存在100或者44的文档</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">grades</span>:&#123;<span class=\"attr\">$nin</span>:[<span class=\"number\">100</span>,<span class=\"number\">44</span>]&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"$not\"></a>$not</h3><blockquote>\n<p><strong>执行逻辑<code>NOT</code>运算，选择出不能匹配表达式的文档 ，包括没有指定键的文档。<code>$not</code>操作符不能独立使用，必须跟其他操作一起使用</strong></p>\n<p><strong>语法:{ field: { $not: { <operator-expression> } } }</strong></p>\n<ul>\n<li><strong>查询年龄不大于30的信息</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;<span class=\"attr\">age</span>:&#123;<span class=\"attr\">$not</span>:&#123;<span class=\"attr\">$gt</span>:<span class=\"number\">30</span>&#125;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出</span></div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"59058460fe58ed1089f2a5cb\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"jack\"</span>, <span class=\"string\">\"age\"</span> : <span class=\"number\">22</span>, <span class=\"string\">\"sex\"</span> : <span class=\"string\">\"Man\"</span>, <span class=\"string\">\"tags\"</span> : [ <span class=\"string\">\"python\"</span>, <span class=\"string\">\"c++\"</span>, <span class=\"string\">\"c\"</span> ], <span class=\"string\">\"grades\"</span> : [ <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span> ], <span class=\"string\">\"school\"</span> : &#123; <span class=\"string\">\"name\"</span> : <span class=\"string\">\"shida\"</span>, <span class=\"string\">\"city\"</span> : <span class=\"string\">\"xuzhou\"</span> &#125; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"迭代游标的查询\"><a href=\"#迭代游标的查询\" class=\"headerlink\" title=\"迭代游标的查询\"></a>迭代游标的查询</h2><blockquote>\n<p><strong>学过高级语言的朋友都知道迭代的问题，像java,下面使用迭代的方法查询</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cursor=db.usr.find();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里使用迭代输出所有的数据</span></div><div class=\"line\"><span class=\"keyword\">while</span>(cursor.hasNext())    <span class=\"comment\">//这里的hasNext()是判断是否下一个中还有可迭代的值，如果没有返回false</span></div><div class=\"line\">&#123;</div><div class=\"line\">    printjson(cursor.next());     <span class=\"comment\">//这里的cursor.next是迭代的输出，printjson是代替print(tojson()) </span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print cursor.count()    <span class=\"comment\">//输出其中有多少个数据</span></div><div class=\"line\"></div><div class=\"line\">cursor.forEach(printjson);   <span class=\"comment\">//forEach输出</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span>=cursor.toArray();     <span class=\"comment\">//将迭代对象转换成数组</span></div><div class=\"line\"></div><div class=\"line\">print <span class=\"built_in\">document</span>[<span class=\"number\">0</span>];       <span class=\"comment\">//以数组的形式输出</span></div></pre></td></tr></table></figure>\n"},{"title":"SQL干货篇一","date":"2017-04-06T14:33:37.000Z","_content":"# SQL系列之基本操作\n\n## 新建表\n>**CREATE TABLE <NAME> \n>[<列名><数据类型>[表级完整性约束条件]],\n[<列名><数据类型>[表级完整性约束条件]]......**\n\n>**实例**\n\n```SQL\nCREATE TABLE student(Sno CHAR(9) PRIMARY KEY,\nSname CHAR(20) UNIQUE,\nSsex CHAR(2),\nSage SMALLINT,\nSdept CHAR(20));\n```\n>**其中`student`是表名，`Sno`,`Sname`,`Ssex`,`Sage`,`Sdept`都是列名，后面的`CHAR`都是数据类型,这里的`PRIMARY KEY`是将`Sno`定义为主键,`UNIQUE`是将`Sname`定义为唯一的也就是后面插入数据的时候不能有重复的名字**\n>\n>**拓展**：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：`PRIMARY KEY(Sno,Sname)`\n\n\n## 删除表\n>* `DROP TABLE NAME;`只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表\n>* `DROP TABLE NAME CASCADE`;将全部删除，包括基本表和视图\n\n## 修改表\n>### **添加列**\n>>**`alter table 表名 add 列名 列数据类型 [after 插入位置]`**\n\n>**例子**\n>\n>> * `alter table student add grade smallint;` //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加\n>> * `alter table studnet add grade smallint after Sname;` //这里将grade插入到表中Sname列的后面\n\n>### 删除列\n>**`alter table 表名 drop 列名`**\n>\n>`alter table student drop Sname`;   //输出Sname那一列\n\n>### 修改列\n>**`alter table 表名 change 列名称 列新名称 新数据类型;`**\n\n>**实例**\n\n>* alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。\n\n>### 重命名表\n>**`alter table 表名 rename 新表名;`**\n\n>**实例：**\n>`alter table student rename STUDENT;`   //将表名改为STUDENT \n\n## 插入数据\n> **`INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);`**   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了\n\n>**例子:**\n>>* `INSERT INTO student(Sno,Sname,Sage,Ssex)values('201215124','jack',34,'男');`   //这里是插入表中的一些列的数据，并且对应了数据类型\n>>* `INSERT INTO student values('201215124','男','jack',34,'IS');`     //这里是按照表中的列名顺序插入数据的\n\n## 更新数据\n>**`update 表名称 set 列名称=新值 where 更新条件;`**\n\n\n>**实例：**\n>>* `update student set Sage=Sage+1 where Sno='12134'; `          //将Sno为12134的那一列数据的年龄加一\n\n## 删除表中的数据\n>**`delete from 表名称 where 删除条件;`**\n\n\n>**实例：**\n>>* delete from student where Sno='121314125';                //删除Sno为121314125的那一行数据\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/SQL基本操作.md","raw":"---\ntitle: SQL干货篇一\ndate: 2017-04-06 22:33:37\ncategories: 数据库干货篇\ntags: SQL\n---\n# SQL系列之基本操作\n\n## 新建表\n>**CREATE TABLE <NAME> \n>[<列名><数据类型>[表级完整性约束条件]],\n[<列名><数据类型>[表级完整性约束条件]]......**\n\n>**实例**\n\n```SQL\nCREATE TABLE student(Sno CHAR(9) PRIMARY KEY,\nSname CHAR(20) UNIQUE,\nSsex CHAR(2),\nSage SMALLINT,\nSdept CHAR(20));\n```\n>**其中`student`是表名，`Sno`,`Sname`,`Ssex`,`Sage`,`Sdept`都是列名，后面的`CHAR`都是数据类型,这里的`PRIMARY KEY`是将`Sno`定义为主键,`UNIQUE`是将`Sname`定义为唯一的也就是后面插入数据的时候不能有重复的名字**\n>\n>**拓展**：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：`PRIMARY KEY(Sno,Sname)`\n\n\n## 删除表\n>* `DROP TABLE NAME;`只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表\n>* `DROP TABLE NAME CASCADE`;将全部删除，包括基本表和视图\n\n## 修改表\n>### **添加列**\n>>**`alter table 表名 add 列名 列数据类型 [after 插入位置]`**\n\n>**例子**\n>\n>> * `alter table student add grade smallint;` //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加\n>> * `alter table studnet add grade smallint after Sname;` //这里将grade插入到表中Sname列的后面\n\n>### 删除列\n>**`alter table 表名 drop 列名`**\n>\n>`alter table student drop Sname`;   //输出Sname那一列\n\n>### 修改列\n>**`alter table 表名 change 列名称 列新名称 新数据类型;`**\n\n>**实例**\n\n>* alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。\n\n>### 重命名表\n>**`alter table 表名 rename 新表名;`**\n\n>**实例：**\n>`alter table student rename STUDENT;`   //将表名改为STUDENT \n\n## 插入数据\n> **`INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);`**   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了\n\n>**例子:**\n>>* `INSERT INTO student(Sno,Sname,Sage,Ssex)values('201215124','jack',34,'男');`   //这里是插入表中的一些列的数据，并且对应了数据类型\n>>* `INSERT INTO student values('201215124','男','jack',34,'IS');`     //这里是按照表中的列名顺序插入数据的\n\n## 更新数据\n>**`update 表名称 set 列名称=新值 where 更新条件;`**\n\n\n>**实例：**\n>>* `update student set Sage=Sage+1 where Sno='12134'; `          //将Sno为12134的那一列数据的年龄加一\n\n## 删除表中的数据\n>**`delete from 表名称 where 删除条件;`**\n\n\n>**实例：**\n>>* delete from student where Sno='121314125';                //删除Sno为121314125的那一行数据\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"SQL基本操作","published":1,"updated":"2017-04-06T14:47:15.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaww000nl0uztyy1j3aj","content":"<h1 id=\"SQL系列之基本操作\"><a href=\"#SQL系列之基本操作\" class=\"headerlink\" title=\"SQL系列之基本操作\"></a>SQL系列之基本操作</h1><h2 id=\"新建表\"><a href=\"#新建表\" class=\"headerlink\" title=\"新建表\"></a>新建表</h2><blockquote>\n<p><strong>CREATE TABLE <name><br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]],<br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]]……</name></strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(Sno <span class=\"built_in\">CHAR</span>(<span class=\"number\">9</span>) PRIMARY <span class=\"keyword\">KEY</span>,</div><div class=\"line\">Sname <span class=\"built_in\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>,</div><div class=\"line\">Ssex <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>),</div><div class=\"line\">Sage <span class=\"built_in\">SMALLINT</span>,</div><div class=\"line\">Sdept <span class=\"built_in\">CHAR</span>(<span class=\"number\">20</span>));</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>其中<code>student</code>是表名，<code>Sno</code>,<code>Sname</code>,<code>Ssex</code>,<code>Sage</code>,<code>Sdept</code>都是列名，后面的<code>CHAR</code>都是数据类型,这里的<code>PRIMARY KEY</code>是将<code>Sno</code>定义为主键,<code>UNIQUE</code>是将<code>Sname</code>定义为唯一的也就是后面插入数据的时候不能有重复的名字</strong></p>\n<p><strong>拓展</strong>：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：<code>PRIMARY KEY(Sno,Sname)</code></p>\n</blockquote>\n<h2 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h2><blockquote>\n<ul>\n<li><code>DROP TABLE NAME;</code>只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表</li>\n<li><code>DROP TABLE NAME CASCADE</code>;将全部删除，包括基本表和视图</li>\n</ul>\n</blockquote>\n<h2 id=\"修改表\"><a href=\"#修改表\" class=\"headerlink\" title=\"修改表\"></a>修改表</h2><blockquote>\n<h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a><strong>添加列</strong></h3><blockquote>\n<p><strong><code>alter table 表名 add 列名 列数据类型 [after 插入位置]</code></strong></p>\n</blockquote>\n<p><strong>例子</strong></p>\n<blockquote>\n<ul>\n<li><code>alter table student add grade smallint;</code> //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加</li>\n<li><code>alter table studnet add grade smallint after Sname;</code> //这里将grade插入到表中Sname列的后面</li>\n</ul>\n</blockquote>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><p><strong><code>alter table 表名 drop 列名</code></strong></p>\n<p><code>alter table student drop Sname</code>;   //输出Sname那一列</p>\n<h3 id=\"修改列\"><a href=\"#修改列\" class=\"headerlink\" title=\"修改列\"></a>修改列</h3><p><strong><code>alter table 表名 change 列名称 列新名称 新数据类型;</code></strong></p>\n<p><strong>实例</strong></p>\n<ul>\n<li>alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。</li>\n</ul>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><p><strong><code>alter table 表名 rename 新表名;</code></strong></p>\n<p><strong>实例：</strong><br><code>alter table student rename STUDENT;</code>   //将表名改为STUDENT </p>\n</blockquote>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><blockquote>\n<p><strong><code>INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);</code></strong>   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了</p>\n<p><strong>例子:</strong></p>\n<blockquote>\n<ul>\n<li><code>INSERT INTO student(Sno,Sname,Sage,Ssex)values(&#39;201215124&#39;,&#39;jack&#39;,34,&#39;男&#39;);</code>   //这里是插入表中的一些列的数据，并且对应了数据类型</li>\n<li><code>INSERT INTO student values(&#39;201215124&#39;,&#39;男&#39;,&#39;jack&#39;,34,&#39;IS&#39;);</code>     //这里是按照表中的列名顺序插入数据的</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><blockquote>\n<p><strong><code>update 表名称 set 列名称=新值 where 更新条件;</code></strong></p>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li><code>update student set Sage=Sage+1 where Sno=&#39;12134&#39;;</code>          //将Sno为12134的那一列数据的年龄加一</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"删除表中的数据\"><a href=\"#删除表中的数据\" class=\"headerlink\" title=\"删除表中的数据\"></a>删除表中的数据</h2><blockquote>\n<p><strong><code>delete from 表名称 where 删除条件;</code></strong></p>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li>delete from student where Sno=’121314125’;                //删除Sno为121314125的那一行数据</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"SQL系列之基本操作\"><a href=\"#SQL系列之基本操作\" class=\"headerlink\" title=\"SQL系列之基本操作\"></a>SQL系列之基本操作</h1><h2 id=\"新建表\"><a href=\"#新建表\" class=\"headerlink\" title=\"新建表\"></a>新建表</h2><blockquote>\n<p><strong>CREATE TABLE <NAME><br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]],<br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]]……</strong></p>\n<p><strong>实例</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(Sno <span class=\"built_in\">CHAR</span>(<span class=\"number\">9</span>) PRIMARY <span class=\"keyword\">KEY</span>,</div><div class=\"line\">Sname <span class=\"built_in\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>,</div><div class=\"line\">Ssex <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>),</div><div class=\"line\">Sage <span class=\"built_in\">SMALLINT</span>,</div><div class=\"line\">Sdept <span class=\"built_in\">CHAR</span>(<span class=\"number\">20</span>));</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>其中<code>student</code>是表名，<code>Sno</code>,<code>Sname</code>,<code>Ssex</code>,<code>Sage</code>,<code>Sdept</code>都是列名，后面的<code>CHAR</code>都是数据类型,这里的<code>PRIMARY KEY</code>是将<code>Sno</code>定义为主键,<code>UNIQUE</code>是将<code>Sname</code>定义为唯一的也就是后面插入数据的时候不能有重复的名字</strong></p>\n<p><strong>拓展</strong>：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：<code>PRIMARY KEY(Sno,Sname)</code></p>\n</blockquote>\n<h2 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h2><blockquote>\n<ul>\n<li><code>DROP TABLE NAME;</code>只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表</li>\n<li><code>DROP TABLE NAME CASCADE</code>;将全部删除，包括基本表和视图</li>\n</ul>\n</blockquote>\n<h2 id=\"修改表\"><a href=\"#修改表\" class=\"headerlink\" title=\"修改表\"></a>修改表</h2><blockquote>\n<h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a><strong>添加列</strong></h3><blockquote>\n<p><strong><code>alter table 表名 add 列名 列数据类型 [after 插入位置]</code></strong></p>\n</blockquote>\n<p><strong>例子</strong></p>\n<blockquote>\n<ul>\n<li><code>alter table student add grade smallint;</code> //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加</li>\n<li><code>alter table studnet add grade smallint after Sname;</code> //这里将grade插入到表中Sname列的后面</li>\n</ul>\n</blockquote>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><p><strong><code>alter table 表名 drop 列名</code></strong></p>\n<p><code>alter table student drop Sname</code>;   //输出Sname那一列</p>\n<h3 id=\"修改列\"><a href=\"#修改列\" class=\"headerlink\" title=\"修改列\"></a>修改列</h3><p><strong><code>alter table 表名 change 列名称 列新名称 新数据类型;</code></strong></p>\n<p><strong>实例</strong></p>\n<ul>\n<li>alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。</li>\n</ul>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><p><strong><code>alter table 表名 rename 新表名;</code></strong></p>\n<p><strong>实例：</strong><br><code>alter table student rename STUDENT;</code>   //将表名改为STUDENT </p>\n</blockquote>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><blockquote>\n<p><strong><code>INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);</code></strong>   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了</p>\n<p><strong>例子:</strong></p>\n<blockquote>\n<ul>\n<li><code>INSERT INTO student(Sno,Sname,Sage,Ssex)values(&#39;201215124&#39;,&#39;jack&#39;,34,&#39;男&#39;);</code>   //这里是插入表中的一些列的数据，并且对应了数据类型</li>\n<li><code>INSERT INTO student values(&#39;201215124&#39;,&#39;男&#39;,&#39;jack&#39;,34,&#39;IS&#39;);</code>     //这里是按照表中的列名顺序插入数据的</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><blockquote>\n<p><strong><code>update 表名称 set 列名称=新值 where 更新条件;</code></strong></p>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li><code>update student set Sage=Sage+1 where Sno=&#39;12134&#39;;</code>          //将Sno为12134的那一列数据的年龄加一</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"删除表中的数据\"><a href=\"#删除表中的数据\" class=\"headerlink\" title=\"删除表中的数据\"></a>删除表中的数据</h2><blockquote>\n<p><strong><code>delete from 表名称 where 删除条件;</code></strong></p>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li>delete from student where Sno=’121314125’;                //删除Sno为121314125的那一行数据</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"SQL干货篇三","date":"2017-04-16T14:36:33.000Z","_content":"# SQL干货篇三\n\n## 创建视图\n>* **`create view <视图名>[(列名),(列名)...] as <子查询> [with check option]`**\n>* **子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了**\n#### 实例\n>**建立在一个表上**\n```sql\ncreate view IS_student as select Sno,Sname,Sage where Sdept='IS'\nwith check option ;   /*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/\n```\n\n>**建立在多个表上**\n```sql\ncreate view IS_Grade(Sno,Sname,Grade) \nas select student.Sno,Sname,Grade from student,SC\nwhere Sdept='IS' and student.Sno=SC.Sno;           /*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/\n```\n\n>**定义一个带有表达式的视图**\n```sql\ncreate view BT_S(Sno,Sname,Sbirth) \nas select Sno,Sname,2014-Sage from student    /*这里的2014-Sage是用来计算出生日期的*/\nwith check option;\n```\n\n>**聚集函数的视图**\n```sql=\ncreate view BT(Sno,Gavg) \nas select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/\n```\n\n## 删除视图\n>* **`Drop view <视图名><CASCADE]`,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除**\n\n#### 实例\n>* `Drop view IS_Sdept;` 删除视图\n>* `Drop view IS_Sdept CASCADE;`  删除视图和其导出视图\n\n\n## 查询视图\n>**查询视图和查询表是一样的，请参照我前两章讲的[SQL语法](https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/)**\n\n\n## 更新视图\n>**视图的更新包括insert,delete,update,这个和基本表的操作是一样的**\n\n>**注意：**\n>>* 并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了`with check option`语句的情况下\n>>* 如果添加了`with check option`语句,那么对视图的更新就会对应转换成对基本表的更新\n>>* 各个系统对视图的更新还有进一步的规定，比如DB2规定：\n>>>* 如果视图是由两个以上的基本表导出，那么就不可以更新\n>>>* 如果视图来自字段或者表达式，那么就不允许对此视图执行`insert`,`update`,但是可以执行`delete`\n>>>* 如果定义中有order by子句，那么不可以更新视图\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/SQL干货篇三.md","raw":"---\ntitle: SQL干货篇三\ndate: 2017-04-16 22:36:33\ncategories: 数据库干货篇\ntags: SQL\n---\n# SQL干货篇三\n\n## 创建视图\n>* **`create view <视图名>[(列名),(列名)...] as <子查询> [with check option]`**\n>* **子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了**\n#### 实例\n>**建立在一个表上**\n```sql\ncreate view IS_student as select Sno,Sname,Sage where Sdept='IS'\nwith check option ;   /*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/\n```\n\n>**建立在多个表上**\n```sql\ncreate view IS_Grade(Sno,Sname,Grade) \nas select student.Sno,Sname,Grade from student,SC\nwhere Sdept='IS' and student.Sno=SC.Sno;           /*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/\n```\n\n>**定义一个带有表达式的视图**\n```sql\ncreate view BT_S(Sno,Sname,Sbirth) \nas select Sno,Sname,2014-Sage from student    /*这里的2014-Sage是用来计算出生日期的*/\nwith check option;\n```\n\n>**聚集函数的视图**\n```sql=\ncreate view BT(Sno,Gavg) \nas select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/\n```\n\n## 删除视图\n>* **`Drop view <视图名><CASCADE]`,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除**\n\n#### 实例\n>* `Drop view IS_Sdept;` 删除视图\n>* `Drop view IS_Sdept CASCADE;`  删除视图和其导出视图\n\n\n## 查询视图\n>**查询视图和查询表是一样的，请参照我前两章讲的[SQL语法](https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/)**\n\n\n## 更新视图\n>**视图的更新包括insert,delete,update,这个和基本表的操作是一样的**\n\n>**注意：**\n>>* 并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了`with check option`语句的情况下\n>>* 如果添加了`with check option`语句,那么对视图的更新就会对应转换成对基本表的更新\n>>* 各个系统对视图的更新还有进一步的规定，比如DB2规定：\n>>>* 如果视图是由两个以上的基本表导出，那么就不可以更新\n>>>* 如果视图来自字段或者表达式，那么就不允许对此视图执行`insert`,`update`,但是可以执行`delete`\n>>>* 如果定义中有order by子句，那么不可以更新视图\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"SQL干货篇三","published":1,"updated":"2017-04-16T14:37:37.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwawz000pl0uz65if4vtk","content":"<h1 id=\"SQL干货篇三\"><a href=\"#SQL干货篇三\" class=\"headerlink\" title=\"SQL干货篇三\"></a>SQL干货篇三</h1><h2 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h2><blockquote>\n<ul>\n<li><strong><code>create view &lt;视图名&gt;[(列名),(列名)...] as &lt;子查询&gt; [with check option]</code></strong></li>\n<li><strong>子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了</strong><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><strong>建立在一个表上</strong><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> IS_student <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> Sno,Sname,Sage <span class=\"keyword\">where</span> Sdept=<span class=\"string\">'IS'</span></div><div class=\"line\"><span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span> ;   <span class=\"comment\">/*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>建立在多个表上</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> IS_Grade(Sno,Sname,Grade) </div><div class=\"line\"><span class=\"keyword\">as</span> <span class=\"keyword\">select</span> student.Sno,Sname,Grade <span class=\"keyword\">from</span> student,SC</div><div class=\"line\"><span class=\"keyword\">where</span> Sdept=<span class=\"string\">'IS'</span> <span class=\"keyword\">and</span> student.Sno=SC.Sno;           <span class=\"comment\">/*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/</span></div></pre></td></tr></table></figure></p>\n<p><strong>定义一个带有表达式的视图</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> BT_S(Sno,Sname,Sbirth) </div><div class=\"line\"><span class=\"keyword\">as</span> <span class=\"keyword\">select</span> Sno,Sname,<span class=\"number\">2014</span>-Sage <span class=\"keyword\">from</span> student    <span class=\"comment\">/*这里的2014-Sage是用来计算出生日期的*/</span></div><div class=\"line\"><span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span>;</div></pre></td></tr></table></figure></p>\n<p><strong>聚集函数的视图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create view BT(Sno,Gavg) </div><div class=\"line\">as select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h2><blockquote>\n<ul>\n<li><strong><code>Drop view &lt;视图名&gt;&lt;CASCADE]</code>,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>Drop view IS_Sdept;</code> 删除视图</li>\n<li><code>Drop view IS_Sdept CASCADE;</code>  删除视图和其导出视图</li>\n</ul>\n</blockquote>\n<h2 id=\"查询视图\"><a href=\"#查询视图\" class=\"headerlink\" title=\"查询视图\"></a>查询视图</h2><blockquote>\n<p><strong>查询视图和查询表是一样的，请参照我前两章讲的<a href=\"https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/\">SQL语法</a></strong></p>\n</blockquote>\n<h2 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h2><blockquote>\n<p><strong>视图的更新包括insert,delete,update,这个和基本表的操作是一样的</strong></p>\n<p><strong>注意：</strong></p>\n<blockquote>\n<ul>\n<li>并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了<code>with check option</code>语句的情况下</li>\n<li>如果添加了<code>with check option</code>语句,那么对视图的更新就会对应转换成对基本表的更新</li>\n<li>各个系统对视图的更新还有进一步的规定，比如DB2规定：<blockquote>\n<ul>\n<li>如果视图是由两个以上的基本表导出，那么就不可以更新</li>\n<li>如果视图来自字段或者表达式，那么就不允许对此视图执行<code>insert</code>,<code>update</code>,但是可以执行<code>delete</code></li>\n<li>如果定义中有order by子句，那么不可以更新视图</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"SQL干货篇三\"><a href=\"#SQL干货篇三\" class=\"headerlink\" title=\"SQL干货篇三\"></a>SQL干货篇三</h1><h2 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h2><blockquote>\n<ul>\n<li><strong><code>create view &lt;视图名&gt;[(列名),(列名)...] as &lt;子查询&gt; [with check option]</code></strong></li>\n<li><strong>子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了</strong><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><strong>建立在一个表上</strong><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> IS_student <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> Sno,Sname,Sage <span class=\"keyword\">where</span> Sdept=<span class=\"string\">'IS'</span></div><div class=\"line\"><span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span> ;   <span class=\"comment\">/*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>建立在多个表上</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> IS_Grade(Sno,Sname,Grade) </div><div class=\"line\"><span class=\"keyword\">as</span> <span class=\"keyword\">select</span> student.Sno,Sname,Grade <span class=\"keyword\">from</span> student,SC</div><div class=\"line\"><span class=\"keyword\">where</span> Sdept=<span class=\"string\">'IS'</span> <span class=\"keyword\">and</span> student.Sno=SC.Sno;           <span class=\"comment\">/*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/</span></div></pre></td></tr></table></figure></p>\n<p><strong>定义一个带有表达式的视图</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> BT_S(Sno,Sname,Sbirth) </div><div class=\"line\"><span class=\"keyword\">as</span> <span class=\"keyword\">select</span> Sno,Sname,<span class=\"number\">2014</span>-Sage <span class=\"keyword\">from</span> student    <span class=\"comment\">/*这里的2014-Sage是用来计算出生日期的*/</span></div><div class=\"line\"><span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span>;</div></pre></td></tr></table></figure></p>\n<p><strong>聚集函数的视图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create view BT(Sno,Gavg) </div><div class=\"line\">as select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h2><blockquote>\n<ul>\n<li><strong><code>Drop view &lt;视图名&gt;&lt;CASCADE]</code>,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><blockquote>\n<ul>\n<li><code>Drop view IS_Sdept;</code> 删除视图</li>\n<li><code>Drop view IS_Sdept CASCADE;</code>  删除视图和其导出视图</li>\n</ul>\n</blockquote>\n<h2 id=\"查询视图\"><a href=\"#查询视图\" class=\"headerlink\" title=\"查询视图\"></a>查询视图</h2><blockquote>\n<p><strong>查询视图和查询表是一样的，请参照我前两章讲的<a href=\"https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/\">SQL语法</a></strong></p>\n</blockquote>\n<h2 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h2><blockquote>\n<p><strong>视图的更新包括insert,delete,update,这个和基本表的操作是一样的</strong></p>\n<p><strong>注意：</strong></p>\n<blockquote>\n<ul>\n<li>并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了<code>with check option</code>语句的情况下</li>\n<li>如果添加了<code>with check option</code>语句,那么对视图的更新就会对应转换成对基本表的更新</li>\n<li>各个系统对视图的更新还有进一步的规定，比如DB2规定：<blockquote>\n<ul>\n<li>如果视图是由两个以上的基本表导出，那么就不可以更新</li>\n<li>如果视图来自字段或者表达式，那么就不允许对此视图执行<code>insert</code>,<code>update</code>,但是可以执行<code>delete</code></li>\n<li>如果定义中有order by子句，那么不可以更新视图</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"SQL干货篇二","date":"2017-04-09T15:13:13.000Z","_content":"# SQL干货篇之查询数据\n## 单表查询\n>**只在一个表中查询数据**\n```sql\nSELECT * FROM student where Sno='13143';   //根据学号查询数据\n```\n## 多表查询\n>**同时查询多个表**\n```sql\nSELECT student.Sno,student.Sname,Grade\nFROM student,SC where Grade>=90;\n```\n>**说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表**\n\n## 模糊查找\n\n>**说明：模糊查找用`like`和`not like`进行查找**\n* `SELECT * FROM student where Sname like '刘%';`查询所有姓刘的学生\n* `SELECT * FROM student where Sname like '%加%'`查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项\n* `SELECT * FROM student where Sname like '欧阳_';`查找以姓欧阳并且名字为**三**个字的学生信息\n* `SELECT * FROM student WHERE Sname like '_阳';`查找所有姓名为两个字并且第二个字为**阳**的学生信息\n* `SELECT * FROM student where Sname like '_阳%';`查询所有姓名中第二个字为**阳**的学生信息\n* `SELECT * FROM Course where Cname like '\\_IS' ESCAPE '\\';`查询课程名字为**_is**的课程信息，这里如果要查询的字符串本省就含有通配符\"`%`\"或者\"`_`\"，这时就要使用`ESCAPE<转码字符>`来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用`\\`,上面的查询语句中的`\\`就是转码字符\n\n## 空值查询\n>**判断数据是否为空用`is not null`和`is null`**\n`SELECT * FROM student where Sname is null`;查询姓名为空的学生信息\n\n## 多重条件的查询\n>**多重条件的查询用AND和OR,其区别不用多说了**\n`SELECT Sname FROM student where Sdept='IS' and Sage>20;`查找院系是IS并且年龄超过20岁的学生姓名\n\n## ORDER BY子句(排序)\n>**用户可以使用ORDER BY子句对数据进行升序(`ASC`)或者降序(`DESC`)排列**\n* `SELECT * FROM student where Sage>20 ORDER BY Sno DESC;`查询年龄超过20岁的学生信息，并且按照降序排列输出\n* `SELECT * FROM student ORDER BY Sdept,Sage DESC;`查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列\n\n## 聚集函数\n>* `COUNT(*)`   统计元组个数\n>* `COUNT(DISTINCT|ALL <列名>)`  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素\n>* `SUM(DISTINCT|ALL <列名>)`   计算一列值的总和\n>* `AVG(DISTINCT|ALL<列名>)`     计算一列中的平均值\n>* `MAX(DISTINCT|ALL<列名> )`    求一列中的最大值\n>* `MIN(DISTINCT|ALL<列名> )`    求一列中的最小值\n\n**实例：**\n>* `select count(*) from student;`     查询学生总数\n>* `select count(DISTINCT Sdept);`     查询总共有多少系\n>* `select AVG(Grade) from SC; `        查询学生的平均分\n>* `select SUM(Grade) from SC;`         查询学生的总分\n>* `select MAX(Grade) from SC where Cno='1';`    查询课程1的最高分\n>* `select MIN(Grade) from SC where Cno='1';`     查询课程1的最低分\n\n**注意：`where`子句中不能用聚集函数，只有在`select`子句和`Group by`子句中才能使用聚集函数**\n\n## GROUP BY子句\n* **GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。**\n* **对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值**\n\n>**实例：**\n* `select Cno,Count(Sno) from SC Group by Cno;`      求各个课程号以及相应的选课人数\n* `select Cno as '课程号',count(Sno) as '选课人数' from sc group by Cno;`求各个课程号以及相应的选课人数\n* `select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)>80;`  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用`Having`子句进行条件筛选，**不能使用`where`子句进行筛选**,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成`select Cno,count(Sno) from sc group by Cno Having AVG(Grade)>80;`\n* `select Sno from sc Group by Sno having count(*)>2;`   查询选修了两门以上课程的学生学号\n* `select Sno,AVG(Grade) from sc Group by Sno;` 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩\n\n>**注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：`select Sno,count(Cno) from sc;`这条语句就是错误的，因为`Sno`没有出现在聚集函数或者`Group by`子句中，如果改成`select Sno,count(Cno) from SC Group by Sno;`就正确了,因为Sno出现在了`Group by`子句中了**\n\n## 连接查询\n>**如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询**\n\n>### 等值和非等值连接查询\n>**当连接运算符为=时为等值连接查询，否则为非等值连接查询**\n\n>**实例：**\n>* `select student.*,SC.* from student,SC where student.Sno=SC.Sno;`查询每个学生及其选修课程的情况\n\n>### 自然连接查询\n>**在等值连接的基础上去掉相等的属性组就是自然连接查询**\n\n>**实例：**\n>`select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno; `\n\n\n## 嵌套查询\n>**在`SQL`语言中一个`SELECT-FROM-WHERE`语句称为一个**查询块**，将一个查询块嵌套在另外一个查询块的`WHERE`子句或`HAVING`短语的条件查询称之为嵌套查询**\n>**实例：**\n```sql\nSELECT SNAME FROM STUDENT WHERE SNO IN    /*外层查询*/\n(SELECT SNO FROM SC WHERE CNO='2');    /*内层查询或者子查询*/\n```\n>**注意:**\n>* 这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。\n>* 子查询中不能使用`ORDER BY`子句，`ORDER BY`子句只能对最终的查询结果排序\n\n### 带有IN谓词的嵌套查询\n>**实例：**\n\n```sql\nSELECT Sno,Sname,Sdept from student where Sdept IN\n(SELECT Sdept From student Where Sname='刘晨');\n```  \n\n**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**\n\n```sql\nselect first.Sno,first.Sname,first.Sdept \nfrom student first,student second\nwhere first.Sdept=second.Sdept and second.Sname='刘晨';\n```\n\n### 带有比较运算符的子查询\n```sql\nselect Sno,Cno from sc x where Grade >\n(select AVG(Grade) from sc y where x.Sno=y.Sno);\n```\n**查询了所有学生成绩超过选修课程平均成绩的课程号**\n\n### 带有ANY或者ALL的谓词子查询\n>**`ANY`表示查询条件只要满足其中一个即可，而`ALL`表示查询条件要满足所有的才行**\n>**实例：**\n> * `SELECT SNAME,SAGE FROM STUDENT WHERE SAGE<ANY(SELECT SAGE FROM STUDENT WHERE SDEPT='CS') AND SDEPT!='CS';`查询非计算机系的比计算机系**任意**一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可\n>* `SELECT SNAME,SAGE FROM STUDENT WHERE SAGE<ALL(SELECT SAGE FROM STUDENT WHERE SDEPT='CS') AND SDEPT!='CS';`查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，**就是比计算机系年龄最小的都要小**\n\n\n### 带有EXISTS谓词的子查询\n>**`EXISTS`表示存在的意思，带有`EXISTS`的子查询步返回任何的数据，只产生逻辑真或者假**\n>* `SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno='2');`查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有`NOT EXISTS`\n\n\n## 集合查询\n>**集合操作包括并操作`UNION`、交操作`INTERSECT`、差操作`EXCEPT`**\n\n>**实例：**\n>* `select * from student where Sdept= 'CS' UNION select * from student where Sage>19;`查找计算机系的学生以及年龄不大于19岁的学生信息，这里`UNION`会自动去掉重复的元组，如果想要保留**全部**的数据需要用`UNION ALL`\n>* `select Sno from SC where Cno='1' UNION select Sno from SC where Cno='2';`查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用`UNION ALL` 可以保留\n>* `select Sno from SC where Cno='1' Intersect select Sno from SC where Cno='2';`查询同时选修课程1和课程2的学生学号\n\n### 基于派生表的查询\n```sql\nselect Sno,Cno from SC,(select Sno,AVG(Grade) from SC Group by Sno) \nAS AVG_SC(avg_Sno,avg_grade)\nwhere SC.Sno=AVG_SC.avg_Sno and SC.Grade>=AVG_SC.avg_grade;\n```\n>**这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号**\n\n>**注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：**\n>>`select Sname from student,(select Sno From SC where Cno='1') AS SCI where student.Sno=SCI.Sno;`这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/SQL干货篇二.md","raw":"---\ntitle: SQL干货篇二\ndate: 2017-04-09 23:13:13\ncategories: 数据库干货篇\ntags: SQL\n---\n# SQL干货篇之查询数据\n## 单表查询\n>**只在一个表中查询数据**\n```sql\nSELECT * FROM student where Sno='13143';   //根据学号查询数据\n```\n## 多表查询\n>**同时查询多个表**\n```sql\nSELECT student.Sno,student.Sname,Grade\nFROM student,SC where Grade>=90;\n```\n>**说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表**\n\n## 模糊查找\n\n>**说明：模糊查找用`like`和`not like`进行查找**\n* `SELECT * FROM student where Sname like '刘%';`查询所有姓刘的学生\n* `SELECT * FROM student where Sname like '%加%'`查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项\n* `SELECT * FROM student where Sname like '欧阳_';`查找以姓欧阳并且名字为**三**个字的学生信息\n* `SELECT * FROM student WHERE Sname like '_阳';`查找所有姓名为两个字并且第二个字为**阳**的学生信息\n* `SELECT * FROM student where Sname like '_阳%';`查询所有姓名中第二个字为**阳**的学生信息\n* `SELECT * FROM Course where Cname like '\\_IS' ESCAPE '\\';`查询课程名字为**_is**的课程信息，这里如果要查询的字符串本省就含有通配符\"`%`\"或者\"`_`\"，这时就要使用`ESCAPE<转码字符>`来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用`\\`,上面的查询语句中的`\\`就是转码字符\n\n## 空值查询\n>**判断数据是否为空用`is not null`和`is null`**\n`SELECT * FROM student where Sname is null`;查询姓名为空的学生信息\n\n## 多重条件的查询\n>**多重条件的查询用AND和OR,其区别不用多说了**\n`SELECT Sname FROM student where Sdept='IS' and Sage>20;`查找院系是IS并且年龄超过20岁的学生姓名\n\n## ORDER BY子句(排序)\n>**用户可以使用ORDER BY子句对数据进行升序(`ASC`)或者降序(`DESC`)排列**\n* `SELECT * FROM student where Sage>20 ORDER BY Sno DESC;`查询年龄超过20岁的学生信息，并且按照降序排列输出\n* `SELECT * FROM student ORDER BY Sdept,Sage DESC;`查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列\n\n## 聚集函数\n>* `COUNT(*)`   统计元组个数\n>* `COUNT(DISTINCT|ALL <列名>)`  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素\n>* `SUM(DISTINCT|ALL <列名>)`   计算一列值的总和\n>* `AVG(DISTINCT|ALL<列名>)`     计算一列中的平均值\n>* `MAX(DISTINCT|ALL<列名> )`    求一列中的最大值\n>* `MIN(DISTINCT|ALL<列名> )`    求一列中的最小值\n\n**实例：**\n>* `select count(*) from student;`     查询学生总数\n>* `select count(DISTINCT Sdept);`     查询总共有多少系\n>* `select AVG(Grade) from SC; `        查询学生的平均分\n>* `select SUM(Grade) from SC;`         查询学生的总分\n>* `select MAX(Grade) from SC where Cno='1';`    查询课程1的最高分\n>* `select MIN(Grade) from SC where Cno='1';`     查询课程1的最低分\n\n**注意：`where`子句中不能用聚集函数，只有在`select`子句和`Group by`子句中才能使用聚集函数**\n\n## GROUP BY子句\n* **GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。**\n* **对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值**\n\n>**实例：**\n* `select Cno,Count(Sno) from SC Group by Cno;`      求各个课程号以及相应的选课人数\n* `select Cno as '课程号',count(Sno) as '选课人数' from sc group by Cno;`求各个课程号以及相应的选课人数\n* `select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)>80;`  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用`Having`子句进行条件筛选，**不能使用`where`子句进行筛选**,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成`select Cno,count(Sno) from sc group by Cno Having AVG(Grade)>80;`\n* `select Sno from sc Group by Sno having count(*)>2;`   查询选修了两门以上课程的学生学号\n* `select Sno,AVG(Grade) from sc Group by Sno;` 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩\n\n>**注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：`select Sno,count(Cno) from sc;`这条语句就是错误的，因为`Sno`没有出现在聚集函数或者`Group by`子句中，如果改成`select Sno,count(Cno) from SC Group by Sno;`就正确了,因为Sno出现在了`Group by`子句中了**\n\n## 连接查询\n>**如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询**\n\n>### 等值和非等值连接查询\n>**当连接运算符为=时为等值连接查询，否则为非等值连接查询**\n\n>**实例：**\n>* `select student.*,SC.* from student,SC where student.Sno=SC.Sno;`查询每个学生及其选修课程的情况\n\n>### 自然连接查询\n>**在等值连接的基础上去掉相等的属性组就是自然连接查询**\n\n>**实例：**\n>`select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno; `\n\n\n## 嵌套查询\n>**在`SQL`语言中一个`SELECT-FROM-WHERE`语句称为一个**查询块**，将一个查询块嵌套在另外一个查询块的`WHERE`子句或`HAVING`短语的条件查询称之为嵌套查询**\n>**实例：**\n```sql\nSELECT SNAME FROM STUDENT WHERE SNO IN    /*外层查询*/\n(SELECT SNO FROM SC WHERE CNO='2');    /*内层查询或者子查询*/\n```\n>**注意:**\n>* 这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。\n>* 子查询中不能使用`ORDER BY`子句，`ORDER BY`子句只能对最终的查询结果排序\n\n### 带有IN谓词的嵌套查询\n>**实例：**\n\n```sql\nSELECT Sno,Sname,Sdept from student where Sdept IN\n(SELECT Sdept From student Where Sname='刘晨');\n```  \n\n**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**\n\n```sql\nselect first.Sno,first.Sname,first.Sdept \nfrom student first,student second\nwhere first.Sdept=second.Sdept and second.Sname='刘晨';\n```\n\n### 带有比较运算符的子查询\n```sql\nselect Sno,Cno from sc x where Grade >\n(select AVG(Grade) from sc y where x.Sno=y.Sno);\n```\n**查询了所有学生成绩超过选修课程平均成绩的课程号**\n\n### 带有ANY或者ALL的谓词子查询\n>**`ANY`表示查询条件只要满足其中一个即可，而`ALL`表示查询条件要满足所有的才行**\n>**实例：**\n> * `SELECT SNAME,SAGE FROM STUDENT WHERE SAGE<ANY(SELECT SAGE FROM STUDENT WHERE SDEPT='CS') AND SDEPT!='CS';`查询非计算机系的比计算机系**任意**一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可\n>* `SELECT SNAME,SAGE FROM STUDENT WHERE SAGE<ALL(SELECT SAGE FROM STUDENT WHERE SDEPT='CS') AND SDEPT!='CS';`查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，**就是比计算机系年龄最小的都要小**\n\n\n### 带有EXISTS谓词的子查询\n>**`EXISTS`表示存在的意思，带有`EXISTS`的子查询步返回任何的数据，只产生逻辑真或者假**\n>* `SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno='2');`查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有`NOT EXISTS`\n\n\n## 集合查询\n>**集合操作包括并操作`UNION`、交操作`INTERSECT`、差操作`EXCEPT`**\n\n>**实例：**\n>* `select * from student where Sdept= 'CS' UNION select * from student where Sage>19;`查找计算机系的学生以及年龄不大于19岁的学生信息，这里`UNION`会自动去掉重复的元组，如果想要保留**全部**的数据需要用`UNION ALL`\n>* `select Sno from SC where Cno='1' UNION select Sno from SC where Cno='2';`查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用`UNION ALL` 可以保留\n>* `select Sno from SC where Cno='1' Intersect select Sno from SC where Cno='2';`查询同时选修课程1和课程2的学生学号\n\n### 基于派生表的查询\n```sql\nselect Sno,Cno from SC,(select Sno,AVG(Grade) from SC Group by Sno) \nAS AVG_SC(avg_Sno,avg_grade)\nwhere SC.Sno=AVG_SC.avg_Sno and SC.Grade>=AVG_SC.avg_grade;\n```\n>**这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号**\n\n>**注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：**\n>>`select Sname from student,(select Sno From SC where Cno='1') AS SCI where student.Sno=SCI.Sno;`这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"SQL干货篇二","published":1,"updated":"2017-04-09T15:21:08.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwax3000tl0uz2oe667bz","content":"<h1 id=\"SQL干货篇之查询数据\"><a href=\"#SQL干货篇之查询数据\" class=\"headerlink\" title=\"SQL干货篇之查询数据\"></a>SQL干货篇之查询数据</h1><h2 id=\"单表查询\"><a href=\"#单表查询\" class=\"headerlink\" title=\"单表查询\"></a>单表查询</h2><blockquote>\n<p><strong>只在一个表中查询数据</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student <span class=\"keyword\">where</span> Sno=<span class=\"string\">'13143'</span>;   //根据学号查询数据</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><blockquote>\n<p><strong>同时查询多个表</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> student.Sno,student.Sname,Grade</div><div class=\"line\"><span class=\"keyword\">FROM</span> student,SC <span class=\"keyword\">where</span> Grade&gt;=<span class=\"number\">90</span>;</div></pre></td></tr></table></figure></p>\n<p><strong>说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表</strong></p>\n</blockquote>\n<h2 id=\"模糊查找\"><a href=\"#模糊查找\" class=\"headerlink\" title=\"模糊查找\"></a>模糊查找</h2><blockquote>\n<p><strong>说明：模糊查找用<code>like</code>和<code>not like</code>进行查找</strong></p>\n<ul>\n<li><code>SELECT * FROM student where Sname like &#39;刘%&#39;;</code>查询所有姓刘的学生</li>\n<li><code>SELECT * FROM student where Sname like &#39;%加%&#39;</code>查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项</li>\n<li><code>SELECT * FROM student where Sname like &#39;欧阳_&#39;;</code>查找以姓欧阳并且名字为<strong>三</strong>个字的学生信息</li>\n<li><code>SELECT * FROM student WHERE Sname like &#39;_阳&#39;;</code>查找所有姓名为两个字并且第二个字为<strong>阳</strong>的学生信息</li>\n<li><code>SELECT * FROM student where Sname like &#39;_阳%&#39;;</code>查询所有姓名中第二个字为<strong>阳</strong>的学生信息</li>\n<li><code>SELECT * FROM Course where Cname like &#39;\\_IS&#39; ESCAPE &#39;\\&#39;;</code>查询课程名字为<strong>_is</strong>的课程信息，这里如果要查询的字符串本省就含有通配符”<code>%</code>“或者”<code>_</code>“，这时就要使用<code>ESCAPE&lt;转码字符&gt;</code>来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用<code>\\</code>,上面的查询语句中的<code>\\</code>就是转码字符</li>\n</ul>\n</blockquote>\n<h2 id=\"空值查询\"><a href=\"#空值查询\" class=\"headerlink\" title=\"空值查询\"></a>空值查询</h2><blockquote>\n<p><strong>判断数据是否为空用<code>is not null</code>和<code>is null</code></strong><br><code>SELECT * FROM student where Sname is null</code>;查询姓名为空的学生信息</p>\n</blockquote>\n<h2 id=\"多重条件的查询\"><a href=\"#多重条件的查询\" class=\"headerlink\" title=\"多重条件的查询\"></a>多重条件的查询</h2><blockquote>\n<p><strong>多重条件的查询用AND和OR,其区别不用多说了</strong><br><code>SELECT Sname FROM student where Sdept=&#39;IS&#39; and Sage&gt;20;</code>查找院系是IS并且年龄超过20岁的学生姓名</p>\n</blockquote>\n<h2 id=\"ORDER-BY子句-排序\"><a href=\"#ORDER-BY子句-排序\" class=\"headerlink\" title=\"ORDER BY子句(排序)\"></a>ORDER BY子句(排序)</h2><blockquote>\n<p><strong>用户可以使用ORDER BY子句对数据进行升序(<code>ASC</code>)或者降序(<code>DESC</code>)排列</strong></p>\n<ul>\n<li><code>SELECT * FROM student where Sage&gt;20 ORDER BY Sno DESC;</code>查询年龄超过20岁的学生信息，并且按照降序排列输出</li>\n<li><code>SELECT * FROM student ORDER BY Sdept,Sage DESC;</code>查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列</li>\n</ul>\n</blockquote>\n<h2 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h2><blockquote>\n<ul>\n<li><code>COUNT(*)</code>   统计元组个数</li>\n<li><code>COUNT(DISTINCT|ALL &lt;列名&gt;)</code>  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素</li>\n<li><code>SUM(DISTINCT|ALL &lt;列名&gt;)</code>   计算一列值的总和</li>\n<li><code>AVG(DISTINCT|ALL&lt;列名&gt;)</code>     计算一列中的平均值</li>\n<li><code>MAX(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最大值</li>\n<li><code>MIN(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最小值</li>\n</ul>\n</blockquote>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li><code>select count(*) from student;</code>     查询学生总数</li>\n<li><code>select count(DISTINCT Sdept);</code>     查询总共有多少系</li>\n<li><code>select AVG(Grade) from SC;</code>        查询学生的平均分</li>\n<li><code>select SUM(Grade) from SC;</code>         查询学生的总分</li>\n<li><code>select MAX(Grade) from SC where Cno=&#39;1&#39;;</code>    查询课程1的最高分</li>\n<li><code>select MIN(Grade) from SC where Cno=&#39;1&#39;;</code>     查询课程1的最低分</li>\n</ul>\n</blockquote>\n<p><strong>注意：<code>where</code>子句中不能用聚集函数，只有在<code>select</code>子句和<code>Group by</code>子句中才能使用聚集函数</strong></p>\n<h2 id=\"GROUP-BY子句\"><a href=\"#GROUP-BY子句\" class=\"headerlink\" title=\"GROUP BY子句\"></a>GROUP BY子句</h2><ul>\n<li><strong>GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。</strong></li>\n<li><strong>对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值</strong></li>\n</ul>\n<blockquote>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select Cno,Count(Sno) from SC Group by Cno;</code>      求各个课程号以及相应的选课人数</li>\n<li><code>select Cno as &#39;课程号&#39;,count(Sno) as &#39;选课人数&#39; from sc group by Cno;</code>求各个课程号以及相应的选课人数</li>\n<li><code>select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)&gt;80;</code>  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用<code>Having</code>子句进行条件筛选，<strong>不能使用<code>where</code>子句进行筛选</strong>,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成<code>select Cno,count(Sno) from sc group by Cno Having AVG(Grade)&gt;80;</code></li>\n<li><code>select Sno from sc Group by Sno having count(*)&gt;2;</code>   查询选修了两门以上课程的学生学号</li>\n<li><code>select Sno,AVG(Grade) from sc Group by Sno;</code> 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩</li>\n</ul>\n<p><strong>注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：<code>select Sno,count(Cno) from sc;</code>这条语句就是错误的，因为<code>Sno</code>没有出现在聚集函数或者<code>Group by</code>子句中，如果改成<code>select Sno,count(Cno) from SC Group by Sno;</code>就正确了,因为Sno出现在了<code>Group by</code>子句中了</strong></p>\n</blockquote>\n<h2 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h2><blockquote>\n<p><strong>如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询</strong></p>\n<h3 id=\"等值和非等值连接查询\"><a href=\"#等值和非等值连接查询\" class=\"headerlink\" title=\"等值和非等值连接查询\"></a>等值和非等值连接查询</h3><p><strong>当连接运算符为=时为等值连接查询，否则为非等值连接查询</strong></p>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select student.*,SC.* from student,SC where student.Sno=SC.Sno;</code>查询每个学生及其选修课程的情况</li>\n</ul>\n<h3 id=\"自然连接查询\"><a href=\"#自然连接查询\" class=\"headerlink\" title=\"自然连接查询\"></a>自然连接查询</h3><p><strong>在等值连接的基础上去掉相等的属性组就是自然连接查询</strong></p>\n<p><strong>实例：</strong><br><code>select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno;</code></p>\n</blockquote>\n<h2 id=\"嵌套查询\"><a href=\"#嵌套查询\" class=\"headerlink\" title=\"嵌套查询\"></a>嵌套查询</h2><blockquote>\n<p><strong>在<code>SQL</code>语言中一个<code>SELECT-FROM-WHERE</code>语句称为一个</strong>查询块<strong>，将一个查询块嵌套在另外一个查询块的<code>WHERE</code>子句或<code>HAVING</code>短语的条件查询称之为嵌套查询</strong><br><strong>实例：</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> SNAME <span class=\"keyword\">FROM</span> STUDENT <span class=\"keyword\">WHERE</span> SNO <span class=\"keyword\">IN</span>    <span class=\"comment\">/*外层查询*/</span></div><div class=\"line\">(<span class=\"keyword\">SELECT</span> SNO <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> CNO=<span class=\"string\">'2'</span>);    <span class=\"comment\">/*内层查询或者子查询*/</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。</li>\n<li>子查询中不能使用<code>ORDER BY</code>子句，<code>ORDER BY</code>子句只能对最终的查询结果排序</li>\n</ul>\n</blockquote>\n<h3 id=\"带有IN谓词的嵌套查询\"><a href=\"#带有IN谓词的嵌套查询\" class=\"headerlink\" title=\"带有IN谓词的嵌套查询\"></a>带有IN谓词的嵌套查询</h3><blockquote>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT Sno,Sname,Sdept from student where Sdept IN</div><div class=\"line\">(SELECT Sdept From student Where Sname='刘晨');</div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">select first.Sno,first.Sname,first.Sdept </div><div class=\"line\">from student first,student second</div><div class=\"line\">where first.Sdept=second.Sdept and second.Sname='刘晨';</div></pre></td></tr></table></figure>\n<h3 id=\"带有比较运算符的子查询\"><a href=\"#带有比较运算符的子查询\" class=\"headerlink\" title=\"带有比较运算符的子查询\"></a>带有比较运算符的子查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Sno,Cno <span class=\"keyword\">from</span> sc x <span class=\"keyword\">where</span> Grade &gt;</div><div class=\"line\">(<span class=\"keyword\">select</span> <span class=\"keyword\">AVG</span>(Grade) <span class=\"keyword\">from</span> sc y <span class=\"keyword\">where</span> x.Sno=y.Sno);</div></pre></td></tr></table></figure>\n<p><strong>查询了所有学生成绩超过选修课程平均成绩的课程号</strong></p>\n<h3 id=\"带有ANY或者ALL的谓词子查询\"><a href=\"#带有ANY或者ALL的谓词子查询\" class=\"headerlink\" title=\"带有ANY或者ALL的谓词子查询\"></a>带有ANY或者ALL的谓词子查询</h3><blockquote>\n<p><strong><code>ANY</code>表示查询条件只要满足其中一个即可，而<code>ALL</code>表示查询条件要满足所有的才行</strong><br><strong>实例：</strong></p>\n<ul>\n<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ANY(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系<strong>任意</strong>一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可</li>\n<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ALL(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，<strong>就是比计算机系年龄最小的都要小</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"带有EXISTS谓词的子查询\"><a href=\"#带有EXISTS谓词的子查询\" class=\"headerlink\" title=\"带有EXISTS谓词的子查询\"></a>带有EXISTS谓词的子查询</h3><blockquote>\n<p><strong><code>EXISTS</code>表示存在的意思，带有<code>EXISTS</code>的子查询步返回任何的数据，只产生逻辑真或者假</strong></p>\n<ul>\n<li><code>SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno=&#39;2&#39;);</code>查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有<code>NOT EXISTS</code></li>\n</ul>\n</blockquote>\n<h2 id=\"集合查询\"><a href=\"#集合查询\" class=\"headerlink\" title=\"集合查询\"></a>集合查询</h2><blockquote>\n<p><strong>集合操作包括并操作<code>UNION</code>、交操作<code>INTERSECT</code>、差操作<code>EXCEPT</code></strong></p>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select * from student where Sdept= &#39;CS&#39; UNION select * from student where Sage&gt;19;</code>查找计算机系的学生以及年龄不大于19岁的学生信息，这里<code>UNION</code>会自动去掉重复的元组，如果想要保留<strong>全部</strong>的数据需要用<code>UNION ALL</code></li>\n<li><code>select Sno from SC where Cno=&#39;1&#39; UNION select Sno from SC where Cno=&#39;2&#39;;</code>查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用<code>UNION ALL</code> 可以保留</li>\n<li><code>select Sno from SC where Cno=&#39;1&#39; Intersect select Sno from SC where Cno=&#39;2&#39;;</code>查询同时选修课程1和课程2的学生学号</li>\n</ul>\n</blockquote>\n<h3 id=\"基于派生表的查询\"><a href=\"#基于派生表的查询\" class=\"headerlink\" title=\"基于派生表的查询\"></a>基于派生表的查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Sno,Cno <span class=\"keyword\">from</span> SC,(<span class=\"keyword\">select</span> Sno,<span class=\"keyword\">AVG</span>(Grade) <span class=\"keyword\">from</span> SC <span class=\"keyword\">Group</span> <span class=\"keyword\">by</span> Sno) </div><div class=\"line\"><span class=\"keyword\">AS</span> AVG_SC(avg_Sno,avg_grade)</div><div class=\"line\"><span class=\"keyword\">where</span> SC.Sno=AVG_SC.avg_Sno <span class=\"keyword\">and</span> SC.Grade&gt;=AVG_SC.avg_grade;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号</strong></p>\n<p><strong>注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：</strong></p>\n<blockquote>\n<p><code>select Sname from student,(select Sno From SC where Cno=&#39;1&#39;) AS SCI where student.Sno=SCI.Sno;</code>这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。</p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"SQL干货篇之查询数据\"><a href=\"#SQL干货篇之查询数据\" class=\"headerlink\" title=\"SQL干货篇之查询数据\"></a>SQL干货篇之查询数据</h1><h2 id=\"单表查询\"><a href=\"#单表查询\" class=\"headerlink\" title=\"单表查询\"></a>单表查询</h2><blockquote>\n<p><strong>只在一个表中查询数据</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student <span class=\"keyword\">where</span> Sno=<span class=\"string\">'13143'</span>;   //根据学号查询数据</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><blockquote>\n<p><strong>同时查询多个表</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> student.Sno,student.Sname,Grade</div><div class=\"line\"><span class=\"keyword\">FROM</span> student,SC <span class=\"keyword\">where</span> Grade&gt;=<span class=\"number\">90</span>;</div></pre></td></tr></table></figure></p>\n<p><strong>说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表</strong></p>\n</blockquote>\n<h2 id=\"模糊查找\"><a href=\"#模糊查找\" class=\"headerlink\" title=\"模糊查找\"></a>模糊查找</h2><blockquote>\n<p><strong>说明：模糊查找用<code>like</code>和<code>not like</code>进行查找</strong></p>\n<ul>\n<li><code>SELECT * FROM student where Sname like &#39;刘%&#39;;</code>查询所有姓刘的学生</li>\n<li><code>SELECT * FROM student where Sname like &#39;%加%&#39;</code>查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项</li>\n<li><code>SELECT * FROM student where Sname like &#39;欧阳_&#39;;</code>查找以姓欧阳并且名字为<strong>三</strong>个字的学生信息</li>\n<li><code>SELECT * FROM student WHERE Sname like &#39;_阳&#39;;</code>查找所有姓名为两个字并且第二个字为<strong>阳</strong>的学生信息</li>\n<li><code>SELECT * FROM student where Sname like &#39;_阳%&#39;;</code>查询所有姓名中第二个字为<strong>阳</strong>的学生信息</li>\n<li><code>SELECT * FROM Course where Cname like &#39;\\_IS&#39; ESCAPE &#39;\\&#39;;</code>查询课程名字为<strong>_is</strong>的课程信息，这里如果要查询的字符串本省就含有通配符”<code>%</code>“或者”<code>_</code>“，这时就要使用<code>ESCAPE&lt;转码字符&gt;</code>来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用<code>\\</code>,上面的查询语句中的<code>\\</code>就是转码字符</li>\n</ul>\n</blockquote>\n<h2 id=\"空值查询\"><a href=\"#空值查询\" class=\"headerlink\" title=\"空值查询\"></a>空值查询</h2><blockquote>\n<p><strong>判断数据是否为空用<code>is not null</code>和<code>is null</code></strong><br><code>SELECT * FROM student where Sname is null</code>;查询姓名为空的学生信息</p>\n</blockquote>\n<h2 id=\"多重条件的查询\"><a href=\"#多重条件的查询\" class=\"headerlink\" title=\"多重条件的查询\"></a>多重条件的查询</h2><blockquote>\n<p><strong>多重条件的查询用AND和OR,其区别不用多说了</strong><br><code>SELECT Sname FROM student where Sdept=&#39;IS&#39; and Sage&gt;20;</code>查找院系是IS并且年龄超过20岁的学生姓名</p>\n</blockquote>\n<h2 id=\"ORDER-BY子句-排序\"><a href=\"#ORDER-BY子句-排序\" class=\"headerlink\" title=\"ORDER BY子句(排序)\"></a>ORDER BY子句(排序)</h2><blockquote>\n<p><strong>用户可以使用ORDER BY子句对数据进行升序(<code>ASC</code>)或者降序(<code>DESC</code>)排列</strong></p>\n<ul>\n<li><code>SELECT * FROM student where Sage&gt;20 ORDER BY Sno DESC;</code>查询年龄超过20岁的学生信息，并且按照降序排列输出</li>\n<li><code>SELECT * FROM student ORDER BY Sdept,Sage DESC;</code>查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列</li>\n</ul>\n</blockquote>\n<h2 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h2><blockquote>\n<ul>\n<li><code>COUNT(*)</code>   统计元组个数</li>\n<li><code>COUNT(DISTINCT|ALL &lt;列名&gt;)</code>  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素</li>\n<li><code>SUM(DISTINCT|ALL &lt;列名&gt;)</code>   计算一列值的总和</li>\n<li><code>AVG(DISTINCT|ALL&lt;列名&gt;)</code>     计算一列中的平均值</li>\n<li><code>MAX(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最大值</li>\n<li><code>MIN(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最小值</li>\n</ul>\n</blockquote>\n<p><strong>实例：</strong></p>\n<blockquote>\n<ul>\n<li><code>select count(*) from student;</code>     查询学生总数</li>\n<li><code>select count(DISTINCT Sdept);</code>     查询总共有多少系</li>\n<li><code>select AVG(Grade) from SC;</code>        查询学生的平均分</li>\n<li><code>select SUM(Grade) from SC;</code>         查询学生的总分</li>\n<li><code>select MAX(Grade) from SC where Cno=&#39;1&#39;;</code>    查询课程1的最高分</li>\n<li><code>select MIN(Grade) from SC where Cno=&#39;1&#39;;</code>     查询课程1的最低分</li>\n</ul>\n</blockquote>\n<p><strong>注意：<code>where</code>子句中不能用聚集函数，只有在<code>select</code>子句和<code>Group by</code>子句中才能使用聚集函数</strong></p>\n<h2 id=\"GROUP-BY子句\"><a href=\"#GROUP-BY子句\" class=\"headerlink\" title=\"GROUP BY子句\"></a>GROUP BY子句</h2><ul>\n<li><strong>GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。</strong></li>\n<li><strong>对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值</strong></li>\n</ul>\n<blockquote>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select Cno,Count(Sno) from SC Group by Cno;</code>      求各个课程号以及相应的选课人数</li>\n<li><code>select Cno as &#39;课程号&#39;,count(Sno) as &#39;选课人数&#39; from sc group by Cno;</code>求各个课程号以及相应的选课人数</li>\n<li><code>select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)&gt;80;</code>  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用<code>Having</code>子句进行条件筛选，<strong>不能使用<code>where</code>子句进行筛选</strong>,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成<code>select Cno,count(Sno) from sc group by Cno Having AVG(Grade)&gt;80;</code></li>\n<li><code>select Sno from sc Group by Sno having count(*)&gt;2;</code>   查询选修了两门以上课程的学生学号</li>\n<li><code>select Sno,AVG(Grade) from sc Group by Sno;</code> 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩</li>\n</ul>\n<p><strong>注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：<code>select Sno,count(Cno) from sc;</code>这条语句就是错误的，因为<code>Sno</code>没有出现在聚集函数或者<code>Group by</code>子句中，如果改成<code>select Sno,count(Cno) from SC Group by Sno;</code>就正确了,因为Sno出现在了<code>Group by</code>子句中了</strong></p>\n</blockquote>\n<h2 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h2><blockquote>\n<p><strong>如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询</strong></p>\n<h3 id=\"等值和非等值连接查询\"><a href=\"#等值和非等值连接查询\" class=\"headerlink\" title=\"等值和非等值连接查询\"></a>等值和非等值连接查询</h3><p><strong>当连接运算符为=时为等值连接查询，否则为非等值连接查询</strong></p>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select student.*,SC.* from student,SC where student.Sno=SC.Sno;</code>查询每个学生及其选修课程的情况</li>\n</ul>\n<h3 id=\"自然连接查询\"><a href=\"#自然连接查询\" class=\"headerlink\" title=\"自然连接查询\"></a>自然连接查询</h3><p><strong>在等值连接的基础上去掉相等的属性组就是自然连接查询</strong></p>\n<p><strong>实例：</strong><br><code>select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno;</code></p>\n</blockquote>\n<h2 id=\"嵌套查询\"><a href=\"#嵌套查询\" class=\"headerlink\" title=\"嵌套查询\"></a>嵌套查询</h2><blockquote>\n<p><strong>在<code>SQL</code>语言中一个<code>SELECT-FROM-WHERE</code>语句称为一个</strong>查询块<strong>，将一个查询块嵌套在另外一个查询块的<code>WHERE</code>子句或<code>HAVING</code>短语的条件查询称之为嵌套查询</strong><br><strong>实例：</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> SNAME <span class=\"keyword\">FROM</span> STUDENT <span class=\"keyword\">WHERE</span> SNO <span class=\"keyword\">IN</span>    <span class=\"comment\">/*外层查询*/</span></div><div class=\"line\">(<span class=\"keyword\">SELECT</span> SNO <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> CNO=<span class=\"string\">'2'</span>);    <span class=\"comment\">/*内层查询或者子查询*/</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。</li>\n<li>子查询中不能使用<code>ORDER BY</code>子句，<code>ORDER BY</code>子句只能对最终的查询结果排序</li>\n</ul>\n</blockquote>\n<h3 id=\"带有IN谓词的嵌套查询\"><a href=\"#带有IN谓词的嵌套查询\" class=\"headerlink\" title=\"带有IN谓词的嵌套查询\"></a>带有IN谓词的嵌套查询</h3><blockquote>\n<p><strong>实例：</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT Sno,Sname,Sdept from student where Sdept IN</div><div class=\"line\">(SELECT Sdept From student Where Sname='刘晨');</div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">select first.Sno,first.Sname,first.Sdept </div><div class=\"line\">from student first,student second</div><div class=\"line\">where first.Sdept=second.Sdept and second.Sname='刘晨';</div></pre></td></tr></table></figure>\n<h3 id=\"带有比较运算符的子查询\"><a href=\"#带有比较运算符的子查询\" class=\"headerlink\" title=\"带有比较运算符的子查询\"></a>带有比较运算符的子查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Sno,Cno <span class=\"keyword\">from</span> sc x <span class=\"keyword\">where</span> Grade &gt;</div><div class=\"line\">(<span class=\"keyword\">select</span> <span class=\"keyword\">AVG</span>(Grade) <span class=\"keyword\">from</span> sc y <span class=\"keyword\">where</span> x.Sno=y.Sno);</div></pre></td></tr></table></figure>\n<p><strong>查询了所有学生成绩超过选修课程平均成绩的课程号</strong></p>\n<h3 id=\"带有ANY或者ALL的谓词子查询\"><a href=\"#带有ANY或者ALL的谓词子查询\" class=\"headerlink\" title=\"带有ANY或者ALL的谓词子查询\"></a>带有ANY或者ALL的谓词子查询</h3><blockquote>\n<p><strong><code>ANY</code>表示查询条件只要满足其中一个即可，而<code>ALL</code>表示查询条件要满足所有的才行</strong><br><strong>实例：</strong></p>\n<ul>\n<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ANY(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系<strong>任意</strong>一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可</li>\n<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ALL(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，<strong>就是比计算机系年龄最小的都要小</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"带有EXISTS谓词的子查询\"><a href=\"#带有EXISTS谓词的子查询\" class=\"headerlink\" title=\"带有EXISTS谓词的子查询\"></a>带有EXISTS谓词的子查询</h3><blockquote>\n<p><strong><code>EXISTS</code>表示存在的意思，带有<code>EXISTS</code>的子查询步返回任何的数据，只产生逻辑真或者假</strong></p>\n<ul>\n<li><code>SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno=&#39;2&#39;);</code>查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有<code>NOT EXISTS</code></li>\n</ul>\n</blockquote>\n<h2 id=\"集合查询\"><a href=\"#集合查询\" class=\"headerlink\" title=\"集合查询\"></a>集合查询</h2><blockquote>\n<p><strong>集合操作包括并操作<code>UNION</code>、交操作<code>INTERSECT</code>、差操作<code>EXCEPT</code></strong></p>\n<p><strong>实例：</strong></p>\n<ul>\n<li><code>select * from student where Sdept= &#39;CS&#39; UNION select * from student where Sage&gt;19;</code>查找计算机系的学生以及年龄不大于19岁的学生信息，这里<code>UNION</code>会自动去掉重复的元组，如果想要保留<strong>全部</strong>的数据需要用<code>UNION ALL</code></li>\n<li><code>select Sno from SC where Cno=&#39;1&#39; UNION select Sno from SC where Cno=&#39;2&#39;;</code>查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用<code>UNION ALL</code> 可以保留</li>\n<li><code>select Sno from SC where Cno=&#39;1&#39; Intersect select Sno from SC where Cno=&#39;2&#39;;</code>查询同时选修课程1和课程2的学生学号</li>\n</ul>\n</blockquote>\n<h3 id=\"基于派生表的查询\"><a href=\"#基于派生表的查询\" class=\"headerlink\" title=\"基于派生表的查询\"></a>基于派生表的查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Sno,Cno <span class=\"keyword\">from</span> SC,(<span class=\"keyword\">select</span> Sno,<span class=\"keyword\">AVG</span>(Grade) <span class=\"keyword\">from</span> SC <span class=\"keyword\">Group</span> <span class=\"keyword\">by</span> Sno) </div><div class=\"line\"><span class=\"keyword\">AS</span> AVG_SC(avg_Sno,avg_grade)</div><div class=\"line\"><span class=\"keyword\">where</span> SC.Sno=AVG_SC.avg_Sno <span class=\"keyword\">and</span> SC.Grade&gt;=AVG_SC.avg_grade;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号</strong></p>\n<p><strong>注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：</strong></p>\n<blockquote>\n<p><code>select Sname from student,(select Sno From SC where Cno=&#39;1&#39;) AS SCI where student.Sno=SCI.Sno;</code>这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。</p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"Scrapyd部署爬虫","date":"2017-04-24T02:58:07.000Z","_content":"# Scrapyd部署爬虫\n\n## 准备工作\n>* **`安装scrapyd: pip install scrapyd`**\n>* **安装`scrapyd-client : pip install scrapyd-client`**\n>* **`安装curl:[安装地址](http://ono60m7tl.bkt.clouddn.com/curl.exe)`,安装完成以后将所在目录配置到环境变量中**\n\n## 开始部署\n\n>* **修改`scrapy`项目目录下的`scrapy.cfg`文件，修改如下**\n```python\n[deploy:JD_Spider]    #加上target   :name\nurl = http://localhost:6800/   #将前面的#删除\nproject = JD               #project的名字，可以使用默认的，当然也可以改变\n\n```\n\n>* **在任意目录下的打开终端，输入`scrapyd`,观察是否运行成功，运行成功的话，就可以打开`http://localhost:6800`看是否正常显示，如果正常显示则看到下面的这张图,这里的`JD`是部署之后才能看到的，现在是看不到的，所以没出现也不要担心：**\n\n>![scrapyd](http://ono60m7tl.bkt.clouddn.com/scrayd.bmp)\n\n>* **在项目的根目录下运行如下的命令：`python E:\\python2.7\\Scripts\\scrapyd-deploy target -p project`,这里的E:\\python2.7\\Scripts\\是你的python安装目录，Scripts是安装目录下的一个文件夹，注意前面一定要加上python,target是在前面scrapy.cfg中设置的deploy:JD_Spider，JD_Spider就是target,project 是JD,因此这个完整的命令是`python E:\\python2.7\\Scripts\\scrapyd-deploy JD_Spider -p JD`,现在项目就部署到上面了，这下网页上就有`JD`了，详情请见上图**\n\n>* **验证是否成功，你可以在网页上看有没有显示你的工程名字，另外在根目录下输入`python E:\\python2.7\\Scripts\\scrapyd-deploy -l`就能列出你所有部署过的项目了**\n\n>* **启动爬虫：`curl http://localhost:6800/schedule.json -d project=myproject -d spider=spider_name`,这里的`project`填入的是项目名，`spider_name`填入的是你的爬虫中定义的`name`,运行我的实例完整的代码为：`curl http://localhost:6800/schedule.json -d project=JD -d spider=spider`，这里将会显示如下信息：**\n\n```python\n#这里的jobid比较重要，下面会用到这个取消爬虫\n{\"status\": \"ok\", \"jobid\": \"3013f9d1283611e79a63acb57dec5d04\", \"node_name\": \"DESKTOP-L78TJQ7\"}\n```\n\n>* **取消爬虫：`curl http://localhost:6800/cancel.json -d project=myproject -d job=jobid`,`jobid`就是上面的提到过的，如果取消我的这个实例代码如：`curl http://localhost:6800/cancel.json -d project=JD -d job=3013f9d1283611e79a63acb57dec5d04`,那么它的状态就会变成如下：**\n\n```python\n{\"status\": \"ok\", \"prevstate\": \"running\", \"node_name\": \"DESKTOP-L78TJQ7\"}\n```\n>* **列出项目：`curl http://localhost:6800/listprojects.json`,下面将会出现你已经部署的项目**\n\n>* **删除项目：`curl http://localhost:6800/delproject.json -d project=myproject`**\n\n>* **列出版本：`curl http://localhost:6800/listversions.json?project=myproject`,这里的`project`是项目的名字，是在scrapy.cfg设置的**\n\n>* **列出爬虫：`curl http://localhost:6800/listspiders.json?project=myproject`这里的`project`是项目的名字，是在scrapy.cfg设置的**\n\n>* **列出`job`:`curl http://localhost:6800/listjobs.json?project=myproject`这里的`project`是项目的名字，是在`scrapy.cfg`设置的**\n\n>* **删除版本：`curl http://localhost:6800/delversion.json -d project=myproject -d version=r99`，这里的`version`是自己的项目版本号，在删除之前需要查看版本号**\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Scrapyd部署爬虫.md","raw":"---\ntitle: Scrapyd部署爬虫\ndate: 2017-04-24 10:58:07\ncategories: Scrapy学习\ntags: scrapy\n---\n# Scrapyd部署爬虫\n\n## 准备工作\n>* **`安装scrapyd: pip install scrapyd`**\n>* **安装`scrapyd-client : pip install scrapyd-client`**\n>* **`安装curl:[安装地址](http://ono60m7tl.bkt.clouddn.com/curl.exe)`,安装完成以后将所在目录配置到环境变量中**\n\n## 开始部署\n\n>* **修改`scrapy`项目目录下的`scrapy.cfg`文件，修改如下**\n```python\n[deploy:JD_Spider]    #加上target   :name\nurl = http://localhost:6800/   #将前面的#删除\nproject = JD               #project的名字，可以使用默认的，当然也可以改变\n\n```\n\n>* **在任意目录下的打开终端，输入`scrapyd`,观察是否运行成功，运行成功的话，就可以打开`http://localhost:6800`看是否正常显示，如果正常显示则看到下面的这张图,这里的`JD`是部署之后才能看到的，现在是看不到的，所以没出现也不要担心：**\n\n>![scrapyd](http://ono60m7tl.bkt.clouddn.com/scrayd.bmp)\n\n>* **在项目的根目录下运行如下的命令：`python E:\\python2.7\\Scripts\\scrapyd-deploy target -p project`,这里的E:\\python2.7\\Scripts\\是你的python安装目录，Scripts是安装目录下的一个文件夹，注意前面一定要加上python,target是在前面scrapy.cfg中设置的deploy:JD_Spider，JD_Spider就是target,project 是JD,因此这个完整的命令是`python E:\\python2.7\\Scripts\\scrapyd-deploy JD_Spider -p JD`,现在项目就部署到上面了，这下网页上就有`JD`了，详情请见上图**\n\n>* **验证是否成功，你可以在网页上看有没有显示你的工程名字，另外在根目录下输入`python E:\\python2.7\\Scripts\\scrapyd-deploy -l`就能列出你所有部署过的项目了**\n\n>* **启动爬虫：`curl http://localhost:6800/schedule.json -d project=myproject -d spider=spider_name`,这里的`project`填入的是项目名，`spider_name`填入的是你的爬虫中定义的`name`,运行我的实例完整的代码为：`curl http://localhost:6800/schedule.json -d project=JD -d spider=spider`，这里将会显示如下信息：**\n\n```python\n#这里的jobid比较重要，下面会用到这个取消爬虫\n{\"status\": \"ok\", \"jobid\": \"3013f9d1283611e79a63acb57dec5d04\", \"node_name\": \"DESKTOP-L78TJQ7\"}\n```\n\n>* **取消爬虫：`curl http://localhost:6800/cancel.json -d project=myproject -d job=jobid`,`jobid`就是上面的提到过的，如果取消我的这个实例代码如：`curl http://localhost:6800/cancel.json -d project=JD -d job=3013f9d1283611e79a63acb57dec5d04`,那么它的状态就会变成如下：**\n\n```python\n{\"status\": \"ok\", \"prevstate\": \"running\", \"node_name\": \"DESKTOP-L78TJQ7\"}\n```\n>* **列出项目：`curl http://localhost:6800/listprojects.json`,下面将会出现你已经部署的项目**\n\n>* **删除项目：`curl http://localhost:6800/delproject.json -d project=myproject`**\n\n>* **列出版本：`curl http://localhost:6800/listversions.json?project=myproject`,这里的`project`是项目的名字，是在scrapy.cfg设置的**\n\n>* **列出爬虫：`curl http://localhost:6800/listspiders.json?project=myproject`这里的`project`是项目的名字，是在scrapy.cfg设置的**\n\n>* **列出`job`:`curl http://localhost:6800/listjobs.json?project=myproject`这里的`project`是项目的名字，是在`scrapy.cfg`设置的**\n\n>* **删除版本：`curl http://localhost:6800/delversion.json -d project=myproject -d version=r99`，这里的`version`是自己的项目版本号，在删除之前需要查看版本号**\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Scrapyd部署爬虫","published":1,"updated":"2017-04-24T03:07:54.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwax7000vl0uz3mlz9i81","content":"<h1 id=\"Scrapyd部署爬虫\"><a href=\"#Scrapyd部署爬虫\" class=\"headerlink\" title=\"Scrapyd部署爬虫\"></a>Scrapyd部署爬虫</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<ul>\n<li><strong><code>安装scrapyd: pip install scrapyd</code></strong></li>\n<li><strong>安装<code>scrapyd-client : pip install scrapyd-client</code></strong></li>\n<li><strong><code>安装curl:[安装地址](http://ono60m7tl.bkt.clouddn.com/curl.exe)</code>,安装完成以后将所在目录配置到环境变量中</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><blockquote>\n<ul>\n<li><p><strong>修改<code>scrapy</code>项目目录下的<code>scrapy.cfg</code>文件，修改如下</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[deploy:JD_Spider]    <span class=\"comment\">#加上target   :name</span></div><div class=\"line\">url = http://localhost:<span class=\"number\">6800</span>/   <span class=\"comment\">#将前面的#删除</span></div><div class=\"line\">project = JD               <span class=\"comment\">#project的名字，可以使用默认的，当然也可以改变</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在任意目录下的打开终端，输入<code>scrapyd</code>,观察是否运行成功，运行成功的话，就可以打开<code>http://localhost:6800</code>看是否正常显示，如果正常显示则看到下面的这张图,这里的<code>JD</code>是部署之后才能看到的，现在是看不到的，所以没出现也不要担心：</strong></p>\n</li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/scrayd.bmp\" alt=\"scrapyd\"></p>\n<ul>\n<li><p><strong>在项目的根目录下运行如下的命令：<code>python E:\\python2.7\\Scripts\\scrapyd-deploy target -p project</code>,这里的E:\\python2.7\\Scripts\\是你的python安装目录，Scripts是安装目录下的一个文件夹，注意前面一定要加上python,target是在前面scrapy.cfg中设置的deploy:JD_Spider，JD_Spider就是target,project 是JD,因此这个完整的命令是<code>python E:\\python2.7\\Scripts\\scrapyd-deploy JD_Spider -p JD</code>,现在项目就部署到上面了，这下网页上就有<code>JD</code>了，详情请见上图</strong></p>\n</li>\n<li><p><strong>验证是否成功，你可以在网页上看有没有显示你的工程名字，另外在根目录下输入<code>python E:\\python2.7\\Scripts\\scrapyd-deploy -l</code>就能列出你所有部署过的项目了</strong></p>\n</li>\n<li><p><strong>启动爬虫：<code>curl http://localhost:6800/schedule.json -d project=myproject -d spider=spider_name</code>,这里的<code>project</code>填入的是项目名，<code>spider_name</code>填入的是你的爬虫中定义的<code>name</code>,运行我的实例完整的代码为：<code>curl http://localhost:6800/schedule.json -d project=JD -d spider=spider</code>，这里将会显示如下信息：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#这里的jobid比较重要，下面会用到这个取消爬虫</span></div><div class=\"line\">&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, <span class=\"string\">\"jobid\"</span>: <span class=\"string\">\"3013f9d1283611e79a63acb57dec5d04\"</span>, <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"DESKTOP-L78TJQ7\"</span>&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>取消爬虫：<code>curl http://localhost:6800/cancel.json -d project=myproject -d job=jobid</code>,<code>jobid</code>就是上面的提到过的，如果取消我的这个实例代码如：<code>curl http://localhost:6800/cancel.json -d project=JD -d job=3013f9d1283611e79a63acb57dec5d04</code>,那么它的状态就会变成如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, <span class=\"string\">\"prevstate\"</span>: <span class=\"string\">\"running\"</span>, <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"DESKTOP-L78TJQ7\"</span>&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p><strong>列出项目：<code>curl http://localhost:6800/listprojects.json</code>,下面将会出现你已经部署的项目</strong></p>\n</li>\n<li><p><strong>删除项目：<code>curl http://localhost:6800/delproject.json -d project=myproject</code></strong></p>\n</li>\n<li><p><strong>列出版本：<code>curl http://localhost:6800/listversions.json?project=myproject</code>,这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>\n</li>\n<li><p><strong>列出爬虫：<code>curl http://localhost:6800/listspiders.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>\n</li>\n<li><p><strong>列出<code>job</code>:<code>curl http://localhost:6800/listjobs.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在<code>scrapy.cfg</code>设置的</strong></p>\n</li>\n<li><p><strong>删除版本：<code>curl http://localhost:6800/delversion.json -d project=myproject -d version=r99</code>，这里的<code>version</code>是自己的项目版本号，在删除之前需要查看版本号</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Scrapyd部署爬虫\"><a href=\"#Scrapyd部署爬虫\" class=\"headerlink\" title=\"Scrapyd部署爬虫\"></a>Scrapyd部署爬虫</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<ul>\n<li><strong><code>安装scrapyd: pip install scrapyd</code></strong></li>\n<li><strong>安装<code>scrapyd-client : pip install scrapyd-client</code></strong></li>\n<li><strong><code>安装curl:[安装地址](http://ono60m7tl.bkt.clouddn.com/curl.exe)</code>,安装完成以后将所在目录配置到环境变量中</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><blockquote>\n<ul>\n<li><p><strong>修改<code>scrapy</code>项目目录下的<code>scrapy.cfg</code>文件，修改如下</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[deploy:JD_Spider]    <span class=\"comment\">#加上target   :name</span></div><div class=\"line\">url = http://localhost:<span class=\"number\">6800</span>/   <span class=\"comment\">#将前面的#删除</span></div><div class=\"line\">project = JD               <span class=\"comment\">#project的名字，可以使用默认的，当然也可以改变</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在任意目录下的打开终端，输入<code>scrapyd</code>,观察是否运行成功，运行成功的话，就可以打开<code>http://localhost:6800</code>看是否正常显示，如果正常显示则看到下面的这张图,这里的<code>JD</code>是部署之后才能看到的，现在是看不到的，所以没出现也不要担心：</strong></p>\n</li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/scrayd.bmp\" alt=\"scrapyd\"></p>\n<ul>\n<li><p><strong>在项目的根目录下运行如下的命令：<code>python E:\\python2.7\\Scripts\\scrapyd-deploy target -p project</code>,这里的E:\\python2.7\\Scripts\\是你的python安装目录，Scripts是安装目录下的一个文件夹，注意前面一定要加上python,target是在前面scrapy.cfg中设置的deploy:JD_Spider，JD_Spider就是target,project 是JD,因此这个完整的命令是<code>python E:\\python2.7\\Scripts\\scrapyd-deploy JD_Spider -p JD</code>,现在项目就部署到上面了，这下网页上就有<code>JD</code>了，详情请见上图</strong></p>\n</li>\n<li><p><strong>验证是否成功，你可以在网页上看有没有显示你的工程名字，另外在根目录下输入<code>python E:\\python2.7\\Scripts\\scrapyd-deploy -l</code>就能列出你所有部署过的项目了</strong></p>\n</li>\n<li><p><strong>启动爬虫：<code>curl http://localhost:6800/schedule.json -d project=myproject -d spider=spider_name</code>,这里的<code>project</code>填入的是项目名，<code>spider_name</code>填入的是你的爬虫中定义的<code>name</code>,运行我的实例完整的代码为：<code>curl http://localhost:6800/schedule.json -d project=JD -d spider=spider</code>，这里将会显示如下信息：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#这里的jobid比较重要，下面会用到这个取消爬虫</span></div><div class=\"line\">&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, <span class=\"string\">\"jobid\"</span>: <span class=\"string\">\"3013f9d1283611e79a63acb57dec5d04\"</span>, <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"DESKTOP-L78TJQ7\"</span>&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>取消爬虫：<code>curl http://localhost:6800/cancel.json -d project=myproject -d job=jobid</code>,<code>jobid</code>就是上面的提到过的，如果取消我的这个实例代码如：<code>curl http://localhost:6800/cancel.json -d project=JD -d job=3013f9d1283611e79a63acb57dec5d04</code>,那么它的状态就会变成如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, <span class=\"string\">\"prevstate\"</span>: <span class=\"string\">\"running\"</span>, <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"DESKTOP-L78TJQ7\"</span>&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p><strong>列出项目：<code>curl http://localhost:6800/listprojects.json</code>,下面将会出现你已经部署的项目</strong></p>\n</li>\n<li><p><strong>删除项目：<code>curl http://localhost:6800/delproject.json -d project=myproject</code></strong></p>\n</li>\n<li><p><strong>列出版本：<code>curl http://localhost:6800/listversions.json?project=myproject</code>,这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>\n</li>\n<li><p><strong>列出爬虫：<code>curl http://localhost:6800/listspiders.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>\n</li>\n<li><p><strong>列出<code>job</code>:<code>curl http://localhost:6800/listjobs.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在<code>scrapy.cfg</code>设置的</strong></p>\n</li>\n<li><p><strong>删除版本：<code>curl http://localhost:6800/delversion.json -d project=myproject -d version=r99</code>，这里的<code>version</code>是自己的项目版本号，在删除之前需要查看版本号</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"Scrapy中使用cookie免于验证登录和模拟登录","date":"2017-03-26T05:30:53.000Z","_content":"# Scrapy中使用cookie免于验证登录和模拟登录\n## 引言\n>`python`爬虫我认为最困难的问题一个是ip代理，另外一个就是模拟登录了，更操蛋的就是模拟登录了之后还有验证码，真的是不让人省心，不过既然有了反爬虫，那么就有反反爬虫的策略，这里就先介绍一个cookie模拟登陆，后续还有`seleminum+phantomjs`模拟浏览器登录的文章。还不知道cookie是什么朋友们，可以[点击这里](http://bubkoo.com/2014/04/21/http-cookies-explained/)\n>## cookie提取方法：\n>>打开谷歌浏览器或者火狐浏览器，如果是谷歌浏览器的按`F12`这个键就会跳出来浏览器控制台，然后点击`Network`，之后就是刷新网页开始抓包了，之后在抓到的页面中随便打开一个，就能看到cokie了，但是这里的cookie并不符合python中的格式，因此需要转换格式，下面提供了转换的代码\n\n```python  \n    # -*- coding: utf-8 -*-\n\n    class transCookie:\n    def __init__(self, cookie):\n        self.cookie = cookie\n\n    def stringToDict(self):\n        '''\n        将从浏览器上Copy来的cookie字符串转化为Scrapy能使用的Dict\n        :return:\n        '''\n        itemDict = {}\n        items = self.cookie.split(';')\n        for item in items:\n            key = item.split('=')[0].replace(' ', '')\n            value = item.split('=')[1]\n            itemDict[key] = value\n        return itemDict\n\n    if __name__ == \"__main__\":\n    cookie = \"你复制的cookie\"\n    trans = transCookie(cookie)\n    print trans.stringToDict()\n```\n    \n>## 补充说明：\n>>只需要将你网页上的cookie复制到上述代码中直接运行就可以了\n\n>## 使用cookie操作scrapy\n>>### 直接撸代码\n\n```python\n    # -*- coding: utf-8 -*-\n    import scrapy\n    from scrapy.conf import settings #从settings文件中导入Cookie，这里也可以室友from scrapy.conf import settings.COOKIE\n    \n    class DemoSpider(scrapy.Spider):\n    name = \"demo\"\n    #allowed_domains = [\"csdn.com\"]\n    start_urls = [\"http://write.blog.csdn.net/postlist\"]\n    cookie = settings['COOKIE']  # 带着Cookie向网页发请求\\\n    headers = {\n        'Connection': 'keep - alive',  # 保持链接状态\n        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'\n    }\n    def start_requests(self):\n        yield scrapy.Request(url=self.start_urls[0],headers=self.headers,cookies=self.cookie)# 这里带着cookie发出请求\n\n    def parse(self, response):\n        print response.body\n```\n\n>>### 说明\n>>> 这里是scrapy工程目录下spiders目录下的主要的解析网页的py文件相信学过scrapy的应该不会陌生，上述代码中的cookie值是放在Settings文件中的，因此使用的时候需要导入，当然你也可以直接将cookie粘贴到这个文件中\n\n>## 注意\n>>虽说这里使用直接使用cookie可以省去很多麻烦，但是cookie的生命周期特别的短，不过小型的项目足够使用了，向那些需要爬两三天甚至几个月的项目就不适用了，因此在隔一段时间就要重新换cookie的值，虽说有很多麻烦，但是我还是比较喜欢这种方法的，因为可以省去不少脑筋\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持。\n\n>### 最后欢迎大家看看我的其他scrapy文章\n>> * [scrapy设置代理ip](https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/)\n>> * [scrapy架构初探](https://chenjiabing666.github.io/2017/03/25/scrapy%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/)\n>> * [scrapy初试](https://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/)\n>> * [scrapy下载器中间件](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/)\n>> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Scrapy中使用cookie免于验证登录和模拟登录.md","raw":"---\ntitle: Scrapy中使用cookie免于验证登录和模拟登录\ndate: 2017-03-26 13:30:53\ncategories: Scrapy学习\ntags: scrapy\n---\n# Scrapy中使用cookie免于验证登录和模拟登录\n## 引言\n>`python`爬虫我认为最困难的问题一个是ip代理，另外一个就是模拟登录了，更操蛋的就是模拟登录了之后还有验证码，真的是不让人省心，不过既然有了反爬虫，那么就有反反爬虫的策略，这里就先介绍一个cookie模拟登陆，后续还有`seleminum+phantomjs`模拟浏览器登录的文章。还不知道cookie是什么朋友们，可以[点击这里](http://bubkoo.com/2014/04/21/http-cookies-explained/)\n>## cookie提取方法：\n>>打开谷歌浏览器或者火狐浏览器，如果是谷歌浏览器的按`F12`这个键就会跳出来浏览器控制台，然后点击`Network`，之后就是刷新网页开始抓包了，之后在抓到的页面中随便打开一个，就能看到cokie了，但是这里的cookie并不符合python中的格式，因此需要转换格式，下面提供了转换的代码\n\n```python  \n    # -*- coding: utf-8 -*-\n\n    class transCookie:\n    def __init__(self, cookie):\n        self.cookie = cookie\n\n    def stringToDict(self):\n        '''\n        将从浏览器上Copy来的cookie字符串转化为Scrapy能使用的Dict\n        :return:\n        '''\n        itemDict = {}\n        items = self.cookie.split(';')\n        for item in items:\n            key = item.split('=')[0].replace(' ', '')\n            value = item.split('=')[1]\n            itemDict[key] = value\n        return itemDict\n\n    if __name__ == \"__main__\":\n    cookie = \"你复制的cookie\"\n    trans = transCookie(cookie)\n    print trans.stringToDict()\n```\n    \n>## 补充说明：\n>>只需要将你网页上的cookie复制到上述代码中直接运行就可以了\n\n>## 使用cookie操作scrapy\n>>### 直接撸代码\n\n```python\n    # -*- coding: utf-8 -*-\n    import scrapy\n    from scrapy.conf import settings #从settings文件中导入Cookie，这里也可以室友from scrapy.conf import settings.COOKIE\n    \n    class DemoSpider(scrapy.Spider):\n    name = \"demo\"\n    #allowed_domains = [\"csdn.com\"]\n    start_urls = [\"http://write.blog.csdn.net/postlist\"]\n    cookie = settings['COOKIE']  # 带着Cookie向网页发请求\\\n    headers = {\n        'Connection': 'keep - alive',  # 保持链接状态\n        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'\n    }\n    def start_requests(self):\n        yield scrapy.Request(url=self.start_urls[0],headers=self.headers,cookies=self.cookie)# 这里带着cookie发出请求\n\n    def parse(self, response):\n        print response.body\n```\n\n>>### 说明\n>>> 这里是scrapy工程目录下spiders目录下的主要的解析网页的py文件相信学过scrapy的应该不会陌生，上述代码中的cookie值是放在Settings文件中的，因此使用的时候需要导入，当然你也可以直接将cookie粘贴到这个文件中\n\n>## 注意\n>>虽说这里使用直接使用cookie可以省去很多麻烦，但是cookie的生命周期特别的短，不过小型的项目足够使用了，向那些需要爬两三天甚至几个月的项目就不适用了，因此在隔一段时间就要重新换cookie的值，虽说有很多麻烦，但是我还是比较喜欢这种方法的，因为可以省去不少脑筋\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持。\n\n>### 最后欢迎大家看看我的其他scrapy文章\n>> * [scrapy设置代理ip](https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/)\n>> * [scrapy架构初探](https://chenjiabing666.github.io/2017/03/25/scrapy%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/)\n>> * [scrapy初试](https://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/)\n>> * [scrapy下载器中间件](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/)\n>> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Scrapy中使用cookie免于验证登录和模拟登录","published":1,"updated":"2017-03-27T03:32:05.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxc000zl0uzqlms0lhj","content":"<h1 id=\"Scrapy中使用cookie免于验证登录和模拟登录\"><a href=\"#Scrapy中使用cookie免于验证登录和模拟登录\" class=\"headerlink\" title=\"Scrapy中使用cookie免于验证登录和模拟登录\"></a>Scrapy中使用cookie免于验证登录和模拟登录</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><code>python</code>爬虫我认为最困难的问题一个是ip代理，另外一个就是模拟登录了，更操蛋的就是模拟登录了之后还有验证码，真的是不让人省心，不过既然有了反爬虫，那么就有反反爬虫的策略，这里就先介绍一个cookie模拟登陆，后续还有<code>seleminum+phantomjs</code>模拟浏览器登录的文章。还不知道cookie是什么朋友们，可以<a href=\"http://bubkoo.com/2014/04/21/http-cookies-explained/\" target=\"_blank\" rel=\"external\">点击这里</a></p>\n<h2 id=\"cookie提取方法：\"><a href=\"#cookie提取方法：\" class=\"headerlink\" title=\"cookie提取方法：\"></a>cookie提取方法：</h2><blockquote>\n<p>打开谷歌浏览器或者火狐浏览器，如果是谷歌浏览器的按<code>F12</code>这个键就会跳出来浏览器控制台，然后点击<code>Network</code>，之后就是刷新网页开始抓包了，之后在抓到的页面中随便打开一个，就能看到cokie了，但是这里的cookie并不符合python中的格式，因此需要转换格式，下面提供了转换的代码</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">transCookie</span>:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cookie)</span>:</span></div><div class=\"line\">    self.cookie = cookie</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stringToDict</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    将从浏览器上Copy来的cookie字符串转化为Scrapy能使用的Dict</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</div><div class=\"line\">    itemDict = &#123;&#125;</div><div class=\"line\">    items = self.cookie.split(<span class=\"string\">';'</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</div><div class=\"line\">        key = item.split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">' '</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        value = item.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">        itemDict[key] = value</div><div class=\"line\">    <span class=\"keyword\">return</span> itemDict</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">cookie = <span class=\"string\">\"你复制的cookie\"</span></div><div class=\"line\">trans = transCookie(cookie)</div><div class=\"line\"><span class=\"keyword\">print</span> trans.stringToDict()</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"补充说明：\"><a href=\"#补充说明：\" class=\"headerlink\" title=\"补充说明：\"></a>补充说明：</h2><blockquote>\n<p>只需要将你网页上的cookie复制到上述代码中直接运行就可以了</p>\n</blockquote>\n<h2 id=\"使用cookie操作scrapy\"><a href=\"#使用cookie操作scrapy\" class=\"headerlink\" title=\"使用cookie操作scrapy\"></a>使用cookie操作scrapy</h2><blockquote>\n<h3 id=\"直接撸代码\"><a href=\"#直接撸代码\" class=\"headerlink\" title=\"直接撸代码\"></a>直接撸代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings <span class=\"comment\">#从settings文件中导入Cookie，这里也可以室友from scrapy.conf import settings.COOKIE</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"demo\"</span></div><div class=\"line\"><span class=\"comment\">#allowed_domains = [\"csdn.com\"]</span></div><div class=\"line\">start_urls = [<span class=\"string\">\"http://write.blog.csdn.net/postlist\"</span>]</div><div class=\"line\">cookie = settings[<span class=\"string\">'COOKIE'</span>]  <span class=\"comment\"># 带着Cookie向网页发请求\\</span></div><div class=\"line\">headers = &#123;</div><div class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep - alive'</span>,  <span class=\"comment\"># 保持链接状态</span></div><div class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">yield</span> scrapy.Request(url=self.start_urls[<span class=\"number\">0</span>],headers=self.headers,cookies=self.cookie)<span class=\"comment\"># 这里带着cookie发出请求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> response.body</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><blockquote>\n<p>这里是scrapy工程目录下spiders目录下的主要的解析网页的py文件相信学过scrapy的应该不会陌生，上述代码中的cookie值是放在Settings文件中的，因此使用的时候需要导入，当然你也可以直接将cookie粘贴到这个文件中</p>\n</blockquote>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>虽说这里使用直接使用cookie可以省去很多麻烦，但是cookie的生命周期特别的短，不过小型的项目足够使用了，向那些需要爬两三天甚至几个月的项目就不适用了，因此在隔一段时间就要重新换cookie的值，虽说有很多麻烦，但是我还是比较喜欢这种方法的，因为可以省去不少脑筋</p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"最后欢迎大家看看我的其他scrapy文章\"><a href=\"#最后欢迎大家看看我的其他scrapy文章\" class=\"headerlink\" title=\"最后欢迎大家看看我的其他scrapy文章\"></a>最后欢迎大家看看我的其他scrapy文章</h3><blockquote>\n<ul>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/\">scrapy设置代理ip</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/\">scrapy架构初探</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/\">scrapy初试</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">scrapy下载器中间件</a></li>\n</ul>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Scrapy中使用cookie免于验证登录和模拟登录\"><a href=\"#Scrapy中使用cookie免于验证登录和模拟登录\" class=\"headerlink\" title=\"Scrapy中使用cookie免于验证登录和模拟登录\"></a>Scrapy中使用cookie免于验证登录和模拟登录</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><code>python</code>爬虫我认为最困难的问题一个是ip代理，另外一个就是模拟登录了，更操蛋的就是模拟登录了之后还有验证码，真的是不让人省心，不过既然有了反爬虫，那么就有反反爬虫的策略，这里就先介绍一个cookie模拟登陆，后续还有<code>seleminum+phantomjs</code>模拟浏览器登录的文章。还不知道cookie是什么朋友们，可以<a href=\"http://bubkoo.com/2014/04/21/http-cookies-explained/\">点击这里</a></p>\n<h2 id=\"cookie提取方法：\"><a href=\"#cookie提取方法：\" class=\"headerlink\" title=\"cookie提取方法：\"></a>cookie提取方法：</h2><blockquote>\n<p>打开谷歌浏览器或者火狐浏览器，如果是谷歌浏览器的按<code>F12</code>这个键就会跳出来浏览器控制台，然后点击<code>Network</code>，之后就是刷新网页开始抓包了，之后在抓到的页面中随便打开一个，就能看到cokie了，但是这里的cookie并不符合python中的格式，因此需要转换格式，下面提供了转换的代码</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">transCookie</span>:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cookie)</span>:</span></div><div class=\"line\">    self.cookie = cookie</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stringToDict</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    将从浏览器上Copy来的cookie字符串转化为Scrapy能使用的Dict</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</span></div><div class=\"line\">    itemDict = &#123;&#125;</div><div class=\"line\">    items = self.cookie.split(<span class=\"string\">';'</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</div><div class=\"line\">        key = item.split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">' '</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        value = item.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">        itemDict[key] = value</div><div class=\"line\">    <span class=\"keyword\">return</span> itemDict</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">cookie = <span class=\"string\">\"你复制的cookie\"</span></div><div class=\"line\">trans = transCookie(cookie)</div><div class=\"line\"><span class=\"keyword\">print</span> trans.stringToDict()</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"补充说明：\"><a href=\"#补充说明：\" class=\"headerlink\" title=\"补充说明：\"></a>补充说明：</h2><blockquote>\n<p>只需要将你网页上的cookie复制到上述代码中直接运行就可以了</p>\n</blockquote>\n<h2 id=\"使用cookie操作scrapy\"><a href=\"#使用cookie操作scrapy\" class=\"headerlink\" title=\"使用cookie操作scrapy\"></a>使用cookie操作scrapy</h2><blockquote>\n<h3 id=\"直接撸代码\"><a href=\"#直接撸代码\" class=\"headerlink\" title=\"直接撸代码\"></a>直接撸代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings <span class=\"comment\">#从settings文件中导入Cookie，这里也可以室友from scrapy.conf import settings.COOKIE</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"demo\"</span></div><div class=\"line\"><span class=\"comment\">#allowed_domains = [\"csdn.com\"]</span></div><div class=\"line\">start_urls = [<span class=\"string\">\"http://write.blog.csdn.net/postlist\"</span>]</div><div class=\"line\">cookie = settings[<span class=\"string\">'COOKIE'</span>]  <span class=\"comment\"># 带着Cookie向网页发请求\\</span></div><div class=\"line\">headers = &#123;</div><div class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep - alive'</span>,  <span class=\"comment\"># 保持链接状态</span></div><div class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">yield</span> scrapy.Request(url=self.start_urls[<span class=\"number\">0</span>],headers=self.headers,cookies=self.cookie)<span class=\"comment\"># 这里带着cookie发出请求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> response.body</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><blockquote>\n<p>这里是scrapy工程目录下spiders目录下的主要的解析网页的py文件相信学过scrapy的应该不会陌生，上述代码中的cookie值是放在Settings文件中的，因此使用的时候需要导入，当然你也可以直接将cookie粘贴到这个文件中</p>\n</blockquote>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>虽说这里使用直接使用cookie可以省去很多麻烦，但是cookie的生命周期特别的短，不过小型的项目足够使用了，向那些需要爬两三天甚至几个月的项目就不适用了，因此在隔一段时间就要重新换cookie的值，虽说有很多麻烦，但是我还是比较喜欢这种方法的，因为可以省去不少脑筋</p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"最后欢迎大家看看我的其他scrapy文章\"><a href=\"#最后欢迎大家看看我的其他scrapy文章\" class=\"headerlink\" title=\"最后欢迎大家看看我的其他scrapy文章\"></a>最后欢迎大家看看我的其他scrapy文章</h3><blockquote>\n<ul>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/\">scrapy设置代理ip</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/\">scrapy架构初探</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/\">scrapy初试</a></li>\n<li><a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">scrapy下载器中间件</a></li>\n</ul>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"Swing干货系列之JSlider(滑块)","date":"2017-03-27T13:43:22.000Z","_content":"\n# Swing干货系列之JSlider(滑块)\n## 引言\n>一个让用户以图形方式在有界区间内通过移动滑块来选择值的组件。\n\n>滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 `setMajorTickSpacing `和 `setMinorTickSpacing` 来控制。刻度标记的绘制由 setPaintTicks 控制。\n\n>滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签。标签的绘制由 `setLabelTable` 和 `setPaintLabels` 控制。\n\n### 构造函数\n>* `JSlider()`:创建一个空值的滑块组件，但是默认的刻度是100，其中如果获得其值的话可以很清楚的看见\n>* `JSlider(BoundedRangeModel brm)`:使用指定的 `BoundedRangeModel` 创建一个水平滑块\n>* `JSlider(int min,int max)`:创建一个带有最小值和最大值得滑块\n>* `JSlider(int min,int max,int value)`:创建一个带有最小值，最大值和当前值的滑块\n\n### 常用的方法\n>1. `getValue(int x)`/`setValue(int x)`:得到和设置当前值\n>1. `getPaintsLabels()`:return `boolean` 告知是否绘制了签\n>1. `SetFont(Font font)`:设置组件的字体，其中Font类的font对象是参数\n>1. `setInverted(boolean b)`:反转滑块的刻度\n>1. `setMaximum(int maximum)` ：设置最大值\n>1. `setMinimum(int min)`:设置最小值\n>1. `setMinorTickSpacing(int n)` :设置次刻度，就是主刻度中间不用标记数值的刻度\n>1. `setMajorTickSpacing(int n)`:设置主刻度\n>1. `setPaintTicks(boolean b)`:确定是否在滑块下面显示刻度线，如果为false表示不显示\n>1. `setPaintLabels(boolean b)`:确定是否在刻度线下绘制数值，默认不绘制\n**以上只是列了几个常用的函数，详情见[官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)**\n\n### 下面撸个代码试试身手\n```java\npackage com;\nimport javax.swing.*;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport java.awt.*;\n/**\n * Created by chenjiabing on 2017/3/27.\n */\npublic class Java_swing extends JFrame {\n    public JSlider points = null;\n\n    public Java_swing() {\n        super();\n        setTitle(\"记事本\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 400);\n//        points=new JSlider();\n        points = new JSlider(0, 50, 5);\n        points.setMinorTickSpacing(5);//设置次要的间隔，每个一个间隔，这个显示时中间不标记数值\n        points.setMajorTickSpacing(10);//显示主要的刻度线，每个两个间隔，这个设置了，如果setPaintLabels为true就会显示数值\n        points.setPaintTicks(true);  //确定是否显示刻度线\n        points.setPaintLabels(true); //确定是否显示刻度的值\n        //points.setInverted(true);//指定为true反转刻 度\n        points.setSnapToTicks(true);\n        points.addChangeListener(new ChangeListener() {\n            @Override\n            public void stateChanged(ChangeEvent e) {\n                int value = points.getValue();\n                System.out.println(value);\n\n            }\n        });\n        getContentPane().add(points, BorderLayout.CENTER);\n    }\n\n    public static void main(String args[]) {\n        Java_swing my = new Java_swing();\n        my.setVisible(true);\n    }\n}\n\n```\n\n### Change Listener(一个监听机制)\n```java\nimport java.awt.Dimension;\n/*from  w  ww  .  ja  v a 2 s  .c o  m*/\nimport javax.swing.JFrame;\nimport javax.swing.JSlider;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\n\npublic class Main {\n  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    final JSlider slider = new JSlider(0, 150, 0);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    slider.setPreferredSize(new Dimension(150, 30));\n    \n    //添加change Listener,当然这里的和JButton的也是一样，可以在一个类中实现\n    slider.addChangeListener(new ChangeListener() {\n      public void stateChanged(ChangeEvent event) {\n        int value = slider.getValue();\n        if (value == 0) {\n          System.out.println(\"0\");\n        } else if (value > 0 && value <= 30) {\n          System.out.println(\"value > 0 && value <= 30\");\n        } else if (value > 30 && value < 80) {\n          System.out.println(\"value > 30 && value < 80\");\n        } else {\n          System.out.println(\"max\");\n        }\n      }\n    });\n    f.add(slider);\n    f.pack();\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n  }\n}\n\n```\n\n\n**当然以上只是JSlider的一部分内容，还有的后面会陆续更新**\n**本文参考的文章：**\n>> * [中文文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>> * [英文文档](http://www.java2s.com/Tutorials/Java/Java_Swing/0970__Java_Swing_JSlider.htm)\n\n**福利时间，博主写了一个小例子，想要的朋友可以参见[github](https://github.com/chenjiabing666/Java_demo/tree/master/031),不要忘了随手点个赞哦！！！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Swing-干货系列之JSlider.md","raw":"---\ntitle: Swing干货系列之JSlider(滑块)\ndate: 2017-03-27 21:43:22\ncategories: java学习\ntags: swing \n---\n\n# Swing干货系列之JSlider(滑块)\n## 引言\n>一个让用户以图形方式在有界区间内通过移动滑块来选择值的组件。\n\n>滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 `setMajorTickSpacing `和 `setMinorTickSpacing` 来控制。刻度标记的绘制由 setPaintTicks 控制。\n\n>滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签。标签的绘制由 `setLabelTable` 和 `setPaintLabels` 控制。\n\n### 构造函数\n>* `JSlider()`:创建一个空值的滑块组件，但是默认的刻度是100，其中如果获得其值的话可以很清楚的看见\n>* `JSlider(BoundedRangeModel brm)`:使用指定的 `BoundedRangeModel` 创建一个水平滑块\n>* `JSlider(int min,int max)`:创建一个带有最小值和最大值得滑块\n>* `JSlider(int min,int max,int value)`:创建一个带有最小值，最大值和当前值的滑块\n\n### 常用的方法\n>1. `getValue(int x)`/`setValue(int x)`:得到和设置当前值\n>1. `getPaintsLabels()`:return `boolean` 告知是否绘制了签\n>1. `SetFont(Font font)`:设置组件的字体，其中Font类的font对象是参数\n>1. `setInverted(boolean b)`:反转滑块的刻度\n>1. `setMaximum(int maximum)` ：设置最大值\n>1. `setMinimum(int min)`:设置最小值\n>1. `setMinorTickSpacing(int n)` :设置次刻度，就是主刻度中间不用标记数值的刻度\n>1. `setMajorTickSpacing(int n)`:设置主刻度\n>1. `setPaintTicks(boolean b)`:确定是否在滑块下面显示刻度线，如果为false表示不显示\n>1. `setPaintLabels(boolean b)`:确定是否在刻度线下绘制数值，默认不绘制\n**以上只是列了几个常用的函数，详情见[官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)**\n\n### 下面撸个代码试试身手\n```java\npackage com;\nimport javax.swing.*;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport java.awt.*;\n/**\n * Created by chenjiabing on 2017/3/27.\n */\npublic class Java_swing extends JFrame {\n    public JSlider points = null;\n\n    public Java_swing() {\n        super();\n        setTitle(\"记事本\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 400);\n//        points=new JSlider();\n        points = new JSlider(0, 50, 5);\n        points.setMinorTickSpacing(5);//设置次要的间隔，每个一个间隔，这个显示时中间不标记数值\n        points.setMajorTickSpacing(10);//显示主要的刻度线，每个两个间隔，这个设置了，如果setPaintLabels为true就会显示数值\n        points.setPaintTicks(true);  //确定是否显示刻度线\n        points.setPaintLabels(true); //确定是否显示刻度的值\n        //points.setInverted(true);//指定为true反转刻 度\n        points.setSnapToTicks(true);\n        points.addChangeListener(new ChangeListener() {\n            @Override\n            public void stateChanged(ChangeEvent e) {\n                int value = points.getValue();\n                System.out.println(value);\n\n            }\n        });\n        getContentPane().add(points, BorderLayout.CENTER);\n    }\n\n    public static void main(String args[]) {\n        Java_swing my = new Java_swing();\n        my.setVisible(true);\n    }\n}\n\n```\n\n### Change Listener(一个监听机制)\n```java\nimport java.awt.Dimension;\n/*from  w  ww  .  ja  v a 2 s  .c o  m*/\nimport javax.swing.JFrame;\nimport javax.swing.JSlider;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\n\npublic class Main {\n  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    final JSlider slider = new JSlider(0, 150, 0);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    slider.setPreferredSize(new Dimension(150, 30));\n    \n    //添加change Listener,当然这里的和JButton的也是一样，可以在一个类中实现\n    slider.addChangeListener(new ChangeListener() {\n      public void stateChanged(ChangeEvent event) {\n        int value = slider.getValue();\n        if (value == 0) {\n          System.out.println(\"0\");\n        } else if (value > 0 && value <= 30) {\n          System.out.println(\"value > 0 && value <= 30\");\n        } else if (value > 30 && value < 80) {\n          System.out.println(\"value > 30 && value < 80\");\n        } else {\n          System.out.println(\"max\");\n        }\n      }\n    });\n    f.add(slider);\n    f.pack();\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n  }\n}\n\n```\n\n\n**当然以上只是JSlider的一部分内容，还有的后面会陆续更新**\n**本文参考的文章：**\n>> * [中文文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>> * [英文文档](http://www.java2s.com/Tutorials/Java/Java_Swing/0970__Java_Swing_JSlider.htm)\n\n**福利时间，博主写了一个小例子，想要的朋友可以参见[github](https://github.com/chenjiabing666/Java_demo/tree/master/031),不要忘了随手点个赞哦！！！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Swing-干货系列之JSlider","published":1,"updated":"2017-04-06T09:35:41.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxd0011l0uzg605wre5","content":"<h1 id=\"Swing干货系列之JSlider-滑块\"><a href=\"#Swing干货系列之JSlider-滑块\" class=\"headerlink\" title=\"Swing干货系列之JSlider(滑块)\"></a>Swing干货系列之JSlider(滑块)</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>一个让用户以图形方式在有界区间内通过移动滑块来选择值的组件。</p>\n<p>滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 <code>setMajorTickSpacing</code>和 <code>setMinorTickSpacing</code> 来控制。刻度标记的绘制由 setPaintTicks 控制。</p>\n<p>滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签。标签的绘制由 <code>setLabelTable</code> 和 <code>setPaintLabels</code> 控制。</p>\n</blockquote>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<ul>\n<li><code>JSlider()</code>:创建一个空值的滑块组件，但是默认的刻度是100，其中如果获得其值的话可以很清楚的看见</li>\n<li><code>JSlider(BoundedRangeModel brm)</code>:使用指定的 <code>BoundedRangeModel</code> 创建一个水平滑块</li>\n<li><code>JSlider(int min,int max)</code>:创建一个带有最小值和最大值得滑块</li>\n<li><code>JSlider(int min,int max,int value)</code>:创建一个带有最小值，最大值和当前值的滑块</li>\n</ul>\n</blockquote>\n<h3 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h3><blockquote>\n<ol>\n<li><code>getValue(int x)</code>/<code>setValue(int x)</code>:得到和设置当前值</li>\n<li><code>getPaintsLabels()</code>:return <code>boolean</code> 告知是否绘制了签</li>\n<li><code>SetFont(Font font)</code>:设置组件的字体，其中Font类的font对象是参数</li>\n<li><code>setInverted(boolean b)</code>:反转滑块的刻度</li>\n<li><code>setMaximum(int maximum)</code> ：设置最大值</li>\n<li><code>setMinimum(int min)</code>:设置最小值</li>\n<li><code>setMinorTickSpacing(int n)</code> :设置次刻度，就是主刻度中间不用标记数值的刻度</li>\n<li><code>setMajorTickSpacing(int n)</code>:设置主刻度</li>\n<li><code>setPaintTicks(boolean b)</code>:确定是否在滑块下面显示刻度线，如果为false表示不显示</li>\n<li><code>setPaintLabels(boolean b)</code>:确定是否在刻度线下绘制数值，默认不绘制<br><strong>以上只是列了几个常用的函数，详情见<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">官方文档</a></strong></li>\n</ol>\n</blockquote>\n<h3 id=\"下面撸个代码试试身手\"><a href=\"#下面撸个代码试试身手\" class=\"headerlink\" title=\"下面撸个代码试试身手\"></a>下面撸个代码试试身手</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by chenjiabing on 2017/3/27.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java_swing</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> JSlider points = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Java_swing</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setTitle(<span class=\"string\">\"记事本\"</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setSize(<span class=\"number\">300</span>, <span class=\"number\">400</span>);</div><div class=\"line\"><span class=\"comment\">//        points=new JSlider();</span></div><div class=\"line\">        points = <span class=\"keyword\">new</span> JSlider(<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">5</span>);</div><div class=\"line\">        points.setMinorTickSpacing(<span class=\"number\">5</span>);<span class=\"comment\">//设置次要的间隔，每个一个间隔，这个显示时中间不标记数值</span></div><div class=\"line\">        points.setMajorTickSpacing(<span class=\"number\">10</span>);<span class=\"comment\">//显示主要的刻度线，每个两个间隔，这个设置了，如果setPaintLabels为true就会显示数值</span></div><div class=\"line\">        points.setPaintTicks(<span class=\"keyword\">true</span>);  <span class=\"comment\">//确定是否显示刻度线</span></div><div class=\"line\">        points.setPaintLabels(<span class=\"keyword\">true</span>); <span class=\"comment\">//确定是否显示刻度的值</span></div><div class=\"line\">        <span class=\"comment\">//points.setInverted(true);//指定为true反转刻 度</span></div><div class=\"line\">        points.setSnapToTicks(<span class=\"keyword\">true</span>);</div><div class=\"line\">        points.addChangeListener(<span class=\"keyword\">new</span> ChangeListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(ChangeEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> value = points.getValue();</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        getContentPane().add(points, BorderLayout.CENTER);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Java_swing my = <span class=\"keyword\">new</span> Java_swing();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Change-Listener-一个监听机制\"><a href=\"#Change-Listener-一个监听机制\" class=\"headerlink\" title=\"Change Listener(一个监听机制)\"></a>Change Listener(一个监听机制)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Dimension;</div><div class=\"line\"><span class=\"comment\">/*from  w  ww  .  ja  v a 2 s  .c o  m*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSlider;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    JFrame f = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    <span class=\"keyword\">final</span> JSlider slider = <span class=\"keyword\">new</span> JSlider(<span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    slider.setPreferredSize(<span class=\"keyword\">new</span> Dimension(<span class=\"number\">150</span>, <span class=\"number\">30</span>));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加change Listener,当然这里的和JButton的也是一样，可以在一个类中实现</span></div><div class=\"line\">    slider.addChangeListener(<span class=\"keyword\">new</span> ChangeListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(ChangeEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> value = slider.getValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span> &amp;&amp; value &lt;= <span class=\"number\">30</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"value &gt; 0 &amp;&amp; value &lt;= 30\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">30</span> &amp;&amp; value &lt; <span class=\"number\">80</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"value &gt; 30 &amp;&amp; value &lt; 80\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"max\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    f.add(slider);</div><div class=\"line\">    f.pack();</div><div class=\"line\">    f.setLocationRelativeTo(<span class=\"keyword\">null</span>);</div><div class=\"line\">    f.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>当然以上只是JSlider的一部分内容，还有的后面会陆续更新</strong><br><strong>本文参考的文章：</strong></p>\n<blockquote>\n<blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">中文文档</a></li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/0970__Java_Swing_JSlider.htm\" target=\"_blank\" rel=\"external\">英文文档</a></li>\n</ul>\n</blockquote>\n</blockquote>\n<p><strong>福利时间，博主写了一个小例子，想要的朋友可以参见<a href=\"https://github.com/chenjiabing666/Java_demo/tree/master/031\" target=\"_blank\" rel=\"external\">github</a>,不要忘了随手点个赞哦！！！</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Swing干货系列之JSlider-滑块\"><a href=\"#Swing干货系列之JSlider-滑块\" class=\"headerlink\" title=\"Swing干货系列之JSlider(滑块)\"></a>Swing干货系列之JSlider(滑块)</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>一个让用户以图形方式在有界区间内通过移动滑块来选择值的组件。</p>\n<p>滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 <code>setMajorTickSpacing</code>和 <code>setMinorTickSpacing</code> 来控制。刻度标记的绘制由 setPaintTicks 控制。</p>\n<p>滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签。标签的绘制由 <code>setLabelTable</code> 和 <code>setPaintLabels</code> 控制。</p>\n</blockquote>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<ul>\n<li><code>JSlider()</code>:创建一个空值的滑块组件，但是默认的刻度是100，其中如果获得其值的话可以很清楚的看见</li>\n<li><code>JSlider(BoundedRangeModel brm)</code>:使用指定的 <code>BoundedRangeModel</code> 创建一个水平滑块</li>\n<li><code>JSlider(int min,int max)</code>:创建一个带有最小值和最大值得滑块</li>\n<li><code>JSlider(int min,int max,int value)</code>:创建一个带有最小值，最大值和当前值的滑块</li>\n</ul>\n</blockquote>\n<h3 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h3><blockquote>\n<ol>\n<li><code>getValue(int x)</code>/<code>setValue(int x)</code>:得到和设置当前值</li>\n<li><code>getPaintsLabels()</code>:return <code>boolean</code> 告知是否绘制了签</li>\n<li><code>SetFont(Font font)</code>:设置组件的字体，其中Font类的font对象是参数</li>\n<li><code>setInverted(boolean b)</code>:反转滑块的刻度</li>\n<li><code>setMaximum(int maximum)</code> ：设置最大值</li>\n<li><code>setMinimum(int min)</code>:设置最小值</li>\n<li><code>setMinorTickSpacing(int n)</code> :设置次刻度，就是主刻度中间不用标记数值的刻度</li>\n<li><code>setMajorTickSpacing(int n)</code>:设置主刻度</li>\n<li><code>setPaintTicks(boolean b)</code>:确定是否在滑块下面显示刻度线，如果为false表示不显示</li>\n<li><code>setPaintLabels(boolean b)</code>:确定是否在刻度线下绘制数值，默认不绘制<br><strong>以上只是列了几个常用的函数，详情见<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">官方文档</a></strong></li>\n</ol>\n</blockquote>\n<h3 id=\"下面撸个代码试试身手\"><a href=\"#下面撸个代码试试身手\" class=\"headerlink\" title=\"下面撸个代码试试身手\"></a>下面撸个代码试试身手</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by chenjiabing on 2017/3/27.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java_swing</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> JSlider points = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Java_swing</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setTitle(<span class=\"string\">\"记事本\"</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setSize(<span class=\"number\">300</span>, <span class=\"number\">400</span>);</div><div class=\"line\"><span class=\"comment\">//        points=new JSlider();</span></div><div class=\"line\">        points = <span class=\"keyword\">new</span> JSlider(<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">5</span>);</div><div class=\"line\">        points.setMinorTickSpacing(<span class=\"number\">5</span>);<span class=\"comment\">//设置次要的间隔，每个一个间隔，这个显示时中间不标记数值</span></div><div class=\"line\">        points.setMajorTickSpacing(<span class=\"number\">10</span>);<span class=\"comment\">//显示主要的刻度线，每个两个间隔，这个设置了，如果setPaintLabels为true就会显示数值</span></div><div class=\"line\">        points.setPaintTicks(<span class=\"keyword\">true</span>);  <span class=\"comment\">//确定是否显示刻度线</span></div><div class=\"line\">        points.setPaintLabels(<span class=\"keyword\">true</span>); <span class=\"comment\">//确定是否显示刻度的值</span></div><div class=\"line\">        <span class=\"comment\">//points.setInverted(true);//指定为true反转刻 度</span></div><div class=\"line\">        points.setSnapToTicks(<span class=\"keyword\">true</span>);</div><div class=\"line\">        points.addChangeListener(<span class=\"keyword\">new</span> ChangeListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(ChangeEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> value = points.getValue();</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        getContentPane().add(points, BorderLayout.CENTER);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Java_swing my = <span class=\"keyword\">new</span> Java_swing();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Change-Listener-一个监听机制\"><a href=\"#Change-Listener-一个监听机制\" class=\"headerlink\" title=\"Change Listener(一个监听机制)\"></a>Change Listener(一个监听机制)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Dimension;</div><div class=\"line\"><span class=\"comment\">/*from  w  ww  .  ja  v a 2 s  .c o  m*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSlider;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.ChangeListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    JFrame f = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    <span class=\"keyword\">final</span> JSlider slider = <span class=\"keyword\">new</span> JSlider(<span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    slider.setPreferredSize(<span class=\"keyword\">new</span> Dimension(<span class=\"number\">150</span>, <span class=\"number\">30</span>));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加change Listener,当然这里的和JButton的也是一样，可以在一个类中实现</span></div><div class=\"line\">    slider.addChangeListener(<span class=\"keyword\">new</span> ChangeListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(ChangeEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> value = slider.getValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span> &amp;&amp; value &lt;= <span class=\"number\">30</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"value &gt; 0 &amp;&amp; value &lt;= 30\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">30</span> &amp;&amp; value &lt; <span class=\"number\">80</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"value &gt; 30 &amp;&amp; value &lt; 80\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"max\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    f.add(slider);</div><div class=\"line\">    f.pack();</div><div class=\"line\">    f.setLocationRelativeTo(<span class=\"keyword\">null</span>);</div><div class=\"line\">    f.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>当然以上只是JSlider的一部分内容，还有的后面会陆续更新</strong><br><strong>本文参考的文章：</strong></p>\n<blockquote>\n<blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">中文文档</a></li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/0970__Java_Swing_JSlider.htm\">英文文档</a></li>\n</ul>\n</blockquote>\n</blockquote>\n<p><strong>福利时间，博主写了一个小例子，想要的朋友可以参见<a href=\"https://github.com/chenjiabing666/Java_demo/tree/master/031\">github</a>,不要忘了随手点个赞哦！！！</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"Swing干货系列之JSplitPane(分割面板)","date":"2017-03-28T14:49:39.000Z","_content":"\n# Swing中的JSplitPane(分割面板)\n## 引言\n>`JSplitPane` 用于分隔两个（只能两个）`Component`。两个 `Component` 图形化分隔以外观实现为基础，并且这两个 `Component` 可以由用户交互式调整大小。有关如何使用 `JSplitPane` 的信息，请参阅 [The Java Tutorial](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh) 中的 How to Use Split Panes 一节。\n\n>使用 `JSplitPane.HORIZONTAL_SPLIT` 可让分隔窗格中的两个 Component 从左到右排列，或者使用 `JSplitPane.VERTICAL_SPLIT` 使其从上到下排列。改变 Component 大小的首选方式是调用 `setDividerLocation`，其中 `location` 是新的 x 或 y 位置，具体取决于 JSplitPane 的方向。\n\n>要将 Component 调整到其首选大小，可调用 `resetToPreferredSizes`。\n\n>当用户调整 Component 的大小时，Component 的最小大小用于确定 Component 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 JComponent 最小大小，请参阅 [JComponent.setMinimumSize(java.awt.Dimension)](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)。\n\n>当用户调整分隔窗格大小时，新的空间以 resizeWeight 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。\n>**补充说明：**\n>>这里的`JComponebt.SetMinimumSize(java.awt.Dimension)`:用于设置组件的最小值，这里的Dimension是一个封装组件的高度和宽度的一个类，其中的一个构造函数就是`Dimension(int width,int height)`,详情见[文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)，当然有设置最小的就有设置最大的啊，详情看文档吧\n\n## 构造函数\n>* `public JSplitPanel()`:创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 JSplitPane\n>* `public JSplitPanel(int newOrientation)`:创建一个指定方向的分割板，这里的`newOrientation`可以设置两个值， `VERTICAL_SPLIT`(设置分割板为上下布局),`HORIZONTAL_SPLIT`(设置分隔板左右布局)\n>* `public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent)`:创建一个具有指定方向和不连续重绘的指定组件的新 JSplitPane。\n>* `public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent)`:创建一个具有指定方向、重绘方式和指定组件的新 JSplitPane。\n\n## 常用方法\n>* `setContinuousLayout(boolean newContinuousLayout)`:设置是否连续重新显示组件，如果为false就会发现在调整面板的过程中会显示一道黑线，只有当停下的时候才能正常的显示，默认是`false`\n>* `setDividerSize(int newSize)`:设置分割条的大小\n>*　`setDividerLocation(double size)`:设置分隔条的位置,这里的size是小数，个人觉得官方文档好像这里有点对劲，相当于占整个面板的百分比\n>* `setLeftComponent(Componentcomp)`/`setTopComponent(Component comp)`: 将组件设置到分隔条的上面或者左边。\n>* `setRightComponent(Component comp)`/`setBottomComponent(Component comp)`:将组件设置到分隔条的下面或者右边。\n>* `setOneTouchExpandable(boolean newValue)`:设置 oneTouchExpandable 属性的值，要使 JSplitPane 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 true。\n\n>**补充说明：**\n>>上面只是常用的几个函数，具体的请看官方文档，注意这里的setLeftComponent的四个设置组件的函数要根据分隔板的分布来确定\n\n# 开始撸代码\n>**初步实现(创建两个按钮实现分隔板的布局)**\n```java\n\nimport java.awt.BorderLayout;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String[] a) {\n    JFrame horizontalFrame = new JFrame();\n    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JComponent topButton = new JButton(\"Left\");\n    JComponent bottomButton = new JButton(\"Right\");\n    final JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setTopComponent(topButton);\n    splitPane.setBottomComponent(bottomButton);\n\n    \n\n    horizontalFrame.add(splitPane, BorderLayout.CENTER);\n    horizontalFrame.setSize(150, 150);\n    horizontalFrame.setVisible(true);\n\n    splitPane.setDividerLocation(0.5);\n  }\n}\n```\n\n>**更进一步(两种布局的操作)**\n```java\nimport java.awt.BorderLayout;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String[] a) {\n    JFrame horizontalFrame = new JFrame();\n    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    \n    \n    JComponent leftButton = new JButton(\"Left\");\n    JComponent rightButton = new JButton(\"Right\");\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n    splitPane.setLeftComponent(leftButton);\n    splitPane.setRightComponent(rightButton);\n    \n    horizontalFrame.add(splitPane, BorderLayout.CENTER);\n    horizontalFrame.setSize(150, 150);\n    horizontalFrame.setVisible(true);\n    \n  }\n}\n```\n>**嵌套分隔板**\n```java\nimport javax.swing.JApplet;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JSplitPane;\npublic class Main{\n  \n  public static void main(String[] a) {\n    int HORIZSPLIT = JSplitPane.HORIZONTAL_SPLIT;\n\n    int VERTSPLIT = JSplitPane.VERTICAL_SPLIT;\n\n    boolean continuousLayout = true;\n\n\n    JLabel label1 = new JLabel(\"a\");\n    JLabel label2 = new JLabel(\"b\");\n    JLabel label3 = new JLabel(\"c\");\n    JSplitPane splitPane1 = new JSplitPane(VERTSPLIT, continuousLayout, label1, label2);\n    splitPane1.setOneTouchExpandable(true);\n    splitPane1.setDividerSize(2);\n    splitPane1.setDividerLocation(0.5);\n\n    JSplitPane splitPane2 = new JSplitPane(HORIZSPLIT, splitPane1, label3);//将分隔板和一个label放在第二个分割板中实现嵌套\n    splitPane2.setOneTouchExpandable(true);\n    splitPane2.setDividerLocation(0.4);\n    splitPane2.setDividerSize(2);\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(splitPane2);\n    frame.pack();\n    frame.setVisible(true);\n  }\n}\n```\n>**事件监听**\n```java\nimport java.awt.BorderLayout;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n// w  w  w . j a  va2s .  co m\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Property Split\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n    splitPane.setContinuousLayout(true);\n    splitPane.setOneTouchExpandable(true);\n\n    JComponent topComponent = new JButton(\"A\");\n    splitPane.setTopComponent(topComponent);\n\n    JComponent bottomComponent = new JButton(\"B\");\n    splitPane.setBottomComponent(bottomComponent);\n\n    PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {\n      public void propertyChange(PropertyChangeEvent changeEvent) {\n        JSplitPane sourceSplitPane = (JSplitPane) changeEvent.getSource();\n        String propertyName = changeEvent.getPropertyName();\n        if (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) {\n          int current = sourceSplitPane.getDividerLocation();\n          System.out.println(\"Current: \" + current);\n          Integer last = (Integer) changeEvent.getNewValue();\n          System.out.println(\"Last: \" + last);\n          Integer priorLast = (Integer) changeEvent.getOldValue();\n          System.out.println(\"Prior last: \" + priorLast);\n        }\n      }\n    };\n\n    splitPane.addPropertyChangeListener(propertyChangeListener);\n\n    frame.add(splitPane, BorderLayout.CENTER);\n    frame.setSize(300, 150);\n    frame.setVisible(true);\n  }\n}\n```\n>**说明**\n>无论 `bean` 何时更改 `bound` 属性，都会激发一个 `PropertyChange` 事件。可以向源 `bean` 注册一个 `PropertyChangeListener`，以便获得所有绑定 (`bound`) 属性更改的通知。\n>### 类 [PropertyChangeEvent](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>无论 bean 何时更改 \"bound\" 或 \"constrained\" 属性，都会提交一个 \"PropertyChange\" 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。\n通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。\n如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。\n事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。\n>`getSource()`:返回最初未变化的对象，未Object类型的,因此这里需要强制转换成`JSplitPanel`\n\n\n## 参考文章\n>* [官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>* [英文Swing教程](http://www.java2s.com/Tutorials/Java/Java_Swing/1310__Java_Swing_JSplitPane.htm)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Swing中的JSplitPane.md","raw":"---\ntitle: Swing干货系列之JSplitPane(分割面板)\ndate: 2017-03-28 22:49:39\ncategories: java学习\ntags: swing\n---\n\n# Swing中的JSplitPane(分割面板)\n## 引言\n>`JSplitPane` 用于分隔两个（只能两个）`Component`。两个 `Component` 图形化分隔以外观实现为基础，并且这两个 `Component` 可以由用户交互式调整大小。有关如何使用 `JSplitPane` 的信息，请参阅 [The Java Tutorial](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh) 中的 How to Use Split Panes 一节。\n\n>使用 `JSplitPane.HORIZONTAL_SPLIT` 可让分隔窗格中的两个 Component 从左到右排列，或者使用 `JSplitPane.VERTICAL_SPLIT` 使其从上到下排列。改变 Component 大小的首选方式是调用 `setDividerLocation`，其中 `location` 是新的 x 或 y 位置，具体取决于 JSplitPane 的方向。\n\n>要将 Component 调整到其首选大小，可调用 `resetToPreferredSizes`。\n\n>当用户调整 Component 的大小时，Component 的最小大小用于确定 Component 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 JComponent 最小大小，请参阅 [JComponent.setMinimumSize(java.awt.Dimension)](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)。\n\n>当用户调整分隔窗格大小时，新的空间以 resizeWeight 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。\n>**补充说明：**\n>>这里的`JComponebt.SetMinimumSize(java.awt.Dimension)`:用于设置组件的最小值，这里的Dimension是一个封装组件的高度和宽度的一个类，其中的一个构造函数就是`Dimension(int width,int height)`,详情见[文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)，当然有设置最小的就有设置最大的啊，详情看文档吧\n\n## 构造函数\n>* `public JSplitPanel()`:创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 JSplitPane\n>* `public JSplitPanel(int newOrientation)`:创建一个指定方向的分割板，这里的`newOrientation`可以设置两个值， `VERTICAL_SPLIT`(设置分割板为上下布局),`HORIZONTAL_SPLIT`(设置分隔板左右布局)\n>* `public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent)`:创建一个具有指定方向和不连续重绘的指定组件的新 JSplitPane。\n>* `public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent)`:创建一个具有指定方向、重绘方式和指定组件的新 JSplitPane。\n\n## 常用方法\n>* `setContinuousLayout(boolean newContinuousLayout)`:设置是否连续重新显示组件，如果为false就会发现在调整面板的过程中会显示一道黑线，只有当停下的时候才能正常的显示，默认是`false`\n>* `setDividerSize(int newSize)`:设置分割条的大小\n>*　`setDividerLocation(double size)`:设置分隔条的位置,这里的size是小数，个人觉得官方文档好像这里有点对劲，相当于占整个面板的百分比\n>* `setLeftComponent(Componentcomp)`/`setTopComponent(Component comp)`: 将组件设置到分隔条的上面或者左边。\n>* `setRightComponent(Component comp)`/`setBottomComponent(Component comp)`:将组件设置到分隔条的下面或者右边。\n>* `setOneTouchExpandable(boolean newValue)`:设置 oneTouchExpandable 属性的值，要使 JSplitPane 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 true。\n\n>**补充说明：**\n>>上面只是常用的几个函数，具体的请看官方文档，注意这里的setLeftComponent的四个设置组件的函数要根据分隔板的分布来确定\n\n# 开始撸代码\n>**初步实现(创建两个按钮实现分隔板的布局)**\n```java\n\nimport java.awt.BorderLayout;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String[] a) {\n    JFrame horizontalFrame = new JFrame();\n    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JComponent topButton = new JButton(\"Left\");\n    JComponent bottomButton = new JButton(\"Right\");\n    final JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setTopComponent(topButton);\n    splitPane.setBottomComponent(bottomButton);\n\n    \n\n    horizontalFrame.add(splitPane, BorderLayout.CENTER);\n    horizontalFrame.setSize(150, 150);\n    horizontalFrame.setVisible(true);\n\n    splitPane.setDividerLocation(0.5);\n  }\n}\n```\n\n>**更进一步(两种布局的操作)**\n```java\nimport java.awt.BorderLayout;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String[] a) {\n    JFrame horizontalFrame = new JFrame();\n    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    \n    \n    JComponent leftButton = new JButton(\"Left\");\n    JComponent rightButton = new JButton(\"Right\");\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n    splitPane.setLeftComponent(leftButton);\n    splitPane.setRightComponent(rightButton);\n    \n    horizontalFrame.add(splitPane, BorderLayout.CENTER);\n    horizontalFrame.setSize(150, 150);\n    horizontalFrame.setVisible(true);\n    \n  }\n}\n```\n>**嵌套分隔板**\n```java\nimport javax.swing.JApplet;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JSplitPane;\npublic class Main{\n  \n  public static void main(String[] a) {\n    int HORIZSPLIT = JSplitPane.HORIZONTAL_SPLIT;\n\n    int VERTSPLIT = JSplitPane.VERTICAL_SPLIT;\n\n    boolean continuousLayout = true;\n\n\n    JLabel label1 = new JLabel(\"a\");\n    JLabel label2 = new JLabel(\"b\");\n    JLabel label3 = new JLabel(\"c\");\n    JSplitPane splitPane1 = new JSplitPane(VERTSPLIT, continuousLayout, label1, label2);\n    splitPane1.setOneTouchExpandable(true);\n    splitPane1.setDividerSize(2);\n    splitPane1.setDividerLocation(0.5);\n\n    JSplitPane splitPane2 = new JSplitPane(HORIZSPLIT, splitPane1, label3);//将分隔板和一个label放在第二个分割板中实现嵌套\n    splitPane2.setOneTouchExpandable(true);\n    splitPane2.setDividerLocation(0.4);\n    splitPane2.setDividerSize(2);\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(splitPane2);\n    frame.pack();\n    frame.setVisible(true);\n  }\n}\n```\n>**事件监听**\n```java\nimport java.awt.BorderLayout;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n// w  w  w . j a  va2s .  co m\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JSplitPane;\n\npublic class Main {\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Property Split\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n    splitPane.setContinuousLayout(true);\n    splitPane.setOneTouchExpandable(true);\n\n    JComponent topComponent = new JButton(\"A\");\n    splitPane.setTopComponent(topComponent);\n\n    JComponent bottomComponent = new JButton(\"B\");\n    splitPane.setBottomComponent(bottomComponent);\n\n    PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {\n      public void propertyChange(PropertyChangeEvent changeEvent) {\n        JSplitPane sourceSplitPane = (JSplitPane) changeEvent.getSource();\n        String propertyName = changeEvent.getPropertyName();\n        if (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) {\n          int current = sourceSplitPane.getDividerLocation();\n          System.out.println(\"Current: \" + current);\n          Integer last = (Integer) changeEvent.getNewValue();\n          System.out.println(\"Last: \" + last);\n          Integer priorLast = (Integer) changeEvent.getOldValue();\n          System.out.println(\"Prior last: \" + priorLast);\n        }\n      }\n    };\n\n    splitPane.addPropertyChangeListener(propertyChangeListener);\n\n    frame.add(splitPane, BorderLayout.CENTER);\n    frame.setSize(300, 150);\n    frame.setVisible(true);\n  }\n}\n```\n>**说明**\n>无论 `bean` 何时更改 `bound` 属性，都会激发一个 `PropertyChange` 事件。可以向源 `bean` 注册一个 `PropertyChangeListener`，以便获得所有绑定 (`bound`) 属性更改的通知。\n>### 类 [PropertyChangeEvent](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>无论 bean 何时更改 \"bound\" 或 \"constrained\" 属性，都会提交一个 \"PropertyChange\" 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。\n通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。\n如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。\n事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。\n>`getSource()`:返回最初未变化的对象，未Object类型的,因此这里需要强制转换成`JSplitPanel`\n\n\n## 参考文章\n>* [官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)\n>* [英文Swing教程](http://www.java2s.com/Tutorials/Java/Java_Swing/1310__Java_Swing_JSplitPane.htm)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Swing中的JSplitPane","published":1,"updated":"2017-03-29T07:16:29.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxg0015l0uzzzgos3w2","content":"<h1 id=\"Swing中的JSplitPane-分割面板\"><a href=\"#Swing中的JSplitPane-分割面板\" class=\"headerlink\" title=\"Swing中的JSplitPane(分割面板)\"></a>Swing中的JSplitPane(分割面板)</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><code>JSplitPane</code> 用于分隔两个（只能两个）<code>Component</code>。两个 <code>Component</code> 图形化分隔以外观实现为基础，并且这两个 <code>Component</code> 可以由用户交互式调整大小。有关如何使用 <code>JSplitPane</code> 的信息，请参阅 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">The Java Tutorial</a> 中的 How to Use Split Panes 一节。</p>\n<p>使用 <code>JSplitPane.HORIZONTAL_SPLIT</code> 可让分隔窗格中的两个 Component 从左到右排列，或者使用 <code>JSplitPane.VERTICAL_SPLIT</code> 使其从上到下排列。改变 Component 大小的首选方式是调用 <code>setDividerLocation</code>，其中 <code>location</code> 是新的 x 或 y 位置，具体取决于 JSplitPane 的方向。</p>\n<p>要将 Component 调整到其首选大小，可调用 <code>resetToPreferredSizes</code>。</p>\n<p>当用户调整 Component 的大小时，Component 的最小大小用于确定 Component 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 JComponent 最小大小，请参阅 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">JComponent.setMinimumSize(java.awt.Dimension)</a>。</p>\n<p>当用户调整分隔窗格大小时，新的空间以 resizeWeight 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。<br><strong>补充说明：</strong></p>\n<blockquote>\n<p>这里的<code>JComponebt.SetMinimumSize(java.awt.Dimension)</code>:用于设置组件的最小值，这里的Dimension是一个封装组件的高度和宽度的一个类，其中的一个构造函数就是<code>Dimension(int width,int height)</code>,详情见<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">文档</a>，当然有设置最小的就有设置最大的啊，详情看文档吧</p>\n</blockquote>\n</blockquote>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><blockquote>\n<ul>\n<li><code>public JSplitPanel()</code>:创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 JSplitPane</li>\n<li><code>public JSplitPanel(int newOrientation)</code>:创建一个指定方向的分割板，这里的<code>newOrientation</code>可以设置两个值， <code>VERTICAL_SPLIT</code>(设置分割板为上下布局),<code>HORIZONTAL_SPLIT</code>(设置分隔板左右布局)</li>\n<li><code>public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向和不连续重绘的指定组件的新 JSplitPane。</li>\n<li><code>public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向、重绘方式和指定组件的新 JSplitPane。</li>\n</ul>\n</blockquote>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><blockquote>\n<ul>\n<li><code>setContinuousLayout(boolean newContinuousLayout)</code>:设置是否连续重新显示组件，如果为false就会发现在调整面板的过程中会显示一道黑线，只有当停下的时候才能正常的显示，默认是<code>false</code></li>\n<li><code>setDividerSize(int newSize)</code>:设置分割条的大小<br>*　<code>setDividerLocation(double size)</code>:设置分隔条的位置,这里的size是小数，个人觉得官方文档好像这里有点对劲，相当于占整个面板的百分比</li>\n<li><code>setLeftComponent(Componentcomp)</code>/<code>setTopComponent(Component comp)</code>: 将组件设置到分隔条的上面或者左边。</li>\n<li><code>setRightComponent(Component comp)</code>/<code>setBottomComponent(Component comp)</code>:将组件设置到分隔条的下面或者右边。</li>\n<li><code>setOneTouchExpandable(boolean newValue)</code>:设置 oneTouchExpandable 属性的值，要使 JSplitPane 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 true。</li>\n</ul>\n<p><strong>补充说明：</strong></p>\n<blockquote>\n<p>上面只是常用的几个函数，具体的请看官方文档，注意这里的setLeftComponent的四个设置组件的函数要根据分隔板的分布来确定</p>\n</blockquote>\n</blockquote>\n<h1 id=\"开始撸代码\"><a href=\"#开始撸代码\" class=\"headerlink\" title=\"开始撸代码\"></a>开始撸代码</h1><blockquote>\n<p><strong>初步实现(创建两个按钮实现分隔板的布局)</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame horizontalFrame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JComponent topButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Left\"</span>);</div><div class=\"line\">    JComponent bottomButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Right\"</span>);</div><div class=\"line\">    <span class=\"keyword\">final</span> JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\"></div><div class=\"line\">    splitPane.setTopComponent(topButton);</div><div class=\"line\">    splitPane.setBottomComponent(bottomButton);</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    horizontalFrame.setSize(<span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    horizontalFrame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    splitPane.setDividerLocation(<span class=\"number\">0.5</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>更进一步(两种布局的操作)</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame horizontalFrame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    JComponent leftButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Left\"</span>);</div><div class=\"line\">    JComponent rightButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Right\"</span>);</div><div class=\"line\">    JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\">    splitPane.setLeftComponent(leftButton);</div><div class=\"line\">    splitPane.setRightComponent(rightButton);</div><div class=\"line\">    </div><div class=\"line\">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    horizontalFrame.setSize(<span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    horizontalFrame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>嵌套分隔板</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JApplet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> HORIZSPLIT = JSplitPane.HORIZONTAL_SPLIT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> VERTSPLIT = JSplitPane.VERTICAL_SPLIT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> continuousLayout = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    JLabel label1 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">    JLabel label2 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">    JLabel label3 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"c\"</span>);</div><div class=\"line\">    JSplitPane splitPane1 = <span class=\"keyword\">new</span> JSplitPane(VERTSPLIT, continuousLayout, label1, label2);</div><div class=\"line\">    splitPane1.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane1.setDividerSize(<span class=\"number\">2</span>);</div><div class=\"line\">    splitPane1.setDividerLocation(<span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">    JSplitPane splitPane2 = <span class=\"keyword\">new</span> JSplitPane(HORIZSPLIT, splitPane1, label3);<span class=\"comment\">//将分隔板和一个label放在第二个分割板中实现嵌套</span></div><div class=\"line\">    splitPane2.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane2.setDividerLocation(<span class=\"number\">0.4</span>);</div><div class=\"line\">    splitPane2.setDividerSize(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    frame.add(splitPane2);</div><div class=\"line\">    frame.pack();</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>事件监听</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.beans.PropertyChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.beans.PropertyChangeListener;</div><div class=\"line\"><span class=\"comment\">// w  w  w . j a  va2s .  co m</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Property Split\"</span>);</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\">    splitPane.setContinuousLayout(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    JComponent topComponent = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">    splitPane.setTopComponent(topComponent);</div><div class=\"line\"></div><div class=\"line\">    JComponent bottomComponent = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">    splitPane.setBottomComponent(bottomComponent);</div><div class=\"line\"></div><div class=\"line\">    PropertyChangeListener propertyChangeListener = <span class=\"keyword\">new</span> PropertyChangeListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">propertyChange</span><span class=\"params\">(PropertyChangeEvent changeEvent)</span> </span>&#123;</div><div class=\"line\">        JSplitPane sourceSplitPane = (JSplitPane) changeEvent.getSource();</div><div class=\"line\">        String propertyName = changeEvent.getPropertyName();</div><div class=\"line\">        <span class=\"keyword\">if</span> (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) &#123;</div><div class=\"line\">          <span class=\"keyword\">int</span> current = sourceSplitPane.getDividerLocation();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Current: \"</span> + current);</div><div class=\"line\">          Integer last = (Integer) changeEvent.getNewValue();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Last: \"</span> + last);</div><div class=\"line\">          Integer priorLast = (Integer) changeEvent.getOldValue();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Prior last: \"</span> + priorLast);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    splitPane.addPropertyChangeListener(propertyChangeListener);</div><div class=\"line\"></div><div class=\"line\">    frame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>说明</strong><br>无论 <code>bean</code> 何时更改 <code>bound</code> 属性，都会激发一个 <code>PropertyChange</code> 事件。可以向源 <code>bean</code> 注册一个 <code>PropertyChangeListener</code>，以便获得所有绑定 (<code>bound</code>) 属性更改的通知。</p>\n<h3 id=\"类-PropertyChangeEvent\"><a href=\"#类-PropertyChangeEvent\" class=\"headerlink\" title=\"类 PropertyChangeEvent\"></a>类 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">PropertyChangeEvent</a></h3><p>无论 bean 何时更改 “bound” 或 “constrained” 属性，都会提交一个 “PropertyChange” 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。<br>通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。<br>如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。<br>事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。<br><code>getSource()</code>:返回最初未变化的对象，未Object类型的,因此这里需要强制转换成<code>JSplitPanel</code></p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/1310__Java_Swing_JSplitPane.htm\" target=\"_blank\" rel=\"external\">英文Swing教程</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Swing中的JSplitPane-分割面板\"><a href=\"#Swing中的JSplitPane-分割面板\" class=\"headerlink\" title=\"Swing中的JSplitPane(分割面板)\"></a>Swing中的JSplitPane(分割面板)</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><code>JSplitPane</code> 用于分隔两个（只能两个）<code>Component</code>。两个 <code>Component</code> 图形化分隔以外观实现为基础，并且这两个 <code>Component</code> 可以由用户交互式调整大小。有关如何使用 <code>JSplitPane</code> 的信息，请参阅 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">The Java Tutorial</a> 中的 How to Use Split Panes 一节。</p>\n<p>使用 <code>JSplitPane.HORIZONTAL_SPLIT</code> 可让分隔窗格中的两个 Component 从左到右排列，或者使用 <code>JSplitPane.VERTICAL_SPLIT</code> 使其从上到下排列。改变 Component 大小的首选方式是调用 <code>setDividerLocation</code>，其中 <code>location</code> 是新的 x 或 y 位置，具体取决于 JSplitPane 的方向。</p>\n<p>要将 Component 调整到其首选大小，可调用 <code>resetToPreferredSizes</code>。</p>\n<p>当用户调整 Component 的大小时，Component 的最小大小用于确定 Component 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 JComponent 最小大小，请参阅 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">JComponent.setMinimumSize(java.awt.Dimension)</a>。</p>\n<p>当用户调整分隔窗格大小时，新的空间以 resizeWeight 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。<br><strong>补充说明：</strong></p>\n<blockquote>\n<p>这里的<code>JComponebt.SetMinimumSize(java.awt.Dimension)</code>:用于设置组件的最小值，这里的Dimension是一个封装组件的高度和宽度的一个类，其中的一个构造函数就是<code>Dimension(int width,int height)</code>,详情见<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">文档</a>，当然有设置最小的就有设置最大的啊，详情看文档吧</p>\n</blockquote>\n</blockquote>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><blockquote>\n<ul>\n<li><code>public JSplitPanel()</code>:创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 JSplitPane</li>\n<li><code>public JSplitPanel(int newOrientation)</code>:创建一个指定方向的分割板，这里的<code>newOrientation</code>可以设置两个值， <code>VERTICAL_SPLIT</code>(设置分割板为上下布局),<code>HORIZONTAL_SPLIT</code>(设置分隔板左右布局)</li>\n<li><code>public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向和不连续重绘的指定组件的新 JSplitPane。</li>\n<li><code>public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向、重绘方式和指定组件的新 JSplitPane。</li>\n</ul>\n</blockquote>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><blockquote>\n<ul>\n<li><code>setContinuousLayout(boolean newContinuousLayout)</code>:设置是否连续重新显示组件，如果为false就会发现在调整面板的过程中会显示一道黑线，只有当停下的时候才能正常的显示，默认是<code>false</code></li>\n<li><code>setDividerSize(int newSize)</code>:设置分割条的大小<br>*　<code>setDividerLocation(double size)</code>:设置分隔条的位置,这里的size是小数，个人觉得官方文档好像这里有点对劲，相当于占整个面板的百分比</li>\n<li><code>setLeftComponent(Componentcomp)</code>/<code>setTopComponent(Component comp)</code>: 将组件设置到分隔条的上面或者左边。</li>\n<li><code>setRightComponent(Component comp)</code>/<code>setBottomComponent(Component comp)</code>:将组件设置到分隔条的下面或者右边。</li>\n<li><code>setOneTouchExpandable(boolean newValue)</code>:设置 oneTouchExpandable 属性的值，要使 JSplitPane 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 true。</li>\n</ul>\n<p><strong>补充说明：</strong></p>\n<blockquote>\n<p>上面只是常用的几个函数，具体的请看官方文档，注意这里的setLeftComponent的四个设置组件的函数要根据分隔板的分布来确定</p>\n</blockquote>\n</blockquote>\n<h1 id=\"开始撸代码\"><a href=\"#开始撸代码\" class=\"headerlink\" title=\"开始撸代码\"></a>开始撸代码</h1><blockquote>\n<p><strong>初步实现(创建两个按钮实现分隔板的布局)</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame horizontalFrame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JComponent topButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Left\"</span>);</div><div class=\"line\">    JComponent bottomButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Right\"</span>);</div><div class=\"line\">    <span class=\"keyword\">final</span> JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\"></div><div class=\"line\">    splitPane.setTopComponent(topButton);</div><div class=\"line\">    splitPane.setBottomComponent(bottomButton);</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    horizontalFrame.setSize(<span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    horizontalFrame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    splitPane.setDividerLocation(<span class=\"number\">0.5</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>更进一步(两种布局的操作)</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame horizontalFrame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    JComponent leftButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Left\"</span>);</div><div class=\"line\">    JComponent rightButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Right\"</span>);</div><div class=\"line\">    JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\">    splitPane.setLeftComponent(leftButton);</div><div class=\"line\">    splitPane.setRightComponent(rightButton);</div><div class=\"line\">    </div><div class=\"line\">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    horizontalFrame.setSize(<span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    horizontalFrame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>嵌套分隔板</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JApplet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> HORIZSPLIT = JSplitPane.HORIZONTAL_SPLIT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> VERTSPLIT = JSplitPane.VERTICAL_SPLIT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> continuousLayout = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    JLabel label1 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">    JLabel label2 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">    JLabel label3 = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"c\"</span>);</div><div class=\"line\">    JSplitPane splitPane1 = <span class=\"keyword\">new</span> JSplitPane(VERTSPLIT, continuousLayout, label1, label2);</div><div class=\"line\">    splitPane1.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane1.setDividerSize(<span class=\"number\">2</span>);</div><div class=\"line\">    splitPane1.setDividerLocation(<span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">    JSplitPane splitPane2 = <span class=\"keyword\">new</span> JSplitPane(HORIZSPLIT, splitPane1, label3);<span class=\"comment\">//将分隔板和一个label放在第二个分割板中实现嵌套</span></div><div class=\"line\">    splitPane2.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane2.setDividerLocation(<span class=\"number\">0.4</span>);</div><div class=\"line\">    splitPane2.setDividerSize(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    frame.add(splitPane2);</div><div class=\"line\">    frame.pack();</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>事件监听</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.beans.PropertyChangeEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.beans.PropertyChangeListener;</div><div class=\"line\"><span class=\"comment\">// w  w  w . j a  va2s .  co m</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Property Split\"</span>);</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class=\"line\">    splitPane.setContinuousLayout(<span class=\"keyword\">true</span>);</div><div class=\"line\">    splitPane.setOneTouchExpandable(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    JComponent topComponent = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">    splitPane.setTopComponent(topComponent);</div><div class=\"line\"></div><div class=\"line\">    JComponent bottomComponent = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">    splitPane.setBottomComponent(bottomComponent);</div><div class=\"line\"></div><div class=\"line\">    PropertyChangeListener propertyChangeListener = <span class=\"keyword\">new</span> PropertyChangeListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">propertyChange</span><span class=\"params\">(PropertyChangeEvent changeEvent)</span> </span>&#123;</div><div class=\"line\">        JSplitPane sourceSplitPane = (JSplitPane) changeEvent.getSource();</div><div class=\"line\">        String propertyName = changeEvent.getPropertyName();</div><div class=\"line\">        <span class=\"keyword\">if</span> (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) &#123;</div><div class=\"line\">          <span class=\"keyword\">int</span> current = sourceSplitPane.getDividerLocation();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Current: \"</span> + current);</div><div class=\"line\">          Integer last = (Integer) changeEvent.getNewValue();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Last: \"</span> + last);</div><div class=\"line\">          Integer priorLast = (Integer) changeEvent.getOldValue();</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Prior last: \"</span> + priorLast);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    splitPane.addPropertyChangeListener(propertyChangeListener);</div><div class=\"line\"></div><div class=\"line\">    frame.add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>说明</strong><br>无论 <code>bean</code> 何时更改 <code>bound</code> 属性，都会激发一个 <code>PropertyChange</code> 事件。可以向源 <code>bean</code> 注册一个 <code>PropertyChangeListener</code>，以便获得所有绑定 (<code>bound</code>) 属性更改的通知。</p>\n<h3 id=\"类-PropertyChangeEvent\"><a href=\"#类-PropertyChangeEvent\" class=\"headerlink\" title=\"类 PropertyChangeEvent\"></a>类 <a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">PropertyChangeEvent</a></h3><p>无论 bean 何时更改 “bound” 或 “constrained” 属性，都会提交一个 “PropertyChange” 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。<br>通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。<br>如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。<br>事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。<br><code>getSource()</code>:返回最初未变化的对象，未Object类型的,因此这里需要强制转换成<code>JSplitPanel</code></p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">官方文档</a></li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/1310__Java_Swing_JSplitPane.htm\">英文Swing教程</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"swing干货系列之JTextField","date":"2017-04-08T12:32:04.000Z","_content":"# Swing系列之JTextField(单行文本框)\n## 介绍\n* `JTextField`是一个轻量级组件，它允许编辑单行文本。\n* `JTextField` 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。`java.awt.TextField` 把字段文本用作针对 `ActionEvent` 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。\n\n* `setEchoChar` 和 `getEchoChar` 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 `JPasswordField` 扩展了 `JTextField`，从而通过可插入外观独立地提供此服务。\n* `JTextField` 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 `getHorizontalAlignment` 方法确定的。默认情况下为前端对齐。\n* 文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。\n* Swing 不是线程安全的\n\n## 构造函数\n* `JTextField()` 构造一个新的 TextField\n* `JTextField(Document doc, String text, int columns)`  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。\n* `JTextField(int columns)`  构造一个具有指定列数的新的空 TextField。\n* `JTextField(String text) `构造一个用指定文本初始化的新 TextField。\n* `JTextField(String text, int columns)`   构造一个用指定文本和列初始化的新 TextField。\n\n## 常用的函数\n* `get/setHorizontalAlignment(int alignment`) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT\n>1. `JTextField.CENTER`\n>1. `JTextField.RIGHT`\n>1. `JTextField.LEADING` (the default)\n>1. `JTextField.TRAILING`\n\n* `setFont(Font font)`   设置字体\n* `setScrollOffset(int scrollOffset)`  获取滚动偏移量（以像素为单位）。\n* `setDocument(Document doc)`  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。\n* `setInputVerifier(verifier)`    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上\n* `setDragEnabled(boolean x)`   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走\n* `addActionListener(ActionListener action)`   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同\n* `write(InfileWriter writer)`  将文本框中的内容输入到文件中\n* `addKeyListener(KeyListener event)`   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见[官方文档](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html)\n* `addCaretListener(CareListener event)`  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发\n\n## 一个简单的实例\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\nclass text extends JFrame {\n    private JTextField textField1;\n    private JTextField textField2;\n\n    public static void main(String args[]) {\n        text my = new text();\n        my.setVisible(true);\n\n    }\n\n    public text() {\n        //this.setBounds(100,100,300,200);\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel(new GridLayout(2, 1));\n        textField1 = new JTextField(10);\n        textField2 = new JTextField();\n        panel.add(textField1);\n        panel.add(textField2);\n        this.getContentPane().add(panel, BorderLayout.CENTER);\n        this.pack();\n        InputVerifier verifier = new InputVerifier() {    //添加验证方式\n            @Override\n            public boolean verify(JComponent input) {     //重载函数\n                boolean value;\n                textField1 = (JTextField) input;    //将input组件强制转化为JTextField类型的单行文本框\n                return textField1.getText().equals(\"pass\");  //判断是否输入的时pass,如果不是就会验证错误\n\n            }\n        };\n        textField1.setInputVerifier(verifier);   //设置验证方式\n        textField1.setHorizontalAlignment(JTextField.CENTER);   //设置水平对齐方式\n        Font font = new Font(\"楷体\", Font.BOLD + Font.ITALIC, 20);\n        textField1.setFont(font);   //设置字体\n        textField1.setDragEnabled(true);  //设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本\n\n\n    }\n}\n```\n## 关联文本文档\n```java\nimport java.awt.Container;\nimport java.awt.GridLayout;\n/*from   w  ww.jav  a  2s . co m*/\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.text.Document;\n\npublic class Main extends JFrame {\n  JLabel nameLabel = new JLabel(\"Name:\");\n  JLabel mirroredNameLabel = new JLabel(\"Mirrored:\");\n  JTextField name = new JTextField(20);\n  JTextField mirroredName = new JTextField(20);\n\n  public Main() {\n    this.setDefaultCloseOperation(EXIT_ON_CLOSE);\n    this.setLayout(new GridLayout(2, 0));\n\n    Container contentPane = this.getContentPane();\n    contentPane.add(nameLabel);\n    contentPane.add(name);\n    contentPane.add(mirroredNameLabel);\n    contentPane.add(mirroredName);\n\n    Document nameModel = name.getDocument();    //得到文本框的文本文档，将之与第二个文本框关联\n    mirroredName.setDocument(nameModel);           //两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示\n    \n    pack();\n    setVisible(true);    \n  }\n\n  public static void main(String[] args) {\n    Main frame = new Main();\n\n  }\n}\n\n```\n>**说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容**\n\n## Action Listener(动作监听机制)\n**输入文本后按回车即可触发**\n```java\nimport java.awt.event.ActionEvent;\n//from  w  w  w. ja va2s  .c o m\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\n\npublic class Main {\n\n  public static void main(String[] a) {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JTextField jTextField1 = new JTextField();\n\n    jTextField1.setText(\"jTextField1\");\n    //添加监听机制\n    jTextField1.addActionListener(new   java.awt.event.ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        System.out.println(\"action\");\n      }\n    });\n    frame.add(jTextField1);\n\n    frame.setSize(300, 200);\n    frame.setVisible(true);\n  }\n\n}\n```\n\n## 验证文本内容\n**使用[InputVerifier](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier())验证**\n\n```java\nimport java.awt.BorderLayout;\nimport javax.swing.InputVerifier;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\npublic class Main {\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Verifier Sample\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JTextField textField1 = new JTextField();\n    JTextField textField2 = new JTextField();\n    InputVerifier verifier = new InputVerifier() {     //创建一个验证\n      public boolean verify(JComponent comp) {\n        boolean returnValue;\n        JTextField textField = (JTextField) comp;      //强制转换，将控件类型的comp转换成JTextFiled类型的\n        try {\n          Integer.parseInt(textField.getText());    //将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误\n          returnValue = true;\n        } catch (NumberFormatException e) {   \n          returnValue = false;\n        }\n        return returnValue;        //如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上\n      }\n    };\n    textField1.setInputVerifier(verifier);\n    frame.add(textField1, BorderLayout.NORTH);\n    frame.add(textField2, BorderLayout.CENTER);\n    frame.setSize(300, 100);\n    frame.setVisible(true);\n  }\n}\n```\n> **说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上**\n\n## 将文本框中的内容保存到文件中\n```java\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nclass Main extends JFrame {\n    private JTextField textField;\n    private FileWriter writer;\n\n    public static void main(String args[]) {\n        Main my = new Main();\n        my.setVisible(true);\n    }\n\n    public Main() {\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel(new BorderLayout());\n        JButton button = new JButton(\"运行\");\n        JLabel label = new JLabel(\"name\");\n        textField = new JTextField();\n        panel.add(label, BorderLayout.WEST);\n        panel.add(textField, BorderLayout.CENTER);\n        String filename = \"text.txt\";\n        button.addActionListener(new ActionListener() {    //添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    writer = new FileWriter(filename, false);   //创建一个写入文件的对象，这里的false表示不在文件的末尾添加\n                    textField.write(writer);     //将单行文本中输入的内容写入到文件中\n                    writer.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                    System.out.println(\"false\");\n                }\n            }\n        });\n        panel.add(button, BorderLayout.SOUTH);\n        this.getContentPane().add(panel, BorderLayout.CENTER);\n        this.pack();\n    }\n\n}\n```\n>**说明：这里使用的是`FileWriter`类将内容写入到文件中，详情请看我的上一篇[文章](https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/)**\n\n## 复制、粘贴、剪切文本\n>**这里使用的时`copy()`、`paste()`、`cut()`函数**\n\n```java\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\n\npublic class Main {\n  public static void main(String args[]) {\n    final JTextField textField = new JTextField(15);\n    JButton buttonCut = new JButton(\"Cut\");\n    JButton buttonPaste = new JButton(\"Paste\");\n    JButton buttonCopy = new JButton(\"Copy\");\n\n    JFrame jfrm = new JFrame(\"Cut, Copy, and Paste\");\n    jfrm.setLayout(new FlowLayout());\n    jfrm.setSize(230, 150);\n    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    buttonCut.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.cut();\n      }\n    });\n\n    buttonPaste.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.paste();\n      }\n    });\n\n    buttonCopy.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.copy();\n      }\n    });\n\n    textField.addCaretListener(new CaretListener() {\n      public void caretUpdate(CaretEvent ce) {\n        System.out.println(\"All text: \" + textField.getText());\n        if (textField.getSelectedText() != null)\n          System.out.println(\"Selected text: \" + textField.getSelectedText());\n        else\n          System.out.println(\"Selected text: \");\n      }\n    });\n\n    jfrm.add(textField);\n    jfrm.add(buttonCut);\n    jfrm.add(buttonPaste);\n    jfrm.add(buttonCopy);\n    jfrm.setVisible(true);\n  }\n}\n```\n>**说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制**\n\n## 添加键盘监听机制\n\n```java\n\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.HeadlessException;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\n\npublic class Main extends JFrame {\n  public Main() throws HeadlessException {\n    setSize(200, 200);\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setLayout(new FlowLayout(FlowLayout.LEFT));\n\n    JLabel usernameLabel = new JLabel(\"Username: \");\n    JTextField usernameTextField = new JTextField();\n    usernameTextField.setPreferredSize(new Dimension(100, 20));\n    add(usernameLabel);\n    add(usernameTextField);\n\n    usernameTextField.addKeyListener(new KeyAdapter() {   //创建机制\n      public void keyReleased(KeyEvent e) {        //重载函数，释放按键触发\n        JTextField textField = (JTextField) e.getSource();  //得到最初发生event的组件对象,既是文本框对象\n        String text = textField.getText();\n        textField.setText(text.toUpperCase());      //将所有的小写字母转换成大写字母\n      }\n       public void keyTyped(KeyEvent e) {           //键入时触发\n      }\n\n      public void keyPressed(KeyEvent e) {       //释放按键时触发的函数\n      }   \n    });\n  }\n\n  public static void main(String[] args) {\n    new Main().setVisible(true);\n  }\n}\n```\n## 添加插入符位置变化的监听机制\n**使用的是[CareListener](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html)类来实现**\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\n\npublic class ClockwiseTextFrame extends JFrame {\n    private JTextField textField;\n    ClockwiseTextPanel clockwiseTextPanel = new ClockwiseTextPanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        ClockwiseTextFrame frame = new ClockwiseTextFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public ClockwiseTextFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"顺时针旋转文字\"); // 窗体标题\n        setBounds(100, 100, 340, 240); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(clockwiseTextPanel); // 将面板类的实例添加到窗体容器中\n        textField = new JTextField();\n        textField.addCaretListener(new CaretListener() {\n            public void caretUpdate(CaretEvent arg0) {\n                String text = textField.getText();// 获取文本框字符串\n                clockwiseTextPanel.setText(text);// 为面板中的text变量赋值\n            }\n        });\n        getContentPane().add(textField, BorderLayout.SOUTH);\n    }\n    \n    class ClockwiseTextPanel extends JPanel { // 创建内部面板类\n        private String text;\n        public ClockwiseTextPanel() {\n            setOpaque(false);// 设置面板为透明\n            setLayout(null);// 设置为绝对布局\n        }\n        public String getText() {\n            return text; // 获得成员变量的值\n        }\n        public void setText(String text) {\n            this.text = text;// 为成员变量赋值\n            repaint();// 调整paint()方法\n        }\n        public void paint(Graphics g) {// 重写paint()方法\n            Graphics2D g2 = (Graphics2D) g;// 获得Graphics2D的实例\n            int width = getWidth();// 获得面板的宽度\n            int height = getHeight();// 获得面板的高度\n            if (text != null) {\n                char[] array = text.toCharArray();// 将文本转换为字符数组\n                int len = array.length * 5;// 定义圆的半径，同时可以调整文字的距离\n                Font font = new Font(\"宋体\", Font.BOLD, 22);// 创建字体\n                g2.setFont(font);// 设置字体\n                double angle = 0;// 定义初始角度\n                for (int i = 0; i < array.length; i++) {// 遍历字符串中的字符\n                    if (i == 0) {\n                        g2.setColor(Color.BLUE);// 第一个字符用蓝色\n                    } else {\n                        g2.setColor(Color.BLACK);// 其他字符用黑色\n                    }\n                    int x = (int) (len * Math.sin(Math.toRadians(angle + 270)));// 计算每个文字的横坐标位置\n                    int y = (int) (len * Math.cos(Math.toRadians(angle + 270)));// 计算每个文字的纵坐标位置\n                    g2.drawString(array[i] + \"\", width / 2 + x, height / 2 - y);// 绘制字符\n                    angle = angle + 360d / array.length;// 改变角度\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n\n## 参考文档\n>* [官方网站](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int))\n>* [英文文档](http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm)\n\n\n\n\n\n          \n\n\n\n          \n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/Swing干货系列之JTextField.md","raw":"---\ntitle: swing干货系列之JTextField\ndate: 2017-04-08 20:32:04\ncategories: java学习\ntags: swing\n---\n# Swing系列之JTextField(单行文本框)\n## 介绍\n* `JTextField`是一个轻量级组件，它允许编辑单行文本。\n* `JTextField` 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。`java.awt.TextField` 把字段文本用作针对 `ActionEvent` 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。\n\n* `setEchoChar` 和 `getEchoChar` 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 `JPasswordField` 扩展了 `JTextField`，从而通过可插入外观独立地提供此服务。\n* `JTextField` 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 `getHorizontalAlignment` 方法确定的。默认情况下为前端对齐。\n* 文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。\n* Swing 不是线程安全的\n\n## 构造函数\n* `JTextField()` 构造一个新的 TextField\n* `JTextField(Document doc, String text, int columns)`  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。\n* `JTextField(int columns)`  构造一个具有指定列数的新的空 TextField。\n* `JTextField(String text) `构造一个用指定文本初始化的新 TextField。\n* `JTextField(String text, int columns)`   构造一个用指定文本和列初始化的新 TextField。\n\n## 常用的函数\n* `get/setHorizontalAlignment(int alignment`) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT\n>1. `JTextField.CENTER`\n>1. `JTextField.RIGHT`\n>1. `JTextField.LEADING` (the default)\n>1. `JTextField.TRAILING`\n\n* `setFont(Font font)`   设置字体\n* `setScrollOffset(int scrollOffset)`  获取滚动偏移量（以像素为单位）。\n* `setDocument(Document doc)`  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。\n* `setInputVerifier(verifier)`    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上\n* `setDragEnabled(boolean x)`   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走\n* `addActionListener(ActionListener action)`   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同\n* `write(InfileWriter writer)`  将文本框中的内容输入到文件中\n* `addKeyListener(KeyListener event)`   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见[官方文档](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html)\n* `addCaretListener(CareListener event)`  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发\n\n## 一个简单的实例\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\nclass text extends JFrame {\n    private JTextField textField1;\n    private JTextField textField2;\n\n    public static void main(String args[]) {\n        text my = new text();\n        my.setVisible(true);\n\n    }\n\n    public text() {\n        //this.setBounds(100,100,300,200);\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel(new GridLayout(2, 1));\n        textField1 = new JTextField(10);\n        textField2 = new JTextField();\n        panel.add(textField1);\n        panel.add(textField2);\n        this.getContentPane().add(panel, BorderLayout.CENTER);\n        this.pack();\n        InputVerifier verifier = new InputVerifier() {    //添加验证方式\n            @Override\n            public boolean verify(JComponent input) {     //重载函数\n                boolean value;\n                textField1 = (JTextField) input;    //将input组件强制转化为JTextField类型的单行文本框\n                return textField1.getText().equals(\"pass\");  //判断是否输入的时pass,如果不是就会验证错误\n\n            }\n        };\n        textField1.setInputVerifier(verifier);   //设置验证方式\n        textField1.setHorizontalAlignment(JTextField.CENTER);   //设置水平对齐方式\n        Font font = new Font(\"楷体\", Font.BOLD + Font.ITALIC, 20);\n        textField1.setFont(font);   //设置字体\n        textField1.setDragEnabled(true);  //设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本\n\n\n    }\n}\n```\n## 关联文本文档\n```java\nimport java.awt.Container;\nimport java.awt.GridLayout;\n/*from   w  ww.jav  a  2s . co m*/\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.text.Document;\n\npublic class Main extends JFrame {\n  JLabel nameLabel = new JLabel(\"Name:\");\n  JLabel mirroredNameLabel = new JLabel(\"Mirrored:\");\n  JTextField name = new JTextField(20);\n  JTextField mirroredName = new JTextField(20);\n\n  public Main() {\n    this.setDefaultCloseOperation(EXIT_ON_CLOSE);\n    this.setLayout(new GridLayout(2, 0));\n\n    Container contentPane = this.getContentPane();\n    contentPane.add(nameLabel);\n    contentPane.add(name);\n    contentPane.add(mirroredNameLabel);\n    contentPane.add(mirroredName);\n\n    Document nameModel = name.getDocument();    //得到文本框的文本文档，将之与第二个文本框关联\n    mirroredName.setDocument(nameModel);           //两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示\n    \n    pack();\n    setVisible(true);    \n  }\n\n  public static void main(String[] args) {\n    Main frame = new Main();\n\n  }\n}\n\n```\n>**说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容**\n\n## Action Listener(动作监听机制)\n**输入文本后按回车即可触发**\n```java\nimport java.awt.event.ActionEvent;\n//from  w  w  w. ja va2s  .c o m\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\n\npublic class Main {\n\n  public static void main(String[] a) {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JTextField jTextField1 = new JTextField();\n\n    jTextField1.setText(\"jTextField1\");\n    //添加监听机制\n    jTextField1.addActionListener(new   java.awt.event.ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        System.out.println(\"action\");\n      }\n    });\n    frame.add(jTextField1);\n\n    frame.setSize(300, 200);\n    frame.setVisible(true);\n  }\n\n}\n```\n\n## 验证文本内容\n**使用[InputVerifier](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier())验证**\n\n```java\nimport java.awt.BorderLayout;\nimport javax.swing.InputVerifier;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\npublic class Main {\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Verifier Sample\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JTextField textField1 = new JTextField();\n    JTextField textField2 = new JTextField();\n    InputVerifier verifier = new InputVerifier() {     //创建一个验证\n      public boolean verify(JComponent comp) {\n        boolean returnValue;\n        JTextField textField = (JTextField) comp;      //强制转换，将控件类型的comp转换成JTextFiled类型的\n        try {\n          Integer.parseInt(textField.getText());    //将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误\n          returnValue = true;\n        } catch (NumberFormatException e) {   \n          returnValue = false;\n        }\n        return returnValue;        //如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上\n      }\n    };\n    textField1.setInputVerifier(verifier);\n    frame.add(textField1, BorderLayout.NORTH);\n    frame.add(textField2, BorderLayout.CENTER);\n    frame.setSize(300, 100);\n    frame.setVisible(true);\n  }\n}\n```\n> **说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上**\n\n## 将文本框中的内容保存到文件中\n```java\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nclass Main extends JFrame {\n    private JTextField textField;\n    private FileWriter writer;\n\n    public static void main(String args[]) {\n        Main my = new Main();\n        my.setVisible(true);\n    }\n\n    public Main() {\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel(new BorderLayout());\n        JButton button = new JButton(\"运行\");\n        JLabel label = new JLabel(\"name\");\n        textField = new JTextField();\n        panel.add(label, BorderLayout.WEST);\n        panel.add(textField, BorderLayout.CENTER);\n        String filename = \"text.txt\";\n        button.addActionListener(new ActionListener() {    //添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    writer = new FileWriter(filename, false);   //创建一个写入文件的对象，这里的false表示不在文件的末尾添加\n                    textField.write(writer);     //将单行文本中输入的内容写入到文件中\n                    writer.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                    System.out.println(\"false\");\n                }\n            }\n        });\n        panel.add(button, BorderLayout.SOUTH);\n        this.getContentPane().add(panel, BorderLayout.CENTER);\n        this.pack();\n    }\n\n}\n```\n>**说明：这里使用的是`FileWriter`类将内容写入到文件中，详情请看我的上一篇[文章](https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/)**\n\n## 复制、粘贴、剪切文本\n>**这里使用的时`copy()`、`paste()`、`cut()`函数**\n\n```java\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JTextField;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\n\npublic class Main {\n  public static void main(String args[]) {\n    final JTextField textField = new JTextField(15);\n    JButton buttonCut = new JButton(\"Cut\");\n    JButton buttonPaste = new JButton(\"Paste\");\n    JButton buttonCopy = new JButton(\"Copy\");\n\n    JFrame jfrm = new JFrame(\"Cut, Copy, and Paste\");\n    jfrm.setLayout(new FlowLayout());\n    jfrm.setSize(230, 150);\n    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    buttonCut.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.cut();\n      }\n    });\n\n    buttonPaste.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.paste();\n      }\n    });\n\n    buttonCopy.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent le) {\n        textField.copy();\n      }\n    });\n\n    textField.addCaretListener(new CaretListener() {\n      public void caretUpdate(CaretEvent ce) {\n        System.out.println(\"All text: \" + textField.getText());\n        if (textField.getSelectedText() != null)\n          System.out.println(\"Selected text: \" + textField.getSelectedText());\n        else\n          System.out.println(\"Selected text: \");\n      }\n    });\n\n    jfrm.add(textField);\n    jfrm.add(buttonCut);\n    jfrm.add(buttonPaste);\n    jfrm.add(buttonCopy);\n    jfrm.setVisible(true);\n  }\n}\n```\n>**说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制**\n\n## 添加键盘监听机制\n\n```java\n\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.HeadlessException;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\n\npublic class Main extends JFrame {\n  public Main() throws HeadlessException {\n    setSize(200, 200);\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setLayout(new FlowLayout(FlowLayout.LEFT));\n\n    JLabel usernameLabel = new JLabel(\"Username: \");\n    JTextField usernameTextField = new JTextField();\n    usernameTextField.setPreferredSize(new Dimension(100, 20));\n    add(usernameLabel);\n    add(usernameTextField);\n\n    usernameTextField.addKeyListener(new KeyAdapter() {   //创建机制\n      public void keyReleased(KeyEvent e) {        //重载函数，释放按键触发\n        JTextField textField = (JTextField) e.getSource();  //得到最初发生event的组件对象,既是文本框对象\n        String text = textField.getText();\n        textField.setText(text.toUpperCase());      //将所有的小写字母转换成大写字母\n      }\n       public void keyTyped(KeyEvent e) {           //键入时触发\n      }\n\n      public void keyPressed(KeyEvent e) {       //释放按键时触发的函数\n      }   \n    });\n  }\n\n  public static void main(String[] args) {\n    new Main().setVisible(true);\n  }\n}\n```\n## 添加插入符位置变化的监听机制\n**使用的是[CareListener](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html)类来实现**\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\n\npublic class ClockwiseTextFrame extends JFrame {\n    private JTextField textField;\n    ClockwiseTextPanel clockwiseTextPanel = new ClockwiseTextPanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        ClockwiseTextFrame frame = new ClockwiseTextFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public ClockwiseTextFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"顺时针旋转文字\"); // 窗体标题\n        setBounds(100, 100, 340, 240); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(clockwiseTextPanel); // 将面板类的实例添加到窗体容器中\n        textField = new JTextField();\n        textField.addCaretListener(new CaretListener() {\n            public void caretUpdate(CaretEvent arg0) {\n                String text = textField.getText();// 获取文本框字符串\n                clockwiseTextPanel.setText(text);// 为面板中的text变量赋值\n            }\n        });\n        getContentPane().add(textField, BorderLayout.SOUTH);\n    }\n    \n    class ClockwiseTextPanel extends JPanel { // 创建内部面板类\n        private String text;\n        public ClockwiseTextPanel() {\n            setOpaque(false);// 设置面板为透明\n            setLayout(null);// 设置为绝对布局\n        }\n        public String getText() {\n            return text; // 获得成员变量的值\n        }\n        public void setText(String text) {\n            this.text = text;// 为成员变量赋值\n            repaint();// 调整paint()方法\n        }\n        public void paint(Graphics g) {// 重写paint()方法\n            Graphics2D g2 = (Graphics2D) g;// 获得Graphics2D的实例\n            int width = getWidth();// 获得面板的宽度\n            int height = getHeight();// 获得面板的高度\n            if (text != null) {\n                char[] array = text.toCharArray();// 将文本转换为字符数组\n                int len = array.length * 5;// 定义圆的半径，同时可以调整文字的距离\n                Font font = new Font(\"宋体\", Font.BOLD, 22);// 创建字体\n                g2.setFont(font);// 设置字体\n                double angle = 0;// 定义初始角度\n                for (int i = 0; i < array.length; i++) {// 遍历字符串中的字符\n                    if (i == 0) {\n                        g2.setColor(Color.BLUE);// 第一个字符用蓝色\n                    } else {\n                        g2.setColor(Color.BLACK);// 其他字符用黑色\n                    }\n                    int x = (int) (len * Math.sin(Math.toRadians(angle + 270)));// 计算每个文字的横坐标位置\n                    int y = (int) (len * Math.cos(Math.toRadians(angle + 270)));// 计算每个文字的纵坐标位置\n                    g2.drawString(array[i] + \"\", width / 2 + x, height / 2 - y);// 绘制字符\n                    angle = angle + 360d / array.length;// 改变角度\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n\n## 参考文档\n>* [官方网站](http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int))\n>* [英文文档](http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm)\n\n\n\n\n\n          \n\n\n\n          \n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"Swing干货系列之JTextField","published":1,"updated":"2017-04-08T13:02:57.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxk0017l0uz614e30wt","content":"<h1 id=\"Swing系列之JTextField-单行文本框\"><a href=\"#Swing系列之JTextField-单行文本框\" class=\"headerlink\" title=\"Swing系列之JTextField(单行文本框)\"></a>Swing系列之JTextField(单行文本框)</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li><code>JTextField</code>是一个轻量级组件，它允许编辑单行文本。</li>\n<li><p><code>JTextField</code> 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。<code>java.awt.TextField</code> 把字段文本用作针对 <code>ActionEvent</code> 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。</p>\n</li>\n<li><p><code>setEchoChar</code> 和 <code>getEchoChar</code> 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 <code>JPasswordField</code> 扩展了 <code>JTextField</code>，从而通过可插入外观独立地提供此服务。</p>\n</li>\n<li><code>JTextField</code> 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 <code>getHorizontalAlignment</code> 方法确定的。默认情况下为前端对齐。</li>\n<li>文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。</li>\n<li>Swing 不是线程安全的</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ul>\n<li><code>JTextField()</code> 构造一个新的 TextField</li>\n<li><code>JTextField(Document doc, String text, int columns)</code>  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。</li>\n<li><code>JTextField(int columns)</code>  构造一个具有指定列数的新的空 TextField。</li>\n<li><code>JTextField(String text)</code>构造一个用指定文本初始化的新 TextField。</li>\n<li><code>JTextField(String text, int columns)</code>   构造一个用指定文本和列初始化的新 TextField。</li>\n</ul>\n<h2 id=\"常用的函数\"><a href=\"#常用的函数\" class=\"headerlink\" title=\"常用的函数\"></a>常用的函数</h2><ul>\n<li><p><code>get/setHorizontalAlignment(int alignment</code>) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT</p>\n<blockquote>\n<ol>\n<li><code>JTextField.CENTER</code></li>\n<li><code>JTextField.RIGHT</code></li>\n<li><code>JTextField.LEADING</code> (the default)</li>\n<li><code>JTextField.TRAILING</code></li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>setFont(Font font)</code>   设置字体</p>\n</li>\n<li><code>setScrollOffset(int scrollOffset)</code>  获取滚动偏移量（以像素为单位）。</li>\n<li><code>setDocument(Document doc)</code>  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。</li>\n<li><code>setInputVerifier(verifier)</code>    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上</li>\n<li><code>setDragEnabled(boolean x)</code>   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走</li>\n<li><code>addActionListener(ActionListener action)</code>   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同</li>\n<li><code>write(InfileWriter writer)</code>  将文本框中的内容输入到文件中</li>\n<li><code>addKeyListener(KeyListener event)</code>   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><code>addCaretListener(CareListener event)</code>  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发</li>\n</ul>\n<h2 id=\"一个简单的实例\"><a href=\"#一个简单的实例\" class=\"headerlink\" title=\"一个简单的实例\"></a>一个简单的实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">text</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField1;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        text my = <span class=\"keyword\">new</span> text();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">text</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//this.setBounds(100,100,300,200);</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        textField1 = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">10</span>);</div><div class=\"line\">        textField2 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        panel.add(textField1);</div><div class=\"line\">        panel.add(textField2);</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"keyword\">this</span>.pack();</div><div class=\"line\">        InputVerifier verifier = <span class=\"keyword\">new</span> InputVerifier() &#123;    <span class=\"comment\">//添加验证方式</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verify</span><span class=\"params\">(JComponent input)</span> </span>&#123;     <span class=\"comment\">//重载函数</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> value;</div><div class=\"line\">                textField1 = (JTextField) input;    <span class=\"comment\">//将input组件强制转化为JTextField类型的单行文本框</span></div><div class=\"line\">                <span class=\"keyword\">return</span> textField1.getText().equals(<span class=\"string\">\"pass\"</span>);  <span class=\"comment\">//判断是否输入的时pass,如果不是就会验证错误</span></div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        textField1.setInputVerifier(verifier);   <span class=\"comment\">//设置验证方式</span></div><div class=\"line\">        textField1.setHorizontalAlignment(JTextField.CENTER);   <span class=\"comment\">//设置水平对齐方式</span></div><div class=\"line\">        Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"楷体\"</span>, Font.BOLD + Font.ITALIC, <span class=\"number\">20</span>);</div><div class=\"line\">        textField1.setFont(font);   <span class=\"comment\">//设置字体</span></div><div class=\"line\">        textField1.setDragEnabled(<span class=\"keyword\">true</span>);  <span class=\"comment\">//设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关联文本文档\"><a href=\"#关联文本文档\" class=\"headerlink\" title=\"关联文本文档\"></a>关联文本文档</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Container;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.GridLayout;</div><div class=\"line\"><span class=\"comment\">/*from   w  ww.jav  a  2s . co m*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.text.Document;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">  JLabel nameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Name:\"</span>);</div><div class=\"line\">  JLabel mirroredNameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Mirrored:\"</span>);</div><div class=\"line\">  JTextField name = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">20</span>);</div><div class=\"line\">  JTextField mirroredName = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">2</span>, <span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\">    Container contentPane = <span class=\"keyword\">this</span>.getContentPane();</div><div class=\"line\">    contentPane.add(nameLabel);</div><div class=\"line\">    contentPane.add(name);</div><div class=\"line\">    contentPane.add(mirroredNameLabel);</div><div class=\"line\">    contentPane.add(mirroredName);</div><div class=\"line\"></div><div class=\"line\">    Document nameModel = name.getDocument();    <span class=\"comment\">//得到文本框的文本文档，将之与第二个文本框关联</span></div><div class=\"line\">    mirroredName.setDocument(nameModel);           <span class=\"comment\">//两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示</span></div><div class=\"line\">    </div><div class=\"line\">    pack();</div><div class=\"line\">    setVisible(<span class=\"keyword\">true</span>);    </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Main frame = <span class=\"keyword\">new</span> Main();</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容</strong></p>\n</blockquote>\n<h2 id=\"Action-Listener-动作监听机制\"><a href=\"#Action-Listener-动作监听机制\" class=\"headerlink\" title=\"Action Listener(动作监听机制)\"></a>Action Listener(动作监听机制)</h2><p><strong>输入文本后按回车即可触发</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"comment\">//from  w  w  w. ja va2s  .c o m</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JTextField jTextField1 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\"></div><div class=\"line\">    jTextField1.setText(<span class=\"string\">\"jTextField1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//添加监听机制</span></div><div class=\"line\">    jTextField1.addActionListener(<span class=\"keyword\">new</span>   java.awt.event.ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"action\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    frame.add(jTextField1);</div><div class=\"line\"></div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"验证文本内容\"><a href=\"#验证文本内容\" class=\"headerlink\" title=\"验证文本内容\"></a>验证文本内容</h2><p><strong>使用<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier(\" target=\"_blank\" rel=\"external\">InputVerifier</a>)验证</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.InputVerifier;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Verifier Sample\"</span>);</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    JTextField textField1 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    JTextField textField2 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    InputVerifier verifier = <span class=\"keyword\">new</span> InputVerifier() &#123;     <span class=\"comment\">//创建一个验证</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verify</span><span class=\"params\">(JComponent comp)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> returnValue;</div><div class=\"line\">        JTextField textField = (JTextField) comp;      <span class=\"comment\">//强制转换，将控件类型的comp转换成JTextFiled类型的</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Integer.parseInt(textField.getText());    <span class=\"comment\">//将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误</span></div><div class=\"line\">          returnValue = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;   </div><div class=\"line\">          returnValue = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> returnValue;        <span class=\"comment\">//如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    textField1.setInputVerifier(verifier);</div><div class=\"line\">    frame.add(textField1, BorderLayout.NORTH);</div><div class=\"line\">    frame.add(textField2, BorderLayout.CENTER);</div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</strong></p>\n</blockquote>\n<h2 id=\"将文本框中的内容保存到文件中\"><a href=\"#将文本框中的内容保存到文件中\" class=\"headerlink\" title=\"将文本框中的内容保存到文件中\"></a>将文本框中的内容保存到文件中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField;</div><div class=\"line\">    <span class=\"keyword\">private</span> FileWriter writer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Main my = <span class=\"keyword\">new</span> Main();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> BorderLayout());</div><div class=\"line\">        JButton button = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"运行\"</span>);</div><div class=\"line\">        JLabel label = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">        textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        panel.add(label, BorderLayout.WEST);</div><div class=\"line\">        panel.add(textField, BorderLayout.CENTER);</div><div class=\"line\">        String filename = <span class=\"string\">\"text.txt\"</span>;</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;    <span class=\"comment\">//添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    writer = <span class=\"keyword\">new</span> FileWriter(filename, <span class=\"keyword\">false</span>);   <span class=\"comment\">//创建一个写入文件的对象，这里的false表示不在文件的末尾添加</span></div><div class=\"line\">                    textField.write(writer);     <span class=\"comment\">//将单行文本中输入的内容写入到文件中</span></div><div class=\"line\">                    writer.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"false\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        panel.add(button, BorderLayout.SOUTH);</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"keyword\">this</span>.pack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里使用的是<code>FileWriter</code>类将内容写入到文件中，详情请看我的上一篇<a href=\"https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/\">文章</a></strong></p>\n</blockquote>\n<h2 id=\"复制、粘贴、剪切文本\"><a href=\"#复制、粘贴、剪切文本\" class=\"headerlink\" title=\"复制、粘贴、剪切文本\"></a>复制、粘贴、剪切文本</h2><blockquote>\n<p><strong>这里使用的时<code>copy()</code>、<code>paste()</code>、<code>cut()</code>函数</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.FlowLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> JTextField textField = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">15</span>);</div><div class=\"line\">    JButton buttonCut = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Cut\"</span>);</div><div class=\"line\">    JButton buttonPaste = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Paste\"</span>);</div><div class=\"line\">    JButton buttonCopy = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Copy\"</span>);</div><div class=\"line\"></div><div class=\"line\">    JFrame jfrm = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Cut, Copy, and Paste\"</span>);</div><div class=\"line\">    jfrm.setLayout(<span class=\"keyword\">new</span> FlowLayout());</div><div class=\"line\">    jfrm.setSize(<span class=\"number\">230</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    buttonCut.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.cut();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    buttonPaste.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.paste();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    buttonCopy.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.copy();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    textField.addCaretListener(<span class=\"keyword\">new</span> CaretListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">caretUpdate</span><span class=\"params\">(CaretEvent ce)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"All text: \"</span> + textField.getText());</div><div class=\"line\">        <span class=\"keyword\">if</span> (textField.getSelectedText() != <span class=\"keyword\">null</span>)</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Selected text: \"</span> + textField.getSelectedText());</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">          System.out.println(<span class=\"string\">\"Selected text: \"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jfrm.add(textField);</div><div class=\"line\">    jfrm.add(buttonCut);</div><div class=\"line\">    jfrm.add(buttonPaste);</div><div class=\"line\">    jfrm.add(buttonCopy);</div><div class=\"line\">    jfrm.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制</strong></p>\n</blockquote>\n<h2 id=\"添加键盘监听机制\"><a href=\"#添加键盘监听机制\" class=\"headerlink\" title=\"添加键盘监听机制\"></a>添加键盘监听机制</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Dimension;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.FlowLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.HeadlessException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.KeyAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> HeadlessException </span>&#123;</div><div class=\"line\">    setSize(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));</div><div class=\"line\"></div><div class=\"line\">    JLabel usernameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Username: \"</span>);</div><div class=\"line\">    JTextField usernameTextField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    usernameTextField.setPreferredSize(<span class=\"keyword\">new</span> Dimension(<span class=\"number\">100</span>, <span class=\"number\">20</span>));</div><div class=\"line\">    add(usernameLabel);</div><div class=\"line\">    add(usernameTextField);</div><div class=\"line\"></div><div class=\"line\">    usernameTextField.addKeyListener(<span class=\"keyword\">new</span> KeyAdapter() &#123;   <span class=\"comment\">//创建机制</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyReleased</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;        <span class=\"comment\">//重载函数，释放按键触发</span></div><div class=\"line\">        JTextField textField = (JTextField) e.getSource();  <span class=\"comment\">//得到最初发生event的组件对象,既是文本框对象</span></div><div class=\"line\">        String text = textField.getText();</div><div class=\"line\">        textField.setText(text.toUpperCase());      <span class=\"comment\">//将所有的小写字母转换成大写字母</span></div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyTyped</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;           <span class=\"comment\">//键入时触发</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyPressed</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;       <span class=\"comment\">//释放按键时触发的函数</span></div><div class=\"line\">      &#125;   </div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Main().setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"添加插入符位置变化的监听机制\"><a href=\"#添加插入符位置变化的监听机制\" class=\"headerlink\" title=\"添加插入符位置变化的监听机制\"></a>添加插入符位置变化的监听机制</h2><p><strong>使用的是<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html\" target=\"_blank\" rel=\"external\">CareListener</a>类来实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockwiseTextFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField;</div><div class=\"line\">    ClockwiseTextPanel clockwiseTextPanel = <span class=\"keyword\">new</span> ClockwiseTextPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">        ClockwiseTextFrame frame = <span class=\"keyword\">new</span> ClockwiseTextFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockwiseTextFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">        setTitle(<span class=\"string\">\"顺时针旋转文字\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">340</span>, <span class=\"number\">240</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">        add(clockwiseTextPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">        textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        textField.addCaretListener(<span class=\"keyword\">new</span> CaretListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">caretUpdate</span><span class=\"params\">(CaretEvent arg0)</span> </span>&#123;</div><div class=\"line\">                String text = textField.getText();<span class=\"comment\">// 获取文本框字符串</span></div><div class=\"line\">                clockwiseTextPanel.setText(text);<span class=\"comment\">// 为面板中的text变量赋值</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        getContentPane().add(textField, BorderLayout.SOUTH);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockwiseTextPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String text;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockwiseTextPanel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            setOpaque(<span class=\"keyword\">false</span>);<span class=\"comment\">// 设置面板为透明</span></div><div class=\"line\">            setLayout(<span class=\"keyword\">null</span>);<span class=\"comment\">// 设置为绝对布局</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> text; <span class=\"comment\">// 获得成员变量的值</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.text = text;<span class=\"comment\">// 为成员变量赋值</span></div><div class=\"line\">            repaint();<span class=\"comment\">// 调整paint()方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;<span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;<span class=\"comment\">// 获得Graphics2D的实例</span></div><div class=\"line\">            <span class=\"keyword\">int</span> width = getWidth();<span class=\"comment\">// 获得面板的宽度</span></div><div class=\"line\">            <span class=\"keyword\">int</span> height = getHeight();<span class=\"comment\">// 获得面板的高度</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (text != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span>[] array = text.toCharArray();<span class=\"comment\">// 将文本转换为字符数组</span></div><div class=\"line\">                <span class=\"keyword\">int</span> len = array.length * <span class=\"number\">5</span>;<span class=\"comment\">// 定义圆的半径，同时可以调整文字的距离</span></div><div class=\"line\">                Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">22</span>);<span class=\"comment\">// 创建字体</span></div><div class=\"line\">                g2.setFont(font);<span class=\"comment\">// 设置字体</span></div><div class=\"line\">                <span class=\"keyword\">double</span> angle = <span class=\"number\">0</span>;<span class=\"comment\">// 定义初始角度</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;<span class=\"comment\">// 遍历字符串中的字符</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        g2.setColor(Color.BLUE);<span class=\"comment\">// 第一个字符用蓝色</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        g2.setColor(Color.BLACK);<span class=\"comment\">// 其他字符用黑色</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) (len * Math.sin(Math.toRadians(angle + <span class=\"number\">270</span>)));<span class=\"comment\">// 计算每个文字的横坐标位置</span></div><div class=\"line\">                    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) (len * Math.cos(Math.toRadians(angle + <span class=\"number\">270</span>)));<span class=\"comment\">// 计算每个文字的纵坐标位置</span></div><div class=\"line\">                    g2.drawString(array[i] + <span class=\"string\">\"\"</span>, width / <span class=\"number\">2</span> + x, height / <span class=\"number\">2</span> - y);<span class=\"comment\">// 绘制字符</span></div><div class=\"line\">                    angle = angle + <span class=\"number\">360</span>d / array.length;<span class=\"comment\">// 改变角度</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int\" target=\"_blank\" rel=\"external\">官方网站</a>)</li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm\" target=\"_blank\" rel=\"external\">英文文档</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Swing系列之JTextField-单行文本框\"><a href=\"#Swing系列之JTextField-单行文本框\" class=\"headerlink\" title=\"Swing系列之JTextField(单行文本框)\"></a>Swing系列之JTextField(单行文本框)</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li><code>JTextField</code>是一个轻量级组件，它允许编辑单行文本。</li>\n<li><p><code>JTextField</code> 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。<code>java.awt.TextField</code> 把字段文本用作针对 <code>ActionEvent</code> 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。</p>\n</li>\n<li><p><code>setEchoChar</code> 和 <code>getEchoChar</code> 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 <code>JPasswordField</code> 扩展了 <code>JTextField</code>，从而通过可插入外观独立地提供此服务。</p>\n</li>\n<li><code>JTextField</code> 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 <code>getHorizontalAlignment</code> 方法确定的。默认情况下为前端对齐。</li>\n<li>文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。</li>\n<li>Swing 不是线程安全的</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ul>\n<li><code>JTextField()</code> 构造一个新的 TextField</li>\n<li><code>JTextField(Document doc, String text, int columns)</code>  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。</li>\n<li><code>JTextField(int columns)</code>  构造一个具有指定列数的新的空 TextField。</li>\n<li><code>JTextField(String text)</code>构造一个用指定文本初始化的新 TextField。</li>\n<li><code>JTextField(String text, int columns)</code>   构造一个用指定文本和列初始化的新 TextField。</li>\n</ul>\n<h2 id=\"常用的函数\"><a href=\"#常用的函数\" class=\"headerlink\" title=\"常用的函数\"></a>常用的函数</h2><ul>\n<li><p><code>get/setHorizontalAlignment(int alignment</code>) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT</p>\n<blockquote>\n<ol>\n<li><code>JTextField.CENTER</code></li>\n<li><code>JTextField.RIGHT</code></li>\n<li><code>JTextField.LEADING</code> (the default)</li>\n<li><code>JTextField.TRAILING</code></li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>setFont(Font font)</code>   设置字体</p>\n</li>\n<li><code>setScrollOffset(int scrollOffset)</code>  获取滚动偏移量（以像素为单位）。</li>\n<li><code>setDocument(Document doc)</code>  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。</li>\n<li><code>setInputVerifier(verifier)</code>    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上</li>\n<li><code>setDragEnabled(boolean x)</code>   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走</li>\n<li><code>addActionListener(ActionListener action)</code>   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同</li>\n<li><code>write(InfileWriter writer)</code>  将文本框中的内容输入到文件中</li>\n<li><code>addKeyListener(KeyListener event)</code>   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html\">官方文档</a></li>\n<li><code>addCaretListener(CareListener event)</code>  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发</li>\n</ul>\n<h2 id=\"一个简单的实例\"><a href=\"#一个简单的实例\" class=\"headerlink\" title=\"一个简单的实例\"></a>一个简单的实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">text</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField1;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        text my = <span class=\"keyword\">new</span> text();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">text</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//this.setBounds(100,100,300,200);</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        textField1 = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">10</span>);</div><div class=\"line\">        textField2 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        panel.add(textField1);</div><div class=\"line\">        panel.add(textField2);</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"keyword\">this</span>.pack();</div><div class=\"line\">        InputVerifier verifier = <span class=\"keyword\">new</span> InputVerifier() &#123;    <span class=\"comment\">//添加验证方式</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verify</span><span class=\"params\">(JComponent input)</span> </span>&#123;     <span class=\"comment\">//重载函数</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> value;</div><div class=\"line\">                textField1 = (JTextField) input;    <span class=\"comment\">//将input组件强制转化为JTextField类型的单行文本框</span></div><div class=\"line\">                <span class=\"keyword\">return</span> textField1.getText().equals(<span class=\"string\">\"pass\"</span>);  <span class=\"comment\">//判断是否输入的时pass,如果不是就会验证错误</span></div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        textField1.setInputVerifier(verifier);   <span class=\"comment\">//设置验证方式</span></div><div class=\"line\">        textField1.setHorizontalAlignment(JTextField.CENTER);   <span class=\"comment\">//设置水平对齐方式</span></div><div class=\"line\">        Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"楷体\"</span>, Font.BOLD + Font.ITALIC, <span class=\"number\">20</span>);</div><div class=\"line\">        textField1.setFont(font);   <span class=\"comment\">//设置字体</span></div><div class=\"line\">        textField1.setDragEnabled(<span class=\"keyword\">true</span>);  <span class=\"comment\">//设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关联文本文档\"><a href=\"#关联文本文档\" class=\"headerlink\" title=\"关联文本文档\"></a>关联文本文档</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Container;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.GridLayout;</div><div class=\"line\"><span class=\"comment\">/*from   w  ww.jav  a  2s . co m*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.text.Document;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">  JLabel nameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Name:\"</span>);</div><div class=\"line\">  JLabel mirroredNameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Mirrored:\"</span>);</div><div class=\"line\">  JTextField name = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">20</span>);</div><div class=\"line\">  JTextField mirroredName = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">2</span>, <span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\">    Container contentPane = <span class=\"keyword\">this</span>.getContentPane();</div><div class=\"line\">    contentPane.add(nameLabel);</div><div class=\"line\">    contentPane.add(name);</div><div class=\"line\">    contentPane.add(mirroredNameLabel);</div><div class=\"line\">    contentPane.add(mirroredName);</div><div class=\"line\"></div><div class=\"line\">    Document nameModel = name.getDocument();    <span class=\"comment\">//得到文本框的文本文档，将之与第二个文本框关联</span></div><div class=\"line\">    mirroredName.setDocument(nameModel);           <span class=\"comment\">//两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示</span></div><div class=\"line\">    </div><div class=\"line\">    pack();</div><div class=\"line\">    setVisible(<span class=\"keyword\">true</span>);    </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Main frame = <span class=\"keyword\">new</span> Main();</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容</strong></p>\n</blockquote>\n<h2 id=\"Action-Listener-动作监听机制\"><a href=\"#Action-Listener-动作监听机制\" class=\"headerlink\" title=\"Action Listener(动作监听机制)\"></a>Action Listener(动作监听机制)</h2><p><strong>输入文本后按回车即可触发</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"comment\">//from  w  w  w. ja va2s  .c o m</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    JTextField jTextField1 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\"></div><div class=\"line\">    jTextField1.setText(<span class=\"string\">\"jTextField1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//添加监听机制</span></div><div class=\"line\">    jTextField1.addActionListener(<span class=\"keyword\">new</span>   java.awt.event.ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"action\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    frame.add(jTextField1);</div><div class=\"line\"></div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"验证文本内容\"><a href=\"#验证文本内容\" class=\"headerlink\" title=\"验证文本内容\"></a>验证文本内容</h2><p><strong>使用<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier(\">InputVerifier</a>)验证</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.InputVerifier;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JComponent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Verifier Sample\"</span>);</div><div class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    JTextField textField1 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    JTextField textField2 = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    InputVerifier verifier = <span class=\"keyword\">new</span> InputVerifier() &#123;     <span class=\"comment\">//创建一个验证</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verify</span><span class=\"params\">(JComponent comp)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> returnValue;</div><div class=\"line\">        JTextField textField = (JTextField) comp;      <span class=\"comment\">//强制转换，将控件类型的comp转换成JTextFiled类型的</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Integer.parseInt(textField.getText());    <span class=\"comment\">//将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误</span></div><div class=\"line\">          returnValue = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;   </div><div class=\"line\">          returnValue = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> returnValue;        <span class=\"comment\">//如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    textField1.setInputVerifier(verifier);</div><div class=\"line\">    frame.add(textField1, BorderLayout.NORTH);</div><div class=\"line\">    frame.add(textField2, BorderLayout.CENTER);</div><div class=\"line\">    frame.setSize(<span class=\"number\">300</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</strong></p>\n</blockquote>\n<h2 id=\"将文本框中的内容保存到文件中\"><a href=\"#将文本框中的内容保存到文件中\" class=\"headerlink\" title=\"将文本框中的内容保存到文件中\"></a>将文本框中的内容保存到文件中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField;</div><div class=\"line\">    <span class=\"keyword\">private</span> FileWriter writer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Main my = <span class=\"keyword\">new</span> Main();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> BorderLayout());</div><div class=\"line\">        JButton button = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"运行\"</span>);</div><div class=\"line\">        JLabel label = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">        textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        panel.add(label, BorderLayout.WEST);</div><div class=\"line\">        panel.add(textField, BorderLayout.CENTER);</div><div class=\"line\">        String filename = <span class=\"string\">\"text.txt\"</span>;</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;    <span class=\"comment\">//添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    writer = <span class=\"keyword\">new</span> FileWriter(filename, <span class=\"keyword\">false</span>);   <span class=\"comment\">//创建一个写入文件的对象，这里的false表示不在文件的末尾添加</span></div><div class=\"line\">                    textField.write(writer);     <span class=\"comment\">//将单行文本中输入的内容写入到文件中</span></div><div class=\"line\">                    writer.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"false\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        panel.add(button, BorderLayout.SOUTH);</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"keyword\">this</span>.pack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里使用的是<code>FileWriter</code>类将内容写入到文件中，详情请看我的上一篇<a href=\"https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/\">文章</a></strong></p>\n</blockquote>\n<h2 id=\"复制、粘贴、剪切文本\"><a href=\"#复制、粘贴、剪切文本\" class=\"headerlink\" title=\"复制、粘贴、剪切文本\"></a>复制、粘贴、剪切文本</h2><blockquote>\n<p><strong>这里使用的时<code>copy()</code>、<code>paste()</code>、<code>cut()</code>函数</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.FlowLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> JTextField textField = <span class=\"keyword\">new</span> JTextField(<span class=\"number\">15</span>);</div><div class=\"line\">    JButton buttonCut = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Cut\"</span>);</div><div class=\"line\">    JButton buttonPaste = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Paste\"</span>);</div><div class=\"line\">    JButton buttonCopy = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Copy\"</span>);</div><div class=\"line\"></div><div class=\"line\">    JFrame jfrm = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Cut, Copy, and Paste\"</span>);</div><div class=\"line\">    jfrm.setLayout(<span class=\"keyword\">new</span> FlowLayout());</div><div class=\"line\">    jfrm.setSize(<span class=\"number\">230</span>, <span class=\"number\">150</span>);</div><div class=\"line\">    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\"></div><div class=\"line\">    buttonCut.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.cut();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    buttonPaste.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.paste();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    buttonCopy.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent le)</span> </span>&#123;</div><div class=\"line\">        textField.copy();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    textField.addCaretListener(<span class=\"keyword\">new</span> CaretListener() &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">caretUpdate</span><span class=\"params\">(CaretEvent ce)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"All text: \"</span> + textField.getText());</div><div class=\"line\">        <span class=\"keyword\">if</span> (textField.getSelectedText() != <span class=\"keyword\">null</span>)</div><div class=\"line\">          System.out.println(<span class=\"string\">\"Selected text: \"</span> + textField.getSelectedText());</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">          System.out.println(<span class=\"string\">\"Selected text: \"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jfrm.add(textField);</div><div class=\"line\">    jfrm.add(buttonCut);</div><div class=\"line\">    jfrm.add(buttonPaste);</div><div class=\"line\">    jfrm.add(buttonCopy);</div><div class=\"line\">    jfrm.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制</strong></p>\n</blockquote>\n<h2 id=\"添加键盘监听机制\"><a href=\"#添加键盘监听机制\" class=\"headerlink\" title=\"添加键盘监听机制\"></a>添加键盘监听机制</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Dimension;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.FlowLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.HeadlessException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.KeyAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLabel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> HeadlessException </span>&#123;</div><div class=\"line\">    setSize(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">    setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));</div><div class=\"line\"></div><div class=\"line\">    JLabel usernameLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"Username: \"</span>);</div><div class=\"line\">    JTextField usernameTextField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    usernameTextField.setPreferredSize(<span class=\"keyword\">new</span> Dimension(<span class=\"number\">100</span>, <span class=\"number\">20</span>));</div><div class=\"line\">    add(usernameLabel);</div><div class=\"line\">    add(usernameTextField);</div><div class=\"line\"></div><div class=\"line\">    usernameTextField.addKeyListener(<span class=\"keyword\">new</span> KeyAdapter() &#123;   <span class=\"comment\">//创建机制</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyReleased</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;        <span class=\"comment\">//重载函数，释放按键触发</span></div><div class=\"line\">        JTextField textField = (JTextField) e.getSource();  <span class=\"comment\">//得到最初发生event的组件对象,既是文本框对象</span></div><div class=\"line\">        String text = textField.getText();</div><div class=\"line\">        textField.setText(text.toUpperCase());      <span class=\"comment\">//将所有的小写字母转换成大写字母</span></div><div class=\"line\">      &#125;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyTyped</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;           <span class=\"comment\">//键入时触发</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">keyPressed</span><span class=\"params\">(KeyEvent e)</span> </span>&#123;       <span class=\"comment\">//释放按键时触发的函数</span></div><div class=\"line\">      &#125;   </div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Main().setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"添加插入符位置变化的监听机制\"><a href=\"#添加插入符位置变化的监听机制\" class=\"headerlink\" title=\"添加插入符位置变化的监听机制\"></a>添加插入符位置变化的监听机制</h2><p><strong>使用的是<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html\">CareListener</a>类来实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JTextField;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.CaretListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockwiseTextFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JTextField textField;</div><div class=\"line\">    ClockwiseTextPanel clockwiseTextPanel = <span class=\"keyword\">new</span> ClockwiseTextPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">        ClockwiseTextFrame frame = <span class=\"keyword\">new</span> ClockwiseTextFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockwiseTextFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">        setTitle(<span class=\"string\">\"顺时针旋转文字\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">340</span>, <span class=\"number\">240</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">        add(clockwiseTextPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">        textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">        textField.addCaretListener(<span class=\"keyword\">new</span> CaretListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">caretUpdate</span><span class=\"params\">(CaretEvent arg0)</span> </span>&#123;</div><div class=\"line\">                String text = textField.getText();<span class=\"comment\">// 获取文本框字符串</span></div><div class=\"line\">                clockwiseTextPanel.setText(text);<span class=\"comment\">// 为面板中的text变量赋值</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        getContentPane().add(textField, BorderLayout.SOUTH);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockwiseTextPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String text;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockwiseTextPanel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            setOpaque(<span class=\"keyword\">false</span>);<span class=\"comment\">// 设置面板为透明</span></div><div class=\"line\">            setLayout(<span class=\"keyword\">null</span>);<span class=\"comment\">// 设置为绝对布局</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> text; <span class=\"comment\">// 获得成员变量的值</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.text = text;<span class=\"comment\">// 为成员变量赋值</span></div><div class=\"line\">            repaint();<span class=\"comment\">// 调整paint()方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;<span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;<span class=\"comment\">// 获得Graphics2D的实例</span></div><div class=\"line\">            <span class=\"keyword\">int</span> width = getWidth();<span class=\"comment\">// 获得面板的宽度</span></div><div class=\"line\">            <span class=\"keyword\">int</span> height = getHeight();<span class=\"comment\">// 获得面板的高度</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (text != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span>[] array = text.toCharArray();<span class=\"comment\">// 将文本转换为字符数组</span></div><div class=\"line\">                <span class=\"keyword\">int</span> len = array.length * <span class=\"number\">5</span>;<span class=\"comment\">// 定义圆的半径，同时可以调整文字的距离</span></div><div class=\"line\">                Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">22</span>);<span class=\"comment\">// 创建字体</span></div><div class=\"line\">                g2.setFont(font);<span class=\"comment\">// 设置字体</span></div><div class=\"line\">                <span class=\"keyword\">double</span> angle = <span class=\"number\">0</span>;<span class=\"comment\">// 定义初始角度</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;<span class=\"comment\">// 遍历字符串中的字符</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        g2.setColor(Color.BLUE);<span class=\"comment\">// 第一个字符用蓝色</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        g2.setColor(Color.BLACK);<span class=\"comment\">// 其他字符用黑色</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) (len * Math.sin(Math.toRadians(angle + <span class=\"number\">270</span>)));<span class=\"comment\">// 计算每个文字的横坐标位置</span></div><div class=\"line\">                    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) (len * Math.cos(Math.toRadians(angle + <span class=\"number\">270</span>)));<span class=\"comment\">// 计算每个文字的纵坐标位置</span></div><div class=\"line\">                    g2.drawString(array[i] + <span class=\"string\">\"\"</span>, width / <span class=\"number\">2</span> + x, height / <span class=\"number\">2</span> - y);<span class=\"comment\">// 绘制字符</span></div><div class=\"line\">                    angle = angle + <span class=\"number\">360</span>d / array.length;<span class=\"comment\">// 改变角度</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote>\n<ul>\n<li><a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int\">官方网站</a>)</li>\n<li><a href=\"http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm\">英文文档</a></li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"java中的IO操作","date":"2017-03-25T05:52:53.000Z","_content":"\n# java中IO操作\n## 读取文件中的内容\n>#### 使用`Scanner`读取文本中的内容\n>> 相信大家都知道`Scanner console=new Scanner(System.in)`是用来读取控制台上输入的内容，但是这里是用来读取文件的内容，原理是一样的，只是对象不同罢了，这里用到的是`File`对象，用来创建一个文件对象\n\n```java\n    Scanner input=new Scanner(new                         File(\"hello.txt\"));//创建一个对象input\n    while(input.hasNextLine()) //这里用来判断是否还有内容，    以免读到最后发生错误\n    {\n    String content=input.nextLine();\n    System.out.println(content);\n    }\n```\n\n>>这里顺便补充一下`Scannner`中的几个函数：\n>>>1. `nextLine()`:读取一行的内容，包括空格，换行\n>>>2. `nextInt()`:读取一个整型内容\n>>>3. `nexDouble()`:读取一个双精度的浮点数\n>>>4. `next()`:读取下一个内容，无论什么类型，其中遇到空格和换行默认是一个标记（即是跳过）和`nextLine()`类似\n>>>5. `hasNext()`:用来判断文件中的还有下一个内容，无论什么类型的\n>>>6. `hasNextInt()`\n>>>7. `hasNextDouble()`://相似，不在赘述\n\n>### 使用`FileReader`读取\n>>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 `FileInputStream `上构造一个 `InputStreamReader`。\nFileReader 用于读取字符流。要读取原始字节流，请考虑使用 FileInputStream。\n    \n    //这里使用new File创建一个对象，同样的也可以直接将文件的绝对路径传入\n    FileReader file=new FileReader(new File(\"hello.txt\"));\n    while(file.ready())   //用来判断是否还有字符可读\n            {\n            int content=file.read();   //这里的read是读取将单个字符 返回的是int，即是ascii码,这里官方文档说返回的是读取的字符数，但是我实验了一下返回的ascii码\n            System.out.println((char)content);  //所以要将ascii码转换成字符\n            }\n            file.close();\n            \n>>>常用的几个方法：\n>>>>1. `read()`: return int 上面介绍过\n>>>>2. `read(char[] cbuf,int int length)`:将内容读入到一个`char`类型的数组，`length`是读取的字符数，`offest`是偏移量\n\n>### 使用`BufferedReader`的类实现高效的读取文件\n\n```java\n    //传入一个reader创建一个对象\n            BufferedReader file= new BufferedReader(new FileReader(\"hello.txt\"));  \n            System.out.println(file.skip(3));//实现将指针跳过3个字符\n            System.out.println((char)file.read()); //read的方法，和FileReader中的read一样\n            String line=file.readLine();   //读取一行\n            System.out.println(line);\n```\n            \n>>常用的方法：\n>>>1. `readLine()`\n>>>1. `read()`：如果到了末尾返回-1\n>>>1. `read(char [],int off,int length)`:和FileReader中的一样\n>>>1. `ready()`:判断是否还可以读取，一般和read配对使用\n>>>1. `skip(long n)`:跳过的字符数\n>>>1. `close()`\n\n## 文件的写入\n>### 用`FileWriter`写入文件\n\n```java\n    /*创建将对象f传入FileWriter,其中Filewriter有两个参数，第一个是File对象后者是一个String(即是文件的路径），第二个参数是boolean类型的，表示是否在文件的末尾追加内容，默认的是false表示不用在末尾追加，如果想要在末尾追加要写入另外一个参数true,当然这里可以用更加简洁的方式创建：FileWriter file=new FileWriter(\"hello.txt\",false);\n    */\n    FileWriter file=new FileWriter(f,true);\n    file.write(\"chenjiabing\");//写入函数write\n    file.close();  //最后必须关闭文件的输入流，否则写入将会失败，这里不想c和c++\n```\n\n>其中Filewriter中的方法还有\n>>1. `flush`：刷新缓存流\n>>1. `close`\n>>1. `append()`:当前的领会的就是写入数组:`append(Arrays.toString(list))`;\n>>1. `getEncoding()`:返回此流使用的字符编码\n\n### 用`PrintStream`写入文件\n>这里同样的是和`System.out.println()`一样的原理，`System.out.println`只是内部实现了`PrintStream`，这里是用来将指定的内容写入到文件中而已\n\n```java  \n    PrintStream output=new PrintStream(new     File(\"hello.txt\"));\n    //创建一个写入的对象output\n    output.print(\"flan\");\n    output.println(\"vmlkfamla\");\n    output.println(\"vmslfkmadvmfs;dm\");\n```\n\n>## 这里是用`BufferedWriter`类写入文件(一个高效的写入方式)\n>>### 简单介绍\n>>>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。\n可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。\n该类提供了 `newLine()` 方法，它使用平台自己的行分隔符概念，此概念由系统属性 line.separator 定义。并非所有平台都使用新行符 ('\\n') 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。\n通常 `Writer` 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 `BufferedWriter` 包装所有其 `write()` 操作可能开销很高的 `Writer`（如 `FileWriters` 和 `OutputStreamWriters`）。例如，\n\n    PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));\n将缓冲 `PrintWriter `对文件的输出。如果没有缓冲，则每次调用 `print()` 方法会导致将字符转换为字节，然后立即入到文件，而这是极其低效的。\n>>### 例子\n\n```java\n    BufferedWriter input=new BufferedWriter(new FileWriter(\"hello.txt\"));\n            input.write(\"这是一个文件读入的方法\");\n            input.newLine();\n            input.write(\"一个高效的方法\");\n            input.close();\n```\n\n>>### 其他的方法\n>>>1. `close()`\n>>> 1. `flush()`\n>>> 1. `newLine()`:写入一个换行，因为每一个操作系统上的换行符可能不一样，不能系统的都用\"\\n\"表示\n>>>1. `write()`\n>>>>详情参见`API`\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n","source":"_posts/java中的IO操作.md","raw":"---\ntitle: java中的IO操作\ndate: 2017-03-25 13:52:53\ncategories: java学习\ntags: java基础\n---\n\n# java中IO操作\n## 读取文件中的内容\n>#### 使用`Scanner`读取文本中的内容\n>> 相信大家都知道`Scanner console=new Scanner(System.in)`是用来读取控制台上输入的内容，但是这里是用来读取文件的内容，原理是一样的，只是对象不同罢了，这里用到的是`File`对象，用来创建一个文件对象\n\n```java\n    Scanner input=new Scanner(new                         File(\"hello.txt\"));//创建一个对象input\n    while(input.hasNextLine()) //这里用来判断是否还有内容，    以免读到最后发生错误\n    {\n    String content=input.nextLine();\n    System.out.println(content);\n    }\n```\n\n>>这里顺便补充一下`Scannner`中的几个函数：\n>>>1. `nextLine()`:读取一行的内容，包括空格，换行\n>>>2. `nextInt()`:读取一个整型内容\n>>>3. `nexDouble()`:读取一个双精度的浮点数\n>>>4. `next()`:读取下一个内容，无论什么类型，其中遇到空格和换行默认是一个标记（即是跳过）和`nextLine()`类似\n>>>5. `hasNext()`:用来判断文件中的还有下一个内容，无论什么类型的\n>>>6. `hasNextInt()`\n>>>7. `hasNextDouble()`://相似，不在赘述\n\n>### 使用`FileReader`读取\n>>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 `FileInputStream `上构造一个 `InputStreamReader`。\nFileReader 用于读取字符流。要读取原始字节流，请考虑使用 FileInputStream。\n    \n    //这里使用new File创建一个对象，同样的也可以直接将文件的绝对路径传入\n    FileReader file=new FileReader(new File(\"hello.txt\"));\n    while(file.ready())   //用来判断是否还有字符可读\n            {\n            int content=file.read();   //这里的read是读取将单个字符 返回的是int，即是ascii码,这里官方文档说返回的是读取的字符数，但是我实验了一下返回的ascii码\n            System.out.println((char)content);  //所以要将ascii码转换成字符\n            }\n            file.close();\n            \n>>>常用的几个方法：\n>>>>1. `read()`: return int 上面介绍过\n>>>>2. `read(char[] cbuf,int int length)`:将内容读入到一个`char`类型的数组，`length`是读取的字符数，`offest`是偏移量\n\n>### 使用`BufferedReader`的类实现高效的读取文件\n\n```java\n    //传入一个reader创建一个对象\n            BufferedReader file= new BufferedReader(new FileReader(\"hello.txt\"));  \n            System.out.println(file.skip(3));//实现将指针跳过3个字符\n            System.out.println((char)file.read()); //read的方法，和FileReader中的read一样\n            String line=file.readLine();   //读取一行\n            System.out.println(line);\n```\n            \n>>常用的方法：\n>>>1. `readLine()`\n>>>1. `read()`：如果到了末尾返回-1\n>>>1. `read(char [],int off,int length)`:和FileReader中的一样\n>>>1. `ready()`:判断是否还可以读取，一般和read配对使用\n>>>1. `skip(long n)`:跳过的字符数\n>>>1. `close()`\n\n## 文件的写入\n>### 用`FileWriter`写入文件\n\n```java\n    /*创建将对象f传入FileWriter,其中Filewriter有两个参数，第一个是File对象后者是一个String(即是文件的路径），第二个参数是boolean类型的，表示是否在文件的末尾追加内容，默认的是false表示不用在末尾追加，如果想要在末尾追加要写入另外一个参数true,当然这里可以用更加简洁的方式创建：FileWriter file=new FileWriter(\"hello.txt\",false);\n    */\n    FileWriter file=new FileWriter(f,true);\n    file.write(\"chenjiabing\");//写入函数write\n    file.close();  //最后必须关闭文件的输入流，否则写入将会失败，这里不想c和c++\n```\n\n>其中Filewriter中的方法还有\n>>1. `flush`：刷新缓存流\n>>1. `close`\n>>1. `append()`:当前的领会的就是写入数组:`append(Arrays.toString(list))`;\n>>1. `getEncoding()`:返回此流使用的字符编码\n\n### 用`PrintStream`写入文件\n>这里同样的是和`System.out.println()`一样的原理，`System.out.println`只是内部实现了`PrintStream`，这里是用来将指定的内容写入到文件中而已\n\n```java  \n    PrintStream output=new PrintStream(new     File(\"hello.txt\"));\n    //创建一个写入的对象output\n    output.print(\"flan\");\n    output.println(\"vmlkfamla\");\n    output.println(\"vmslfkmadvmfs;dm\");\n```\n\n>## 这里是用`BufferedWriter`类写入文件(一个高效的写入方式)\n>>### 简单介绍\n>>>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。\n可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。\n该类提供了 `newLine()` 方法，它使用平台自己的行分隔符概念，此概念由系统属性 line.separator 定义。并非所有平台都使用新行符 ('\\n') 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。\n通常 `Writer` 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 `BufferedWriter` 包装所有其 `write()` 操作可能开销很高的 `Writer`（如 `FileWriters` 和 `OutputStreamWriters`）。例如，\n\n    PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));\n将缓冲 `PrintWriter `对文件的输出。如果没有缓冲，则每次调用 `print()` 方法会导致将字符转换为字节，然后立即入到文件，而这是极其低效的。\n>>### 例子\n\n```java\n    BufferedWriter input=new BufferedWriter(new FileWriter(\"hello.txt\"));\n            input.write(\"这是一个文件读入的方法\");\n            input.newLine();\n            input.write(\"一个高效的方法\");\n            input.close();\n```\n\n>>### 其他的方法\n>>>1. `close()`\n>>> 1. `flush()`\n>>> 1. `newLine()`:写入一个换行，因为每一个操作系统上的换行符可能不一样，不能系统的都用\"\\n\"表示\n>>>1. `write()`\n>>>>详情参见`API`\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n","slug":"java中的IO操作","published":1,"updated":"2017-03-27T03:28:49.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxr0019l0uz0dn45cuq","content":"<h1 id=\"java中IO操作\"><a href=\"#java中IO操作\" class=\"headerlink\" title=\"java中IO操作\"></a>java中IO操作</h1><h2 id=\"读取文件中的内容\"><a href=\"#读取文件中的内容\" class=\"headerlink\" title=\"读取文件中的内容\"></a>读取文件中的内容</h2><blockquote>\n<h4 id=\"使用Scanner读取文本中的内容\"><a href=\"#使用Scanner读取文本中的内容\" class=\"headerlink\" title=\"使用Scanner读取文本中的内容\"></a>使用<code>Scanner</code>读取文本中的内容</h4><blockquote>\n<p>相信大家都知道<code>Scanner console=new Scanner(System.in)</code>是用来读取控制台上输入的内容，但是这里是用来读取文件的内容，原理是一样的，只是对象不同罢了，这里用到的是<code>File</code>对象，用来创建一个文件对象</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scanner input=<span class=\"keyword\">new</span> Scanner(<span class=\"keyword\">new</span>                         File(<span class=\"string\">\"hello.txt\"</span>));<span class=\"comment\">//创建一个对象input</span></div><div class=\"line\"><span class=\"keyword\">while</span>(input.hasNextLine()) <span class=\"comment\">//这里用来判断是否还有内容，    以免读到最后发生错误</span></div><div class=\"line\">&#123;</div><div class=\"line\">String content=input.nextLine();</div><div class=\"line\">System.out.println(content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>这里顺便补充一下<code>Scannner</code>中的几个函数：</p>\n<blockquote>\n<ol>\n<li><code>nextLine()</code>:读取一行的内容，包括空格，换行</li>\n<li><code>nextInt()</code>:读取一个整型内容</li>\n<li><code>nexDouble()</code>:读取一个双精度的浮点数</li>\n<li><code>next()</code>:读取下一个内容，无论什么类型，其中遇到空格和换行默认是一个标记（即是跳过）和<code>nextLine()</code>类似</li>\n<li><code>hasNext()</code>:用来判断文件中的还有下一个内容，无论什么类型的</li>\n<li><code>hasNextInt()</code></li>\n<li><code>hasNextDouble()</code>://相似，不在赘述</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"使用FileReader读取\"><a href=\"#使用FileReader读取\" class=\"headerlink\" title=\"使用FileReader读取\"></a>使用<code>FileReader</code>读取</h3><blockquote>\n<p>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 <code>FileInputStream</code>上构造一个 <code>InputStreamReader</code>。<br>FileReader 用于读取字符流。要读取原始字节流，请考虑使用 FileInputStream。</p>\n</blockquote>\n</blockquote>\n<pre><code>//这里使用new File创建一个对象，同样的也可以直接将文件的绝对路径传入\nFileReader file=new FileReader(new File(&quot;hello.txt&quot;));\nwhile(file.ready())   //用来判断是否还有字符可读\n        {\n        int content=file.read();   //这里的read是读取将单个字符 返回的是int，即是ascii码,这里官方文档说返回的是读取的字符数，但是我实验了一下返回的ascii码\n        System.out.println((char)content);  //所以要将ascii码转换成字符\n        }\n        file.close();\n</code></pre><blockquote>\n<blockquote>\n<blockquote>\n<p>常用的几个方法：</p>\n<blockquote>\n<ol>\n<li><code>read()</code>: return int 上面介绍过</li>\n<li><code>read(char[] cbuf,int int length)</code>:将内容读入到一个<code>char</code>类型的数组，<code>length</code>是读取的字符数，<code>offest</code>是偏移量</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"使用BufferedReader的类实现高效的读取文件\"><a href=\"#使用BufferedReader的类实现高效的读取文件\" class=\"headerlink\" title=\"使用BufferedReader的类实现高效的读取文件\"></a>使用<code>BufferedReader</code>的类实现高效的读取文件</h3></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传入一个reader创建一个对象</span></div><div class=\"line\">        BufferedReader file= <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"hello.txt\"</span>));  </div><div class=\"line\">        System.out.println(file.skip(<span class=\"number\">3</span>));<span class=\"comment\">//实现将指针跳过3个字符</span></div><div class=\"line\">        System.out.println((<span class=\"keyword\">char</span>)file.read()); <span class=\"comment\">//read的方法，和FileReader中的read一样</span></div><div class=\"line\">        String line=file.readLine();   <span class=\"comment\">//读取一行</span></div><div class=\"line\">        System.out.println(line);</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>常用的方法：</p>\n<blockquote>\n<ol>\n<li><code>readLine()</code></li>\n<li><code>read()</code>：如果到了末尾返回-1</li>\n<li><code>read(char [],int off,int length)</code>:和FileReader中的一样</li>\n<li><code>ready()</code>:判断是否还可以读取，一般和read配对使用</li>\n<li><code>skip(long n)</code>:跳过的字符数</li>\n<li><code>close()</code></li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"文件的写入\"><a href=\"#文件的写入\" class=\"headerlink\" title=\"文件的写入\"></a>文件的写入</h2><blockquote>\n<h3 id=\"用FileWriter写入文件\"><a href=\"#用FileWriter写入文件\" class=\"headerlink\" title=\"用FileWriter写入文件\"></a>用<code>FileWriter</code>写入文件</h3></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*创建将对象f传入FileWriter,其中Filewriter有两个参数，第一个是File对象后者是一个String(即是文件的路径），第二个参数是boolean类型的，表示是否在文件的末尾追加内容，默认的是false表示不用在末尾追加，如果想要在末尾追加要写入另外一个参数true,当然这里可以用更加简洁的方式创建：FileWriter file=new FileWriter(\"hello.txt\",false);</span></div><div class=\"line\">*/</div><div class=\"line\">FileWriter file=<span class=\"keyword\">new</span> FileWriter(f,<span class=\"keyword\">true</span>);</div><div class=\"line\">file.write(<span class=\"string\">\"chenjiabing\"</span>);<span class=\"comment\">//写入函数write</span></div><div class=\"line\">file.close();  <span class=\"comment\">//最后必须关闭文件的输入流，否则写入将会失败，这里不想c和c++</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>其中Filewriter中的方法还有</p>\n<blockquote>\n<ol>\n<li><code>flush</code>：刷新缓存流</li>\n<li><code>close</code></li>\n<li><code>append()</code>:当前的领会的就是写入数组:<code>append(Arrays.toString(list))</code>;</li>\n<li><code>getEncoding()</code>:返回此流使用的字符编码</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"用PrintStream写入文件\"><a href=\"#用PrintStream写入文件\" class=\"headerlink\" title=\"用PrintStream写入文件\"></a>用<code>PrintStream</code>写入文件</h3><blockquote>\n<p>这里同样的是和<code>System.out.println()</code>一样的原理，<code>System.out.println</code>只是内部实现了<code>PrintStream</code>，这里是用来将指定的内容写入到文件中而已</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintStream output=<span class=\"keyword\">new</span> PrintStream(<span class=\"keyword\">new</span>     File(<span class=\"string\">\"hello.txt\"</span>));</div><div class=\"line\"><span class=\"comment\">//创建一个写入的对象output</span></div><div class=\"line\">output.print(<span class=\"string\">\"flan\"</span>);</div><div class=\"line\">output.println(<span class=\"string\">\"vmlkfamla\"</span>);</div><div class=\"line\">output.println(<span class=\"string\">\"vmslfkmadvmfs;dm\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"这里是用BufferedWriter类写入文件-一个高效的写入方式\"><a href=\"#这里是用BufferedWriter类写入文件-一个高效的写入方式\" class=\"headerlink\" title=\"这里是用BufferedWriter类写入文件(一个高效的写入方式)\"></a>这里是用<code>BufferedWriter</code>类写入文件(一个高效的写入方式)</h2><blockquote>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><blockquote>\n<p>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。<br>可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。<br>该类提供了 <code>newLine()</code> 方法，它使用平台自己的行分隔符概念，此概念由系统属性 line.separator 定义。并非所有平台都使用新行符 (‘\\n’) 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。<br>通常 <code>Writer</code> 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 <code>BufferedWriter</code> 包装所有其 <code>write()</code> 操作可能开销很高的 <code>Writer</code>（如 <code>FileWriters</code> 和 <code>OutputStreamWriters</code>）。例如，</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter(&quot;foo.out&quot;)));\n</code></pre><p>将缓冲 <code>PrintWriter</code>对文件的输出。如果没有缓冲，则每次调用 <code>print()</code> 方法会导致将字符转换为字节，然后立即入到文件，而这是极其低效的。</p>\n<blockquote>\n<blockquote>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3></blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedWriter input=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"hello.txt\"</span>));</div><div class=\"line\">        input.write(<span class=\"string\">\"这是一个文件读入的方法\"</span>);</div><div class=\"line\">        input.newLine();</div><div class=\"line\">        input.write(<span class=\"string\">\"一个高效的方法\"</span>);</div><div class=\"line\">        input.close();</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"其他的方法\"><a href=\"#其他的方法\" class=\"headerlink\" title=\"其他的方法\"></a>其他的方法</h3><blockquote>\n<ol>\n<li><code>close()</code></li>\n<li><code>flush()</code></li>\n<li><code>newLine()</code>:写入一个换行，因为每一个操作系统上的换行符可能不一样，不能系统的都用”\\n”表示</li>\n<li><code>write()</code><blockquote>\n<p>详情参见<code>API</code></p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"java中IO操作\"><a href=\"#java中IO操作\" class=\"headerlink\" title=\"java中IO操作\"></a>java中IO操作</h1><h2 id=\"读取文件中的内容\"><a href=\"#读取文件中的内容\" class=\"headerlink\" title=\"读取文件中的内容\"></a>读取文件中的内容</h2><blockquote>\n<h4 id=\"使用Scanner读取文本中的内容\"><a href=\"#使用Scanner读取文本中的内容\" class=\"headerlink\" title=\"使用Scanner读取文本中的内容\"></a>使用<code>Scanner</code>读取文本中的内容</h4><blockquote>\n<p>相信大家都知道<code>Scanner console=new Scanner(System.in)</code>是用来读取控制台上输入的内容，但是这里是用来读取文件的内容，原理是一样的，只是对象不同罢了，这里用到的是<code>File</code>对象，用来创建一个文件对象</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scanner input=<span class=\"keyword\">new</span> Scanner(<span class=\"keyword\">new</span>                         File(<span class=\"string\">\"hello.txt\"</span>));<span class=\"comment\">//创建一个对象input</span></div><div class=\"line\"><span class=\"keyword\">while</span>(input.hasNextLine()) <span class=\"comment\">//这里用来判断是否还有内容，    以免读到最后发生错误</span></div><div class=\"line\">&#123;</div><div class=\"line\">String content=input.nextLine();</div><div class=\"line\">System.out.println(content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>这里顺便补充一下<code>Scannner</code>中的几个函数：</p>\n<blockquote>\n<ol>\n<li><code>nextLine()</code>:读取一行的内容，包括空格，换行</li>\n<li><code>nextInt()</code>:读取一个整型内容</li>\n<li><code>nexDouble()</code>:读取一个双精度的浮点数</li>\n<li><code>next()</code>:读取下一个内容，无论什么类型，其中遇到空格和换行默认是一个标记（即是跳过）和<code>nextLine()</code>类似</li>\n<li><code>hasNext()</code>:用来判断文件中的还有下一个内容，无论什么类型的</li>\n<li><code>hasNextInt()</code></li>\n<li><code>hasNextDouble()</code>://相似，不在赘述</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"使用FileReader读取\"><a href=\"#使用FileReader读取\" class=\"headerlink\" title=\"使用FileReader读取\"></a>使用<code>FileReader</code>读取</h3><blockquote>\n<p>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 <code>FileInputStream</code>上构造一个 <code>InputStreamReader</code>。<br>FileReader 用于读取字符流。要读取原始字节流，请考虑使用 FileInputStream。</p>\n</blockquote>\n</blockquote>\n<pre><code>//这里使用new File创建一个对象，同样的也可以直接将文件的绝对路径传入\nFileReader file=new FileReader(new File(&quot;hello.txt&quot;));\nwhile(file.ready())   //用来判断是否还有字符可读\n        {\n        int content=file.read();   //这里的read是读取将单个字符 返回的是int，即是ascii码,这里官方文档说返回的是读取的字符数，但是我实验了一下返回的ascii码\n        System.out.println((char)content);  //所以要将ascii码转换成字符\n        }\n        file.close();\n</code></pre><blockquote>\n<blockquote>\n<blockquote>\n<p>常用的几个方法：</p>\n<blockquote>\n<ol>\n<li><code>read()</code>: return int 上面介绍过</li>\n<li><code>read(char[] cbuf,int int length)</code>:将内容读入到一个<code>char</code>类型的数组，<code>length</code>是读取的字符数，<code>offest</code>是偏移量</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"使用BufferedReader的类实现高效的读取文件\"><a href=\"#使用BufferedReader的类实现高效的读取文件\" class=\"headerlink\" title=\"使用BufferedReader的类实现高效的读取文件\"></a>使用<code>BufferedReader</code>的类实现高效的读取文件</h3></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传入一个reader创建一个对象</span></div><div class=\"line\">        BufferedReader file= <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"hello.txt\"</span>));  </div><div class=\"line\">        System.out.println(file.skip(<span class=\"number\">3</span>));<span class=\"comment\">//实现将指针跳过3个字符</span></div><div class=\"line\">        System.out.println((<span class=\"keyword\">char</span>)file.read()); <span class=\"comment\">//read的方法，和FileReader中的read一样</span></div><div class=\"line\">        String line=file.readLine();   <span class=\"comment\">//读取一行</span></div><div class=\"line\">        System.out.println(line);</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>常用的方法：</p>\n<blockquote>\n<ol>\n<li><code>readLine()</code></li>\n<li><code>read()</code>：如果到了末尾返回-1</li>\n<li><code>read(char [],int off,int length)</code>:和FileReader中的一样</li>\n<li><code>ready()</code>:判断是否还可以读取，一般和read配对使用</li>\n<li><code>skip(long n)</code>:跳过的字符数</li>\n<li><code>close()</code></li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"文件的写入\"><a href=\"#文件的写入\" class=\"headerlink\" title=\"文件的写入\"></a>文件的写入</h2><blockquote>\n<h3 id=\"用FileWriter写入文件\"><a href=\"#用FileWriter写入文件\" class=\"headerlink\" title=\"用FileWriter写入文件\"></a>用<code>FileWriter</code>写入文件</h3></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*创建将对象f传入FileWriter,其中Filewriter有两个参数，第一个是File对象后者是一个String(即是文件的路径），第二个参数是boolean类型的，表示是否在文件的末尾追加内容，默认的是false表示不用在末尾追加，如果想要在末尾追加要写入另外一个参数true,当然这里可以用更加简洁的方式创建：FileWriter file=new FileWriter(\"hello.txt\",false);</div><div class=\"line\">*/</span></div><div class=\"line\">FileWriter file=<span class=\"keyword\">new</span> FileWriter(f,<span class=\"keyword\">true</span>);</div><div class=\"line\">file.write(<span class=\"string\">\"chenjiabing\"</span>);<span class=\"comment\">//写入函数write</span></div><div class=\"line\">file.close();  <span class=\"comment\">//最后必须关闭文件的输入流，否则写入将会失败，这里不想c和c++</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>其中Filewriter中的方法还有</p>\n<blockquote>\n<ol>\n<li><code>flush</code>：刷新缓存流</li>\n<li><code>close</code></li>\n<li><code>append()</code>:当前的领会的就是写入数组:<code>append(Arrays.toString(list))</code>;</li>\n<li><code>getEncoding()</code>:返回此流使用的字符编码</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"用PrintStream写入文件\"><a href=\"#用PrintStream写入文件\" class=\"headerlink\" title=\"用PrintStream写入文件\"></a>用<code>PrintStream</code>写入文件</h3><blockquote>\n<p>这里同样的是和<code>System.out.println()</code>一样的原理，<code>System.out.println</code>只是内部实现了<code>PrintStream</code>，这里是用来将指定的内容写入到文件中而已</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintStream output=<span class=\"keyword\">new</span> PrintStream(<span class=\"keyword\">new</span>     File(<span class=\"string\">\"hello.txt\"</span>));</div><div class=\"line\"><span class=\"comment\">//创建一个写入的对象output</span></div><div class=\"line\">output.print(<span class=\"string\">\"flan\"</span>);</div><div class=\"line\">output.println(<span class=\"string\">\"vmlkfamla\"</span>);</div><div class=\"line\">output.println(<span class=\"string\">\"vmslfkmadvmfs;dm\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"这里是用BufferedWriter类写入文件-一个高效的写入方式\"><a href=\"#这里是用BufferedWriter类写入文件-一个高效的写入方式\" class=\"headerlink\" title=\"这里是用BufferedWriter类写入文件(一个高效的写入方式)\"></a>这里是用<code>BufferedWriter</code>类写入文件(一个高效的写入方式)</h2><blockquote>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><blockquote>\n<p>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。<br>可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。<br>该类提供了 <code>newLine()</code> 方法，它使用平台自己的行分隔符概念，此概念由系统属性 line.separator 定义。并非所有平台都使用新行符 (‘\\n’) 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。<br>通常 <code>Writer</code> 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 <code>BufferedWriter</code> 包装所有其 <code>write()</code> 操作可能开销很高的 <code>Writer</code>（如 <code>FileWriters</code> 和 <code>OutputStreamWriters</code>）。例如，</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter(&quot;foo.out&quot;)));\n</code></pre><p>将缓冲 <code>PrintWriter</code>对文件的输出。如果没有缓冲，则每次调用 <code>print()</code> 方法会导致将字符转换为字节，然后立即入到文件，而这是极其低效的。</p>\n<blockquote>\n<blockquote>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3></blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedWriter input=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"hello.txt\"</span>));</div><div class=\"line\">        input.write(<span class=\"string\">\"这是一个文件读入的方法\"</span>);</div><div class=\"line\">        input.newLine();</div><div class=\"line\">        input.write(<span class=\"string\">\"一个高效的方法\"</span>);</div><div class=\"line\">        input.close();</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"其他的方法\"><a href=\"#其他的方法\" class=\"headerlink\" title=\"其他的方法\"></a>其他的方法</h3><blockquote>\n<ol>\n<li><code>close()</code></li>\n<li><code>flush()</code></li>\n<li><code>newLine()</code>:写入一个换行，因为每一个操作系统上的换行符可能不一样，不能系统的都用”\\n”表示</li>\n<li><code>write()</code><blockquote>\n<p>详情参见<code>API</code></p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"java图像处理干货篇一","date":"2017-04-04T12:17:07.000Z","_content":"# java图像处理干货篇\n## 绘制图像\n>绘制图像主要用到的是Graphics类中drawImage方法，当然Graphics2D中也有相应的方法\n>>主要的用法：\n>>* `public abstract boolean drawImage(Image img,x,y,ImageObserver observer)`:img是`Image`对象，x,y起始坐标,`observer`是观察对象\n>>* `drawImage(Image img,int x,int y,int width,int height,Imageobersver observer)`:`width`和`height`是指定图像的宽度和高度，主要的作用是放大和缩小图像\n>> * `drawImage(Image img,int dx1,int dy1,int dx2,int dx2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer)`:主要用来翻转图形,通过互换源矩形的第一个和第二个角的x坐标可以实现水平翻转，通过互换源矩形的第一个和第二个角的y坐标可以实现垂直翻转\n\n## 翻转图像\n```java\npackage com.zzk;\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.net.URL;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class PartImageFrame extends JFrame {\n    private Image img = null;  // 声明图像对象\n    private PartImagePanel imagePanel = null;  // 声明图像面板对象\n    private int dx1, dy1, dx2, dy2;   // 目标矩形第一个角与第二个角的X、Y坐标\n    private int sx1, sy1, sx2, sy2;   // 源矩形第一个角与第二个角的X、Y坐标\n    public static void main(String args[]) {\n        PartImageFrame frame = new PartImageFrame();\n        frame.setVisible(true);\n    }\n    public PartImageFrame() {\n        super();\n        URL imgUrl = PartImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl); // 获取图像资源\n        dx2 = sx2 = 340; // 初始化图像大小\n        dy2 = sy2 = 200; // 初始化图像大小\n        imagePanel = new PartImagePanel();  // 创建图像面板对象\n        this.setBounds(200, 160, 355, 276); // 设置窗体大小和位置\n        this.add(imagePanel); // 在窗体中部位置添加图像面板对象\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"翻转图像\"); // 设置窗体标题\n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n        final JButton btn_h = new JButton();\n        btn_h.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                // 下面3行代码用于交换sx1和sx2的值\n                int x = sx1;\n                sx1 = sx2;\n                sx2 = x;\n                imagePanel.repaint();  // 重新调用面板类的paint()方法\n            }\n        });\n        btn_h.setText(\"水平翻转\");\n        panel.add(btn_h);\n        final JButton btn_v = new JButton();\n        btn_v.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                // 下面3行代码用于交换sy1和sy2的值\n                int y = sy1;\n                sy1 = sy2;\n                sy2 = y;\n                imagePanel.repaint();// 重新调用面板类的paint()方法\n            }\n        });\n        btn_v.setText(\"垂直翻转\");\n        panel.add(btn_v);\n    }\n    // 创建面板类\n    class PartImagePanel extends JPanel {\n        public void paint(Graphics g) {\n            g.clearRect(0, 0, this.getWidth(), this.getHeight());// 清除绘图上下文的内容\n            g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, this);// 绘制图像\n\n        }\n    }\n}\n```\n## 旋转图像\n>主要用到的是`Graphics2D`类中的`rotate`函数，定义如下:`public abstract void rotate(double theta)`: `theta`是角度，以弧度为单位\n>**代码如下**\n\n```javas\npackage com.zzk;\nimport java.awt.*;\nimport java.net.URL;\nimport javax.swing.*;\npublic class RotateImageFrame extends JFrame {\n    private Image img = null;\n    private RotatePanel rotatePanel = null;\n    public RotateImageFrame() {\n        URL imgUrl = RotateImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl);   // 获取图片资源\n        rotatePanel = new RotatePanel();  // 创建旋转图像的面板对象\n        this.setBounds(150, 120, 380, 310);                 // 设置窗体大小和位置\n        add(rotatePanel);// 在窗体上放置图像面板\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 设置窗体关闭模式\n        this.setTitle(\"旋转图像\");                     // 设置窗体标题\n    }\n    public static void main(String[] args) {\n        new RotateImageFrame().setVisible(true);\n    }\n    class RotatePanel extends JPanel {\n        public void paint(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g;         // 获得Graphics2D对象\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n            g2.rotate(Math.toRadians(10));                 // 将图片旋转10度\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n            g2.rotate(Math.toRadians(10));                // 将图片旋转10度\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n        }\n    }\n}\n\n```\n ## 倾斜图像\n>主要用到的是`Graphics2D`中的`shear`函数定义如：`public abstract void shear(doubel shx,double shy)`:`shx`是在正x轴上移动坐标的乘数，它可以作为其纵坐标的值,shy是在正y轴方形移动坐标的乘数，它可以作为其x坐标的函数。\n>**本人的理解：\n>倾斜画布，如果shx>0就是向正方向平移，平移的长度为shx*height(图形纵坐标的值，如果是矩形就是乘以矩形的高)\n>相同的对于shy是乘以矩形宽**\n```java\npackage com.zzk;\nimport java.awt.*;\nimport java.net.URL;\nimport javax.swing.*;\npublic class ShearImageFrame extends JFrame {\n\tprivate Image img;\n\tprivate ShearImagePanel canvasPanel = null;\n\tpublic ShearImageFrame() {\n        URL imgUrl = ShearImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl);  // 获取图片资源\n        canvasPanel = new ShearImagePanel();     // 创建绘制倾斜图像的面板对象\n        this.setBounds(100, 100, 360, 240);                // 设置窗体大小和位置\n        add(canvasPanel);// 在窗体上添加面板对象\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"倾斜图像\");                    // 设置窗体标题\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew ShearImageFrame().setVisible(true);\n\t}\n\tclass ShearImagePanel extends JPanel {// 绘制倾斜图像的面板类\n\t\tpublic void paint(Graphics g) {\n\t\t\tGraphics2D g2=(Graphics2D) g;// 获得Graphics2D对象\n\t\t\tg2.shear(0, -0.5);// 倾斜图像\n\t\t\tg2.drawImage(img, 10, 20, 220, 160, this);     // 绘制指定大小的图片\n\t\t}\n\t}\n}\n```\n\n## 裁剪图片\n>`public BufferedImage createScreenCapture(Rectangle screenRect)`:返回的是一个BufferedImage对象，参数是Rectangle对象，这个函数是Robot类中的，主要用于裁剪图形\n\n```java\npackage com.zzk;\nimport java.awt.AWTException;\nimport java.awt.BasicStroke;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.Rectangle;\nimport java.awt.Robot;\nimport java.awt.Toolkit;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.image.BufferedImage;\nimport java.net.URL;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JSplitPane;\n\npublic class CutImageFrame extends JFrame {\n    private Image img = null; // 声明图像对象\n    private OldImagePanel oldImagePanel = null; // 声明图像面板对象\n    private int pressPanelX = 0, pressPanelY = 0;// 鼠标按下点的X、Y坐标 \n    private int pressX = 0, pressY = 0;// 鼠标按下点在屏幕上的X、Y坐标\n    private int releaseX = 0, releaseY = 0;// 鼠标释放点在屏幕上的X、Y坐标\n    private Robot robot = null;  // 声明Robot对象\n    private BufferedImage buffImage = null; // 声明缓冲图像对象\n    private CutImagePanel cutImagePanel = new CutImagePanel(); // 创建绘制裁剪结果的面板\n    private boolean flag = false;  // 声明标记变量，为true时显示选择区域的矩形，否则不显示\n\n    public static void main(String args[]) {\n        CutImageFrame frame = new CutImageFrame();\n        frame.setVisible(true);\n    }\n\n    public CutImageFrame() {\n        super();\n        URL imgUrl = CutImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl); // 获取图像资源\n        oldImagePanel = new OldImagePanel(); // 创建图像面板对象\n        this.setBounds(200, 160, 355, 276); // 设置窗体大小和位置\n        final JSplitPane splitPane = new JSplitPane();\n        splitPane.setDividerLocation((this.getWidth() / 2) - 10);\n        getContentPane().add(splitPane, BorderLayout.CENTER);\n        splitPane.setLeftComponent(oldImagePanel);\n        splitPane.setRightComponent(cutImagePanel);\n        oldImagePanel.addMouseListener(new MouseAdapter() {\n            public void mousePressed(final MouseEvent e) {  // 鼠标键按下事件\n                pressPanelX = e.getX(); // 获得鼠标按下点的X坐标 \n                pressPanelY = e.getY();// 获得鼠标按下点的Y坐标 \n                pressX = e.getXOnScreen() + 1;// 鼠标按下点在屏幕上的X坐标加1，即去除选择线\n                pressY = e.getYOnScreen() + 1;// 鼠标按下点在屏幕上的Y坐标加1，即去除选择线\n                flag = true;// 为标记变量赋值为true\n            }\n\n            public void mouseReleased(final MouseEvent e) { // 鼠标键释放事件\n                releaseX = e.getXOnScreen() - 1;// 鼠标释放点在屏幕上的X坐标减1，即去除选择线\n                    releaseY = e.getYOnScreen() - 1;// 鼠标释放点在屏幕上的Y坐标减1，即去除选择线\n                    try {\n                    robot = new Robot();// 创建Robot对象\n                    if (releaseX - pressX > 0 && releaseY - pressY > 0) {\n                        Rectangle rect = new Rectangle(pressX, pressY, releaseX\n                                - pressX, releaseY - pressY);// 创建Rectangle对象\n                        buffImage = robot.createScreenCapture(rect);// 获得缓冲图像对象\n                        cutImagePanel.repaint(); // 调用CutImagePanel面板的paint()方法\n                    }\n                } catch (AWTException e1) {\n                    e1.printStackTrace();\n                }\n                flag = false;// 为标记变量赋值为false\n            }\n        });\n        oldImagePanel.addMouseMotionListener(new MouseMotionAdapter() {\n            public void mouseDragged(final MouseEvent e) {// 鼠标拖动事件\n                if (flag) {\n                    releaseX = e.getXOnScreen();// 获得鼠标释放点在屏幕上的X坐标\n                    releaseY = e.getYOnScreen();// 获得鼠标释放点在屏幕上的Y坐标\n                    oldImagePanel.repaint();// 调用OldImagePanel面板的paint()方法\n                }\n            }\n        });\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"裁剪图片\"); // 设置窗体标题\n    }\n\n\n\n\n    class OldImagePanel extends JPanel {// 创建绘制原图像的面板类\n\n        public void paint(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g;\n            g2.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);// 绘制图像\n            g2.setColor(Color.WHITE);\n            if (flag) {\n                float[] arr = {5.0f}; // 创建虚线模式的数组\n                BasicStroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT,\n                        BasicStroke.JOIN_BEVEL, 1.0f, arr, 0); // 创建宽度是1的平头虚线笔画对象\n                g2.setStroke(stroke);// 设置笔画对象\n                g2.drawRect(pressPanelX, pressPanelY, releaseX - pressX,\n                        releaseY - pressY);// 绘制矩形选区\n            }\n        }\n    }\n\n    class CutImagePanel extends JPanel {// 创建绘制裁剪结果的面板类\n\n        public void paint(Graphics g) {\n            g.clearRect(0, 0, this.getWidth(), this.getHeight());// 清除绘图上下文的内容\n            g.drawImage(buffImage, 0, 0, releaseX - pressX, releaseY - pressY,\n                    this);// 绘制图像\n        }\n\n\n\n\n    }\n}\n```\n## 调整图片的亮度\n>`RescaleOp`类中的`filter`方法原缓冲图像进行重缩放，定义如下\n>`public abstract BufferedImage filter(BufferedImage src,BufferedImage dst)`:src是要过滤的源对象，dst是目标对象，或则为null\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.RescaleOp;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class ImageBrightenFrame extends JFrame {\n    private BufferedImage image;// 用于调整亮度的缓冲图像对象\n    private BufferedImage oldImage;// 用于存放调整亮度之前的原缓冲图像对象\n    private ImageBrightenPanel imageBrightenPanel = new ImageBrightenPanel();\n    \n    public static void main(String args[]) {\n        ImageBrightenFrame frame = new ImageBrightenFrame();\n        frame.setVisible(true);\n    }\n    \n    public ImageBrightenFrame() {\n        super();\n        setBounds(100, 100, 357, 276);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setTitle(\"调整图片的亮度\");\n        Image img = null;\n        try {\n            img = ImageIO.read(new File(\"src/img/image.jpg\"));  // 创建图像对象\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        image = new BufferedImage(img.getWidth(this), img.getHeight(this),\n        BufferedImage.TYPE_INT_RGB);// 创建缓冲图像对象\n        image.getGraphics().drawImage(img, 0, 0, null);// 在缓冲图像对象上绘制图像\n        oldImage = image;// 存储原来的图像对象，用于以后的恢复操作\n        getContentPane().add(imageBrightenPanel, BorderLayout.CENTER);\n        \n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n\n        final JButton button = new JButton();\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                float a = 1.0f;// 定义缩放因子\n                float b = 5.0f;// 定义偏移量\n                RescaleOp op = new RescaleOp(a,b,null);// 创建具有指定缩放因子和偏移量的 RescaleOp对象\n                image = op.filter(image, null);// 对源图像中的数据进行逐像素重缩放，达到变亮的效果\n                repaint();// 重新绘制图像\n            }\n        });\n        button.setText(\"变    亮\");\n        panel.add(button);\n\n        final JButton button_3 = new JButton();\n        button_3.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                float a = 1.0f;// 定义缩放因子\n                float b = -5.0f;// 定义偏移量\n                RescaleOp op = new RescaleOp(a,b,null);// 创建具有指定缩放因子和偏移量的 RescaleOp对象\n                image = op.filter(image, null);// 对源图像中的数据进行逐像素重缩放，达到变暗的效果\n                repaint();// 重新绘制图像\n            }\n        });\n        button_3.setText(\"变    暗\");\n        panel.add(button_3);\n\n        final JButton button_2 = new JButton();\n        button_2.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                image = oldImage;  // 获得变亮前的图像\n                imageBrightenPanel.repaint();// 重新绘制原图像，即恢复为变亮前的图像\n            }\n        });\n        button_2.setText(\"恢    复\");\n        panel.add(button_2);\n\n        final JButton button_1 = new JButton();\n        button_1.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        button_1.setText(\"退    出\");\n        panel.add(button_1);\n  }\n    \n    class ImageBrightenPanel extends JPanel {\n        public void paint(Graphics g) {\n            if (image != null) {\n                g.drawImage(image, 0, 0, null);  // 将缓冲图像对象绘制到面板上\n            }\n        }\n    }\n}\n\n```\n>>**补充说明：这里的`RescaleOp`类可以调整色数，其原理是每一个样本值乘以一个缩放因子然后加上偏移量就是缩放的数，如果要变亮的话就将偏移量为正，反之为负，这里将缩放因子设置为1.0f是因为不想那么快速的变亮，如果你设置的大一点，就会很快变得很亮，反之亦然**\n\n## 转换彩色图片为灰色图片\n>主要使用`ColorConvertOp`类，其构造函数如下\n>`public ColorConvertOp(ColorSpace src,ColorSpace dst,RenderingHints hints)`:src是原颜色空间对象，dst是目标颜色空间对象，hints是用于控制颜色转换的RenderingHints对象，可以为null\n>使用`ColorConvertOp`类中的`filter`方法将彩色图像转换成灰色图像，定义如下：\n>`public final BufferedImage filter(BufferedImage src,BufferedImage dst)`:scr要过滤的对象，dst目标空间对象\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.color.ColorSpace;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorConvertOp;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class MultiColorToGrayFrame extends JFrame {\n    private BufferedImage image;\n    private ColorToGrayPanel colorToGrayPanel = new ColorToGrayPanel();\n    \n    public static void main(String args[]) {\n        MultiColorToGrayFrame frame = new MultiColorToGrayFrame();\n        frame.setVisible(true);\n    }\n    \n    public MultiColorToGrayFrame() {\n        super();\n        setBounds(100, 100, 357, 276);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setTitle(\"彩色图像转换为灰度\");\n        Image img = null;\n        try {\n            img = ImageIO.read(new File(\"src/img/image.jpg\"));  // 创建图像对象\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        image = new BufferedImage(img.getWidth(this), img.getHeight(this),\n                BufferedImage.TYPE_INT_RGB);// 创建缓冲图像对象\n        image.getGraphics().drawImage(img, 0, 0, null);// 在缓冲图像对象上绘制图像\n        \n        getContentPane().add(colorToGrayPanel, BorderLayout.CENTER);\n        \n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n        \n        final JButton button = new JButton();\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                ColorSpace colorSpace1 = ColorSpace.getInstance(ColorSpace.CS_GRAY);// 创建内置线性为灰度的颜色空间\n                ColorSpace colorSpace2 = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);// 创建内置线性为 RGB的颜色空间\n                ColorConvertOp op = new ColorConvertOp(colorSpace1,colorSpace2,\n                        null);// 创建进行颜色转换的对象\n                image = op.filter(image, null);// 对缓冲图像进行颜色转换\n            repaint();// 重新绘制图像\n        }\n        });\n        button.setText(\"转换为灰度\");\n        panel.add(button);\n\n        final JButton button_1 = new JButton();\n        button_1.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        button_1.setText(\"退    出\");\n        panel.add(button_1);\n    }\n    \n    class ColorToGrayPanel extends JPanel {\n        public void paint(Graphics g) {\n            if (image != null) {\n                g.drawImage(image, 0, 0, null);  // 将缓冲图像对象绘制到面板上\n            }\n        }\n    }\n}\n```\n>**补充说明：这里的`image.getGraphics().drawImage(img, 0, 0, null)`可以删除的，因为这里Graphics类中的drawImage可以直接绘制BufferedImage类型的缓冲图像，下面会给出一段代码做个示范**\n\n```java\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * Created by Chenjiabing on 2017/4/5.\n */\npublic class demo  extends JFrame{\n\n    private BufferedImage image=null;\n    private Graphics2D graphics2D=null;\n    private draw my_draw=new draw();\n    public static void main(String args[])\n    {\n        demo my=new demo();\n        my.setVisible(true);\n    }\n\n    public demo()\n    {\n        this.setBounds(100,100,1000,1000);\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            try{\n                image= ImageIO.read(new File(\"src/img/image.jpg\"));\n                //graphics2D=image.createGraphics();\n                //graphics2D.drawImage(image,0,0,null);\n                // image.getGraphics().drawImage(image,0,0,null);\n\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.out.println(\"error\");\n        }\n        this.getContentPane().add(my_draw);\n\n\n\n\n    }\n\n    class draw extends JPanel\n    {\n        public void paint(Graphics g)\n        {\n            g.drawImage(image,0,0,image.getWidth(),image.getHeight(),this);\n        }\n    }\n\n\n\n}\n\n```\n## 总结：\n>**从文件中读取图像的方法**\n>>* URL imgUrl = CutImageFrame.class.getResource(\"/img/image.jpg\");//得到的是URL\n    img = Toolkit.getDefaultToolkit().getImage(imgUrl);  //得到的是Image对象，同样的想要得到BufferedImage对象可以进行转     化\n>>* `Image img=ImageIo(new File(\"path\"));`这里得到的是Image对象，如果想要得到BufferedImage对象，可以用BufferedImage的构造方法BufferedImage(int width,int height,)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/java图像处理干货篇.md","raw":"---\ntitle: java图像处理干货篇一\ndate: 2017-04-04 20:17:07\ncategories: java学习\ntags: java图形与文本处理\n---\n# java图像处理干货篇\n## 绘制图像\n>绘制图像主要用到的是Graphics类中drawImage方法，当然Graphics2D中也有相应的方法\n>>主要的用法：\n>>* `public abstract boolean drawImage(Image img,x,y,ImageObserver observer)`:img是`Image`对象，x,y起始坐标,`observer`是观察对象\n>>* `drawImage(Image img,int x,int y,int width,int height,Imageobersver observer)`:`width`和`height`是指定图像的宽度和高度，主要的作用是放大和缩小图像\n>> * `drawImage(Image img,int dx1,int dy1,int dx2,int dx2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer)`:主要用来翻转图形,通过互换源矩形的第一个和第二个角的x坐标可以实现水平翻转，通过互换源矩形的第一个和第二个角的y坐标可以实现垂直翻转\n\n## 翻转图像\n```java\npackage com.zzk;\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.net.URL;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class PartImageFrame extends JFrame {\n    private Image img = null;  // 声明图像对象\n    private PartImagePanel imagePanel = null;  // 声明图像面板对象\n    private int dx1, dy1, dx2, dy2;   // 目标矩形第一个角与第二个角的X、Y坐标\n    private int sx1, sy1, sx2, sy2;   // 源矩形第一个角与第二个角的X、Y坐标\n    public static void main(String args[]) {\n        PartImageFrame frame = new PartImageFrame();\n        frame.setVisible(true);\n    }\n    public PartImageFrame() {\n        super();\n        URL imgUrl = PartImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl); // 获取图像资源\n        dx2 = sx2 = 340; // 初始化图像大小\n        dy2 = sy2 = 200; // 初始化图像大小\n        imagePanel = new PartImagePanel();  // 创建图像面板对象\n        this.setBounds(200, 160, 355, 276); // 设置窗体大小和位置\n        this.add(imagePanel); // 在窗体中部位置添加图像面板对象\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"翻转图像\"); // 设置窗体标题\n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n        final JButton btn_h = new JButton();\n        btn_h.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                // 下面3行代码用于交换sx1和sx2的值\n                int x = sx1;\n                sx1 = sx2;\n                sx2 = x;\n                imagePanel.repaint();  // 重新调用面板类的paint()方法\n            }\n        });\n        btn_h.setText(\"水平翻转\");\n        panel.add(btn_h);\n        final JButton btn_v = new JButton();\n        btn_v.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                // 下面3行代码用于交换sy1和sy2的值\n                int y = sy1;\n                sy1 = sy2;\n                sy2 = y;\n                imagePanel.repaint();// 重新调用面板类的paint()方法\n            }\n        });\n        btn_v.setText(\"垂直翻转\");\n        panel.add(btn_v);\n    }\n    // 创建面板类\n    class PartImagePanel extends JPanel {\n        public void paint(Graphics g) {\n            g.clearRect(0, 0, this.getWidth(), this.getHeight());// 清除绘图上下文的内容\n            g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, this);// 绘制图像\n\n        }\n    }\n}\n```\n## 旋转图像\n>主要用到的是`Graphics2D`类中的`rotate`函数，定义如下:`public abstract void rotate(double theta)`: `theta`是角度，以弧度为单位\n>**代码如下**\n\n```javas\npackage com.zzk;\nimport java.awt.*;\nimport java.net.URL;\nimport javax.swing.*;\npublic class RotateImageFrame extends JFrame {\n    private Image img = null;\n    private RotatePanel rotatePanel = null;\n    public RotateImageFrame() {\n        URL imgUrl = RotateImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl);   // 获取图片资源\n        rotatePanel = new RotatePanel();  // 创建旋转图像的面板对象\n        this.setBounds(150, 120, 380, 310);                 // 设置窗体大小和位置\n        add(rotatePanel);// 在窗体上放置图像面板\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 设置窗体关闭模式\n        this.setTitle(\"旋转图像\");                     // 设置窗体标题\n    }\n    public static void main(String[] args) {\n        new RotateImageFrame().setVisible(true);\n    }\n    class RotatePanel extends JPanel {\n        public void paint(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g;         // 获得Graphics2D对象\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n            g2.rotate(Math.toRadians(10));                 // 将图片旋转10度\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n            g2.rotate(Math.toRadians(10));                // 将图片旋转10度\n            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片\n        }\n    }\n}\n\n```\n ## 倾斜图像\n>主要用到的是`Graphics2D`中的`shear`函数定义如：`public abstract void shear(doubel shx,double shy)`:`shx`是在正x轴上移动坐标的乘数，它可以作为其纵坐标的值,shy是在正y轴方形移动坐标的乘数，它可以作为其x坐标的函数。\n>**本人的理解：\n>倾斜画布，如果shx>0就是向正方向平移，平移的长度为shx*height(图形纵坐标的值，如果是矩形就是乘以矩形的高)\n>相同的对于shy是乘以矩形宽**\n```java\npackage com.zzk;\nimport java.awt.*;\nimport java.net.URL;\nimport javax.swing.*;\npublic class ShearImageFrame extends JFrame {\n\tprivate Image img;\n\tprivate ShearImagePanel canvasPanel = null;\n\tpublic ShearImageFrame() {\n        URL imgUrl = ShearImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl);  // 获取图片资源\n        canvasPanel = new ShearImagePanel();     // 创建绘制倾斜图像的面板对象\n        this.setBounds(100, 100, 360, 240);                // 设置窗体大小和位置\n        add(canvasPanel);// 在窗体上添加面板对象\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"倾斜图像\");                    // 设置窗体标题\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew ShearImageFrame().setVisible(true);\n\t}\n\tclass ShearImagePanel extends JPanel {// 绘制倾斜图像的面板类\n\t\tpublic void paint(Graphics g) {\n\t\t\tGraphics2D g2=(Graphics2D) g;// 获得Graphics2D对象\n\t\t\tg2.shear(0, -0.5);// 倾斜图像\n\t\t\tg2.drawImage(img, 10, 20, 220, 160, this);     // 绘制指定大小的图片\n\t\t}\n\t}\n}\n```\n\n## 裁剪图片\n>`public BufferedImage createScreenCapture(Rectangle screenRect)`:返回的是一个BufferedImage对象，参数是Rectangle对象，这个函数是Robot类中的，主要用于裁剪图形\n\n```java\npackage com.zzk;\nimport java.awt.AWTException;\nimport java.awt.BasicStroke;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.Rectangle;\nimport java.awt.Robot;\nimport java.awt.Toolkit;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.image.BufferedImage;\nimport java.net.URL;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JSplitPane;\n\npublic class CutImageFrame extends JFrame {\n    private Image img = null; // 声明图像对象\n    private OldImagePanel oldImagePanel = null; // 声明图像面板对象\n    private int pressPanelX = 0, pressPanelY = 0;// 鼠标按下点的X、Y坐标 \n    private int pressX = 0, pressY = 0;// 鼠标按下点在屏幕上的X、Y坐标\n    private int releaseX = 0, releaseY = 0;// 鼠标释放点在屏幕上的X、Y坐标\n    private Robot robot = null;  // 声明Robot对象\n    private BufferedImage buffImage = null; // 声明缓冲图像对象\n    private CutImagePanel cutImagePanel = new CutImagePanel(); // 创建绘制裁剪结果的面板\n    private boolean flag = false;  // 声明标记变量，为true时显示选择区域的矩形，否则不显示\n\n    public static void main(String args[]) {\n        CutImageFrame frame = new CutImageFrame();\n        frame.setVisible(true);\n    }\n\n    public CutImageFrame() {\n        super();\n        URL imgUrl = CutImageFrame.class.getResource(\"/img/image.jpg\");// 获取图片资源的路径\n        img = Toolkit.getDefaultToolkit().getImage(imgUrl); // 获取图像资源\n        oldImagePanel = new OldImagePanel(); // 创建图像面板对象\n        this.setBounds(200, 160, 355, 276); // 设置窗体大小和位置\n        final JSplitPane splitPane = new JSplitPane();\n        splitPane.setDividerLocation((this.getWidth() / 2) - 10);\n        getContentPane().add(splitPane, BorderLayout.CENTER);\n        splitPane.setLeftComponent(oldImagePanel);\n        splitPane.setRightComponent(cutImagePanel);\n        oldImagePanel.addMouseListener(new MouseAdapter() {\n            public void mousePressed(final MouseEvent e) {  // 鼠标键按下事件\n                pressPanelX = e.getX(); // 获得鼠标按下点的X坐标 \n                pressPanelY = e.getY();// 获得鼠标按下点的Y坐标 \n                pressX = e.getXOnScreen() + 1;// 鼠标按下点在屏幕上的X坐标加1，即去除选择线\n                pressY = e.getYOnScreen() + 1;// 鼠标按下点在屏幕上的Y坐标加1，即去除选择线\n                flag = true;// 为标记变量赋值为true\n            }\n\n            public void mouseReleased(final MouseEvent e) { // 鼠标键释放事件\n                releaseX = e.getXOnScreen() - 1;// 鼠标释放点在屏幕上的X坐标减1，即去除选择线\n                    releaseY = e.getYOnScreen() - 1;// 鼠标释放点在屏幕上的Y坐标减1，即去除选择线\n                    try {\n                    robot = new Robot();// 创建Robot对象\n                    if (releaseX - pressX > 0 && releaseY - pressY > 0) {\n                        Rectangle rect = new Rectangle(pressX, pressY, releaseX\n                                - pressX, releaseY - pressY);// 创建Rectangle对象\n                        buffImage = robot.createScreenCapture(rect);// 获得缓冲图像对象\n                        cutImagePanel.repaint(); // 调用CutImagePanel面板的paint()方法\n                    }\n                } catch (AWTException e1) {\n                    e1.printStackTrace();\n                }\n                flag = false;// 为标记变量赋值为false\n            }\n        });\n        oldImagePanel.addMouseMotionListener(new MouseMotionAdapter() {\n            public void mouseDragged(final MouseEvent e) {// 鼠标拖动事件\n                if (flag) {\n                    releaseX = e.getXOnScreen();// 获得鼠标释放点在屏幕上的X坐标\n                    releaseY = e.getYOnScreen();// 获得鼠标释放点在屏幕上的Y坐标\n                    oldImagePanel.repaint();// 调用OldImagePanel面板的paint()方法\n                }\n            }\n        });\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体关闭模式\n        this.setTitle(\"裁剪图片\"); // 设置窗体标题\n    }\n\n\n\n\n    class OldImagePanel extends JPanel {// 创建绘制原图像的面板类\n\n        public void paint(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g;\n            g2.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);// 绘制图像\n            g2.setColor(Color.WHITE);\n            if (flag) {\n                float[] arr = {5.0f}; // 创建虚线模式的数组\n                BasicStroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT,\n                        BasicStroke.JOIN_BEVEL, 1.0f, arr, 0); // 创建宽度是1的平头虚线笔画对象\n                g2.setStroke(stroke);// 设置笔画对象\n                g2.drawRect(pressPanelX, pressPanelY, releaseX - pressX,\n                        releaseY - pressY);// 绘制矩形选区\n            }\n        }\n    }\n\n    class CutImagePanel extends JPanel {// 创建绘制裁剪结果的面板类\n\n        public void paint(Graphics g) {\n            g.clearRect(0, 0, this.getWidth(), this.getHeight());// 清除绘图上下文的内容\n            g.drawImage(buffImage, 0, 0, releaseX - pressX, releaseY - pressY,\n                    this);// 绘制图像\n        }\n\n\n\n\n    }\n}\n```\n## 调整图片的亮度\n>`RescaleOp`类中的`filter`方法原缓冲图像进行重缩放，定义如下\n>`public abstract BufferedImage filter(BufferedImage src,BufferedImage dst)`:src是要过滤的源对象，dst是目标对象，或则为null\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.RescaleOp;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class ImageBrightenFrame extends JFrame {\n    private BufferedImage image;// 用于调整亮度的缓冲图像对象\n    private BufferedImage oldImage;// 用于存放调整亮度之前的原缓冲图像对象\n    private ImageBrightenPanel imageBrightenPanel = new ImageBrightenPanel();\n    \n    public static void main(String args[]) {\n        ImageBrightenFrame frame = new ImageBrightenFrame();\n        frame.setVisible(true);\n    }\n    \n    public ImageBrightenFrame() {\n        super();\n        setBounds(100, 100, 357, 276);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setTitle(\"调整图片的亮度\");\n        Image img = null;\n        try {\n            img = ImageIO.read(new File(\"src/img/image.jpg\"));  // 创建图像对象\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        image = new BufferedImage(img.getWidth(this), img.getHeight(this),\n        BufferedImage.TYPE_INT_RGB);// 创建缓冲图像对象\n        image.getGraphics().drawImage(img, 0, 0, null);// 在缓冲图像对象上绘制图像\n        oldImage = image;// 存储原来的图像对象，用于以后的恢复操作\n        getContentPane().add(imageBrightenPanel, BorderLayout.CENTER);\n        \n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n\n        final JButton button = new JButton();\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                float a = 1.0f;// 定义缩放因子\n                float b = 5.0f;// 定义偏移量\n                RescaleOp op = new RescaleOp(a,b,null);// 创建具有指定缩放因子和偏移量的 RescaleOp对象\n                image = op.filter(image, null);// 对源图像中的数据进行逐像素重缩放，达到变亮的效果\n                repaint();// 重新绘制图像\n            }\n        });\n        button.setText(\"变    亮\");\n        panel.add(button);\n\n        final JButton button_3 = new JButton();\n        button_3.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                float a = 1.0f;// 定义缩放因子\n                float b = -5.0f;// 定义偏移量\n                RescaleOp op = new RescaleOp(a,b,null);// 创建具有指定缩放因子和偏移量的 RescaleOp对象\n                image = op.filter(image, null);// 对源图像中的数据进行逐像素重缩放，达到变暗的效果\n                repaint();// 重新绘制图像\n            }\n        });\n        button_3.setText(\"变    暗\");\n        panel.add(button_3);\n\n        final JButton button_2 = new JButton();\n        button_2.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                image = oldImage;  // 获得变亮前的图像\n                imageBrightenPanel.repaint();// 重新绘制原图像，即恢复为变亮前的图像\n            }\n        });\n        button_2.setText(\"恢    复\");\n        panel.add(button_2);\n\n        final JButton button_1 = new JButton();\n        button_1.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        button_1.setText(\"退    出\");\n        panel.add(button_1);\n  }\n    \n    class ImageBrightenPanel extends JPanel {\n        public void paint(Graphics g) {\n            if (image != null) {\n                g.drawImage(image, 0, 0, null);  // 将缓冲图像对象绘制到面板上\n            }\n        }\n    }\n}\n\n```\n>>**补充说明：这里的`RescaleOp`类可以调整色数，其原理是每一个样本值乘以一个缩放因子然后加上偏移量就是缩放的数，如果要变亮的话就将偏移量为正，反之为负，这里将缩放因子设置为1.0f是因为不想那么快速的变亮，如果你设置的大一点，就会很快变得很亮，反之亦然**\n\n## 转换彩色图片为灰色图片\n>主要使用`ColorConvertOp`类，其构造函数如下\n>`public ColorConvertOp(ColorSpace src,ColorSpace dst,RenderingHints hints)`:src是原颜色空间对象，dst是目标颜色空间对象，hints是用于控制颜色转换的RenderingHints对象，可以为null\n>使用`ColorConvertOp`类中的`filter`方法将彩色图像转换成灰色图像，定义如下：\n>`public final BufferedImage filter(BufferedImage src,BufferedImage dst)`:scr要过滤的对象，dst目标空间对象\n\n```java\npackage com.zzk;\n\nimport java.awt.BorderLayout;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.color.ColorSpace;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorConvertOp;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\npublic class MultiColorToGrayFrame extends JFrame {\n    private BufferedImage image;\n    private ColorToGrayPanel colorToGrayPanel = new ColorToGrayPanel();\n    \n    public static void main(String args[]) {\n        MultiColorToGrayFrame frame = new MultiColorToGrayFrame();\n        frame.setVisible(true);\n    }\n    \n    public MultiColorToGrayFrame() {\n        super();\n        setBounds(100, 100, 357, 276);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setTitle(\"彩色图像转换为灰度\");\n        Image img = null;\n        try {\n            img = ImageIO.read(new File(\"src/img/image.jpg\"));  // 创建图像对象\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        image = new BufferedImage(img.getWidth(this), img.getHeight(this),\n                BufferedImage.TYPE_INT_RGB);// 创建缓冲图像对象\n        image.getGraphics().drawImage(img, 0, 0, null);// 在缓冲图像对象上绘制图像\n        \n        getContentPane().add(colorToGrayPanel, BorderLayout.CENTER);\n        \n        final JPanel panel = new JPanel();\n        getContentPane().add(panel, BorderLayout.SOUTH);\n        \n        final JButton button = new JButton();\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                ColorSpace colorSpace1 = ColorSpace.getInstance(ColorSpace.CS_GRAY);// 创建内置线性为灰度的颜色空间\n                ColorSpace colorSpace2 = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);// 创建内置线性为 RGB的颜色空间\n                ColorConvertOp op = new ColorConvertOp(colorSpace1,colorSpace2,\n                        null);// 创建进行颜色转换的对象\n                image = op.filter(image, null);// 对缓冲图像进行颜色转换\n            repaint();// 重新绘制图像\n        }\n        });\n        button.setText(\"转换为灰度\");\n        panel.add(button);\n\n        final JButton button_1 = new JButton();\n        button_1.addActionListener(new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        button_1.setText(\"退    出\");\n        panel.add(button_1);\n    }\n    \n    class ColorToGrayPanel extends JPanel {\n        public void paint(Graphics g) {\n            if (image != null) {\n                g.drawImage(image, 0, 0, null);  // 将缓冲图像对象绘制到面板上\n            }\n        }\n    }\n}\n```\n>**补充说明：这里的`image.getGraphics().drawImage(img, 0, 0, null)`可以删除的，因为这里Graphics类中的drawImage可以直接绘制BufferedImage类型的缓冲图像，下面会给出一段代码做个示范**\n\n```java\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * Created by Chenjiabing on 2017/4/5.\n */\npublic class demo  extends JFrame{\n\n    private BufferedImage image=null;\n    private Graphics2D graphics2D=null;\n    private draw my_draw=new draw();\n    public static void main(String args[])\n    {\n        demo my=new demo();\n        my.setVisible(true);\n    }\n\n    public demo()\n    {\n        this.setBounds(100,100,1000,1000);\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            try{\n                image= ImageIO.read(new File(\"src/img/image.jpg\"));\n                //graphics2D=image.createGraphics();\n                //graphics2D.drawImage(image,0,0,null);\n                // image.getGraphics().drawImage(image,0,0,null);\n\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.out.println(\"error\");\n        }\n        this.getContentPane().add(my_draw);\n\n\n\n\n    }\n\n    class draw extends JPanel\n    {\n        public void paint(Graphics g)\n        {\n            g.drawImage(image,0,0,image.getWidth(),image.getHeight(),this);\n        }\n    }\n\n\n\n}\n\n```\n## 总结：\n>**从文件中读取图像的方法**\n>>* URL imgUrl = CutImageFrame.class.getResource(\"/img/image.jpg\");//得到的是URL\n    img = Toolkit.getDefaultToolkit().getImage(imgUrl);  //得到的是Image对象，同样的想要得到BufferedImage对象可以进行转     化\n>>* `Image img=ImageIo(new File(\"path\"));`这里得到的是Image对象，如果想要得到BufferedImage对象，可以用BufferedImage的构造方法BufferedImage(int width,int height,)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"java图像处理干货篇","published":1,"updated":"2017-04-09T07:04:17.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaxx001el0uzelfsqdyc","content":"<h1 id=\"java图像处理干货篇\"><a href=\"#java图像处理干货篇\" class=\"headerlink\" title=\"java图像处理干货篇\"></a>java图像处理干货篇</h1><h2 id=\"绘制图像\"><a href=\"#绘制图像\" class=\"headerlink\" title=\"绘制图像\"></a>绘制图像</h2><blockquote>\n<p>绘制图像主要用到的是Graphics类中drawImage方法，当然Graphics2D中也有相应的方法</p>\n<blockquote>\n<p>主要的用法：</p>\n<ul>\n<li><code>public abstract boolean drawImage(Image img,x,y,ImageObserver observer)</code>:img是<code>Image</code>对象，x,y起始坐标,<code>observer</code>是观察对象</li>\n<li><code>drawImage(Image img,int x,int y,int width,int height,Imageobersver observer)</code>:<code>width</code>和<code>height</code>是指定图像的宽度和高度，主要的作用是放大和缩小图像</li>\n<li><code>drawImage(Image img,int dx1,int dy1,int dx2,int dx2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer)</code>:主要用来翻转图形,通过互换源矩形的第一个和第二个角的x坐标可以实现水平翻转，通过互换源矩形的第一个和第二个角的y坐标可以实现垂直翻转</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"翻转图像\"><a href=\"#翻转图像\" class=\"headerlink\" title=\"翻转图像\"></a>翻转图像</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Toolkit;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Image img = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PartImagePanel imagePanel = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明图像面板对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> dx1, dy1, dx2, dy2;   <span class=\"comment\">// 目标矩形第一个角与第二个角的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sx1, sy1, sx2, sy2;   <span class=\"comment\">// 源矩形第一个角与第二个角的X、Y坐标</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        PartImageFrame frame = <span class=\"keyword\">new</span> PartImageFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PartImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        URL imgUrl = PartImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class=\"comment\">// 获取图像资源</span></div><div class=\"line\">        dx2 = sx2 = <span class=\"number\">340</span>; <span class=\"comment\">// 初始化图像大小</span></div><div class=\"line\">        dy2 = sy2 = <span class=\"number\">200</span>; <span class=\"comment\">// 初始化图像大小</span></div><div class=\"line\">        imagePanel = <span class=\"keyword\">new</span> PartImagePanel();  <span class=\"comment\">// 创建图像面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">200</span>, <span class=\"number\">160</span>, <span class=\"number\">355</span>, <span class=\"number\">276</span>); <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add(imagePanel); <span class=\"comment\">// 在窗体中部位置添加图像面板对象</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"翻转图像\"</span>); <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\">        <span class=\"keyword\">final</span> JButton btn_h = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        btn_h.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 下面3行代码用于交换sx1和sx2的值</span></div><div class=\"line\">                <span class=\"keyword\">int</span> x = sx1;</div><div class=\"line\">                sx1 = sx2;</div><div class=\"line\">                sx2 = x;</div><div class=\"line\">                imagePanel.repaint();  <span class=\"comment\">// 重新调用面板类的paint()方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        btn_h.setText(<span class=\"string\">\"水平翻转\"</span>);</div><div class=\"line\">        panel.add(btn_h);</div><div class=\"line\">        <span class=\"keyword\">final</span> JButton btn_v = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        btn_v.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 下面3行代码用于交换sy1和sy2的值</span></div><div class=\"line\">                <span class=\"keyword\">int</span> y = sy1;</div><div class=\"line\">                sy1 = sy2;</div><div class=\"line\">                sy2 = y;</div><div class=\"line\">                imagePanel.repaint();<span class=\"comment\">// 重新调用面板类的paint()方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        btn_v.setText(<span class=\"string\">\"垂直翻转\"</span>);</div><div class=\"line\">        panel.add(btn_v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 创建面板类</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            g.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight());<span class=\"comment\">// 清除绘图上下文的内容</span></div><div class=\"line\">            g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h2><blockquote>\n<p>主要用到的是<code>Graphics2D</code>类中的<code>rotate</code>函数，定义如下:<code>public abstract void rotate(double theta)</code>: <code>theta</code>是角度，以弧度为单位<br><strong>代码如下</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.zzk;</div><div class=\"line\">import java.awt.*;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import javax.swing.*;</div><div class=\"line\">public class RotateImageFrame extends JFrame &#123;</div><div class=\"line\">    private Image img = null;</div><div class=\"line\">    private RotatePanel rotatePanel = null;</div><div class=\"line\">    public RotateImageFrame() &#123;</div><div class=\"line\">        URL imgUrl = RotateImageFrame.class.getResource(&quot;/img/image.jpg&quot;);// 获取图片资源的路径</div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);   // 获取图片资源</div><div class=\"line\">        rotatePanel = new RotatePanel();  // 创建旋转图像的面板对象</div><div class=\"line\">        this.setBounds(150, 120, 380, 310);                 // 设置窗体大小和位置</div><div class=\"line\">        add(rotatePanel);// 在窗体上放置图像面板</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 设置窗体关闭模式</div><div class=\"line\">        this.setTitle(&quot;旋转图像&quot;);                     // 设置窗体标题</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        new RotateImageFrame().setVisible(true);</div><div class=\"line\">    &#125;</div><div class=\"line\">    class RotatePanel extends JPanel &#123;</div><div class=\"line\">        public void paint(Graphics g) &#123;</div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;         // 获得Graphics2D对象</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">            g2.rotate(Math.toRadians(10));                 // 将图片旋转10度</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">            g2.rotate(Math.toRadians(10));                // 将图片旋转10度</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"倾斜图像\"><a href=\"#倾斜图像\" class=\"headerlink\" title=\"倾斜图像\"></a>倾斜图像</h2><blockquote>\n<p>主要用到的是<code>Graphics2D</code>中的<code>shear</code>函数定义如：<code>public abstract void shear(doubel shx,double shy)</code>:<code>shx</code>是在正x轴上移动坐标的乘数，它可以作为其纵坐标的值,shy是在正y轴方形移动坐标的乘数，它可以作为其x坐标的函数。<br><strong>本人的理解：<br>倾斜画布，如果shx&gt;0就是向正方向平移，平移的长度为shx*height(图形纵坐标的值，如果是矩形就是乘以矩形的高)<br>相同的对于shy是乘以矩形宽</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShearImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Image img;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ShearImagePanel canvasPanel = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShearImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        URL imgUrl = ShearImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);  <span class=\"comment\">// 获取图片资源</span></div><div class=\"line\">        canvasPanel = <span class=\"keyword\">new</span> ShearImagePanel();     <span class=\"comment\">// 创建绘制倾斜图像的面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">360</span>, <span class=\"number\">240</span>);                <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        add(canvasPanel);<span class=\"comment\">// 在窗体上添加面板对象</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"倾斜图像\"</span>);                    <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ShearImageFrame().setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShearImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 绘制倾斜图像的面板类</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">\t\t\tGraphics2D g2=(Graphics2D) g;<span class=\"comment\">// 获得Graphics2D对象</span></div><div class=\"line\">\t\t\tg2.shear(<span class=\"number\">0</span>, -<span class=\"number\">0.5</span>);<span class=\"comment\">// 倾斜图像</span></div><div class=\"line\">\t\t\tg2.drawImage(img, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">220</span>, <span class=\"number\">160</span>, <span class=\"keyword\">this</span>);     <span class=\"comment\">// 绘制指定大小的图片</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"裁剪图片\"><a href=\"#裁剪图片\" class=\"headerlink\" title=\"裁剪图片\"></a>裁剪图片</h2><blockquote>\n<p><code>public BufferedImage createScreenCapture(Rectangle screenRect)</code>:返回的是一个BufferedImage对象，参数是Rectangle对象，这个函数是Robot类中的，主要用于裁剪图形</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.AWTException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BasicStroke;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Rectangle;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Robot;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Toolkit;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseMotionAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CutImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Image img = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> OldImagePanel oldImagePanel = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明图像面板对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pressPanelX = <span class=\"number\">0</span>, pressPanelY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标按下点的X、Y坐标 </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pressX = <span class=\"number\">0</span>, pressY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> releaseX = <span class=\"number\">0</span>, releaseY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Robot robot = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明Robot对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage buffImage = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> CutImagePanel cutImagePanel = <span class=\"keyword\">new</span> CutImagePanel(); <span class=\"comment\">// 创建绘制裁剪结果的面板</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;  <span class=\"comment\">// 声明标记变量，为true时显示选择区域的矩形，否则不显示</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        CutImageFrame frame = <span class=\"keyword\">new</span> CutImageFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CutImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        URL imgUrl = CutImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class=\"comment\">// 获取图像资源</span></div><div class=\"line\">        oldImagePanel = <span class=\"keyword\">new</span> OldImagePanel(); <span class=\"comment\">// 创建图像面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">200</span>, <span class=\"number\">160</span>, <span class=\"number\">355</span>, <span class=\"number\">276</span>); <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        <span class=\"keyword\">final</span> JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane();</div><div class=\"line\">        splitPane.setDividerLocation((<span class=\"keyword\">this</span>.getWidth() / <span class=\"number\">2</span>) - <span class=\"number\">10</span>);</div><div class=\"line\">        getContentPane().add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">        splitPane.setLeftComponent(oldImagePanel);</div><div class=\"line\">        splitPane.setRightComponent(cutImagePanel);</div><div class=\"line\">        oldImagePanel.addMouseListener(<span class=\"keyword\">new</span> MouseAdapter() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mousePressed</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123;  <span class=\"comment\">// 鼠标键按下事件</span></div><div class=\"line\">                pressPanelX = e.getX(); <span class=\"comment\">// 获得鼠标按下点的X坐标 </span></div><div class=\"line\">                pressPanelY = e.getY();<span class=\"comment\">// 获得鼠标按下点的Y坐标 </span></div><div class=\"line\">                pressX = e.getXOnScreen() + <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的X坐标加1，即去除选择线</span></div><div class=\"line\">                pressY = e.getYOnScreen() + <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的Y坐标加1，即去除选择线</span></div><div class=\"line\">                flag = <span class=\"keyword\">true</span>;<span class=\"comment\">// 为标记变量赋值为true</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mouseReleased</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123; <span class=\"comment\">// 鼠标键释放事件</span></div><div class=\"line\">                releaseX = e.getXOnScreen() - <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的X坐标减1，即去除选择线</span></div><div class=\"line\">                    releaseY = e.getYOnScreen() - <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的Y坐标减1，即去除选择线</span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    robot = <span class=\"keyword\">new</span> Robot();<span class=\"comment\">// 创建Robot对象</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (releaseX - pressX &gt; <span class=\"number\">0</span> &amp;&amp; releaseY - pressY &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        Rectangle rect = <span class=\"keyword\">new</span> Rectangle(pressX, pressY, releaseX</div><div class=\"line\">                                - pressX, releaseY - pressY);<span class=\"comment\">// 创建Rectangle对象</span></div><div class=\"line\">                        buffImage = robot.createScreenCapture(rect);<span class=\"comment\">// 获得缓冲图像对象</span></div><div class=\"line\">                        cutImagePanel.repaint(); <span class=\"comment\">// 调用CutImagePanel面板的paint()方法</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (AWTException e1) &#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                flag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 为标记变量赋值为false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        oldImagePanel.addMouseMotionListener(<span class=\"keyword\">new</span> MouseMotionAdapter() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mouseDragged</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123;<span class=\"comment\">// 鼠标拖动事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">                    releaseX = e.getXOnScreen();<span class=\"comment\">// 获得鼠标释放点在屏幕上的X坐标</span></div><div class=\"line\">                    releaseY = e.getYOnScreen();<span class=\"comment\">// 获得鼠标释放点在屏幕上的Y坐标</span></div><div class=\"line\">                    oldImagePanel.repaint();<span class=\"comment\">// 调用OldImagePanel面板的paint()方法</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"裁剪图片\"</span>); <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 创建绘制原图像的面板类</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;</div><div class=\"line\">            g2.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight(), <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\">            g2.setColor(Color.WHITE);</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">                <span class=\"keyword\">float</span>[] arr = &#123;<span class=\"number\">5.0f</span>&#125;; <span class=\"comment\">// 创建虚线模式的数组</span></div><div class=\"line\">                BasicStroke stroke = <span class=\"keyword\">new</span> BasicStroke(<span class=\"number\">1</span>, BasicStroke.CAP_BUTT,</div><div class=\"line\">                        BasicStroke.JOIN_BEVEL, <span class=\"number\">1.0f</span>, arr, <span class=\"number\">0</span>); <span class=\"comment\">// 创建宽度是1的平头虚线笔画对象</span></div><div class=\"line\">                g2.setStroke(stroke);<span class=\"comment\">// 设置笔画对象</span></div><div class=\"line\">                g2.drawRect(pressPanelX, pressPanelY, releaseX - pressX,</div><div class=\"line\">                        releaseY - pressY);<span class=\"comment\">// 绘制矩形选区</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CutImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 创建绘制裁剪结果的面板类</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            g.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight());<span class=\"comment\">// 清除绘图上下文的内容</span></div><div class=\"line\">            g.drawImage(buffImage, <span class=\"number\">0</span>, <span class=\"number\">0</span>, releaseX - pressX, releaseY - pressY,</div><div class=\"line\">                    <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"调整图片的亮度\"><a href=\"#调整图片的亮度\" class=\"headerlink\" title=\"调整图片的亮度\"></a>调整图片的亮度</h2><blockquote>\n<p><code>RescaleOp</code>类中的<code>filter</code>方法原缓冲图像进行重缩放，定义如下<br><code>public abstract BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:src是要过滤的源对象，dst是目标对象，或则为null</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.RescaleOp;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrightenFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image;<span class=\"comment\">// 用于调整亮度的缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage oldImage;<span class=\"comment\">// 用于存放调整亮度之前的原缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageBrightenPanel imageBrightenPanel = <span class=\"keyword\">new</span> ImageBrightenPanel();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        ImageBrightenFrame frame = <span class=\"keyword\">new</span> ImageBrightenFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageBrightenFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">357</span>, <span class=\"number\">276</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setTitle(<span class=\"string\">\"调整图片的亮度\"</span>);</div><div class=\"line\">        Image img = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            img = ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));  <span class=\"comment\">// 创建图像对象</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        image = <span class=\"keyword\">new</span> BufferedImage(img.getWidth(<span class=\"keyword\">this</span>), img.getHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">        BufferedImage.TYPE_INT_RGB);<span class=\"comment\">// 创建缓冲图像对象</span></div><div class=\"line\">        image.getGraphics().drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);<span class=\"comment\">// 在缓冲图像对象上绘制图像</span></div><div class=\"line\">        oldImage = image;<span class=\"comment\">// 存储原来的图像对象，用于以后的恢复操作</span></div><div class=\"line\">        getContentPane().add(imageBrightenPanel, BorderLayout.CENTER);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> a = <span class=\"number\">1.0f</span>;<span class=\"comment\">// 定义缩放因子</span></div><div class=\"line\">                <span class=\"keyword\">float</span> b = <span class=\"number\">5.0f</span>;<span class=\"comment\">// 定义偏移量</span></div><div class=\"line\">                RescaleOp op = <span class=\"keyword\">new</span> RescaleOp(a,b,<span class=\"keyword\">null</span>);<span class=\"comment\">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对源图像中的数据进行逐像素重缩放，达到变亮的效果</span></div><div class=\"line\">                repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button.setText(<span class=\"string\">\"变    亮\"</span>);</div><div class=\"line\">        panel.add(button);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_3 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_3.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> a = <span class=\"number\">1.0f</span>;<span class=\"comment\">// 定义缩放因子</span></div><div class=\"line\">                <span class=\"keyword\">float</span> b = -<span class=\"number\">5.0f</span>;<span class=\"comment\">// 定义偏移量</span></div><div class=\"line\">                RescaleOp op = <span class=\"keyword\">new</span> RescaleOp(a,b,<span class=\"keyword\">null</span>);<span class=\"comment\">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对源图像中的数据进行逐像素重缩放，达到变暗的效果</span></div><div class=\"line\">                repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_3.setText(<span class=\"string\">\"变    暗\"</span>);</div><div class=\"line\">        panel.add(button_3);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_2 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_2.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                image = oldImage;  <span class=\"comment\">// 获得变亮前的图像</span></div><div class=\"line\">                imageBrightenPanel.repaint();<span class=\"comment\">// 重新绘制原图像，即恢复为变亮前的图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_2.setText(<span class=\"string\">\"恢    复\"</span>);</div><div class=\"line\">        panel.add(button_2);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_1 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_1.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                System.exit(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_1.setText(<span class=\"string\">\"退    出\"</span>);</div><div class=\"line\">        panel.add(button_1);</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrightenPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (image != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                g.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  <span class=\"comment\">// 将缓冲图像对象绘制到面板上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p><strong>补充说明：这里的<code>RescaleOp</code>类可以调整色数，其原理是每一个样本值乘以一个缩放因子然后加上偏移量就是缩放的数，如果要变亮的话就将偏移量为正，反之为负，这里将缩放因子设置为1.0f是因为不想那么快速的变亮，如果你设置的大一点，就会很快变得很亮，反之亦然</strong></p>\n</blockquote>\n</blockquote>\n<h2 id=\"转换彩色图片为灰色图片\"><a href=\"#转换彩色图片为灰色图片\" class=\"headerlink\" title=\"转换彩色图片为灰色图片\"></a>转换彩色图片为灰色图片</h2><blockquote>\n<p>主要使用<code>ColorConvertOp</code>类，其构造函数如下<br><code>public ColorConvertOp(ColorSpace src,ColorSpace dst,RenderingHints hints)</code>:src是原颜色空间对象，dst是目标颜色空间对象，hints是用于控制颜色转换的RenderingHints对象，可以为null<br>使用<code>ColorConvertOp</code>类中的<code>filter</code>方法将彩色图像转换成灰色图像，定义如下：<br><code>public final BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:scr要过滤的对象，dst目标空间对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.color.ColorSpace;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.ColorConvertOp;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiColorToGrayFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image;</div><div class=\"line\">    <span class=\"keyword\">private</span> ColorToGrayPanel colorToGrayPanel = <span class=\"keyword\">new</span> ColorToGrayPanel();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        MultiColorToGrayFrame frame = <span class=\"keyword\">new</span> MultiColorToGrayFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MultiColorToGrayFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">357</span>, <span class=\"number\">276</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setTitle(<span class=\"string\">\"彩色图像转换为灰度\"</span>);</div><div class=\"line\">        Image img = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            img = ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));  <span class=\"comment\">// 创建图像对象</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        image = <span class=\"keyword\">new</span> BufferedImage(img.getWidth(<span class=\"keyword\">this</span>), img.getHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">                BufferedImage.TYPE_INT_RGB);<span class=\"comment\">// 创建缓冲图像对象</span></div><div class=\"line\">        image.getGraphics().drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);<span class=\"comment\">// 在缓冲图像对象上绘制图像</span></div><div class=\"line\">        </div><div class=\"line\">        getContentPane().add(colorToGrayPanel, BorderLayout.CENTER);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                ColorSpace colorSpace1 = ColorSpace.getInstance(ColorSpace.CS_GRAY);<span class=\"comment\">// 创建内置线性为灰度的颜色空间</span></div><div class=\"line\">                ColorSpace colorSpace2 = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);<span class=\"comment\">// 创建内置线性为 RGB的颜色空间</span></div><div class=\"line\">                ColorConvertOp op = <span class=\"keyword\">new</span> ColorConvertOp(colorSpace1,colorSpace2,</div><div class=\"line\">                        <span class=\"keyword\">null</span>);<span class=\"comment\">// 创建进行颜色转换的对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对缓冲图像进行颜色转换</span></div><div class=\"line\">            repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button.setText(<span class=\"string\">\"转换为灰度\"</span>);</div><div class=\"line\">        panel.add(button);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_1 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_1.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                System.exit(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_1.setText(<span class=\"string\">\"退    出\"</span>);</div><div class=\"line\">        panel.add(button_1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorToGrayPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (image != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                g.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  <span class=\"comment\">// 将缓冲图像对象绘制到面板上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>补充说明：这里的<code>image.getGraphics().drawImage(img, 0, 0, null)</code>可以删除的，因为这里Graphics类中的drawImage可以直接绘制BufferedImage类型的缓冲图像，下面会给出一段代码做个示范</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by Chenjiabing on 2017/4/5.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span>  <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image=<span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Graphics2D graphics2D=<span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> draw my_draw=<span class=\"keyword\">new</span> draw();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        demo my=<span class=\"keyword\">new</span> demo();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                image= ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));</div><div class=\"line\">                <span class=\"comment\">//graphics2D=image.createGraphics();</span></div><div class=\"line\">                <span class=\"comment\">//graphics2D.drawImage(image,0,0,null);</span></div><div class=\"line\">                <span class=\"comment\">// image.getGraphics().drawImage(image,0,0,null);</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(my_draw);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">draw</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            g.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,image.getWidth(),image.getHeight(),<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><blockquote>\n<p><strong>从文件中读取图像的方法</strong></p>\n<blockquote>\n<ul>\n<li>URL imgUrl = CutImageFrame.class.getResource(“/img/image.jpg”);//得到的是URL<br>  img = Toolkit.getDefaultToolkit().getImage(imgUrl);  //得到的是Image对象，同样的想要得到BufferedImage对象可以进行转     化</li>\n<li><code>Image img=ImageIo(new File(&quot;path&quot;));</code>这里得到的是Image对象，如果想要得到BufferedImage对象，可以用BufferedImage的构造方法BufferedImage(int width,int height,)</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"java图像处理干货篇\"><a href=\"#java图像处理干货篇\" class=\"headerlink\" title=\"java图像处理干货篇\"></a>java图像处理干货篇</h1><h2 id=\"绘制图像\"><a href=\"#绘制图像\" class=\"headerlink\" title=\"绘制图像\"></a>绘制图像</h2><blockquote>\n<p>绘制图像主要用到的是Graphics类中drawImage方法，当然Graphics2D中也有相应的方法</p>\n<blockquote>\n<p>主要的用法：</p>\n<ul>\n<li><code>public abstract boolean drawImage(Image img,x,y,ImageObserver observer)</code>:img是<code>Image</code>对象，x,y起始坐标,<code>observer</code>是观察对象</li>\n<li><code>drawImage(Image img,int x,int y,int width,int height,Imageobersver observer)</code>:<code>width</code>和<code>height</code>是指定图像的宽度和高度，主要的作用是放大和缩小图像</li>\n<li><code>drawImage(Image img,int dx1,int dy1,int dx2,int dx2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer)</code>:主要用来翻转图形,通过互换源矩形的第一个和第二个角的x坐标可以实现水平翻转，通过互换源矩形的第一个和第二个角的y坐标可以实现垂直翻转</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"翻转图像\"><a href=\"#翻转图像\" class=\"headerlink\" title=\"翻转图像\"></a>翻转图像</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Toolkit;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Image img = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PartImagePanel imagePanel = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明图像面板对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> dx1, dy1, dx2, dy2;   <span class=\"comment\">// 目标矩形第一个角与第二个角的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sx1, sy1, sx2, sy2;   <span class=\"comment\">// 源矩形第一个角与第二个角的X、Y坐标</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        PartImageFrame frame = <span class=\"keyword\">new</span> PartImageFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PartImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        URL imgUrl = PartImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class=\"comment\">// 获取图像资源</span></div><div class=\"line\">        dx2 = sx2 = <span class=\"number\">340</span>; <span class=\"comment\">// 初始化图像大小</span></div><div class=\"line\">        dy2 = sy2 = <span class=\"number\">200</span>; <span class=\"comment\">// 初始化图像大小</span></div><div class=\"line\">        imagePanel = <span class=\"keyword\">new</span> PartImagePanel();  <span class=\"comment\">// 创建图像面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">200</span>, <span class=\"number\">160</span>, <span class=\"number\">355</span>, <span class=\"number\">276</span>); <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add(imagePanel); <span class=\"comment\">// 在窗体中部位置添加图像面板对象</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"翻转图像\"</span>); <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\">        <span class=\"keyword\">final</span> JButton btn_h = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        btn_h.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 下面3行代码用于交换sx1和sx2的值</span></div><div class=\"line\">                <span class=\"keyword\">int</span> x = sx1;</div><div class=\"line\">                sx1 = sx2;</div><div class=\"line\">                sx2 = x;</div><div class=\"line\">                imagePanel.repaint();  <span class=\"comment\">// 重新调用面板类的paint()方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        btn_h.setText(<span class=\"string\">\"水平翻转\"</span>);</div><div class=\"line\">        panel.add(btn_h);</div><div class=\"line\">        <span class=\"keyword\">final</span> JButton btn_v = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        btn_v.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 下面3行代码用于交换sy1和sy2的值</span></div><div class=\"line\">                <span class=\"keyword\">int</span> y = sy1;</div><div class=\"line\">                sy1 = sy2;</div><div class=\"line\">                sy2 = y;</div><div class=\"line\">                imagePanel.repaint();<span class=\"comment\">// 重新调用面板类的paint()方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        btn_v.setText(<span class=\"string\">\"垂直翻转\"</span>);</div><div class=\"line\">        panel.add(btn_v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 创建面板类</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            g.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight());<span class=\"comment\">// 清除绘图上下文的内容</span></div><div class=\"line\">            g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h2><blockquote>\n<p>主要用到的是<code>Graphics2D</code>类中的<code>rotate</code>函数，定义如下:<code>public abstract void rotate(double theta)</code>: <code>theta</code>是角度，以弧度为单位<br><strong>代码如下</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.zzk;</div><div class=\"line\">import java.awt.*;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import javax.swing.*;</div><div class=\"line\">public class RotateImageFrame extends JFrame &#123;</div><div class=\"line\">    private Image img = null;</div><div class=\"line\">    private RotatePanel rotatePanel = null;</div><div class=\"line\">    public RotateImageFrame() &#123;</div><div class=\"line\">        URL imgUrl = RotateImageFrame.class.getResource(&quot;/img/image.jpg&quot;);// 获取图片资源的路径</div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);   // 获取图片资源</div><div class=\"line\">        rotatePanel = new RotatePanel();  // 创建旋转图像的面板对象</div><div class=\"line\">        this.setBounds(150, 120, 380, 310);                 // 设置窗体大小和位置</div><div class=\"line\">        add(rotatePanel);// 在窗体上放置图像面板</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 设置窗体关闭模式</div><div class=\"line\">        this.setTitle(&quot;旋转图像&quot;);                     // 设置窗体标题</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        new RotateImageFrame().setVisible(true);</div><div class=\"line\">    &#125;</div><div class=\"line\">    class RotatePanel extends JPanel &#123;</div><div class=\"line\">        public void paint(Graphics g) &#123;</div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;         // 获得Graphics2D对象</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">            g2.rotate(Math.toRadians(10));                 // 将图片旋转10度</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">            g2.rotate(Math.toRadians(10));                // 将图片旋转10度</div><div class=\"line\">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"倾斜图像\"><a href=\"#倾斜图像\" class=\"headerlink\" title=\"倾斜图像\"></a>倾斜图像</h2><blockquote>\n<p>主要用到的是<code>Graphics2D</code>中的<code>shear</code>函数定义如：<code>public abstract void shear(doubel shx,double shy)</code>:<code>shx</code>是在正x轴上移动坐标的乘数，它可以作为其纵坐标的值,shy是在正y轴方形移动坐标的乘数，它可以作为其x坐标的函数。<br><strong>本人的理解：<br>倾斜画布，如果shx&gt;0就是向正方向平移，平移的长度为shx*height(图形纵坐标的值，如果是矩形就是乘以矩形的高)<br>相同的对于shy是乘以矩形宽</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShearImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Image img;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ShearImagePanel canvasPanel = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShearImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        URL imgUrl = ShearImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);  <span class=\"comment\">// 获取图片资源</span></div><div class=\"line\">        canvasPanel = <span class=\"keyword\">new</span> ShearImagePanel();     <span class=\"comment\">// 创建绘制倾斜图像的面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">360</span>, <span class=\"number\">240</span>);                <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        add(canvasPanel);<span class=\"comment\">// 在窗体上添加面板对象</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"倾斜图像\"</span>);                    <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ShearImageFrame().setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShearImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 绘制倾斜图像的面板类</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">\t\t\tGraphics2D g2=(Graphics2D) g;<span class=\"comment\">// 获得Graphics2D对象</span></div><div class=\"line\">\t\t\tg2.shear(<span class=\"number\">0</span>, -<span class=\"number\">0.5</span>);<span class=\"comment\">// 倾斜图像</span></div><div class=\"line\">\t\t\tg2.drawImage(img, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">220</span>, <span class=\"number\">160</span>, <span class=\"keyword\">this</span>);     <span class=\"comment\">// 绘制指定大小的图片</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"裁剪图片\"><a href=\"#裁剪图片\" class=\"headerlink\" title=\"裁剪图片\"></a>裁剪图片</h2><blockquote>\n<p><code>public BufferedImage createScreenCapture(Rectangle screenRect)</code>:返回的是一个BufferedImage对象，参数是Rectangle对象，这个函数是Robot类中的，主要用于裁剪图形</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.AWTException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BasicStroke;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Rectangle;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Robot;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Toolkit;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseMotionAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JSplitPane;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CutImageFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Image img = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> OldImagePanel oldImagePanel = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明图像面板对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pressPanelX = <span class=\"number\">0</span>, pressPanelY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标按下点的X、Y坐标 </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pressX = <span class=\"number\">0</span>, pressY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> releaseX = <span class=\"number\">0</span>, releaseY = <span class=\"number\">0</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的X、Y坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Robot robot = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 声明Robot对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage buffImage = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> CutImagePanel cutImagePanel = <span class=\"keyword\">new</span> CutImagePanel(); <span class=\"comment\">// 创建绘制裁剪结果的面板</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;  <span class=\"comment\">// 声明标记变量，为true时显示选择区域的矩形，否则不显示</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        CutImageFrame frame = <span class=\"keyword\">new</span> CutImageFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CutImageFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        URL imgUrl = CutImageFrame.class.getResource(<span class=\"string\">\"/img/image.jpg\"</span>);<span class=\"comment\">// 获取图片资源的路径</span></div><div class=\"line\">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class=\"comment\">// 获取图像资源</span></div><div class=\"line\">        oldImagePanel = <span class=\"keyword\">new</span> OldImagePanel(); <span class=\"comment\">// 创建图像面板对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">200</span>, <span class=\"number\">160</span>, <span class=\"number\">355</span>, <span class=\"number\">276</span>); <span class=\"comment\">// 设置窗体大小和位置</span></div><div class=\"line\">        <span class=\"keyword\">final</span> JSplitPane splitPane = <span class=\"keyword\">new</span> JSplitPane();</div><div class=\"line\">        splitPane.setDividerLocation((<span class=\"keyword\">this</span>.getWidth() / <span class=\"number\">2</span>) - <span class=\"number\">10</span>);</div><div class=\"line\">        getContentPane().add(splitPane, BorderLayout.CENTER);</div><div class=\"line\">        splitPane.setLeftComponent(oldImagePanel);</div><div class=\"line\">        splitPane.setRightComponent(cutImagePanel);</div><div class=\"line\">        oldImagePanel.addMouseListener(<span class=\"keyword\">new</span> MouseAdapter() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mousePressed</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123;  <span class=\"comment\">// 鼠标键按下事件</span></div><div class=\"line\">                pressPanelX = e.getX(); <span class=\"comment\">// 获得鼠标按下点的X坐标 </span></div><div class=\"line\">                pressPanelY = e.getY();<span class=\"comment\">// 获得鼠标按下点的Y坐标 </span></div><div class=\"line\">                pressX = e.getXOnScreen() + <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的X坐标加1，即去除选择线</span></div><div class=\"line\">                pressY = e.getYOnScreen() + <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标按下点在屏幕上的Y坐标加1，即去除选择线</span></div><div class=\"line\">                flag = <span class=\"keyword\">true</span>;<span class=\"comment\">// 为标记变量赋值为true</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mouseReleased</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123; <span class=\"comment\">// 鼠标键释放事件</span></div><div class=\"line\">                releaseX = e.getXOnScreen() - <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的X坐标减1，即去除选择线</span></div><div class=\"line\">                    releaseY = e.getYOnScreen() - <span class=\"number\">1</span>;<span class=\"comment\">// 鼠标释放点在屏幕上的Y坐标减1，即去除选择线</span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    robot = <span class=\"keyword\">new</span> Robot();<span class=\"comment\">// 创建Robot对象</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (releaseX - pressX &gt; <span class=\"number\">0</span> &amp;&amp; releaseY - pressY &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        Rectangle rect = <span class=\"keyword\">new</span> Rectangle(pressX, pressY, releaseX</div><div class=\"line\">                                - pressX, releaseY - pressY);<span class=\"comment\">// 创建Rectangle对象</span></div><div class=\"line\">                        buffImage = robot.createScreenCapture(rect);<span class=\"comment\">// 获得缓冲图像对象</span></div><div class=\"line\">                        cutImagePanel.repaint(); <span class=\"comment\">// 调用CutImagePanel面板的paint()方法</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (AWTException e1) &#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                flag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 为标记变量赋值为false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        oldImagePanel.addMouseMotionListener(<span class=\"keyword\">new</span> MouseMotionAdapter() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mouseDragged</span><span class=\"params\">(<span class=\"keyword\">final</span> MouseEvent e)</span> </span>&#123;<span class=\"comment\">// 鼠标拖动事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">                    releaseX = e.getXOnScreen();<span class=\"comment\">// 获得鼠标释放点在屏幕上的X坐标</span></div><div class=\"line\">                    releaseY = e.getYOnScreen();<span class=\"comment\">// 获得鼠标释放点在屏幕上的Y坐标</span></div><div class=\"line\">                    oldImagePanel.repaint();<span class=\"comment\">// 调用OldImagePanel面板的paint()方法</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体关闭模式</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setTitle(<span class=\"string\">\"裁剪图片\"</span>); <span class=\"comment\">// 设置窗体标题</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 创建绘制原图像的面板类</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            Graphics2D g2 = (Graphics2D) g;</div><div class=\"line\">            g2.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight(), <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\">            g2.setColor(Color.WHITE);</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">                <span class=\"keyword\">float</span>[] arr = &#123;<span class=\"number\">5.0f</span>&#125;; <span class=\"comment\">// 创建虚线模式的数组</span></div><div class=\"line\">                BasicStroke stroke = <span class=\"keyword\">new</span> BasicStroke(<span class=\"number\">1</span>, BasicStroke.CAP_BUTT,</div><div class=\"line\">                        BasicStroke.JOIN_BEVEL, <span class=\"number\">1.0f</span>, arr, <span class=\"number\">0</span>); <span class=\"comment\">// 创建宽度是1的平头虚线笔画对象</span></div><div class=\"line\">                g2.setStroke(stroke);<span class=\"comment\">// 设置笔画对象</span></div><div class=\"line\">                g2.drawRect(pressPanelX, pressPanelY, releaseX - pressX,</div><div class=\"line\">                        releaseY - pressY);<span class=\"comment\">// 绘制矩形选区</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CutImagePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;<span class=\"comment\">// 创建绘制裁剪结果的面板类</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            g.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.getWidth(), <span class=\"keyword\">this</span>.getHeight());<span class=\"comment\">// 清除绘图上下文的内容</span></div><div class=\"line\">            g.drawImage(buffImage, <span class=\"number\">0</span>, <span class=\"number\">0</span>, releaseX - pressX, releaseY - pressY,</div><div class=\"line\">                    <span class=\"keyword\">this</span>);<span class=\"comment\">// 绘制图像</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"调整图片的亮度\"><a href=\"#调整图片的亮度\" class=\"headerlink\" title=\"调整图片的亮度\"></a>调整图片的亮度</h2><blockquote>\n<p><code>RescaleOp</code>类中的<code>filter</code>方法原缓冲图像进行重缩放，定义如下<br><code>public abstract BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:src是要过滤的源对象，dst是目标对象，或则为null</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.RescaleOp;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrightenFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image;<span class=\"comment\">// 用于调整亮度的缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage oldImage;<span class=\"comment\">// 用于存放调整亮度之前的原缓冲图像对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageBrightenPanel imageBrightenPanel = <span class=\"keyword\">new</span> ImageBrightenPanel();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        ImageBrightenFrame frame = <span class=\"keyword\">new</span> ImageBrightenFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageBrightenFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">357</span>, <span class=\"number\">276</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setTitle(<span class=\"string\">\"调整图片的亮度\"</span>);</div><div class=\"line\">        Image img = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            img = ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));  <span class=\"comment\">// 创建图像对象</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        image = <span class=\"keyword\">new</span> BufferedImage(img.getWidth(<span class=\"keyword\">this</span>), img.getHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">        BufferedImage.TYPE_INT_RGB);<span class=\"comment\">// 创建缓冲图像对象</span></div><div class=\"line\">        image.getGraphics().drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);<span class=\"comment\">// 在缓冲图像对象上绘制图像</span></div><div class=\"line\">        oldImage = image;<span class=\"comment\">// 存储原来的图像对象，用于以后的恢复操作</span></div><div class=\"line\">        getContentPane().add(imageBrightenPanel, BorderLayout.CENTER);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> a = <span class=\"number\">1.0f</span>;<span class=\"comment\">// 定义缩放因子</span></div><div class=\"line\">                <span class=\"keyword\">float</span> b = <span class=\"number\">5.0f</span>;<span class=\"comment\">// 定义偏移量</span></div><div class=\"line\">                RescaleOp op = <span class=\"keyword\">new</span> RescaleOp(a,b,<span class=\"keyword\">null</span>);<span class=\"comment\">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对源图像中的数据进行逐像素重缩放，达到变亮的效果</span></div><div class=\"line\">                repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button.setText(<span class=\"string\">\"变    亮\"</span>);</div><div class=\"line\">        panel.add(button);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_3 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_3.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> a = <span class=\"number\">1.0f</span>;<span class=\"comment\">// 定义缩放因子</span></div><div class=\"line\">                <span class=\"keyword\">float</span> b = -<span class=\"number\">5.0f</span>;<span class=\"comment\">// 定义偏移量</span></div><div class=\"line\">                RescaleOp op = <span class=\"keyword\">new</span> RescaleOp(a,b,<span class=\"keyword\">null</span>);<span class=\"comment\">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对源图像中的数据进行逐像素重缩放，达到变暗的效果</span></div><div class=\"line\">                repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_3.setText(<span class=\"string\">\"变    暗\"</span>);</div><div class=\"line\">        panel.add(button_3);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_2 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_2.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                image = oldImage;  <span class=\"comment\">// 获得变亮前的图像</span></div><div class=\"line\">                imageBrightenPanel.repaint();<span class=\"comment\">// 重新绘制原图像，即恢复为变亮前的图像</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_2.setText(<span class=\"string\">\"恢    复\"</span>);</div><div class=\"line\">        panel.add(button_2);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_1 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_1.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                System.exit(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_1.setText(<span class=\"string\">\"退    出\"</span>);</div><div class=\"line\">        panel.add(button_1);</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrightenPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (image != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                g.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  <span class=\"comment\">// 将缓冲图像对象绘制到面板上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p><strong>补充说明：这里的<code>RescaleOp</code>类可以调整色数，其原理是每一个样本值乘以一个缩放因子然后加上偏移量就是缩放的数，如果要变亮的话就将偏移量为正，反之为负，这里将缩放因子设置为1.0f是因为不想那么快速的变亮，如果你设置的大一点，就会很快变得很亮，反之亦然</strong></p>\n</blockquote>\n</blockquote>\n<h2 id=\"转换彩色图片为灰色图片\"><a href=\"#转换彩色图片为灰色图片\" class=\"headerlink\" title=\"转换彩色图片为灰色图片\"></a>转换彩色图片为灰色图片</h2><blockquote>\n<p>主要使用<code>ColorConvertOp</code>类，其构造函数如下<br><code>public ColorConvertOp(ColorSpace src,ColorSpace dst,RenderingHints hints)</code>:src是原颜色空间对象，dst是目标颜色空间对象，hints是用于控制颜色转换的RenderingHints对象，可以为null<br>使用<code>ColorConvertOp</code>类中的<code>filter</code>方法将彩色图像转换成灰色图像，定义如下：<br><code>public final BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:scr要过滤的对象，dst目标空间对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.BorderLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.color.ColorSpace;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.ColorConvertOp;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JButton;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiColorToGrayFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image;</div><div class=\"line\">    <span class=\"keyword\">private</span> ColorToGrayPanel colorToGrayPanel = <span class=\"keyword\">new</span> ColorToGrayPanel();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        MultiColorToGrayFrame frame = <span class=\"keyword\">new</span> MultiColorToGrayFrame();</div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MultiColorToGrayFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">357</span>, <span class=\"number\">276</span>);</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        setTitle(<span class=\"string\">\"彩色图像转换为灰度\"</span>);</div><div class=\"line\">        Image img = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            img = ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));  <span class=\"comment\">// 创建图像对象</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        image = <span class=\"keyword\">new</span> BufferedImage(img.getWidth(<span class=\"keyword\">this</span>), img.getHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">                BufferedImage.TYPE_INT_RGB);<span class=\"comment\">// 创建缓冲图像对象</span></div><div class=\"line\">        image.getGraphics().drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);<span class=\"comment\">// 在缓冲图像对象上绘制图像</span></div><div class=\"line\">        </div><div class=\"line\">        getContentPane().add(colorToGrayPanel, BorderLayout.CENTER);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                ColorSpace colorSpace1 = ColorSpace.getInstance(ColorSpace.CS_GRAY);<span class=\"comment\">// 创建内置线性为灰度的颜色空间</span></div><div class=\"line\">                ColorSpace colorSpace2 = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);<span class=\"comment\">// 创建内置线性为 RGB的颜色空间</span></div><div class=\"line\">                ColorConvertOp op = <span class=\"keyword\">new</span> ColorConvertOp(colorSpace1,colorSpace2,</div><div class=\"line\">                        <span class=\"keyword\">null</span>);<span class=\"comment\">// 创建进行颜色转换的对象</span></div><div class=\"line\">                image = op.filter(image, <span class=\"keyword\">null</span>);<span class=\"comment\">// 对缓冲图像进行颜色转换</span></div><div class=\"line\">            repaint();<span class=\"comment\">// 重新绘制图像</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button.setText(<span class=\"string\">\"转换为灰度\"</span>);</div><div class=\"line\">        panel.add(button);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> JButton button_1 = <span class=\"keyword\">new</span> JButton();</div><div class=\"line\">        button_1.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(<span class=\"keyword\">final</span> ActionEvent e)</span> </span>&#123;</div><div class=\"line\">                System.exit(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        button_1.setText(<span class=\"string\">\"退    出\"</span>);</div><div class=\"line\">        panel.add(button_1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorToGrayPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (image != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                g.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  <span class=\"comment\">// 将缓冲图像对象绘制到面板上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>补充说明：这里的<code>image.getGraphics().drawImage(img, 0, 0, null)</code>可以删除的，因为这里Graphics类中的drawImage可以直接绘制BufferedImage类型的缓冲图像，下面会给出一段代码做个示范</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by Chenjiabing on 2017/4/5.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span>  <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BufferedImage image=<span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Graphics2D graphics2D=<span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> draw my_draw=<span class=\"keyword\">new</span> draw();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        demo my=<span class=\"keyword\">new</span> demo();</div><div class=\"line\">        my.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">demo</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setBounds(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                image= ImageIO.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/img/image.jpg\"</span>));</div><div class=\"line\">                <span class=\"comment\">//graphics2D=image.createGraphics();</span></div><div class=\"line\">                <span class=\"comment\">//graphics2D.drawImage(image,0,0,null);</span></div><div class=\"line\">                <span class=\"comment\">// image.getGraphics().drawImage(image,0,0,null);</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getContentPane().add(my_draw);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">draw</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            g.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,image.getWidth(),image.getHeight(),<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><blockquote>\n<p><strong>从文件中读取图像的方法</strong></p>\n<blockquote>\n<ul>\n<li>URL imgUrl = CutImageFrame.class.getResource(“/img/image.jpg”);//得到的是URL<br>  img = Toolkit.getDefaultToolkit().getImage(imgUrl);  //得到的是Image对象，同样的想要得到BufferedImage对象可以进行转     化</li>\n<li><code>Image img=ImageIo(new File(&quot;path&quot;));</code>这里得到的是Image对象，如果想要得到BufferedImage对象，可以用BufferedImage的构造方法BufferedImage(int width,int height,)</li>\n</ul>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"java图形与文本处理一","date":"2017-03-25T04:38:51.000Z","_content":"\n# java绘制图形和文本<一>\n\n## 开篇介绍([官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh))\n> java.awt \n类 Graphics\njava.lang.Object\n继承者 java.awt.Graphics\n直接已知子类：\nDebugGraphics, Graphics2D\npublic abstract class Graphics extends Object\n     \n>Graphics 类是所有图形上下文的抽象基类，允许应用程序在组件（已经在各种设备上实现）以及闭屏图像上进行绘制。\nGraphics 对象封装了 Java 支持的基本呈现操作所需的状态信息。此状态信息包括以下属性：\n要在其上绘制的 Component 对象。\n呈现和剪贴坐标的转换原点。\n当前剪贴区。\n当前颜色。\n当前字体。\n当前逻辑像素操作函数（XOR 或 Paint）。\n当前 XOR 交替颜色（参见 setXORMode(java.awt.Color)）。\n坐标是无限细分的，并且位于输出设备的像素之间。绘制图形轮廓的操作是通过使用像素大小的画笔遍历像素间无限细分路径的操作，画笔从路径上的锚点向下和向右绘制。填充图形的操作是填充图形内部区域无限细分路径操作。呈现水平文本的操作是呈现字符字形完全位于基线坐标之上的上升部分。\n图形画笔从要遍历的路径向下和向右绘制。其含义如下：\n如果绘制一个覆盖给定矩形的图形，那么该图形与填充被相同矩形所限定的图形相比，在右侧和底边多占用一行像素。\n如果沿着与一行文本基线相同的 y 坐标绘制一条水平线，那么除了文字的所有下降部分外，该线完全画在文本的下面。\n所有作为此 Graphics 对象方法的参数而出现的坐标，都是相对于调用该方法前的此 Graphics 对象转换原点的。\n所有呈现操作仅修改当前剪贴区所限定区域内的像素，此剪贴区是由用户空间中的 Shape 指定的，并通过使用 Graphics 对象的程序来控制。此用户剪贴区 被转换到设备空间中，并与设备剪贴区 组合，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义复合剪贴区，复合剪贴区确定最终的剪贴区域。用户剪贴区不能由呈现系统修改，以反映得到的复合剪贴区。用户剪贴区只能通过 setClip 或 clipRect 方法更改。所有的绘制或写入都以当前的颜色、当前绘图模式和当前字体完成。\n\n\n>> ## 绘制直线\n> >主要用到的内容是Graphics类中的**drawLine**函数\n> > 定义：\n> > > `public abstract void drawLine(int x1,int y1,int x2,int y2)`\n> > > *x1,y1是起始点的坐标，x2,y2是尾点的坐标*\n\n> > #### 拓展\n> > > `SetColor(Color color)`\n> > > > setColor是Graphics类中的一个函数，主要是设置颜色作用，其中参数是Color类中的一个对象，用于定义自己的颜色，里面的变量的是RGB,定义的方法：`Color color=newe Color(R,G,B)`\n> > #### 代码\n\n```java   \n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n\n    public class DrawLineFrame extends JFrame {\n    DrawLinePanel linePanel = new DrawLinePanel(); \n\n    public static void main(String args[]) { // 主函数\n        DrawLineFrame frame = new DrawLineFrame(); // 创建一个继承JFrame的一个类对象\n        frame.setVisible(true); // 设置窗体可见，true为可见，false为不可见\n    }\n\n    public DrawLineFrame() {\n        super();\n        setTitle(\"绘制直线\"); // 设置窗体的标题\n        setBounds(100, 100, 273, 167); // 设置窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体的关闭方式，具体见官方文档\n        add(linePanel); // 将继承Jpanel类的容器对象添加在窗体中\n    }\n\n    class DrawLinePanel extends JPanel {   // 继承在JPanel类的一个内部类，用于定义直线\n        public void paint(Graphics g) {    // 重写JCommponent类中的paint方法，用来绘制直线\n            Color color=new Color(Color.Red);//这里用的是Color提供的颜色，当然读者也可以自己定义RGB颜色\n            g.setColor(Color);//将颜色作用于绘图上下文\n            g.drawLine(70, 50, 180, 50);   // 调用方法\n            g.drawLine(70, 80, 180, 80);   // 第二条直线\n            g.drawLine(110, 10, 140, 120); // 第三条\n        }\n    }\n}\n```\n\n> >## 绘制矩形\n> >主要用到的函数是：`public  abstract void drawRect(int x,int y,int width,int height)`这里的x,y是矩形左上角的坐标，width，height是矩形的长和宽\n> > > ### 拓展\n> > > `fillRect(int x,int y,int width,int height)`:绘制实心矩形\n> > > ### 代码\n\n```java\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawRectangleFrame extends JFrame     {\n    DrawRectanglePanel rectPanel = new     DrawRectanglePanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        DrawRectangleFrame frame = new DrawRectangleFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public DrawRectangleFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制矩形\"); // 窗体标题\n        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(rectPanel); // 将面板类的实例添加到窗体容器中\n    }\n    \n    class DrawRectanglePanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) {       // 重写paint()方法\n            g.drawRect(30, 40, 80, 60);       // 绘制空心矩形\n            g.fillRect(140, 40, 80, 60);      // 绘制实心矩形\n        }\n    }\n    }\n```\n    \n>>### 绘制椭圆\n>>>函数：`public abstract void drawOval(int x,int y,int width,int height)`,其中x,y是外切矩形的左上角的坐标，width，height是长宽\n>>>>## 拓展\n>>>>>其中将令width=height，即是一个圆了，`fillOval(int x,int y,int width,int height)`用来绘制实心的椭圆\n>>>>>### 代码\n\n```java\n\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n\n    public class DrawEllipseFrame extends JFrame {\n    DrawEllipsePanel ellipsePanel = new DrawEllipsePanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        DrawEllipseFrame frame = new DrawEllipseFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public DrawEllipseFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制椭圆\"); // 窗体标题\n        setBounds(100, 100, 269, 222); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(ellipsePanel); // 将面板类的实例添加到窗体容器中\n    }\n    \n    class DrawEllipsePanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) {     // 重写paint()方法\n            g.drawOval(30, 20, 80, 50);     // 绘制空心椭圆\n            g.drawOval(150, 10, 50, 80);    // 绘制空心椭圆\n            g.fillOval(40, 90, 50, 80);     // 绘制实心椭圆\n            g.fillOval(140, 110, 80, 50);   // 绘制实心椭圆\n        }\n    }\n    }\n    \n```    \n\n>>## 绘制圆弧\n>>>主要用到的函数`public astract void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle)`，其中x,y是要绘制圆弧的左上角的坐标，width，height是要绘制的长宽，startAngle是开始角度，arcAngle是相对于开始角度而言的，弧跨越的角度，\n>>>>### 拓展:\n>>>>>fillArc(int x,int y,int width,int height,int startAngle,int arcAngle)用来绘制实心圆弧\n>>>>>当然你也可以用这个来绘制扇形，用drawLine方法将圆弧的两端连起来就可以了，不过这个对坐标的精确度就要求很高了，暂时不想费那个脑筋来搞了\n>>>>### 代码\n\n```java\n\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawArcFrame extends JFrame {\n    DrawArcPanel arcPanel = new DrawArcPanel(); // 创建面板类的实例\n    public static void main(String args[]) { // 主方法\n        DrawArcFrame frame = new DrawArcFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public DrawArcFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制圆弧\"); // 窗体标题\n        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(arcPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class DrawArcPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            g.drawArc(20, 20, 80, 80, 0, 120);    // 绘制圆弧\n            g.drawArc(20, 40, 80, 80, 0, -120);   // 绘制圆弧\n            g.drawArc(150, 20, 80, 80, 180, -120);// 绘制圆弧\n            g.drawArc(150, 40, 80, 80, 180, 120); // 绘制圆弧\n        }\n    }\n    }\n```\n   \n>>## 绘制多边形\n>>>主要用到的函数是：`public abstract void drawPolygon(int[] xpoints,int[] ypoints,int npoints)`，其中xpoints：要绘制多边形的x坐标组，ypoints是要绘制多边形的y坐标组，npoints是多边形的n条边\n>>>### 拓展\n>>>>`fillPolygon(...)`是绘制实心多边形的函数\n>>>### 代码\n\n```java\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawSectorFrame extends JFrame {\n    DrawSectorPanel sectorPanel = new DrawSectorPanel(); // 创建面板类的实例\n    public static void main(String args[]) { // 主方法\n        DrawSectorFrame frame = new DrawSectorFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public DrawSectorFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制填充扇形\"); // 窗体标题\n        setBounds(100, 100, 278, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(sectorPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class DrawSectorPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            g.fillArc(40, 20, 80, 80, 0, 150);    // 绘制填充扇形\n            g.fillArc(140, 20, 80, 80, 180, -150);// 绘制填充扇形\n            g.fillArc(40, 40, 80, 80, 0, -110);   // 绘制填充扇形\n            g.fillArc(140, 40, 80, 80, 180, 110); // 绘制填充扇形\n        }\n    }\n    }\n```\n\n\n>>## 绘制文本\n>>>主要用到的函数是：`public abstract void drawString(String value,int x,int y)`,其中value是要绘制的文本，x,y是第一个字的坐标\n>>>### 拓展\n>>>>SetFont(Font font):这个函数是用来设置文本的字体大小，颜色的，其中参数font是Font类中的\n>>>### 代码\n\n```java\n    package com.zzk;\n\n    import java.awt.Font;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class TextFontFrame extends JFrame {\n    ChangeTextFontPanel changeTextFontPanel = new ChangeTextFontPanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        TextFontFrame frame = new TextFontFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public TextFontFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"设置文本的字体\"); // 窗体标题\n        setBounds(100, 100, 333, 199); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(changeTextFontPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class ChangeTextFontPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            String value = \"明日编程词典社区\";\n            int x = 40; // 文本位置的横坐标\n            int y = 50; // 文本位置的纵坐标\n            Font font = new Font(\"华文行楷\", Font.BOLD + Font.ITALIC, 26); // 创建字体对象\n            g.setFont(font); // 设置字体\n            g.drawString(value, x, y); // 绘制文本\n            value = \"http://community.mrbccd.com\";\n            x = 10; // 文本位置的横坐标\n            y = 100; // 文本位置的纵坐标\n            font = new Font(\"宋体\", Font.BOLD, 20); // 创建字体对象\n            g.setFont(font); // 设置字体\n            g.drawString(value, x, y); // 绘制文本\n        }\n    }\n    }\n\n```\n    \n>>>>#### 补充\n>>>>>字体样式包括Font.BLOD(粗体)，Font.ITALIC(斜体)，Font.PLAIN(普通字体)，其中如果要设置两种样式，可以用\"+\"连接，如：`Font.BLOD+Font.ITALIC`，这样就会同时设置了斜体和粗体样式\n\n**以上是本人的学习成果，通过不断的学习和探索，发现网上没有什么系统的学习java图形处理的文章，就下定决心准备好好写，于是前几天就花了一晚上的时间搭建了博客，以前都是在CSDN上写的，发现在那上面写，没有逼格，为了提高逼格，自己撸了一个博客，让我来自由发挥，另外喜欢编程的朋友可以加我的联系方式，我们可以一起探讨，在下面留言也是可以的哦,联系方式可以在我的*关于我*可以找到**\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n","source":"_posts/java图形与文本处理一.md","raw":"---\ntitle: java图形与文本处理一\ndate: 2017-03-25 12:38:51\ncategories: java学习\ntags: java图形与文本处理 \n---\n\n# java绘制图形和文本<一>\n\n## 开篇介绍([官方文档](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh))\n> java.awt \n类 Graphics\njava.lang.Object\n继承者 java.awt.Graphics\n直接已知子类：\nDebugGraphics, Graphics2D\npublic abstract class Graphics extends Object\n     \n>Graphics 类是所有图形上下文的抽象基类，允许应用程序在组件（已经在各种设备上实现）以及闭屏图像上进行绘制。\nGraphics 对象封装了 Java 支持的基本呈现操作所需的状态信息。此状态信息包括以下属性：\n要在其上绘制的 Component 对象。\n呈现和剪贴坐标的转换原点。\n当前剪贴区。\n当前颜色。\n当前字体。\n当前逻辑像素操作函数（XOR 或 Paint）。\n当前 XOR 交替颜色（参见 setXORMode(java.awt.Color)）。\n坐标是无限细分的，并且位于输出设备的像素之间。绘制图形轮廓的操作是通过使用像素大小的画笔遍历像素间无限细分路径的操作，画笔从路径上的锚点向下和向右绘制。填充图形的操作是填充图形内部区域无限细分路径操作。呈现水平文本的操作是呈现字符字形完全位于基线坐标之上的上升部分。\n图形画笔从要遍历的路径向下和向右绘制。其含义如下：\n如果绘制一个覆盖给定矩形的图形，那么该图形与填充被相同矩形所限定的图形相比，在右侧和底边多占用一行像素。\n如果沿着与一行文本基线相同的 y 坐标绘制一条水平线，那么除了文字的所有下降部分外，该线完全画在文本的下面。\n所有作为此 Graphics 对象方法的参数而出现的坐标，都是相对于调用该方法前的此 Graphics 对象转换原点的。\n所有呈现操作仅修改当前剪贴区所限定区域内的像素，此剪贴区是由用户空间中的 Shape 指定的，并通过使用 Graphics 对象的程序来控制。此用户剪贴区 被转换到设备空间中，并与设备剪贴区 组合，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义复合剪贴区，复合剪贴区确定最终的剪贴区域。用户剪贴区不能由呈现系统修改，以反映得到的复合剪贴区。用户剪贴区只能通过 setClip 或 clipRect 方法更改。所有的绘制或写入都以当前的颜色、当前绘图模式和当前字体完成。\n\n\n>> ## 绘制直线\n> >主要用到的内容是Graphics类中的**drawLine**函数\n> > 定义：\n> > > `public abstract void drawLine(int x1,int y1,int x2,int y2)`\n> > > *x1,y1是起始点的坐标，x2,y2是尾点的坐标*\n\n> > #### 拓展\n> > > `SetColor(Color color)`\n> > > > setColor是Graphics类中的一个函数，主要是设置颜色作用，其中参数是Color类中的一个对象，用于定义自己的颜色，里面的变量的是RGB,定义的方法：`Color color=newe Color(R,G,B)`\n> > #### 代码\n\n```java   \n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n\n    public class DrawLineFrame extends JFrame {\n    DrawLinePanel linePanel = new DrawLinePanel(); \n\n    public static void main(String args[]) { // 主函数\n        DrawLineFrame frame = new DrawLineFrame(); // 创建一个继承JFrame的一个类对象\n        frame.setVisible(true); // 设置窗体可见，true为可见，false为不可见\n    }\n\n    public DrawLineFrame() {\n        super();\n        setTitle(\"绘制直线\"); // 设置窗体的标题\n        setBounds(100, 100, 273, 167); // 设置窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置窗体的关闭方式，具体见官方文档\n        add(linePanel); // 将继承Jpanel类的容器对象添加在窗体中\n    }\n\n    class DrawLinePanel extends JPanel {   // 继承在JPanel类的一个内部类，用于定义直线\n        public void paint(Graphics g) {    // 重写JCommponent类中的paint方法，用来绘制直线\n            Color color=new Color(Color.Red);//这里用的是Color提供的颜色，当然读者也可以自己定义RGB颜色\n            g.setColor(Color);//将颜色作用于绘图上下文\n            g.drawLine(70, 50, 180, 50);   // 调用方法\n            g.drawLine(70, 80, 180, 80);   // 第二条直线\n            g.drawLine(110, 10, 140, 120); // 第三条\n        }\n    }\n}\n```\n\n> >## 绘制矩形\n> >主要用到的函数是：`public  abstract void drawRect(int x,int y,int width,int height)`这里的x,y是矩形左上角的坐标，width，height是矩形的长和宽\n> > > ### 拓展\n> > > `fillRect(int x,int y,int width,int height)`:绘制实心矩形\n> > > ### 代码\n\n```java\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawRectangleFrame extends JFrame     {\n    DrawRectanglePanel rectPanel = new     DrawRectanglePanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        DrawRectangleFrame frame = new DrawRectangleFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public DrawRectangleFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制矩形\"); // 窗体标题\n        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(rectPanel); // 将面板类的实例添加到窗体容器中\n    }\n    \n    class DrawRectanglePanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) {       // 重写paint()方法\n            g.drawRect(30, 40, 80, 60);       // 绘制空心矩形\n            g.fillRect(140, 40, 80, 60);      // 绘制实心矩形\n        }\n    }\n    }\n```\n    \n>>### 绘制椭圆\n>>>函数：`public abstract void drawOval(int x,int y,int width,int height)`,其中x,y是外切矩形的左上角的坐标，width，height是长宽\n>>>>## 拓展\n>>>>>其中将令width=height，即是一个圆了，`fillOval(int x,int y,int width,int height)`用来绘制实心的椭圆\n>>>>>### 代码\n\n```java\n\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n\n    public class DrawEllipseFrame extends JFrame {\n    DrawEllipsePanel ellipsePanel = new DrawEllipsePanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        DrawEllipseFrame frame = new DrawEllipseFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    \n    public DrawEllipseFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制椭圆\"); // 窗体标题\n        setBounds(100, 100, 269, 222); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(ellipsePanel); // 将面板类的实例添加到窗体容器中\n    }\n    \n    class DrawEllipsePanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) {     // 重写paint()方法\n            g.drawOval(30, 20, 80, 50);     // 绘制空心椭圆\n            g.drawOval(150, 10, 50, 80);    // 绘制空心椭圆\n            g.fillOval(40, 90, 50, 80);     // 绘制实心椭圆\n            g.fillOval(140, 110, 80, 50);   // 绘制实心椭圆\n        }\n    }\n    }\n    \n```    \n\n>>## 绘制圆弧\n>>>主要用到的函数`public astract void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle)`，其中x,y是要绘制圆弧的左上角的坐标，width，height是要绘制的长宽，startAngle是开始角度，arcAngle是相对于开始角度而言的，弧跨越的角度，\n>>>>### 拓展:\n>>>>>fillArc(int x,int y,int width,int height,int startAngle,int arcAngle)用来绘制实心圆弧\n>>>>>当然你也可以用这个来绘制扇形，用drawLine方法将圆弧的两端连起来就可以了，不过这个对坐标的精确度就要求很高了，暂时不想费那个脑筋来搞了\n>>>>### 代码\n\n```java\n\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawArcFrame extends JFrame {\n    DrawArcPanel arcPanel = new DrawArcPanel(); // 创建面板类的实例\n    public static void main(String args[]) { // 主方法\n        DrawArcFrame frame = new DrawArcFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public DrawArcFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制圆弧\"); // 窗体标题\n        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(arcPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class DrawArcPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            g.drawArc(20, 20, 80, 80, 0, 120);    // 绘制圆弧\n            g.drawArc(20, 40, 80, 80, 0, -120);   // 绘制圆弧\n            g.drawArc(150, 20, 80, 80, 180, -120);// 绘制圆弧\n            g.drawArc(150, 40, 80, 80, 180, 120); // 绘制圆弧\n        }\n    }\n    }\n```\n   \n>>## 绘制多边形\n>>>主要用到的函数是：`public abstract void drawPolygon(int[] xpoints,int[] ypoints,int npoints)`，其中xpoints：要绘制多边形的x坐标组，ypoints是要绘制多边形的y坐标组，npoints是多边形的n条边\n>>>### 拓展\n>>>>`fillPolygon(...)`是绘制实心多边形的函数\n>>>### 代码\n\n```java\n    package com.zzk;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class DrawSectorFrame extends JFrame {\n    DrawSectorPanel sectorPanel = new DrawSectorPanel(); // 创建面板类的实例\n    public static void main(String args[]) { // 主方法\n        DrawSectorFrame frame = new DrawSectorFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public DrawSectorFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"绘制填充扇形\"); // 窗体标题\n        setBounds(100, 100, 278, 184); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(sectorPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class DrawSectorPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            g.fillArc(40, 20, 80, 80, 0, 150);    // 绘制填充扇形\n            g.fillArc(140, 20, 80, 80, 180, -150);// 绘制填充扇形\n            g.fillArc(40, 40, 80, 80, 0, -110);   // 绘制填充扇形\n            g.fillArc(140, 40, 80, 80, 180, 110); // 绘制填充扇形\n        }\n    }\n    }\n```\n\n\n>>## 绘制文本\n>>>主要用到的函数是：`public abstract void drawString(String value,int x,int y)`,其中value是要绘制的文本，x,y是第一个字的坐标\n>>>### 拓展\n>>>>SetFont(Font font):这个函数是用来设置文本的字体大小，颜色的，其中参数font是Font类中的\n>>>### 代码\n\n```java\n    package com.zzk;\n\n    import java.awt.Font;\n    import java.awt.Graphics;\n    import javax.swing.JFrame;\n    import javax.swing.JPanel;\n    public class TextFontFrame extends JFrame {\n    ChangeTextFontPanel changeTextFontPanel = new ChangeTextFontPanel(); // 创建面板类的实例\n    \n    public static void main(String args[]) { // 主方法\n        TextFontFrame frame = new TextFontFrame(); // 创建窗体类的实例\n        frame.setVisible(true); // 显示窗体\n    }\n    public TextFontFrame() {\n        super(); // 调用超类的构造方法\n        setTitle(\"设置文本的字体\"); // 窗体标题\n        setBounds(100, 100, 333, 199); // 窗体的显示位置和大小\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式\n        add(changeTextFontPanel); // 将面板类的实例添加到窗体容器中\n    }\n    class ChangeTextFontPanel extends JPanel { // 创建内部面板类\n        public void paint(Graphics g) { // 重写paint()方法\n            String value = \"明日编程词典社区\";\n            int x = 40; // 文本位置的横坐标\n            int y = 50; // 文本位置的纵坐标\n            Font font = new Font(\"华文行楷\", Font.BOLD + Font.ITALIC, 26); // 创建字体对象\n            g.setFont(font); // 设置字体\n            g.drawString(value, x, y); // 绘制文本\n            value = \"http://community.mrbccd.com\";\n            x = 10; // 文本位置的横坐标\n            y = 100; // 文本位置的纵坐标\n            font = new Font(\"宋体\", Font.BOLD, 20); // 创建字体对象\n            g.setFont(font); // 设置字体\n            g.drawString(value, x, y); // 绘制文本\n        }\n    }\n    }\n\n```\n    \n>>>>#### 补充\n>>>>>字体样式包括Font.BLOD(粗体)，Font.ITALIC(斜体)，Font.PLAIN(普通字体)，其中如果要设置两种样式，可以用\"+\"连接，如：`Font.BLOD+Font.ITALIC`，这样就会同时设置了斜体和粗体样式\n\n**以上是本人的学习成果，通过不断的学习和探索，发现网上没有什么系统的学习java图形处理的文章，就下定决心准备好好写，于是前几天就花了一晚上的时间搭建了博客，以前都是在CSDN上写的，发现在那上面写，没有逼格，为了提高逼格，自己撸了一个博客，让我来自由发挥，另外喜欢编程的朋友可以加我的联系方式，我们可以一起探讨，在下面留言也是可以的哦,联系方式可以在我的*关于我*可以找到**\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n","slug":"java图形与文本处理一","published":1,"updated":"2017-03-27T03:40:43.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahway0001gl0uzyl5omp23","content":"<h1 id=\"java绘制图形和文本-lt-一-gt\"><a href=\"#java绘制图形和文本-lt-一-gt\" class=\"headerlink\" title=\"java绘制图形和文本&lt;一&gt;\"></a>java绘制图形和文本&lt;一&gt;</h1><h2 id=\"开篇介绍-官方文档\"><a href=\"#开篇介绍-官方文档\" class=\"headerlink\" title=\"开篇介绍(官方文档)\"></a>开篇介绍(<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"external\">官方文档</a>)</h2><blockquote>\n<p>java.awt<br>类 Graphics<br>java.lang.Object<br>继承者 java.awt.Graphics<br>直接已知子类：<br>DebugGraphics, Graphics2D<br>public abstract class Graphics extends Object</p>\n<p>Graphics 类是所有图形上下文的抽象基类，允许应用程序在组件（已经在各种设备上实现）以及闭屏图像上进行绘制。<br>Graphics 对象封装了 Java 支持的基本呈现操作所需的状态信息。此状态信息包括以下属性：<br>要在其上绘制的 Component 对象。<br>呈现和剪贴坐标的转换原点。<br>当前剪贴区。<br>当前颜色。<br>当前字体。<br>当前逻辑像素操作函数（XOR 或 Paint）。<br>当前 XOR 交替颜色（参见 setXORMode(java.awt.Color)）。<br>坐标是无限细分的，并且位于输出设备的像素之间。绘制图形轮廓的操作是通过使用像素大小的画笔遍历像素间无限细分路径的操作，画笔从路径上的锚点向下和向右绘制。填充图形的操作是填充图形内部区域无限细分路径操作。呈现水平文本的操作是呈现字符字形完全位于基线坐标之上的上升部分。<br>图形画笔从要遍历的路径向下和向右绘制。其含义如下：<br>如果绘制一个覆盖给定矩形的图形，那么该图形与填充被相同矩形所限定的图形相比，在右侧和底边多占用一行像素。<br>如果沿着与一行文本基线相同的 y 坐标绘制一条水平线，那么除了文字的所有下降部分外，该线完全画在文本的下面。<br>所有作为此 Graphics 对象方法的参数而出现的坐标，都是相对于调用该方法前的此 Graphics 对象转换原点的。<br>所有呈现操作仅修改当前剪贴区所限定区域内的像素，此剪贴区是由用户空间中的 Shape 指定的，并通过使用 Graphics 对象的程序来控制。此用户剪贴区 被转换到设备空间中，并与设备剪贴区 组合，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义复合剪贴区，复合剪贴区确定最终的剪贴区域。用户剪贴区不能由呈现系统修改，以反映得到的复合剪贴区。用户剪贴区只能通过 setClip 或 clipRect 方法更改。所有的绘制或写入都以当前的颜色、当前绘图模式和当前字体完成。</p>\n<blockquote>\n<h2 id=\"绘制直线\"><a href=\"#绘制直线\" class=\"headerlink\" title=\"绘制直线\"></a>绘制直线</h2><p>主要用到的内容是Graphics类中的<strong>drawLine</strong>函数<br>定义：</p>\n<blockquote>\n<p><code>public abstract void drawLine(int x1,int y1,int x2,int y2)</code><br><em>x1,y1是起始点的坐标，x2,y2是尾点的坐标</em></p>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><blockquote>\n<p><code>SetColor(Color color)</code></p>\n<blockquote>\n<p>setColor是Graphics类中的一个函数，主要是设置颜色作用，其中参数是Color类中的一个对象，用于定义自己的颜色，里面的变量的是RGB,定义的方法：<code>Color color=newe Color(R,G,B)</code></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\">    <span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\">    <span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawLineFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    DrawLinePanel linePanel = <span class=\"keyword\">new</span> DrawLinePanel(); </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主函数</span></div><div class=\"line\">        DrawLineFrame frame = <span class=\"keyword\">new</span> DrawLineFrame(); <span class=\"comment\">// 创建一个继承JFrame的一个类对象</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 设置窗体可见，true为可见，false为不可见</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawLineFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setTitle(<span class=\"string\">\"绘制直线\"</span>); <span class=\"comment\">// 设置窗体的标题</span></div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">273</span>, <span class=\"number\">167</span>); <span class=\"comment\">// 设置窗体的显示位置和大小</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体的关闭方式，具体见官方文档</span></div><div class=\"line\">        add(linePanel); <span class=\"comment\">// 将继承Jpanel类的容器对象添加在窗体中</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawLinePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;   <span class=\"comment\">// 继承在JPanel类的一个内部类，用于定义直线</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;    <span class=\"comment\">// 重写JCommponent类中的paint方法，用来绘制直线</span></div><div class=\"line\">            Color color=<span class=\"keyword\">new</span> Color(Color.Red);<span class=\"comment\">//这里用的是Color提供的颜色，当然读者也可以自己定义RGB颜色</span></div><div class=\"line\">            g.setColor(Color);<span class=\"comment\">//将颜色作用于绘图上下文</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">70</span>, <span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">50</span>);   <span class=\"comment\">// 调用方法</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">70</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, <span class=\"number\">80</span>);   <span class=\"comment\">// 第二条直线</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">110</span>, <span class=\"number\">10</span>, <span class=\"number\">140</span>, <span class=\"number\">120</span>); <span class=\"comment\">// 第三条</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p>主要用到的函数是：<code>public  abstract void drawRect(int x,int y,int width,int height)</code>这里的x,y是矩形左上角的坐标，width，height是矩形的长和宽</p>\n<blockquote>\n<h3 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p><code>fillRect(int x,int y,int width,int height)</code>:绘制实心矩形</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawRectangleFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span>     </span>&#123;</div><div class=\"line\">DrawRectanglePanel rectPanel = <span class=\"keyword\">new</span>     DrawRectanglePanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    DrawRectangleFrame frame = <span class=\"keyword\">new</span> DrawRectangleFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawRectangleFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"绘制矩形\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">269</span>, <span class=\"number\">184</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(rectPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawRectanglePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;       <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        g.drawRect(<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">60</span>);       <span class=\"comment\">// 绘制空心矩形</span></div><div class=\"line\">        g.fillRect(<span class=\"number\">140</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">60</span>);      <span class=\"comment\">// 绘制实心矩形</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"绘制椭圆\"><a href=\"#绘制椭圆\" class=\"headerlink\" title=\"绘制椭圆\"></a>绘制椭圆</h3><blockquote>\n<p>函数：<code>public abstract void drawOval(int x,int y,int width,int height)</code>,其中x,y是外切矩形的左上角的坐标，width，height是长宽</p>\n<blockquote>\n<h2 id=\"拓展-2\"><a href=\"#拓展-2\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><blockquote>\n<p>其中将令width=height，即是一个圆了，<code>fillOval(int x,int y,int width,int height)</code>用来绘制实心的椭圆</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    package com.zzk;</div><div class=\"line\">    import java.awt.Graphics;</div><div class=\"line\">    import javax.swing.JFrame;</div><div class=\"line\">    import javax.swing.JPanel;</div><div class=\"line\"></div><div class=\"line\">    public class DrawEllipseFrame extends JFrame &#123;</div><div class=\"line\">    DrawEllipsePanel ellipsePanel = new DrawEllipsePanel(); // 创建面板类的实例</div><div class=\"line\">    </div><div class=\"line\">    public static void main(String args[]) &#123; // 主方法</div><div class=\"line\">        DrawEllipseFrame frame = new DrawEllipseFrame(); // 创建窗体类的实例</div><div class=\"line\">        frame.setVisible(true); // 显示窗体</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public DrawEllipseFrame() &#123;</div><div class=\"line\">        super(); // 调用超类的构造方法</div><div class=\"line\">        setTitle(\"绘制椭圆\"); // 窗体标题</div><div class=\"line\">        setBounds(100, 100, 269, 222); // 窗体的显示位置和大小</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式</div><div class=\"line\">        add(ellipsePanel); // 将面板类的实例添加到窗体容器中</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    class DrawEllipsePanel extends JPanel &#123; // 创建内部面板类</div><div class=\"line\">        public void paint(Graphics g) &#123;     // 重写paint()方法</div><div class=\"line\">            g.drawOval(30, 20, 80, 50);     // 绘制空心椭圆</div><div class=\"line\">            g.drawOval(150, 10, 50, 80);    // 绘制空心椭圆</div><div class=\"line\">            g.fillOval(40, 90, 50, 80);     // 绘制实心椭圆</div><div class=\"line\">            g.fillOval(140, 110, 80, 50);   // 绘制实心椭圆</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">&gt;&gt;## 绘制圆弧</div><div class=\"line\">&gt;&gt;&gt;主要用到的函数`public astract void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle)`，其中x,y是要绘制圆弧的左上角的坐标，width，height是要绘制的长宽，startAngle是开始角度，arcAngle是相对于开始角度而言的，弧跨越的角度，</div><div class=\"line\">&gt;&gt;&gt;&gt;### 拓展:</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;fillArc(int x,int y,int width,int height,int startAngle,int arcAngle)用来绘制实心圆弧</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;当然你也可以用这个来绘制扇形，用drawLine方法将圆弧的两端连起来就可以了，不过这个对坐标的精确度就要求很高了，暂时不想费那个脑筋来搞了</div><div class=\"line\">&gt;&gt;&gt;&gt;### 代码</div><div class=\"line\"></div><div class=\"line\">```java</div><div class=\"line\"></div><div class=\"line\">    package com.zzk;</div><div class=\"line\">    import java.awt.Graphics;</div><div class=\"line\">    import javax.swing.JFrame;</div><div class=\"line\">    import javax.swing.JPanel;</div><div class=\"line\">    public class DrawArcFrame extends JFrame &#123;</div><div class=\"line\">    DrawArcPanel arcPanel = new DrawArcPanel(); // 创建面板类的实例</div><div class=\"line\">    public static void main(String args[]) &#123; // 主方法</div><div class=\"line\">        DrawArcFrame frame = new DrawArcFrame(); // 创建窗体类的实例</div><div class=\"line\">        frame.setVisible(true); // 显示窗体</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DrawArcFrame() &#123;</div><div class=\"line\">        super(); // 调用超类的构造方法</div><div class=\"line\">        setTitle(\"绘制圆弧\"); // 窗体标题</div><div class=\"line\">        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式</div><div class=\"line\">        add(arcPanel); // 将面板类的实例添加到窗体容器中</div><div class=\"line\">    &#125;</div><div class=\"line\">    class DrawArcPanel extends JPanel &#123; // 创建内部面板类</div><div class=\"line\">        public void paint(Graphics g) &#123; // 重写paint()方法</div><div class=\"line\">            g.drawArc(20, 20, 80, 80, 0, 120);    // 绘制圆弧</div><div class=\"line\">            g.drawArc(20, 40, 80, 80, 0, -120);   // 绘制圆弧</div><div class=\"line\">            g.drawArc(150, 20, 80, 80, 180, -120);// 绘制圆弧</div><div class=\"line\">            g.drawArc(150, 40, 80, 80, 180, 120); // 绘制圆弧</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制多边形\"><a href=\"#绘制多边形\" class=\"headerlink\" title=\"绘制多边形\"></a>绘制多边形</h2><blockquote>\n<p>主要用到的函数是：<code>public abstract void drawPolygon(int[] xpoints,int[] ypoints,int npoints)</code>，其中xpoints：要绘制多边形的x坐标组，ypoints是要绘制多边形的y坐标组，npoints是多边形的n条边</p>\n<h3 id=\"拓展-3\"><a href=\"#拓展-3\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><blockquote>\n<p><code>fillPolygon(...)</code>是绘制实心多边形的函数</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawSectorFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">DrawSectorPanel sectorPanel = <span class=\"keyword\">new</span> DrawSectorPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    DrawSectorFrame frame = <span class=\"keyword\">new</span> DrawSectorFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawSectorFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"绘制填充扇形\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">278</span>, <span class=\"number\">184</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(sectorPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawSectorPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123; <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">40</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>);    <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">140</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, -<span class=\"number\">150</span>);<span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">40</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, -<span class=\"number\">110</span>);   <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">140</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, <span class=\"number\">110</span>); <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h2><blockquote>\n<p>主要用到的函数是：<code>public abstract void drawString(String value,int x,int y)</code>,其中value是要绘制的文本，x,y是第一个字的坐标</p>\n<h3 id=\"拓展-4\"><a href=\"#拓展-4\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><blockquote>\n<p>SetFont(Font font):这个函数是用来设置文本的字体大小，颜色的，其中参数font是Font类中的</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFontFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">ChangeTextFontPanel changeTextFontPanel = <span class=\"keyword\">new</span> ChangeTextFontPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    TextFontFrame frame = <span class=\"keyword\">new</span> TextFontFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextFontFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"设置文本的字体\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">333</span>, <span class=\"number\">199</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(changeTextFontPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeTextFontPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123; <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        String value = <span class=\"string\">\"明日编程词典社区\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">40</span>; <span class=\"comment\">// 文本位置的横坐标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">50</span>; <span class=\"comment\">// 文本位置的纵坐标</span></div><div class=\"line\">        Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"华文行楷\"</span>, Font.BOLD + Font.ITALIC, <span class=\"number\">26</span>); <span class=\"comment\">// 创建字体对象</span></div><div class=\"line\">        g.setFont(font); <span class=\"comment\">// 设置字体</span></div><div class=\"line\">        g.drawString(value, x, y); <span class=\"comment\">// 绘制文本</span></div><div class=\"line\">        value = <span class=\"string\">\"http://community.mrbccd.com\"</span>;</div><div class=\"line\">        x = <span class=\"number\">10</span>; <span class=\"comment\">// 文本位置的横坐标</span></div><div class=\"line\">        y = <span class=\"number\">100</span>; <span class=\"comment\">// 文本位置的纵坐标</span></div><div class=\"line\">        font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">20</span>); <span class=\"comment\">// 创建字体对象</span></div><div class=\"line\">        g.setFont(font); <span class=\"comment\">// 设置字体</span></div><div class=\"line\">        g.drawString(value, x, y); <span class=\"comment\">// 绘制文本</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><blockquote>\n<p>字体样式包括Font.BLOD(粗体)，Font.ITALIC(斜体)，Font.PLAIN(普通字体)，其中如果要设置两种样式，可以用”+”连接，如：<code>Font.BLOD+Font.ITALIC</code>，这样就会同时设置了斜体和粗体样式</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><strong>以上是本人的学习成果，通过不断的学习和探索，发现网上没有什么系统的学习java图形处理的文章，就下定决心准备好好写，于是前几天就花了一晚上的时间搭建了博客，以前都是在CSDN上写的，发现在那上面写，没有逼格，为了提高逼格，自己撸了一个博客，让我来自由发挥，另外喜欢编程的朋友可以加我的联系方式，我们可以一起探讨，在下面留言也是可以的哦,联系方式可以在我的<em>关于我</em>可以找到</strong></p>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"java绘制图形和文本-lt-一-gt\"><a href=\"#java绘制图形和文本-lt-一-gt\" class=\"headerlink\" title=\"java绘制图形和文本&lt;一&gt;\"></a>java绘制图形和文本&lt;一&gt;</h1><h2 id=\"开篇介绍-官方文档\"><a href=\"#开篇介绍-官方文档\" class=\"headerlink\" title=\"开篇介绍(官方文档)\"></a>开篇介绍(<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\">官方文档</a>)</h2><blockquote>\n<p>java.awt<br>类 Graphics<br>java.lang.Object<br>继承者 java.awt.Graphics<br>直接已知子类：<br>DebugGraphics, Graphics2D<br>public abstract class Graphics extends Object</p>\n<p>Graphics 类是所有图形上下文的抽象基类，允许应用程序在组件（已经在各种设备上实现）以及闭屏图像上进行绘制。<br>Graphics 对象封装了 Java 支持的基本呈现操作所需的状态信息。此状态信息包括以下属性：<br>要在其上绘制的 Component 对象。<br>呈现和剪贴坐标的转换原点。<br>当前剪贴区。<br>当前颜色。<br>当前字体。<br>当前逻辑像素操作函数（XOR 或 Paint）。<br>当前 XOR 交替颜色（参见 setXORMode(java.awt.Color)）。<br>坐标是无限细分的，并且位于输出设备的像素之间。绘制图形轮廓的操作是通过使用像素大小的画笔遍历像素间无限细分路径的操作，画笔从路径上的锚点向下和向右绘制。填充图形的操作是填充图形内部区域无限细分路径操作。呈现水平文本的操作是呈现字符字形完全位于基线坐标之上的上升部分。<br>图形画笔从要遍历的路径向下和向右绘制。其含义如下：<br>如果绘制一个覆盖给定矩形的图形，那么该图形与填充被相同矩形所限定的图形相比，在右侧和底边多占用一行像素。<br>如果沿着与一行文本基线相同的 y 坐标绘制一条水平线，那么除了文字的所有下降部分外，该线完全画在文本的下面。<br>所有作为此 Graphics 对象方法的参数而出现的坐标，都是相对于调用该方法前的此 Graphics 对象转换原点的。<br>所有呈现操作仅修改当前剪贴区所限定区域内的像素，此剪贴区是由用户空间中的 Shape 指定的，并通过使用 Graphics 对象的程序来控制。此用户剪贴区 被转换到设备空间中，并与设备剪贴区 组合，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义复合剪贴区，复合剪贴区确定最终的剪贴区域。用户剪贴区不能由呈现系统修改，以反映得到的复合剪贴区。用户剪贴区只能通过 setClip 或 clipRect 方法更改。所有的绘制或写入都以当前的颜色、当前绘图模式和当前字体完成。</p>\n<blockquote>\n<h2 id=\"绘制直线\"><a href=\"#绘制直线\" class=\"headerlink\" title=\"绘制直线\"></a>绘制直线</h2><p>主要用到的内容是Graphics类中的<strong>drawLine</strong>函数<br>定义：</p>\n<blockquote>\n<p><code>public abstract void drawLine(int x1,int y1,int x2,int y2)</code><br><em>x1,y1是起始点的坐标，x2,y2是尾点的坐标</em></p>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><blockquote>\n<p><code>SetColor(Color color)</code></p>\n<blockquote>\n<p>setColor是Graphics类中的一个函数，主要是设置颜色作用，其中参数是Color类中的一个对象，用于定义自己的颜色，里面的变量的是RGB,定义的方法：<code>Color color=newe Color(R,G,B)</code></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\">    <span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\">    <span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawLineFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">    DrawLinePanel linePanel = <span class=\"keyword\">new</span> DrawLinePanel(); </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主函数</span></div><div class=\"line\">        DrawLineFrame frame = <span class=\"keyword\">new</span> DrawLineFrame(); <span class=\"comment\">// 创建一个继承JFrame的一个类对象</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 设置窗体可见，true为可见，false为不可见</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawLineFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        setTitle(<span class=\"string\">\"绘制直线\"</span>); <span class=\"comment\">// 设置窗体的标题</span></div><div class=\"line\">        setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">273</span>, <span class=\"number\">167</span>); <span class=\"comment\">// 设置窗体的显示位置和大小</span></div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 设置窗体的关闭方式，具体见官方文档</span></div><div class=\"line\">        add(linePanel); <span class=\"comment\">// 将继承Jpanel类的容器对象添加在窗体中</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawLinePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123;   <span class=\"comment\">// 继承在JPanel类的一个内部类，用于定义直线</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;    <span class=\"comment\">// 重写JCommponent类中的paint方法，用来绘制直线</span></div><div class=\"line\">            Color color=<span class=\"keyword\">new</span> Color(Color.Red);<span class=\"comment\">//这里用的是Color提供的颜色，当然读者也可以自己定义RGB颜色</span></div><div class=\"line\">            g.setColor(Color);<span class=\"comment\">//将颜色作用于绘图上下文</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">70</span>, <span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">50</span>);   <span class=\"comment\">// 调用方法</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">70</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, <span class=\"number\">80</span>);   <span class=\"comment\">// 第二条直线</span></div><div class=\"line\">            g.drawLine(<span class=\"number\">110</span>, <span class=\"number\">10</span>, <span class=\"number\">140</span>, <span class=\"number\">120</span>); <span class=\"comment\">// 第三条</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p>主要用到的函数是：<code>public  abstract void drawRect(int x,int y,int width,int height)</code>这里的x,y是矩形左上角的坐标，width，height是矩形的长和宽</p>\n<blockquote>\n<h3 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p><code>fillRect(int x,int y,int width,int height)</code>:绘制实心矩形</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawRectangleFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span>     </span>&#123;</div><div class=\"line\">DrawRectanglePanel rectPanel = <span class=\"keyword\">new</span>     DrawRectanglePanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    DrawRectangleFrame frame = <span class=\"keyword\">new</span> DrawRectangleFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawRectangleFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"绘制矩形\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">269</span>, <span class=\"number\">184</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(rectPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawRectanglePanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123;       <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        g.drawRect(<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">60</span>);       <span class=\"comment\">// 绘制空心矩形</span></div><div class=\"line\">        g.fillRect(<span class=\"number\">140</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">60</span>);      <span class=\"comment\">// 绘制实心矩形</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"绘制椭圆\"><a href=\"#绘制椭圆\" class=\"headerlink\" title=\"绘制椭圆\"></a>绘制椭圆</h3><blockquote>\n<p>函数：<code>public abstract void drawOval(int x,int y,int width,int height)</code>,其中x,y是外切矩形的左上角的坐标，width，height是长宽</p>\n<blockquote>\n<h2 id=\"拓展-2\"><a href=\"#拓展-2\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><blockquote>\n<p>其中将令width=height，即是一个圆了，<code>fillOval(int x,int y,int width,int height)</code>用来绘制实心的椭圆</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    package com.zzk;</div><div class=\"line\">    import java.awt.Graphics;</div><div class=\"line\">    import javax.swing.JFrame;</div><div class=\"line\">    import javax.swing.JPanel;</div><div class=\"line\"></div><div class=\"line\">    public class DrawEllipseFrame extends JFrame &#123;</div><div class=\"line\">    DrawEllipsePanel ellipsePanel = new DrawEllipsePanel(); // 创建面板类的实例</div><div class=\"line\">    </div><div class=\"line\">    public static void main(String args[]) &#123; // 主方法</div><div class=\"line\">        DrawEllipseFrame frame = new DrawEllipseFrame(); // 创建窗体类的实例</div><div class=\"line\">        frame.setVisible(true); // 显示窗体</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public DrawEllipseFrame() &#123;</div><div class=\"line\">        super(); // 调用超类的构造方法</div><div class=\"line\">        setTitle(\"绘制椭圆\"); // 窗体标题</div><div class=\"line\">        setBounds(100, 100, 269, 222); // 窗体的显示位置和大小</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式</div><div class=\"line\">        add(ellipsePanel); // 将面板类的实例添加到窗体容器中</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    class DrawEllipsePanel extends JPanel &#123; // 创建内部面板类</div><div class=\"line\">        public void paint(Graphics g) &#123;     // 重写paint()方法</div><div class=\"line\">            g.drawOval(30, 20, 80, 50);     // 绘制空心椭圆</div><div class=\"line\">            g.drawOval(150, 10, 50, 80);    // 绘制空心椭圆</div><div class=\"line\">            g.fillOval(40, 90, 50, 80);     // 绘制实心椭圆</div><div class=\"line\">            g.fillOval(140, 110, 80, 50);   // 绘制实心椭圆</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">&gt;&gt;## 绘制圆弧</div><div class=\"line\">&gt;&gt;&gt;主要用到的函数`public astract void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle)`，其中x,y是要绘制圆弧的左上角的坐标，width，height是要绘制的长宽，startAngle是开始角度，arcAngle是相对于开始角度而言的，弧跨越的角度，</div><div class=\"line\">&gt;&gt;&gt;&gt;### 拓展:</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;fillArc(int x,int y,int width,int height,int startAngle,int arcAngle)用来绘制实心圆弧</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;当然你也可以用这个来绘制扇形，用drawLine方法将圆弧的两端连起来就可以了，不过这个对坐标的精确度就要求很高了，暂时不想费那个脑筋来搞了</div><div class=\"line\">&gt;&gt;&gt;&gt;### 代码</div><div class=\"line\"></div><div class=\"line\">```java</div><div class=\"line\"></div><div class=\"line\">    package com.zzk;</div><div class=\"line\">    import java.awt.Graphics;</div><div class=\"line\">    import javax.swing.JFrame;</div><div class=\"line\">    import javax.swing.JPanel;</div><div class=\"line\">    public class DrawArcFrame extends JFrame &#123;</div><div class=\"line\">    DrawArcPanel arcPanel = new DrawArcPanel(); // 创建面板类的实例</div><div class=\"line\">    public static void main(String args[]) &#123; // 主方法</div><div class=\"line\">        DrawArcFrame frame = new DrawArcFrame(); // 创建窗体类的实例</div><div class=\"line\">        frame.setVisible(true); // 显示窗体</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DrawArcFrame() &#123;</div><div class=\"line\">        super(); // 调用超类的构造方法</div><div class=\"line\">        setTitle(\"绘制圆弧\"); // 窗体标题</div><div class=\"line\">        setBounds(100, 100, 269, 184); // 窗体的显示位置和大小</div><div class=\"line\">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 窗体关闭方式</div><div class=\"line\">        add(arcPanel); // 将面板类的实例添加到窗体容器中</div><div class=\"line\">    &#125;</div><div class=\"line\">    class DrawArcPanel extends JPanel &#123; // 创建内部面板类</div><div class=\"line\">        public void paint(Graphics g) &#123; // 重写paint()方法</div><div class=\"line\">            g.drawArc(20, 20, 80, 80, 0, 120);    // 绘制圆弧</div><div class=\"line\">            g.drawArc(20, 40, 80, 80, 0, -120);   // 绘制圆弧</div><div class=\"line\">            g.drawArc(150, 20, 80, 80, 180, -120);// 绘制圆弧</div><div class=\"line\">            g.drawArc(150, 40, 80, 80, 180, 120); // 绘制圆弧</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制多边形\"><a href=\"#绘制多边形\" class=\"headerlink\" title=\"绘制多边形\"></a>绘制多边形</h2><blockquote>\n<p>主要用到的函数是：<code>public abstract void drawPolygon(int[] xpoints,int[] ypoints,int npoints)</code>，其中xpoints：要绘制多边形的x坐标组，ypoints是要绘制多边形的y坐标组，npoints是多边形的n条边</p>\n<h3 id=\"拓展-3\"><a href=\"#拓展-3\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><blockquote>\n<p><code>fillPolygon(...)</code>是绘制实心多边形的函数</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawSectorFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">DrawSectorPanel sectorPanel = <span class=\"keyword\">new</span> DrawSectorPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    DrawSectorFrame frame = <span class=\"keyword\">new</span> DrawSectorFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DrawSectorFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"绘制填充扇形\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">278</span>, <span class=\"number\">184</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(sectorPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawSectorPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123; <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">40</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>);    <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">140</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, -<span class=\"number\">150</span>);<span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">40</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, -<span class=\"number\">110</span>);   <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">        g.fillArc(<span class=\"number\">140</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, <span class=\"number\">180</span>, <span class=\"number\">110</span>); <span class=\"comment\">// 绘制填充扇形</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h2><blockquote>\n<p>主要用到的函数是：<code>public abstract void drawString(String value,int x,int y)</code>,其中value是要绘制的文本，x,y是第一个字的坐标</p>\n<h3 id=\"拓展-4\"><a href=\"#拓展-4\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><blockquote>\n<p>SetFont(Font font):这个函数是用来设置文本的字体大小，颜色的，其中参数font是Font类中的</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.zzk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPanel;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFontFrame</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</div><div class=\"line\">ChangeTextFontPanel changeTextFontPanel = <span class=\"keyword\">new</span> ChangeTextFontPanel(); <span class=\"comment\">// 创建面板类的实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 主方法</span></div><div class=\"line\">    TextFontFrame frame = <span class=\"keyword\">new</span> TextFontFrame(); <span class=\"comment\">// 创建窗体类的实例</span></div><div class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 显示窗体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextFontFrame</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 调用超类的构造方法</span></div><div class=\"line\">    setTitle(<span class=\"string\">\"设置文本的字体\"</span>); <span class=\"comment\">// 窗体标题</span></div><div class=\"line\">    setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">333</span>, <span class=\"number\">199</span>); <span class=\"comment\">// 窗体的显示位置和大小</span></div><div class=\"line\">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class=\"comment\">// 窗体关闭方式</span></div><div class=\"line\">    add(changeTextFontPanel); <span class=\"comment\">// 将面板类的实例添加到窗体容器中</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeTextFontPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span> </span>&#123; <span class=\"comment\">// 创建内部面板类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">paint</span><span class=\"params\">(Graphics g)</span> </span>&#123; <span class=\"comment\">// 重写paint()方法</span></div><div class=\"line\">        String value = <span class=\"string\">\"明日编程词典社区\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">40</span>; <span class=\"comment\">// 文本位置的横坐标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">50</span>; <span class=\"comment\">// 文本位置的纵坐标</span></div><div class=\"line\">        Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"华文行楷\"</span>, Font.BOLD + Font.ITALIC, <span class=\"number\">26</span>); <span class=\"comment\">// 创建字体对象</span></div><div class=\"line\">        g.setFont(font); <span class=\"comment\">// 设置字体</span></div><div class=\"line\">        g.drawString(value, x, y); <span class=\"comment\">// 绘制文本</span></div><div class=\"line\">        value = <span class=\"string\">\"http://community.mrbccd.com\"</span>;</div><div class=\"line\">        x = <span class=\"number\">10</span>; <span class=\"comment\">// 文本位置的横坐标</span></div><div class=\"line\">        y = <span class=\"number\">100</span>; <span class=\"comment\">// 文本位置的纵坐标</span></div><div class=\"line\">        font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">20</span>); <span class=\"comment\">// 创建字体对象</span></div><div class=\"line\">        g.setFont(font); <span class=\"comment\">// 设置字体</span></div><div class=\"line\">        g.drawString(value, x, y); <span class=\"comment\">// 绘制文本</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><blockquote>\n<p>字体样式包括Font.BLOD(粗体)，Font.ITALIC(斜体)，Font.PLAIN(普通字体)，其中如果要设置两种样式，可以用”+”连接，如：<code>Font.BLOD+Font.ITALIC</code>，这样就会同时设置了斜体和粗体样式</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><strong>以上是本人的学习成果，通过不断的学习和探索，发现网上没有什么系统的学习java图形处理的文章，就下定决心准备好好写，于是前几天就花了一晚上的时间搭建了博客，以前都是在CSDN上写的，发现在那上面写，没有逼格，为了提高逼格，自己撸了一个博客，让我来自由发挥，另外喜欢编程的朋友可以加我的联系方式，我们可以一起探讨，在下面留言也是可以的哦,联系方式可以在我的<em>关于我</em>可以找到</strong></p>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"swing布局管理器","date":"2017-04-05T15:06:08.000Z","_content":"\n# Swing系列之布局管理器\n## 流布局(`FlowLayout`)默认的`JApplet`,`JPanel`,`JScrollPane`\n>流布局是相对比较简单的一种布局管理器，也是最常用的布局管理器。在流布局中放置控件时，将按照控件的添加顺序，依次将控件从左到右进行摆放，并且在一行的最后会进行自动换行放置 。在一行中，控件是默认**居中**放置的。\n\n>布局管理器也是通过构造器来创建的。流布局是通过FlowLayout 类来创建，FlowLayout类具有三种构造器。首先是无参构造器， 使用无参构造器能够创建一个默认的以居中对齐方式，控件间水 平和垂直间距为5个像素的流布局。\n\n>FlowLayout类还具有一个需要整型参数的构造器，使用该构造器能够创建一个指定对齐方式的流布局管理器，它的控件间水平和垂直间距仍然是默认的5个像素。流布局管理器的对齐方式如下所示。\n>* `LEFT`\t左对齐方式\n>* `CENTER`\t居中对齐方式\n>* `RIGHT`\t右对齐方式\n>* `LEADING`\t控件与容器开始边对齐\n>* `TRAILING`\t\n>\n>**构造函数：**\n>1. `FlowLayout()`,生成一个默认的FlowLayout布局。默认情况下，组件居中，间隙为5个像素。\n>2. `FlowLayout(int aligment)`,设定每珩的组件的对齐方式。`alignment`取值可以为`FlowLayout.LEFT`,`FlowLayout.CENTER`,`FlowLayout.RIGHT`。\n>1. `FlowLayout(int aligment,int horz, int vert)`,设定对齐方式，并设定组件的水平间距horz和垂直间距vert，用超类Container的方法`setLayout()`为容器设定布局。例如，代码`setLayout(new FlowLayout())`为容器设定 FlowLayout布局。将组件加入容器的方法是add(组件名)。\n>\n>**常用的函数：**\n>**`getAlignment`方法和`setAlignment`方法分别获取和设置流布局管理器的对齐方式。 `getHgap`方法和`setHgap`方法分别获取和设置流布局管理器中控件和控件之间的水平间距。getVgap方法和`setVgap`方法分别获取和 设置流布局管理器中控件和控件之间的垂直间距。**\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\n/**\n * Created by Chenjiabing on 2017/4/5.\n */\npublic class BuJu {\n    public static void main(String args[])\n    {\n        JFrame frame=new JFrame();\n        FlowLayout flowLayout=new FlowLayout(FlowLayout.LEFT);\n        JPanel panel=new JPanel(flowLayout);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setBounds(100,100,500,400);\n        flowLayout.setHgap(20);  //设置水平间距\n        flowLayout.setVgap(20); //控件之间的垂直间距\n\n        for(int i=0;i<6;i++)\n        {\n            JButton button=new JButton(\"按钮\");\n            panel.add(button);\n        }\n        frame.getContentPane().add(panel);\n\n\n\n        frame.setVisible(true);\n\n    }\n\n}\n\n```\n\n## 网格布局(`GridLayout`)\n>* 网络布局也是一种比较常见的布局管理器。使用网格布局管理器后，会将所有的控件尽量按照给出的行数和列数来排列，同时网格布局管理器也会对控件进行尺寸的调整，使所有的控件具有相同的尺寸。在网格布局中，也会尽量使使用的空间成矩形的形式来显示。当窗体发生大小变化时，所有的空间也将自动改变大小来填充窗体。\n\n>* 网格布局是通过`GridLayout`类来创建的。GridLayout类具有三个构造器，使用无参构造器将创建具有默认行和默认列的网格布局。在创建网格布局管理器时最常用的就是具有两个整型参数的构造器，第一个参数表示网格布局管理器的行数，第二个参数表示网格布局管理器的列数。还有一个具有四个参数的构造器，除了可以定义行数和列数外，还可以定义控件间水平间距和垂直间距。\n\n>* `GridLayout`类中还定义了一些方法来对创建的网格布局进行操作 。`getRows`方法和`setRows`方法分别是获取和设置网格布局的行数。`getColumns`方法和`setColumns`方法分别是获取和设置网格布局 的列数。`getHgap`方法和`setHgap`方法分别是获取和设置网格布局 中控件间水平间距。`getVgap`方法和`setVgap`方法分别是获取和设 置网络布局中的控件间垂直间距。\n\n>**构造函数：**\n>1. `GridLayout()`,生成一个单列的GridLayout布局。默认情况下，无间隙。\n>1.` GridLayout(int row,int col)`,设定一个有行`row`和列`col的GridLayout布局。\n>1. GridLayout(int row,int col,int horz,int vert),设定布局的行数和列数、组件的水平间距和垂直间距\n\n>**代码大概和上面的设置一样，这里注意的是，网格布局是以行为基准的，如果定义的控件多了或者少了，不会改变行的数量，会根据情况改变列的数量**\n\n## 边框布局(BorderLayout)默认的是`JWindow`、`JFrame`,`JDialog`\n\n>* 上面学习的流布局和网格布局具有很多相似的地方，但是边框布局就和他们存在很大的不同。在使用边框布局时，通常都会由程序员来为控件指定在容器中的位置。边框布局将容器分为五个部分，包括东南西北中五部分。在每一个部分中只能放置一个控件 ，所以如果控件超过五个将不能完全显示。在使用边框布局时需 要注意的是，当容器的大小发生变化时，四周的控件是不会发生变化的，只有中间的控件将发生变化。\n\n>* 边框布局是通过BorderLayout类创建的。BorderLayout类具有两个构造器，一个是无参构造器，另一个是指定控件间间距的构造器，通常使用无参构造器来创建边框布局管理器。\n\n>* 在前面将控件添加到容器中都是通过add方法，将控件作为add方法的参 数来进行添加的。但是在向边框布局容器中添加控件时，这样是不完全 的。在向边框布局容器中添加控件是使用具有两个参数的add方法。其中 第一个参数表示要添加的控件，第二个参数表示要添加到边框布局中的 哪一个位置。边框布局的位置表示是通过常量来表示的，具体常量如下所示\n\n>>* `NORTH`\t容器顶部\n>>* `SOUTH`\t容器底部\n>>* `WEST`\t容器左边\n>>* `EAST`\t容器右边\n>>* `CENTER`\t容器的中央\n\n>**构造函数：**\n>1. `BorderLayout()`,生成一个默认的`BorderLayout`布局。默认情况下，没有间隙。\n>1.  `BorderLayout(int horz,int vert)`,设定组件之间的水平间距和垂直间距。\n\n>**注意这里还有一些常用的方法，就是设置水平和垂直的间距，上面已经赘述过了，这里就不再详说了**\n\n## 空布局(`null`)\n>空布局就是没有使用布局管理器，在空布局的情况下将根据控件的自身信息来为控件指定位置。这就使得控件的布局更加灵活，与此同时给开发人员带来了更大的工作量。\n\n空布局是不需要使用类来创建的，只需要在程序指定布局管理器 为null。将控件添加到空布局容器中时，仍然是使用`add`方法。因 为这里使用的是空布局管理器，所以在添加控件之前，要对控件 进行设置操作。设置操作是通过setBounds方法来完成的， setBounds方法的基本语法格式如下所示。\n>`public void setBounds(int x,int y,int width,int height);`\n\n> 其中x和y表示的是控件最左上侧的坐标，从而也固定了该控件的 位置。`width`和`height`表示的是空间的宽度和高度，从而也指定了\n控件的大小。\n\n>**示例代码：**\n```java\n>frame.setLayout(null);//布局管理器设置为null\n    JLabel label = new JLabel(\"First Name:\");\n    label.setBounds(20, 20, 100, 20);//四个参数分别是x,y坐标和label的宽和高\n    JTextField textField = new JTextField();\n    textField.setBounds(124, 25, 100, 20);\n    frame.add(label);\n    frame.add(textField);\n```\n\n## BoxLayout\n>`BoxLayout`是一种能够实现所有的控件水平放置和垂直放置，因为用到的不多，这里就简单的说一下\n>**构造函数**：`public BoxLayout(Container target,int axis)`:其中`axis`表示放置的样式，主要有两种常用到的:\n\n>* `X_AXIS`:指定组件应该从左到右放置。\n>* `Y_AXIS`：指定组件从上到下放置\n\n>**代码**\n\n```java\nimport oracle.jrockit.jfr.JFR;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class BuJu {\n    public static void main(String args[]) {\n        JFrame frame = new JFrame();\n        // frame.setLayout(new BorderLayout(frame.getComponentCount(),BoxLayout.Y_AXIS));\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel();\n        BoxLayout boxLayout = new BoxLayout(panel, BoxLayout.X_AXIS);\n        panel.setLayout(boxLayout);\n        for (int i = 0; i < 10; i++) {\n            JButton button = new JButton(\"cma\");\n            panel.add(button);\n        }\n        frame.getContentPane().add(panel, BorderLayout.CENTER);\n        // System.out.println(boxLayout.getTarget());\n        frame.pack();\n        //frame.setSize(300,200);\n        frame.setVisible(true);\n\n\n    }\n\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/java布局管理器.md","raw":"---\ntitle: swing布局管理器\ndate: 2017-04-05 23:06:08\ncategories: java学习\ntags: swing\n---\n\n# Swing系列之布局管理器\n## 流布局(`FlowLayout`)默认的`JApplet`,`JPanel`,`JScrollPane`\n>流布局是相对比较简单的一种布局管理器，也是最常用的布局管理器。在流布局中放置控件时，将按照控件的添加顺序，依次将控件从左到右进行摆放，并且在一行的最后会进行自动换行放置 。在一行中，控件是默认**居中**放置的。\n\n>布局管理器也是通过构造器来创建的。流布局是通过FlowLayout 类来创建，FlowLayout类具有三种构造器。首先是无参构造器， 使用无参构造器能够创建一个默认的以居中对齐方式，控件间水 平和垂直间距为5个像素的流布局。\n\n>FlowLayout类还具有一个需要整型参数的构造器，使用该构造器能够创建一个指定对齐方式的流布局管理器，它的控件间水平和垂直间距仍然是默认的5个像素。流布局管理器的对齐方式如下所示。\n>* `LEFT`\t左对齐方式\n>* `CENTER`\t居中对齐方式\n>* `RIGHT`\t右对齐方式\n>* `LEADING`\t控件与容器开始边对齐\n>* `TRAILING`\t\n>\n>**构造函数：**\n>1. `FlowLayout()`,生成一个默认的FlowLayout布局。默认情况下，组件居中，间隙为5个像素。\n>2. `FlowLayout(int aligment)`,设定每珩的组件的对齐方式。`alignment`取值可以为`FlowLayout.LEFT`,`FlowLayout.CENTER`,`FlowLayout.RIGHT`。\n>1. `FlowLayout(int aligment,int horz, int vert)`,设定对齐方式，并设定组件的水平间距horz和垂直间距vert，用超类Container的方法`setLayout()`为容器设定布局。例如，代码`setLayout(new FlowLayout())`为容器设定 FlowLayout布局。将组件加入容器的方法是add(组件名)。\n>\n>**常用的函数：**\n>**`getAlignment`方法和`setAlignment`方法分别获取和设置流布局管理器的对齐方式。 `getHgap`方法和`setHgap`方法分别获取和设置流布局管理器中控件和控件之间的水平间距。getVgap方法和`setVgap`方法分别获取和 设置流布局管理器中控件和控件之间的垂直间距。**\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\n/**\n * Created by Chenjiabing on 2017/4/5.\n */\npublic class BuJu {\n    public static void main(String args[])\n    {\n        JFrame frame=new JFrame();\n        FlowLayout flowLayout=new FlowLayout(FlowLayout.LEFT);\n        JPanel panel=new JPanel(flowLayout);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setBounds(100,100,500,400);\n        flowLayout.setHgap(20);  //设置水平间距\n        flowLayout.setVgap(20); //控件之间的垂直间距\n\n        for(int i=0;i<6;i++)\n        {\n            JButton button=new JButton(\"按钮\");\n            panel.add(button);\n        }\n        frame.getContentPane().add(panel);\n\n\n\n        frame.setVisible(true);\n\n    }\n\n}\n\n```\n\n## 网格布局(`GridLayout`)\n>* 网络布局也是一种比较常见的布局管理器。使用网格布局管理器后，会将所有的控件尽量按照给出的行数和列数来排列，同时网格布局管理器也会对控件进行尺寸的调整，使所有的控件具有相同的尺寸。在网格布局中，也会尽量使使用的空间成矩形的形式来显示。当窗体发生大小变化时，所有的空间也将自动改变大小来填充窗体。\n\n>* 网格布局是通过`GridLayout`类来创建的。GridLayout类具有三个构造器，使用无参构造器将创建具有默认行和默认列的网格布局。在创建网格布局管理器时最常用的就是具有两个整型参数的构造器，第一个参数表示网格布局管理器的行数，第二个参数表示网格布局管理器的列数。还有一个具有四个参数的构造器，除了可以定义行数和列数外，还可以定义控件间水平间距和垂直间距。\n\n>* `GridLayout`类中还定义了一些方法来对创建的网格布局进行操作 。`getRows`方法和`setRows`方法分别是获取和设置网格布局的行数。`getColumns`方法和`setColumns`方法分别是获取和设置网格布局 的列数。`getHgap`方法和`setHgap`方法分别是获取和设置网格布局 中控件间水平间距。`getVgap`方法和`setVgap`方法分别是获取和设 置网络布局中的控件间垂直间距。\n\n>**构造函数：**\n>1. `GridLayout()`,生成一个单列的GridLayout布局。默认情况下，无间隙。\n>1.` GridLayout(int row,int col)`,设定一个有行`row`和列`col的GridLayout布局。\n>1. GridLayout(int row,int col,int horz,int vert),设定布局的行数和列数、组件的水平间距和垂直间距\n\n>**代码大概和上面的设置一样，这里注意的是，网格布局是以行为基准的，如果定义的控件多了或者少了，不会改变行的数量，会根据情况改变列的数量**\n\n## 边框布局(BorderLayout)默认的是`JWindow`、`JFrame`,`JDialog`\n\n>* 上面学习的流布局和网格布局具有很多相似的地方，但是边框布局就和他们存在很大的不同。在使用边框布局时，通常都会由程序员来为控件指定在容器中的位置。边框布局将容器分为五个部分，包括东南西北中五部分。在每一个部分中只能放置一个控件 ，所以如果控件超过五个将不能完全显示。在使用边框布局时需 要注意的是，当容器的大小发生变化时，四周的控件是不会发生变化的，只有中间的控件将发生变化。\n\n>* 边框布局是通过BorderLayout类创建的。BorderLayout类具有两个构造器，一个是无参构造器，另一个是指定控件间间距的构造器，通常使用无参构造器来创建边框布局管理器。\n\n>* 在前面将控件添加到容器中都是通过add方法，将控件作为add方法的参 数来进行添加的。但是在向边框布局容器中添加控件时，这样是不完全 的。在向边框布局容器中添加控件是使用具有两个参数的add方法。其中 第一个参数表示要添加的控件，第二个参数表示要添加到边框布局中的 哪一个位置。边框布局的位置表示是通过常量来表示的，具体常量如下所示\n\n>>* `NORTH`\t容器顶部\n>>* `SOUTH`\t容器底部\n>>* `WEST`\t容器左边\n>>* `EAST`\t容器右边\n>>* `CENTER`\t容器的中央\n\n>**构造函数：**\n>1. `BorderLayout()`,生成一个默认的`BorderLayout`布局。默认情况下，没有间隙。\n>1.  `BorderLayout(int horz,int vert)`,设定组件之间的水平间距和垂直间距。\n\n>**注意这里还有一些常用的方法，就是设置水平和垂直的间距，上面已经赘述过了，这里就不再详说了**\n\n## 空布局(`null`)\n>空布局就是没有使用布局管理器，在空布局的情况下将根据控件的自身信息来为控件指定位置。这就使得控件的布局更加灵活，与此同时给开发人员带来了更大的工作量。\n\n空布局是不需要使用类来创建的，只需要在程序指定布局管理器 为null。将控件添加到空布局容器中时，仍然是使用`add`方法。因 为这里使用的是空布局管理器，所以在添加控件之前，要对控件 进行设置操作。设置操作是通过setBounds方法来完成的， setBounds方法的基本语法格式如下所示。\n>`public void setBounds(int x,int y,int width,int height);`\n\n> 其中x和y表示的是控件最左上侧的坐标，从而也固定了该控件的 位置。`width`和`height`表示的是空间的宽度和高度，从而也指定了\n控件的大小。\n\n>**示例代码：**\n```java\n>frame.setLayout(null);//布局管理器设置为null\n    JLabel label = new JLabel(\"First Name:\");\n    label.setBounds(20, 20, 100, 20);//四个参数分别是x,y坐标和label的宽和高\n    JTextField textField = new JTextField();\n    textField.setBounds(124, 25, 100, 20);\n    frame.add(label);\n    frame.add(textField);\n```\n\n## BoxLayout\n>`BoxLayout`是一种能够实现所有的控件水平放置和垂直放置，因为用到的不多，这里就简单的说一下\n>**构造函数**：`public BoxLayout(Container target,int axis)`:其中`axis`表示放置的样式，主要有两种常用到的:\n\n>* `X_AXIS`:指定组件应该从左到右放置。\n>* `Y_AXIS`：指定组件从上到下放置\n\n>**代码**\n\n```java\nimport oracle.jrockit.jfr.JFR;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class BuJu {\n    public static void main(String args[]) {\n        JFrame frame = new JFrame();\n        // frame.setLayout(new BorderLayout(frame.getComponentCount(),BoxLayout.Y_AXIS));\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel();\n        BoxLayout boxLayout = new BoxLayout(panel, BoxLayout.X_AXIS);\n        panel.setLayout(boxLayout);\n        for (int i = 0; i < 10; i++) {\n            JButton button = new JButton(\"cma\");\n            panel.add(button);\n        }\n        frame.getContentPane().add(panel, BorderLayout.CENTER);\n        // System.out.println(boxLayout.getTarget());\n        frame.pack();\n        //frame.setSize(300,200);\n        frame.setVisible(true);\n\n\n    }\n\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"java布局管理器","published":1,"updated":"2017-04-06T11:42:07.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahway6001ll0uzrfp79t93","content":"<h1 id=\"Swing系列之布局管理器\"><a href=\"#Swing系列之布局管理器\" class=\"headerlink\" title=\"Swing系列之布局管理器\"></a>Swing系列之布局管理器</h1><h2 id=\"流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane\"><a href=\"#流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane\" class=\"headerlink\" title=\"流布局(FlowLayout)默认的JApplet,JPanel,JScrollPane\"></a>流布局(<code>FlowLayout</code>)默认的<code>JApplet</code>,<code>JPanel</code>,<code>JScrollPane</code></h2><blockquote>\n<p>流布局是相对比较简单的一种布局管理器，也是最常用的布局管理器。在流布局中放置控件时，将按照控件的添加顺序，依次将控件从左到右进行摆放，并且在一行的最后会进行自动换行放置 。在一行中，控件是默认<strong>居中</strong>放置的。</p>\n<p>布局管理器也是通过构造器来创建的。流布局是通过FlowLayout 类来创建，FlowLayout类具有三种构造器。首先是无参构造器， 使用无参构造器能够创建一个默认的以居中对齐方式，控件间水 平和垂直间距为5个像素的流布局。</p>\n<p>FlowLayout类还具有一个需要整型参数的构造器，使用该构造器能够创建一个指定对齐方式的流布局管理器，它的控件间水平和垂直间距仍然是默认的5个像素。流布局管理器的对齐方式如下所示。</p>\n<ul>\n<li><code>LEFT</code>    左对齐方式</li>\n<li><code>CENTER</code>    居中对齐方式</li>\n<li><code>RIGHT</code>    右对齐方式</li>\n<li><code>LEADING</code>    控件与容器开始边对齐</li>\n<li><code>TRAILING</code>    </li>\n</ul>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>FlowLayout()</code>,生成一个默认的FlowLayout布局。默认情况下，组件居中，间隙为5个像素。</li>\n<li><code>FlowLayout(int aligment)</code>,设定每珩的组件的对齐方式。<code>alignment</code>取值可以为<code>FlowLayout.LEFT</code>,<code>FlowLayout.CENTER</code>,<code>FlowLayout.RIGHT</code>。</li>\n<li><code>FlowLayout(int aligment,int horz, int vert)</code>,设定对齐方式，并设定组件的水平间距horz和垂直间距vert，用超类Container的方法<code>setLayout()</code>为容器设定布局。例如，代码<code>setLayout(new FlowLayout())</code>为容器设定 FlowLayout布局。将组件加入容器的方法是add(组件名)。</li>\n</ol>\n<p><strong>常用的函数：</strong><br><strong><code>getAlignment</code>方法和<code>setAlignment</code>方法分别获取和设置流布局管理器的对齐方式。 <code>getHgap</code>方法和<code>setHgap</code>方法分别获取和设置流布局管理器中控件和控件之间的水平间距。getVgap方法和<code>setVgap</code>方法分别获取和 设置流布局管理器中控件和控件之间的垂直间距。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by Chenjiabing on 2017/4/5.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuJu</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        JFrame frame=<span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">        FlowLayout flowLayout=<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT);</div><div class=\"line\">        JPanel panel=<span class=\"keyword\">new</span> JPanel(flowLayout);</div><div class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        frame.setBounds(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>);</div><div class=\"line\">        flowLayout.setHgap(<span class=\"number\">20</span>);  <span class=\"comment\">//设置水平间距</span></div><div class=\"line\">        flowLayout.setVgap(<span class=\"number\">20</span>); <span class=\"comment\">//控件之间的垂直间距</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            JButton button=<span class=\"keyword\">new</span> JButton(<span class=\"string\">\"按钮\"</span>);</div><div class=\"line\">            panel.add(button);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frame.getContentPane().add(panel);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"网格布局-GridLayout\"><a href=\"#网格布局-GridLayout\" class=\"headerlink\" title=\"网格布局(GridLayout)\"></a>网格布局(<code>GridLayout</code>)</h2><blockquote>\n<ul>\n<li><p>网络布局也是一种比较常见的布局管理器。使用网格布局管理器后，会将所有的控件尽量按照给出的行数和列数来排列，同时网格布局管理器也会对控件进行尺寸的调整，使所有的控件具有相同的尺寸。在网格布局中，也会尽量使使用的空间成矩形的形式来显示。当窗体发生大小变化时，所有的空间也将自动改变大小来填充窗体。</p>\n</li>\n<li><p>网格布局是通过<code>GridLayout</code>类来创建的。GridLayout类具有三个构造器，使用无参构造器将创建具有默认行和默认列的网格布局。在创建网格布局管理器时最常用的就是具有两个整型参数的构造器，第一个参数表示网格布局管理器的行数，第二个参数表示网格布局管理器的列数。还有一个具有四个参数的构造器，除了可以定义行数和列数外，还可以定义控件间水平间距和垂直间距。</p>\n</li>\n<li><p><code>GridLayout</code>类中还定义了一些方法来对创建的网格布局进行操作 。<code>getRows</code>方法和<code>setRows</code>方法分别是获取和设置网格布局的行数。<code>getColumns</code>方法和<code>setColumns</code>方法分别是获取和设置网格布局 的列数。<code>getHgap</code>方法和<code>setHgap</code>方法分别是获取和设置网格布局 中控件间水平间距。<code>getVgap</code>方法和<code>setVgap</code>方法分别是获取和设 置网络布局中的控件间垂直间距。</p>\n</li>\n</ul>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>GridLayout()</code>,生成一个单列的GridLayout布局。默认情况下，无间隙。<br>1.<code>GridLayout(int row,int col)</code>,设定一个有行<code>row</code>和列`col的GridLayout布局。</li>\n<li>GridLayout(int row,int col,int horz,int vert),设定布局的行数和列数、组件的水平间距和垂直间距</li>\n</ol>\n<p><strong>代码大概和上面的设置一样，这里注意的是，网格布局是以行为基准的，如果定义的控件多了或者少了，不会改变行的数量，会根据情况改变列的数量</strong></p>\n</blockquote>\n<h2 id=\"边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog\"><a href=\"#边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog\" class=\"headerlink\" title=\"边框布局(BorderLayout)默认的是JWindow、JFrame,JDialog\"></a>边框布局(BorderLayout)默认的是<code>JWindow</code>、<code>JFrame</code>,<code>JDialog</code></h2><blockquote>\n<ul>\n<li><p>上面学习的流布局和网格布局具有很多相似的地方，但是边框布局就和他们存在很大的不同。在使用边框布局时，通常都会由程序员来为控件指定在容器中的位置。边框布局将容器分为五个部分，包括东南西北中五部分。在每一个部分中只能放置一个控件 ，所以如果控件超过五个将不能完全显示。在使用边框布局时需 要注意的是，当容器的大小发生变化时，四周的控件是不会发生变化的，只有中间的控件将发生变化。</p>\n</li>\n<li><p>边框布局是通过BorderLayout类创建的。BorderLayout类具有两个构造器，一个是无参构造器，另一个是指定控件间间距的构造器，通常使用无参构造器来创建边框布局管理器。</p>\n</li>\n<li><p>在前面将控件添加到容器中都是通过add方法，将控件作为add方法的参 数来进行添加的。但是在向边框布局容器中添加控件时，这样是不完全 的。在向边框布局容器中添加控件是使用具有两个参数的add方法。其中 第一个参数表示要添加的控件，第二个参数表示要添加到边框布局中的 哪一个位置。边框布局的位置表示是通过常量来表示的，具体常量如下所示</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><code>NORTH</code>    容器顶部</li>\n<li><code>SOUTH</code>    容器底部</li>\n<li><code>WEST</code>    容器左边</li>\n<li><code>EAST</code>    容器右边</li>\n<li><code>CENTER</code>    容器的中央</li>\n</ul>\n</blockquote>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>BorderLayout()</code>,生成一个默认的<code>BorderLayout</code>布局。默认情况下，没有间隙。</li>\n<li><code>BorderLayout(int horz,int vert)</code>,设定组件之间的水平间距和垂直间距。</li>\n</ol>\n<p><strong>注意这里还有一些常用的方法，就是设置水平和垂直的间距，上面已经赘述过了，这里就不再详说了</strong></p>\n</blockquote>\n<h2 id=\"空布局-null\"><a href=\"#空布局-null\" class=\"headerlink\" title=\"空布局(null)\"></a>空布局(<code>null</code>)</h2><blockquote>\n<p>空布局就是没有使用布局管理器，在空布局的情况下将根据控件的自身信息来为控件指定位置。这就使得控件的布局更加灵活，与此同时给开发人员带来了更大的工作量。</p>\n</blockquote>\n<p>空布局是不需要使用类来创建的，只需要在程序指定布局管理器 为null。将控件添加到空布局容器中时，仍然是使用<code>add</code>方法。因 为这里使用的是空布局管理器，所以在添加控件之前，要对控件 进行设置操作。设置操作是通过setBounds方法来完成的， setBounds方法的基本语法格式如下所示。</p>\n<blockquote>\n<p><code>public void setBounds(int x,int y,int width,int height);</code></p>\n<p>其中x和y表示的是控件最左上侧的坐标，从而也固定了该控件的 位置。<code>width</code>和<code>height</code>表示的是空间的宽度和高度，从而也指定了<br>控件的大小。</p>\n<p><strong>示例代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;frame.setLayout(<span class=\"keyword\">null</span>);<span class=\"comment\">//布局管理器设置为null</span></div><div class=\"line\">    JLabel label = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"First Name:\"</span>);</div><div class=\"line\">    label.setBounds(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>);<span class=\"comment\">//四个参数分别是x,y坐标和label的宽和高</span></div><div class=\"line\">    JTextField textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    textField.setBounds(<span class=\"number\">124</span>, <span class=\"number\">25</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>);</div><div class=\"line\">    frame.add(label);</div><div class=\"line\">    frame.add(textField);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"BoxLayout\"><a href=\"#BoxLayout\" class=\"headerlink\" title=\"BoxLayout\"></a>BoxLayout</h2><blockquote>\n<p><code>BoxLayout</code>是一种能够实现所有的控件水平放置和垂直放置，因为用到的不多，这里就简单的说一下<br><strong>构造函数</strong>：<code>public BoxLayout(Container target,int axis)</code>:其中<code>axis</code>表示放置的样式，主要有两种常用到的:</p>\n<ul>\n<li><code>X_AXIS</code>:指定组件应该从左到右放置。</li>\n<li><code>Y_AXIS</code>：指定组件从上到下放置</li>\n</ul>\n<p><strong>代码</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> oracle.jrockit.jfr.JFR;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuJu</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">        <span class=\"comment\">// frame.setLayout(new BorderLayout(frame.getComponentCount(),BoxLayout.Y_AXIS));</span></div><div class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        BoxLayout boxLayout = <span class=\"keyword\">new</span> BoxLayout(panel, BoxLayout.X_AXIS);</div><div class=\"line\">        panel.setLayout(boxLayout);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">            JButton button = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"cma\"</span>);</div><div class=\"line\">            panel.add(button);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frame.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"comment\">// System.out.println(boxLayout.getTarget());</span></div><div class=\"line\">        frame.pack();</div><div class=\"line\">        <span class=\"comment\">//frame.setSize(300,200);</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Swing系列之布局管理器\"><a href=\"#Swing系列之布局管理器\" class=\"headerlink\" title=\"Swing系列之布局管理器\"></a>Swing系列之布局管理器</h1><h2 id=\"流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane\"><a href=\"#流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane\" class=\"headerlink\" title=\"流布局(FlowLayout)默认的JApplet,JPanel,JScrollPane\"></a>流布局(<code>FlowLayout</code>)默认的<code>JApplet</code>,<code>JPanel</code>,<code>JScrollPane</code></h2><blockquote>\n<p>流布局是相对比较简单的一种布局管理器，也是最常用的布局管理器。在流布局中放置控件时，将按照控件的添加顺序，依次将控件从左到右进行摆放，并且在一行的最后会进行自动换行放置 。在一行中，控件是默认<strong>居中</strong>放置的。</p>\n<p>布局管理器也是通过构造器来创建的。流布局是通过FlowLayout 类来创建，FlowLayout类具有三种构造器。首先是无参构造器， 使用无参构造器能够创建一个默认的以居中对齐方式，控件间水 平和垂直间距为5个像素的流布局。</p>\n<p>FlowLayout类还具有一个需要整型参数的构造器，使用该构造器能够创建一个指定对齐方式的流布局管理器，它的控件间水平和垂直间距仍然是默认的5个像素。流布局管理器的对齐方式如下所示。</p>\n<ul>\n<li><code>LEFT</code>    左对齐方式</li>\n<li><code>CENTER</code>    居中对齐方式</li>\n<li><code>RIGHT</code>    右对齐方式</li>\n<li><code>LEADING</code>    控件与容器开始边对齐</li>\n<li><code>TRAILING</code>    </li>\n</ul>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>FlowLayout()</code>,生成一个默认的FlowLayout布局。默认情况下，组件居中，间隙为5个像素。</li>\n<li><code>FlowLayout(int aligment)</code>,设定每珩的组件的对齐方式。<code>alignment</code>取值可以为<code>FlowLayout.LEFT</code>,<code>FlowLayout.CENTER</code>,<code>FlowLayout.RIGHT</code>。</li>\n<li><code>FlowLayout(int aligment,int horz, int vert)</code>,设定对齐方式，并设定组件的水平间距horz和垂直间距vert，用超类Container的方法<code>setLayout()</code>为容器设定布局。例如，代码<code>setLayout(new FlowLayout())</code>为容器设定 FlowLayout布局。将组件加入容器的方法是add(组件名)。</li>\n</ol>\n<p><strong>常用的函数：</strong><br><strong><code>getAlignment</code>方法和<code>setAlignment</code>方法分别获取和设置流布局管理器的对齐方式。 <code>getHgap</code>方法和<code>setHgap</code>方法分别获取和设置流布局管理器中控件和控件之间的水平间距。getVgap方法和<code>setVgap</code>方法分别获取和 设置流布局管理器中控件和控件之间的垂直间距。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by Chenjiabing on 2017/4/5.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuJu</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        JFrame frame=<span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">        FlowLayout flowLayout=<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT);</div><div class=\"line\">        JPanel panel=<span class=\"keyword\">new</span> JPanel(flowLayout);</div><div class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        frame.setBounds(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>);</div><div class=\"line\">        flowLayout.setHgap(<span class=\"number\">20</span>);  <span class=\"comment\">//设置水平间距</span></div><div class=\"line\">        flowLayout.setVgap(<span class=\"number\">20</span>); <span class=\"comment\">//控件之间的垂直间距</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            JButton button=<span class=\"keyword\">new</span> JButton(<span class=\"string\">\"按钮\"</span>);</div><div class=\"line\">            panel.add(button);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frame.getContentPane().add(panel);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"网格布局-GridLayout\"><a href=\"#网格布局-GridLayout\" class=\"headerlink\" title=\"网格布局(GridLayout)\"></a>网格布局(<code>GridLayout</code>)</h2><blockquote>\n<ul>\n<li><p>网络布局也是一种比较常见的布局管理器。使用网格布局管理器后，会将所有的控件尽量按照给出的行数和列数来排列，同时网格布局管理器也会对控件进行尺寸的调整，使所有的控件具有相同的尺寸。在网格布局中，也会尽量使使用的空间成矩形的形式来显示。当窗体发生大小变化时，所有的空间也将自动改变大小来填充窗体。</p>\n</li>\n<li><p>网格布局是通过<code>GridLayout</code>类来创建的。GridLayout类具有三个构造器，使用无参构造器将创建具有默认行和默认列的网格布局。在创建网格布局管理器时最常用的就是具有两个整型参数的构造器，第一个参数表示网格布局管理器的行数，第二个参数表示网格布局管理器的列数。还有一个具有四个参数的构造器，除了可以定义行数和列数外，还可以定义控件间水平间距和垂直间距。</p>\n</li>\n<li><p><code>GridLayout</code>类中还定义了一些方法来对创建的网格布局进行操作 。<code>getRows</code>方法和<code>setRows</code>方法分别是获取和设置网格布局的行数。<code>getColumns</code>方法和<code>setColumns</code>方法分别是获取和设置网格布局 的列数。<code>getHgap</code>方法和<code>setHgap</code>方法分别是获取和设置网格布局 中控件间水平间距。<code>getVgap</code>方法和<code>setVgap</code>方法分别是获取和设 置网络布局中的控件间垂直间距。</p>\n</li>\n</ul>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>GridLayout()</code>,生成一个单列的GridLayout布局。默认情况下，无间隙。<br>1.<code>GridLayout(int row,int col)</code>,设定一个有行<code>row</code>和列`col的GridLayout布局。</li>\n<li>GridLayout(int row,int col,int horz,int vert),设定布局的行数和列数、组件的水平间距和垂直间距</li>\n</ol>\n<p><strong>代码大概和上面的设置一样，这里注意的是，网格布局是以行为基准的，如果定义的控件多了或者少了，不会改变行的数量，会根据情况改变列的数量</strong></p>\n</blockquote>\n<h2 id=\"边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog\"><a href=\"#边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog\" class=\"headerlink\" title=\"边框布局(BorderLayout)默认的是JWindow、JFrame,JDialog\"></a>边框布局(BorderLayout)默认的是<code>JWindow</code>、<code>JFrame</code>,<code>JDialog</code></h2><blockquote>\n<ul>\n<li><p>上面学习的流布局和网格布局具有很多相似的地方，但是边框布局就和他们存在很大的不同。在使用边框布局时，通常都会由程序员来为控件指定在容器中的位置。边框布局将容器分为五个部分，包括东南西北中五部分。在每一个部分中只能放置一个控件 ，所以如果控件超过五个将不能完全显示。在使用边框布局时需 要注意的是，当容器的大小发生变化时，四周的控件是不会发生变化的，只有中间的控件将发生变化。</p>\n</li>\n<li><p>边框布局是通过BorderLayout类创建的。BorderLayout类具有两个构造器，一个是无参构造器，另一个是指定控件间间距的构造器，通常使用无参构造器来创建边框布局管理器。</p>\n</li>\n<li><p>在前面将控件添加到容器中都是通过add方法，将控件作为add方法的参 数来进行添加的。但是在向边框布局容器中添加控件时，这样是不完全 的。在向边框布局容器中添加控件是使用具有两个参数的add方法。其中 第一个参数表示要添加的控件，第二个参数表示要添加到边框布局中的 哪一个位置。边框布局的位置表示是通过常量来表示的，具体常量如下所示</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><code>NORTH</code>    容器顶部</li>\n<li><code>SOUTH</code>    容器底部</li>\n<li><code>WEST</code>    容器左边</li>\n<li><code>EAST</code>    容器右边</li>\n<li><code>CENTER</code>    容器的中央</li>\n</ul>\n</blockquote>\n<p><strong>构造函数：</strong></p>\n<ol>\n<li><code>BorderLayout()</code>,生成一个默认的<code>BorderLayout</code>布局。默认情况下，没有间隙。</li>\n<li><code>BorderLayout(int horz,int vert)</code>,设定组件之间的水平间距和垂直间距。</li>\n</ol>\n<p><strong>注意这里还有一些常用的方法，就是设置水平和垂直的间距，上面已经赘述过了，这里就不再详说了</strong></p>\n</blockquote>\n<h2 id=\"空布局-null\"><a href=\"#空布局-null\" class=\"headerlink\" title=\"空布局(null)\"></a>空布局(<code>null</code>)</h2><blockquote>\n<p>空布局就是没有使用布局管理器，在空布局的情况下将根据控件的自身信息来为控件指定位置。这就使得控件的布局更加灵活，与此同时给开发人员带来了更大的工作量。</p>\n</blockquote>\n<p>空布局是不需要使用类来创建的，只需要在程序指定布局管理器 为null。将控件添加到空布局容器中时，仍然是使用<code>add</code>方法。因 为这里使用的是空布局管理器，所以在添加控件之前，要对控件 进行设置操作。设置操作是通过setBounds方法来完成的， setBounds方法的基本语法格式如下所示。</p>\n<blockquote>\n<p><code>public void setBounds(int x,int y,int width,int height);</code></p>\n<p>其中x和y表示的是控件最左上侧的坐标，从而也固定了该控件的 位置。<code>width</code>和<code>height</code>表示的是空间的宽度和高度，从而也指定了<br>控件的大小。</p>\n<p><strong>示例代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;frame.setLayout(<span class=\"keyword\">null</span>);<span class=\"comment\">//布局管理器设置为null</span></div><div class=\"line\">    JLabel label = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"First Name:\"</span>);</div><div class=\"line\">    label.setBounds(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>);<span class=\"comment\">//四个参数分别是x,y坐标和label的宽和高</span></div><div class=\"line\">    JTextField textField = <span class=\"keyword\">new</span> JTextField();</div><div class=\"line\">    textField.setBounds(<span class=\"number\">124</span>, <span class=\"number\">25</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>);</div><div class=\"line\">    frame.add(label);</div><div class=\"line\">    frame.add(textField);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"BoxLayout\"><a href=\"#BoxLayout\" class=\"headerlink\" title=\"BoxLayout\"></a>BoxLayout</h2><blockquote>\n<p><code>BoxLayout</code>是一种能够实现所有的控件水平放置和垂直放置，因为用到的不多，这里就简单的说一下<br><strong>构造函数</strong>：<code>public BoxLayout(Container target,int axis)</code>:其中<code>axis</code>表示放置的样式，主要有两种常用到的:</p>\n<ul>\n<li><code>X_AXIS</code>:指定组件应该从左到右放置。</li>\n<li><code>Y_AXIS</code>：指定组件从上到下放置</li>\n</ul>\n<p><strong>代码</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> oracle.jrockit.jfr.JFR;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuJu</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        JFrame frame = <span class=\"keyword\">new</span> JFrame();</div><div class=\"line\">        <span class=\"comment\">// frame.setLayout(new BorderLayout(frame.getComponentCount(),BoxLayout.Y_AXIS));</span></div><div class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class=\"line\">        JPanel panel = <span class=\"keyword\">new</span> JPanel();</div><div class=\"line\">        BoxLayout boxLayout = <span class=\"keyword\">new</span> BoxLayout(panel, BoxLayout.X_AXIS);</div><div class=\"line\">        panel.setLayout(boxLayout);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">            JButton button = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"cma\"</span>);</div><div class=\"line\">            panel.add(button);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frame.getContentPane().add(panel, BorderLayout.CENTER);</div><div class=\"line\">        <span class=\"comment\">// System.out.println(boxLayout.getTarget());</span></div><div class=\"line\">        frame.pack();</div><div class=\"line\">        <span class=\"comment\">//frame.setSize(300,200);</span></div><div class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"java干货篇之文字特效","date":"2017-04-09T08:15:16.000Z","_content":"\n# java干货篇文字特效\n## 立体效果的文字\n**主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/039)**\n\n## 阴影效果的文字\n**和面一样，只是平移的方式有些不同，详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/040)**\n\n## 倾斜效果的文字\n**主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见[源码](https://github.com/chenjiabing666/java_provide/tree/master/041)**\n**`public abstract void shear(double shx,double shy)`其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数**\n\n## 渐变效果的文字\n**主要使用了Graphics2D中的setPaint的方法,详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/042)**\n**`public abstract void setPaint(Paint paint)`paint封装了渐变颜色的Paint对象**\n**其中Paint对象的创建是由[GradientPaint](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html)初始化的,其中的构造函数如下：`GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2) `**\n\n## 会变色的文字\n**这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/043)**\n\n## 水印文字特效([源码](https://github.com/chenjiabing666/java_provide/tree/master/044))\n**水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：**\n**`public abstract void setComposite(Composite comp)`，其中Comp是[AlphaComposite](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html)对象，可以使用以下两种方式创建**\n>* `AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)`获得一个SRC_OVER规则的对象\n>* `AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)`同上\n\n## 动态绘制文本([源码](https://github.com/chenjiabing666/java_provide/tree/master/046))\n**主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的[博客文章](https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/)**\n>* `BufferedReader read=new BufferedReader(new FileReader(pathname))`\n>* `BufferedReader read=new BufferedReader(new InputStreamReader(in))`\n\n**由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码**\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/java干货篇之文字特效.md","raw":"---\ntitle: java干货篇之文字特效\ndate: 2017-04-09 16:15:16\ncategories: java学习\ntags: java图形与文本处理\n---\n\n# java干货篇文字特效\n## 立体效果的文字\n**主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/039)**\n\n## 阴影效果的文字\n**和面一样，只是平移的方式有些不同，详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/040)**\n\n## 倾斜效果的文字\n**主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见[源码](https://github.com/chenjiabing666/java_provide/tree/master/041)**\n**`public abstract void shear(double shx,double shy)`其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数**\n\n## 渐变效果的文字\n**主要使用了Graphics2D中的setPaint的方法,详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/042)**\n**`public abstract void setPaint(Paint paint)`paint封装了渐变颜色的Paint对象**\n**其中Paint对象的创建是由[GradientPaint](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html)初始化的,其中的构造函数如下：`GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2) `**\n\n## 会变色的文字\n**这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见[源码](https://github.com/chenjiabing666/java_provide/tree/master/043)**\n\n## 水印文字特效([源码](https://github.com/chenjiabing666/java_provide/tree/master/044))\n**水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：**\n**`public abstract void setComposite(Composite comp)`，其中Comp是[AlphaComposite](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html)对象，可以使用以下两种方式创建**\n>* `AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)`获得一个SRC_OVER规则的对象\n>* `AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)`同上\n\n## 动态绘制文本([源码](https://github.com/chenjiabing666/java_provide/tree/master/046))\n**主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的[博客文章](https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/)**\n>* `BufferedReader read=new BufferedReader(new FileReader(pathname))`\n>* `BufferedReader read=new BufferedReader(new InputStreamReader(in))`\n\n**由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码**\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"java干货篇之文字特效","published":1,"updated":"2017-04-09T08:15:55.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahway8001nl0uzxoam4v7p","content":"<h1 id=\"java干货篇文字特效\"><a href=\"#java干货篇文字特效\" class=\"headerlink\" title=\"java干货篇文字特效\"></a>java干货篇文字特效</h1><h2 id=\"立体效果的文字\"><a href=\"#立体效果的文字\" class=\"headerlink\" title=\"立体效果的文字\"></a>立体效果的文字</h2><p><strong>主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/039\" target=\"_blank\" rel=\"external\">源码</a></strong></p>\n<h2 id=\"阴影效果的文字\"><a href=\"#阴影效果的文字\" class=\"headerlink\" title=\"阴影效果的文字\"></a>阴影效果的文字</h2><p><strong>和面一样，只是平移的方式有些不同，详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/040\" target=\"_blank\" rel=\"external\">源码</a></strong></p>\n<h2 id=\"倾斜效果的文字\"><a href=\"#倾斜效果的文字\" class=\"headerlink\" title=\"倾斜效果的文字\"></a>倾斜效果的文字</h2><p><strong>主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/041\" target=\"_blank\" rel=\"external\">源码</a></strong><br><strong><code>public abstract void shear(double shx,double shy)</code>其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数</strong></p>\n<h2 id=\"渐变效果的文字\"><a href=\"#渐变效果的文字\" class=\"headerlink\" title=\"渐变效果的文字\"></a>渐变效果的文字</h2><p><strong>主要使用了Graphics2D中的setPaint的方法,详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/042\" target=\"_blank\" rel=\"external\">源码</a></strong><br><strong><code>public abstract void setPaint(Paint paint)</code>paint封装了渐变颜色的Paint对象</strong><br><strong>其中Paint对象的创建是由<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html\" target=\"_blank\" rel=\"external\">GradientPaint</a>初始化的,其中的构造函数如下：<code>GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)</code></strong></p>\n<h2 id=\"会变色的文字\"><a href=\"#会变色的文字\" class=\"headerlink\" title=\"会变色的文字\"></a>会变色的文字</h2><p><strong>这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/043\" target=\"_blank\" rel=\"external\">源码</a></strong></p>\n<h2 id=\"水印文字特效-源码\"><a href=\"#水印文字特效-源码\" class=\"headerlink\" title=\"水印文字特效(源码)\"></a>水印文字特效(<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/044\" target=\"_blank\" rel=\"external\">源码</a>)</h2><p><strong>水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：</strong><br><strong><code>public abstract void setComposite(Composite comp)</code>，其中Comp是<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html\" target=\"_blank\" rel=\"external\">AlphaComposite</a>对象，可以使用以下两种方式创建</strong></p>\n<blockquote>\n<ul>\n<li><code>AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)</code>获得一个SRC_OVER规则的对象</li>\n<li><code>AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)</code>同上</li>\n</ul>\n</blockquote>\n<h2 id=\"动态绘制文本-源码\"><a href=\"#动态绘制文本-源码\" class=\"headerlink\" title=\"动态绘制文本(源码)\"></a>动态绘制文本(<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/046\" target=\"_blank\" rel=\"external\">源码</a>)</h2><p><strong>主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的<a href=\"https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/\">博客文章</a></strong></p>\n<blockquote>\n<ul>\n<li><code>BufferedReader read=new BufferedReader(new FileReader(pathname))</code></li>\n<li><code>BufferedReader read=new BufferedReader(new InputStreamReader(in))</code></li>\n</ul>\n</blockquote>\n<p><strong>由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"java干货篇文字特效\"><a href=\"#java干货篇文字特效\" class=\"headerlink\" title=\"java干货篇文字特效\"></a>java干货篇文字特效</h1><h2 id=\"立体效果的文字\"><a href=\"#立体效果的文字\" class=\"headerlink\" title=\"立体效果的文字\"></a>立体效果的文字</h2><p><strong>主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/039\">源码</a></strong></p>\n<h2 id=\"阴影效果的文字\"><a href=\"#阴影效果的文字\" class=\"headerlink\" title=\"阴影效果的文字\"></a>阴影效果的文字</h2><p><strong>和面一样，只是平移的方式有些不同，详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/040\">源码</a></strong></p>\n<h2 id=\"倾斜效果的文字\"><a href=\"#倾斜效果的文字\" class=\"headerlink\" title=\"倾斜效果的文字\"></a>倾斜效果的文字</h2><p><strong>主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/041\">源码</a></strong><br><strong><code>public abstract void shear(double shx,double shy)</code>其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数</strong></p>\n<h2 id=\"渐变效果的文字\"><a href=\"#渐变效果的文字\" class=\"headerlink\" title=\"渐变效果的文字\"></a>渐变效果的文字</h2><p><strong>主要使用了Graphics2D中的setPaint的方法,详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/042\">源码</a></strong><br><strong><code>public abstract void setPaint(Paint paint)</code>paint封装了渐变颜色的Paint对象</strong><br><strong>其中Paint对象的创建是由<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html\">GradientPaint</a>初始化的,其中的构造函数如下：<code>GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)</code></strong></p>\n<h2 id=\"会变色的文字\"><a href=\"#会变色的文字\" class=\"headerlink\" title=\"会变色的文字\"></a>会变色的文字</h2><p><strong>这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/043\">源码</a></strong></p>\n<h2 id=\"水印文字特效-源码\"><a href=\"#水印文字特效-源码\" class=\"headerlink\" title=\"水印文字特效(源码)\"></a>水印文字特效(<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/044\">源码</a>)</h2><p><strong>水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：</strong><br><strong><code>public abstract void setComposite(Composite comp)</code>，其中Comp是<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html\">AlphaComposite</a>对象，可以使用以下两种方式创建</strong></p>\n<blockquote>\n<ul>\n<li><code>AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)</code>获得一个SRC_OVER规则的对象</li>\n<li><code>AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)</code>同上</li>\n</ul>\n</blockquote>\n<h2 id=\"动态绘制文本-源码\"><a href=\"#动态绘制文本-源码\" class=\"headerlink\" title=\"动态绘制文本(源码)\"></a>动态绘制文本(<a href=\"https://github.com/chenjiabing666/java_provide/tree/master/046\">源码</a>)</h2><p><strong>主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的<a href=\"https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/\">博客文章</a></strong></p>\n<blockquote>\n<ul>\n<li><code>BufferedReader read=new BufferedReader(new FileReader(pathname))</code></li>\n<li><code>BufferedReader read=new BufferedReader(new InputStreamReader(in))</code></li>\n</ul>\n</blockquote>\n<p><strong>由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"java连接mysql初探篇","date":"2017-04-16T06:13:04.000Z","_content":"\n# java连接mysql\n\n## 基本连接\n\n>* **加载驱动:** `Class.forName(com.mysql.jdbc.Driver)`\n\n>* **建立连接:`Connection conn=DriverManager.getConnection(url,user,password)`**\n>>其中`url=\"jdbc:mysql://localhost:3306/java_demo\"`,这里的`java_demo`是自己创建的数据库的名字,`user`是`mysql`数据库的管理员，`password`是密码\n>**下面直接连接数据库，返回的是接口Connection对象**\n```java\nimport java.sql.*;\npublic static Connection getConnection()\n{\n    Connection conn;\n    String driver=\"com.mysql.jdbc.Driver\";   //驱动名称\n    String url=\"jdbc:mysql://localhost:3306/java_demo\";   //url\n    String user=\"root\";\n    String password=\"root\";    //管理员和密码都是root\n    try{\n        Class.forName(driver);    //加载驱动，但是会有ClassNotFoundException异常，因此要避免异常\n        try{\n            conn = Dri verManager.getConnection(url, user, password);   //获得数据库连接\n            return conn;    //返回conn\n             \n        }catch(SQLException e)\n        {\n            e.printStackTrace();\n        }\n    \n        \n    }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n    }\n    return null;  //如果出现异常就会返回null\n    \n}\n```\n\n## 查询数据\n\n>* **首先根据所得的`Connection`对象创建`Statement`对象：`Statement statement = connection.createStatement()`;\n\n>* **写查询语句：`String sql=\"select * from student;\" `这里是查询所有student中的数据，详细内容请看我的[SQL干货篇二](https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/)**\n\n>* **创建ResultSet对象存储查询结果:`ResultSet res=statement.executeQuery(sql)`,详细的内容请看[官方文档ResultSet详细用法](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html)**\n\n**代码**\n```java\n    String sql=\"select * from student\";\n    if(!conn.isClosed())\n    {\n        Statement statement=conn.createStatement();   //这里的conn是上面连接数据库的返回的Connection对象\n        ResultSet res=statement.executeQuery(sql);   //执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说\n        while(res.next())    //如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果\n        {\n            int id=res.getInt(\"id\");    //得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....\n            String name=res.getString(\"name\");  //得到姓名，对应的是mysql中的Char varChar类型\n        }\n    }\n```\n\n\n\n\n>**当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口[PrepareStatement](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html)**\n\n>* **首先编写sql语句:`sql=\"select * from student where id=?;\";`,这里的`?`表示一个占位，将条件在后面给出，但是这里一定要用`?`**\n\n>* **创建对象：`PrepareStatement pre=conn.preparestatement(sql);`这里传入参数`sql`**\n\n>* **设置`sql`中的条件语句，填补占位`?`的值:pre.setInt(1,1);这里的`SetInt`设置`id`值的为1，因为这的`id`是`int`类型的，第一个参数是表示`prepareindex`，就是表示第一个占位`?`,当然第二个就是2,其中还有`SetString(prepareindex String var)`,用来给定表中的`char`后者`varchar`类型的值**\n\n>**代码：**\n```java\nif(!connection.isClosed())\n                {\n                    String sql=\"select * from course where id=?,name=?\";      \n                    PreparedStatement preparedStatement=connection.prepareStatement(sql);\n                    preparedStatement.setInt(1,1);    //给定条件中的值\n                    prepareStatement.setString(2,\"jack\");  //为第二个？赋值\n                    ResultSet res=preparedStatement.executeQuery();    //执行查询，返回的仍然是ResultSet对象\n                    while(res.next())\n                    {\n                        int id=res.getInt(\"id\");\n                        String name=res.getString(\"name\");\n                        System.out.println(id+\"--\"+name);\n                    }\n                }\n```\n\n## 插入数据\n\n>**插入数据和上面的两种方法基本是一样的，不同的是`mysql`语句不同，还有的就是执行语句改成了`executeUpdate(sql)`，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为`executeUpdate`即可**\n\n>**代码：**\n```java\n public static int save(MemoBean memo) {\n        String sql = \"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);\";\n        Connection conn = getConnection();\n        PreparedStatement ps = null;\n        try {\n            ps = conn.prepareStatement(sql);\n            ps.setString(1, memo.getUsername());     //设值value中的值 \n            ps.setString(2, memo.getTitle());\n            ps.setString(3, memo.getContent());\n            ps.setString(4, memo.getMemotype());\n            ps.setString(5, memo.getMemotime());\n            return ps.executeUpdate();     //这里使用的是excuteUpdate\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (ps != null) {\n                try {\n                    ps.close();   //关闭预编译对象\n                } catch (SQLException e) { \n                    e.printStackTrace();   \n                }\n            }\n            if (conn != null) {\n                try {\n                    conn.close();       //关闭Connection对象\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        } \n        return -1;          //没有插入成功返回-1\n    }\n\n```\n\n\n## 更新数据\n\n>**这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可**\n\n>**代码：**\n```java\npublic static int update(MemoBean memo) {\n        String sql = \"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;\";//查询语句\n        Connection connection = getConnection();\n        PreparedStatement ps = null;\n        try {\n            ps = connection.prepareStatement(sql);\n            ps.setString(1, memo.getUsername());    //设置条件语句中的值\n            ps.setString(2, memo.getTitle()); \n            ps.setString(3, memo.getContent());\n            ps.setString(4, memo.getMemotype());\n            ps.setString(5, memo.getMemotime());\n            ps.setInt(6,memo.getId());\n            return ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        finally {\n            if(ps!=null)\n            {\n                try {\n                    ps.close();\n                }catch (SQLException e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            if(connection!=null)\n            {\n                try {\n                    connection.close();\n                }catch (SQLException e)\n                {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return -1;\n    }\n\n```\n\n## 最后说\n>* **上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看**\n\n>* **上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用`execute(sql)`即可执行，删除表也是用`execute(sql)`即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行**\n\n>* **其中`executeUpdate(sql)`适用于`create`,`insert`,`update`,`delete`,但是`executeQuery(sql)`适用于`select`,具体见官方文档**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/java连接mysql初探篇.md","raw":"---\ntitle: java连接mysql初探篇\ndate: 2017-04-16 14:13:04\ncategories: java学习\ntags: JDBC\n---\n\n# java连接mysql\n\n## 基本连接\n\n>* **加载驱动:** `Class.forName(com.mysql.jdbc.Driver)`\n\n>* **建立连接:`Connection conn=DriverManager.getConnection(url,user,password)`**\n>>其中`url=\"jdbc:mysql://localhost:3306/java_demo\"`,这里的`java_demo`是自己创建的数据库的名字,`user`是`mysql`数据库的管理员，`password`是密码\n>**下面直接连接数据库，返回的是接口Connection对象**\n```java\nimport java.sql.*;\npublic static Connection getConnection()\n{\n    Connection conn;\n    String driver=\"com.mysql.jdbc.Driver\";   //驱动名称\n    String url=\"jdbc:mysql://localhost:3306/java_demo\";   //url\n    String user=\"root\";\n    String password=\"root\";    //管理员和密码都是root\n    try{\n        Class.forName(driver);    //加载驱动，但是会有ClassNotFoundException异常，因此要避免异常\n        try{\n            conn = Dri verManager.getConnection(url, user, password);   //获得数据库连接\n            return conn;    //返回conn\n             \n        }catch(SQLException e)\n        {\n            e.printStackTrace();\n        }\n    \n        \n    }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n    }\n    return null;  //如果出现异常就会返回null\n    \n}\n```\n\n## 查询数据\n\n>* **首先根据所得的`Connection`对象创建`Statement`对象：`Statement statement = connection.createStatement()`;\n\n>* **写查询语句：`String sql=\"select * from student;\" `这里是查询所有student中的数据，详细内容请看我的[SQL干货篇二](https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/)**\n\n>* **创建ResultSet对象存储查询结果:`ResultSet res=statement.executeQuery(sql)`,详细的内容请看[官方文档ResultSet详细用法](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html)**\n\n**代码**\n```java\n    String sql=\"select * from student\";\n    if(!conn.isClosed())\n    {\n        Statement statement=conn.createStatement();   //这里的conn是上面连接数据库的返回的Connection对象\n        ResultSet res=statement.executeQuery(sql);   //执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说\n        while(res.next())    //如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果\n        {\n            int id=res.getInt(\"id\");    //得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....\n            String name=res.getString(\"name\");  //得到姓名，对应的是mysql中的Char varChar类型\n        }\n    }\n```\n\n\n\n\n>**当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口[PrepareStatement](http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html)**\n\n>* **首先编写sql语句:`sql=\"select * from student where id=?;\";`,这里的`?`表示一个占位，将条件在后面给出，但是这里一定要用`?`**\n\n>* **创建对象：`PrepareStatement pre=conn.preparestatement(sql);`这里传入参数`sql`**\n\n>* **设置`sql`中的条件语句，填补占位`?`的值:pre.setInt(1,1);这里的`SetInt`设置`id`值的为1，因为这的`id`是`int`类型的，第一个参数是表示`prepareindex`，就是表示第一个占位`?`,当然第二个就是2,其中还有`SetString(prepareindex String var)`,用来给定表中的`char`后者`varchar`类型的值**\n\n>**代码：**\n```java\nif(!connection.isClosed())\n                {\n                    String sql=\"select * from course where id=?,name=?\";      \n                    PreparedStatement preparedStatement=connection.prepareStatement(sql);\n                    preparedStatement.setInt(1,1);    //给定条件中的值\n                    prepareStatement.setString(2,\"jack\");  //为第二个？赋值\n                    ResultSet res=preparedStatement.executeQuery();    //执行查询，返回的仍然是ResultSet对象\n                    while(res.next())\n                    {\n                        int id=res.getInt(\"id\");\n                        String name=res.getString(\"name\");\n                        System.out.println(id+\"--\"+name);\n                    }\n                }\n```\n\n## 插入数据\n\n>**插入数据和上面的两种方法基本是一样的，不同的是`mysql`语句不同，还有的就是执行语句改成了`executeUpdate(sql)`，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为`executeUpdate`即可**\n\n>**代码：**\n```java\n public static int save(MemoBean memo) {\n        String sql = \"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);\";\n        Connection conn = getConnection();\n        PreparedStatement ps = null;\n        try {\n            ps = conn.prepareStatement(sql);\n            ps.setString(1, memo.getUsername());     //设值value中的值 \n            ps.setString(2, memo.getTitle());\n            ps.setString(3, memo.getContent());\n            ps.setString(4, memo.getMemotype());\n            ps.setString(5, memo.getMemotime());\n            return ps.executeUpdate();     //这里使用的是excuteUpdate\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (ps != null) {\n                try {\n                    ps.close();   //关闭预编译对象\n                } catch (SQLException e) { \n                    e.printStackTrace();   \n                }\n            }\n            if (conn != null) {\n                try {\n                    conn.close();       //关闭Connection对象\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        } \n        return -1;          //没有插入成功返回-1\n    }\n\n```\n\n\n## 更新数据\n\n>**这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可**\n\n>**代码：**\n```java\npublic static int update(MemoBean memo) {\n        String sql = \"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;\";//查询语句\n        Connection connection = getConnection();\n        PreparedStatement ps = null;\n        try {\n            ps = connection.prepareStatement(sql);\n            ps.setString(1, memo.getUsername());    //设置条件语句中的值\n            ps.setString(2, memo.getTitle()); \n            ps.setString(3, memo.getContent());\n            ps.setString(4, memo.getMemotype());\n            ps.setString(5, memo.getMemotime());\n            ps.setInt(6,memo.getId());\n            return ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        finally {\n            if(ps!=null)\n            {\n                try {\n                    ps.close();\n                }catch (SQLException e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            if(connection!=null)\n            {\n                try {\n                    connection.close();\n                }catch (SQLException e)\n                {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return -1;\n    }\n\n```\n\n## 最后说\n>* **上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看**\n\n>* **上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用`execute(sql)`即可执行，删除表也是用`execute(sql)`即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行**\n\n>* **其中`executeUpdate(sql)`适用于`create`,`insert`,`update`,`delete`,但是`executeQuery(sql)`适用于`select`,具体见官方文档**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"java连接mysql初探篇","published":1,"updated":"2017-04-27T15:06:02.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayb001sl0uzu6rfcz43","content":"<h1 id=\"java连接mysql\"><a href=\"#java连接mysql\" class=\"headerlink\" title=\"java连接mysql\"></a>java连接mysql</h1><h2 id=\"基本连接\"><a href=\"#基本连接\" class=\"headerlink\" title=\"基本连接\"></a>基本连接</h2><blockquote>\n<ul>\n<li><p><strong>加载驱动:</strong> <code>Class.forName(com.mysql.jdbc.Driver)</code></p>\n</li>\n<li><p><strong>建立连接:<code>Connection conn=DriverManager.getConnection(url,user,password)</code></strong></p>\n<blockquote>\n<p>其中<code>url=&quot;jdbc:mysql://localhost:3306/java_demo&quot;</code>,这里的<code>java_demo</code>是自己创建的数据库的名字,<code>user</code>是<code>mysql</code>数据库的管理员，<code>password</code>是密码<br><strong>下面直接连接数据库，返回的是接口Connection对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    Connection conn;</div><div class=\"line\">    String driver=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;   <span class=\"comment\">//驱动名称</span></div><div class=\"line\">    String url=<span class=\"string\">\"jdbc:mysql://localhost:3306/java_demo\"</span>;   <span class=\"comment\">//url</span></div><div class=\"line\">    String user=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">    String password=<span class=\"string\">\"root\"</span>;    <span class=\"comment\">//管理员和密码都是root</span></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        Class.forName(driver);    <span class=\"comment\">//加载驱动，但是会有ClassNotFoundException异常，因此要避免异常</span></div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            conn = Dri verManager.getConnection(url, user, password);   <span class=\"comment\">//获得数据库连接</span></div><div class=\"line\">            <span class=\"keyword\">return</span> conn;    <span class=\"comment\">//返回conn</span></div><div class=\"line\">             </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        </div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  <span class=\"comment\">//如果出现异常就会返回null</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><blockquote>\n<ul>\n<li><p>**首先根据所得的<code>Connection</code>对象创建<code>Statement</code>对象：<code>Statement statement = connection.createStatement()</code>;</p>\n</li>\n<li><p><strong>写查询语句：<code>String sql=&quot;select * from student;&quot;</code>这里是查询所有student中的数据，详细内容请看我的<a href=\"https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/\">SQL干货篇二</a></strong></p>\n</li>\n<li><p><strong>创建ResultSet对象存储查询结果:<code>ResultSet res=statement.executeQuery(sql)</code>,详细的内容请看<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html\" target=\"_blank\" rel=\"external\">官方文档ResultSet详细用法</a></strong></p>\n</li>\n</ul>\n</blockquote>\n<p><strong>代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String sql=<span class=\"string\">\"select * from student\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(!conn.isClosed())</div><div class=\"line\">&#123;</div><div class=\"line\">    Statement statement=conn.createStatement();   <span class=\"comment\">//这里的conn是上面连接数据库的返回的Connection对象</span></div><div class=\"line\">    ResultSet res=statement.executeQuery(sql);   <span class=\"comment\">//执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(res.next())    <span class=\"comment\">//如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> id=res.getInt(<span class=\"string\">\"id\"</span>);    <span class=\"comment\">//得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....</span></div><div class=\"line\">        String name=res.getString(<span class=\"string\">\"name\"</span>);  <span class=\"comment\">//得到姓名，对应的是mysql中的Char varChar类型</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html\" target=\"_blank\" rel=\"external\">PrepareStatement</a></strong></p>\n<ul>\n<li><p><strong>首先编写sql语句:<code>sql=&quot;select * from student where id=?;&quot;;</code>,这里的<code>?</code>表示一个占位，将条件在后面给出，但是这里一定要用<code>?</code></strong></p>\n</li>\n<li><p><strong>创建对象：<code>PrepareStatement pre=conn.preparestatement(sql);</code>这里传入参数<code>sql</code></strong></p>\n</li>\n<li><p><strong>设置<code>sql</code>中的条件语句，填补占位<code>?</code>的值:pre.setInt(1,1);这里的<code>SetInt</code>设置<code>id</code>值的为1，因为这的<code>id</code>是<code>int</code>类型的，第一个参数是表示<code>prepareindex</code>，就是表示第一个占位<code>?</code>,当然第二个就是2,其中还有<code>SetString(prepareindex String var)</code>,用来给定表中的<code>char</code>后者<code>varchar</code>类型的值</strong></p>\n</li>\n</ul>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!connection.isClosed())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    String sql=<span class=\"string\">\"select * from course where id=?,name=?\"</span>;      </div><div class=\"line\">                    PreparedStatement preparedStatement=connection.prepareStatement(sql);</div><div class=\"line\">                    preparedStatement.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>);    <span class=\"comment\">//给定条件中的值</span></div><div class=\"line\">                    prepareStatement.setString(<span class=\"number\">2</span>,<span class=\"string\">\"jack\"</span>);  <span class=\"comment\">//为第二个？赋值</span></div><div class=\"line\">                    ResultSet res=preparedStatement.executeQuery();    <span class=\"comment\">//执行查询，返回的仍然是ResultSet对象</span></div><div class=\"line\">                    <span class=\"keyword\">while</span>(res.next())</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> id=res.getInt(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">                        String name=res.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">                        System.out.println(id+<span class=\"string\">\"--\"</span>+name);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><blockquote>\n<p><strong>插入数据和上面的两种方法基本是一样的，不同的是<code>mysql</code>语句不同，还有的就是执行语句改成了<code>executeUpdate(sql)</code>，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为<code>executeUpdate</code>即可</strong></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">save</span><span class=\"params\">(MemoBean memo)</span> </span>&#123;</div><div class=\"line\">       String sql = <span class=\"string\">\"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);\"</span>;</div><div class=\"line\">       Connection conn = getConnection();</div><div class=\"line\">       PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ps = conn.prepareStatement(sql);</div><div class=\"line\">           ps.setString(<span class=\"number\">1</span>, memo.getUsername());     <span class=\"comment\">//设值value中的值 </span></div><div class=\"line\">           ps.setString(<span class=\"number\">2</span>, memo.getTitle());</div><div class=\"line\">           ps.setString(<span class=\"number\">3</span>, memo.getContent());</div><div class=\"line\">           ps.setString(<span class=\"number\">4</span>, memo.getMemotype());</div><div class=\"line\">           ps.setString(<span class=\"number\">5</span>, memo.getMemotime());</div><div class=\"line\">           <span class=\"keyword\">return</span> ps.executeUpdate();     <span class=\"comment\">//这里使用的是excuteUpdate</span></div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   ps.close();   <span class=\"comment\">//关闭预编译对象</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123; </div><div class=\"line\">                   e.printStackTrace();   </div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   conn.close();       <span class=\"comment\">//关闭Connection对象</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; </div><div class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;          <span class=\"comment\">//没有插入成功返回-1</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><blockquote>\n<p><strong>这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可</strong></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(MemoBean memo)</span> </span>&#123;</div><div class=\"line\">        String sql = <span class=\"string\">\"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;\"</span>;<span class=\"comment\">//查询语句</span></div><div class=\"line\">        Connection connection = getConnection();</div><div class=\"line\">        PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ps = connection.prepareStatement(sql);</div><div class=\"line\">            ps.setString(<span class=\"number\">1</span>, memo.getUsername());    <span class=\"comment\">//设置条件语句中的值</span></div><div class=\"line\">            ps.setString(<span class=\"number\">2</span>, memo.getTitle()); </div><div class=\"line\">            ps.setString(<span class=\"number\">3</span>, memo.getContent());</div><div class=\"line\">            ps.setString(<span class=\"number\">4</span>, memo.getMemotype());</div><div class=\"line\">            ps.setString(<span class=\"number\">5</span>, memo.getMemotime());</div><div class=\"line\">            ps.setInt(<span class=\"number\">6</span>,memo.getId());</div><div class=\"line\">            <span class=\"keyword\">return</span> ps.executeUpdate();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(ps!=<span class=\"keyword\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span> (SQLException e)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    connection.close();</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span> (SQLException e)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"最后说\"><a href=\"#最后说\" class=\"headerlink\" title=\"最后说\"></a>最后说</h2><blockquote>\n<ul>\n<li><p><strong>上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看</strong></p>\n</li>\n<li><p><strong>上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用<code>execute(sql)</code>即可执行，删除表也是用<code>execute(sql)</code>即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行</strong></p>\n</li>\n<li><p><strong>其中<code>executeUpdate(sql)</code>适用于<code>create</code>,<code>insert</code>,<code>update</code>,<code>delete</code>,但是<code>executeQuery(sql)</code>适用于<code>select</code>,具体见官方文档</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"java连接mysql\"><a href=\"#java连接mysql\" class=\"headerlink\" title=\"java连接mysql\"></a>java连接mysql</h1><h2 id=\"基本连接\"><a href=\"#基本连接\" class=\"headerlink\" title=\"基本连接\"></a>基本连接</h2><blockquote>\n<ul>\n<li><p><strong>加载驱动:</strong> <code>Class.forName(com.mysql.jdbc.Driver)</code></p>\n</li>\n<li><p><strong>建立连接:<code>Connection conn=DriverManager.getConnection(url,user,password)</code></strong></p>\n<blockquote>\n<p>其中<code>url=&quot;jdbc:mysql://localhost:3306/java_demo&quot;</code>,这里的<code>java_demo</code>是自己创建的数据库的名字,<code>user</code>是<code>mysql</code>数据库的管理员，<code>password</code>是密码<br><strong>下面直接连接数据库，返回的是接口Connection对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    Connection conn;</div><div class=\"line\">    String driver=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;   <span class=\"comment\">//驱动名称</span></div><div class=\"line\">    String url=<span class=\"string\">\"jdbc:mysql://localhost:3306/java_demo\"</span>;   <span class=\"comment\">//url</span></div><div class=\"line\">    String user=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">    String password=<span class=\"string\">\"root\"</span>;    <span class=\"comment\">//管理员和密码都是root</span></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        Class.forName(driver);    <span class=\"comment\">//加载驱动，但是会有ClassNotFoundException异常，因此要避免异常</span></div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            conn = Dri verManager.getConnection(url, user, password);   <span class=\"comment\">//获得数据库连接</span></div><div class=\"line\">            <span class=\"keyword\">return</span> conn;    <span class=\"comment\">//返回conn</span></div><div class=\"line\">             </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        </div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  <span class=\"comment\">//如果出现异常就会返回null</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><blockquote>\n<ul>\n<li><p>**首先根据所得的<code>Connection</code>对象创建<code>Statement</code>对象：<code>Statement statement = connection.createStatement()</code>;</p>\n</li>\n<li><p><strong>写查询语句：<code>String sql=&quot;select * from student;&quot;</code>这里是查询所有student中的数据，详细内容请看我的<a href=\"https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/\">SQL干货篇二</a></strong></p>\n</li>\n<li><p><strong>创建ResultSet对象存储查询结果:<code>ResultSet res=statement.executeQuery(sql)</code>,详细的内容请看<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html\">官方文档ResultSet详细用法</a></strong></p>\n</li>\n</ul>\n</blockquote>\n<p><strong>代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String sql=<span class=\"string\">\"select * from student\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(!conn.isClosed())</div><div class=\"line\">&#123;</div><div class=\"line\">    Statement statement=conn.createStatement();   <span class=\"comment\">//这里的conn是上面连接数据库的返回的Connection对象</span></div><div class=\"line\">    ResultSet res=statement.executeQuery(sql);   <span class=\"comment\">//执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(res.next())    <span class=\"comment\">//如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> id=res.getInt(<span class=\"string\">\"id\"</span>);    <span class=\"comment\">//得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....</span></div><div class=\"line\">        String name=res.getString(<span class=\"string\">\"name\"</span>);  <span class=\"comment\">//得到姓名，对应的是mysql中的Char varChar类型</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口<a href=\"http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html\">PrepareStatement</a></strong></p>\n<ul>\n<li><p><strong>首先编写sql语句:<code>sql=&quot;select * from student where id=?;&quot;;</code>,这里的<code>?</code>表示一个占位，将条件在后面给出，但是这里一定要用<code>?</code></strong></p>\n</li>\n<li><p><strong>创建对象：<code>PrepareStatement pre=conn.preparestatement(sql);</code>这里传入参数<code>sql</code></strong></p>\n</li>\n<li><p><strong>设置<code>sql</code>中的条件语句，填补占位<code>?</code>的值:pre.setInt(1,1);这里的<code>SetInt</code>设置<code>id</code>值的为1，因为这的<code>id</code>是<code>int</code>类型的，第一个参数是表示<code>prepareindex</code>，就是表示第一个占位<code>?</code>,当然第二个就是2,其中还有<code>SetString(prepareindex String var)</code>,用来给定表中的<code>char</code>后者<code>varchar</code>类型的值</strong></p>\n</li>\n</ul>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!connection.isClosed())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    String sql=<span class=\"string\">\"select * from course where id=?,name=?\"</span>;      </div><div class=\"line\">                    PreparedStatement preparedStatement=connection.prepareStatement(sql);</div><div class=\"line\">                    preparedStatement.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>);    <span class=\"comment\">//给定条件中的值</span></div><div class=\"line\">                    prepareStatement.setString(<span class=\"number\">2</span>,<span class=\"string\">\"jack\"</span>);  <span class=\"comment\">//为第二个？赋值</span></div><div class=\"line\">                    ResultSet res=preparedStatement.executeQuery();    <span class=\"comment\">//执行查询，返回的仍然是ResultSet对象</span></div><div class=\"line\">                    <span class=\"keyword\">while</span>(res.next())</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> id=res.getInt(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">                        String name=res.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">                        System.out.println(id+<span class=\"string\">\"--\"</span>+name);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><blockquote>\n<p><strong>插入数据和上面的两种方法基本是一样的，不同的是<code>mysql</code>语句不同，还有的就是执行语句改成了<code>executeUpdate(sql)</code>，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为<code>executeUpdate</code>即可</strong></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">save</span><span class=\"params\">(MemoBean memo)</span> </span>&#123;</div><div class=\"line\">       String sql = <span class=\"string\">\"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);\"</span>;</div><div class=\"line\">       Connection conn = getConnection();</div><div class=\"line\">       PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ps = conn.prepareStatement(sql);</div><div class=\"line\">           ps.setString(<span class=\"number\">1</span>, memo.getUsername());     <span class=\"comment\">//设值value中的值 </span></div><div class=\"line\">           ps.setString(<span class=\"number\">2</span>, memo.getTitle());</div><div class=\"line\">           ps.setString(<span class=\"number\">3</span>, memo.getContent());</div><div class=\"line\">           ps.setString(<span class=\"number\">4</span>, memo.getMemotype());</div><div class=\"line\">           ps.setString(<span class=\"number\">5</span>, memo.getMemotime());</div><div class=\"line\">           <span class=\"keyword\">return</span> ps.executeUpdate();     <span class=\"comment\">//这里使用的是excuteUpdate</span></div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   ps.close();   <span class=\"comment\">//关闭预编译对象</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123; </div><div class=\"line\">                   e.printStackTrace();   </div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   conn.close();       <span class=\"comment\">//关闭Connection对象</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; </div><div class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;          <span class=\"comment\">//没有插入成功返回-1</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><blockquote>\n<p><strong>这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可</strong></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(MemoBean memo)</span> </span>&#123;</div><div class=\"line\">        String sql = <span class=\"string\">\"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;\"</span>;<span class=\"comment\">//查询语句</span></div><div class=\"line\">        Connection connection = getConnection();</div><div class=\"line\">        PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ps = connection.prepareStatement(sql);</div><div class=\"line\">            ps.setString(<span class=\"number\">1</span>, memo.getUsername());    <span class=\"comment\">//设置条件语句中的值</span></div><div class=\"line\">            ps.setString(<span class=\"number\">2</span>, memo.getTitle()); </div><div class=\"line\">            ps.setString(<span class=\"number\">3</span>, memo.getContent());</div><div class=\"line\">            ps.setString(<span class=\"number\">4</span>, memo.getMemotype());</div><div class=\"line\">            ps.setString(<span class=\"number\">5</span>, memo.getMemotime());</div><div class=\"line\">            ps.setInt(<span class=\"number\">6</span>,memo.getId());</div><div class=\"line\">            <span class=\"keyword\">return</span> ps.executeUpdate();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(ps!=<span class=\"keyword\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span> (SQLException e)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    connection.close();</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span> (SQLException e)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"最后说\"><a href=\"#最后说\" class=\"headerlink\" title=\"最后说\"></a>最后说</h2><blockquote>\n<ul>\n<li><p><strong>上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看</strong></p>\n</li>\n<li><p><strong>上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用<code>execute(sql)</code>即可执行，删除表也是用<code>execute(sql)</code>即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行</strong></p>\n</li>\n<li><p><strong>其中<code>executeUpdate(sql)</code>适用于<code>create</code>,<code>insert</code>,<code>update</code>,<code>delete</code>,但是<code>executeQuery(sql)</code>适用于<code>select</code>,具体见官方文档</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"matplotlib绘制图形基础","date":"2017-04-01T03:46:34.000Z","_content":"\n# matplotlib绘制基本图形\n## 折线图\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx=np.arange(0,10,1) #创建一个0-10之间以1为间隔的numpy数组\ny=x+10   \nplt.plot(x,y,color='red',linestyle='--',marker='>',linewidth=3,label='example one')  #绘制图形\nplt.savefig('first.png',dpi=50)  #保存图形，dpi表示\nplt.legend()   #显示图例\nplt.show()   #显示图形\n```\n>**图形展示**\n>![折线图](http://ono60m7tl.bkt.clouddn.com/first.png)\n>**说明**\n>plt.plot()可以直接绘制折线，其中marker是折线上的标记，linewidth是折线的宽度，label是图例，如果要想显示就要设置plt.legend(),linestyle是折线的风格，color是颜色\n\n## 饼状图\n```python\nimport matplotlib.pyplot as plt\n\nslices = [2,3,4,9]   #指定每一个切片的大小，这里就是每块的比例\nactivities = ['sleeping','eating','working','playing']   #指定标签\ncols = ['c','m','r','b']   #y颜色\n\nplt.pie(slices,   \n        labels=activities,\n        colors=cols,   #指定每一个区块的颜色\n        startangle=90,     #开始角度，默认是0度，从x轴开始，90度从y轴开始\n        shadow= True,    #阴影效果\n        explode=(0,0.1,0,0),     #拉出第二个切片，如果全为0就不拉出，这里的数字是相对与圆心的距离\n        autopct='%1.1f%%')       #显示百分比\nplt.title('Interesting Graph\\nCheck it out')  #设置标题\nplt.show()\n```\n>**图片展示**\n>![饼状图](http://ono60m7tl.bkt.clouddn.com/second.png)\n\n## 散点图\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.random.rand(1000)\ny=np.random.rand(len(x))\nplt.scatter(x,y,color='r',alpha=0.3,label='example one',marker='o')  #绘图\nplt.legend()\n#plt.axis([0,2,0,2]) #设置坐标的范围\nplt.show()\n```\n>**图片展示**\n>![散点图](http://ono60m7tl.bkt.clouddn.com/third.png)\n\n## 直方图\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx=np.random.randint(1,1000,200)\naxis=plt.gca()   #得到当前的绘图对象\naxis.hist(x,bins=35,facecolor='r',normed=True,histtype='bar',alpha=0.5)#bins表示直方图的个数，histtype表示直方图的样式，normed如果为True就将直方归一化，显示概率密度，默认是False\naxis.set_xlabel(\"Values\")  #设置x的标签\naxis.set_ylabel(\"Frequency\")   \naxis.set_title(\"HIST\")\nplt.show()\n\n```\n>**图片展示**\n>![直方图](http://ono60m7tl.bkt.clouddn.com/four.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/matplotlib绘制图形基础.md","raw":"---\ntitle: matplotlib绘制图形基础\ndate: 2017-04-01 11:46:34\ncategories: python数据挖掘与分析\ntags: matplotlib\n---\n\n# matplotlib绘制基本图形\n## 折线图\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx=np.arange(0,10,1) #创建一个0-10之间以1为间隔的numpy数组\ny=x+10   \nplt.plot(x,y,color='red',linestyle='--',marker='>',linewidth=3,label='example one')  #绘制图形\nplt.savefig('first.png',dpi=50)  #保存图形，dpi表示\nplt.legend()   #显示图例\nplt.show()   #显示图形\n```\n>**图形展示**\n>![折线图](http://ono60m7tl.bkt.clouddn.com/first.png)\n>**说明**\n>plt.plot()可以直接绘制折线，其中marker是折线上的标记，linewidth是折线的宽度，label是图例，如果要想显示就要设置plt.legend(),linestyle是折线的风格，color是颜色\n\n## 饼状图\n```python\nimport matplotlib.pyplot as plt\n\nslices = [2,3,4,9]   #指定每一个切片的大小，这里就是每块的比例\nactivities = ['sleeping','eating','working','playing']   #指定标签\ncols = ['c','m','r','b']   #y颜色\n\nplt.pie(slices,   \n        labels=activities,\n        colors=cols,   #指定每一个区块的颜色\n        startangle=90,     #开始角度，默认是0度，从x轴开始，90度从y轴开始\n        shadow= True,    #阴影效果\n        explode=(0,0.1,0,0),     #拉出第二个切片，如果全为0就不拉出，这里的数字是相对与圆心的距离\n        autopct='%1.1f%%')       #显示百分比\nplt.title('Interesting Graph\\nCheck it out')  #设置标题\nplt.show()\n```\n>**图片展示**\n>![饼状图](http://ono60m7tl.bkt.clouddn.com/second.png)\n\n## 散点图\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.random.rand(1000)\ny=np.random.rand(len(x))\nplt.scatter(x,y,color='r',alpha=0.3,label='example one',marker='o')  #绘图\nplt.legend()\n#plt.axis([0,2,0,2]) #设置坐标的范围\nplt.show()\n```\n>**图片展示**\n>![散点图](http://ono60m7tl.bkt.clouddn.com/third.png)\n\n## 直方图\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx=np.random.randint(1,1000,200)\naxis=plt.gca()   #得到当前的绘图对象\naxis.hist(x,bins=35,facecolor='r',normed=True,histtype='bar',alpha=0.5)#bins表示直方图的个数，histtype表示直方图的样式，normed如果为True就将直方归一化，显示概率密度，默认是False\naxis.set_xlabel(\"Values\")  #设置x的标签\naxis.set_ylabel(\"Frequency\")   \naxis.set_title(\"HIST\")\nplt.show()\n\n```\n>**图片展示**\n>![直方图](http://ono60m7tl.bkt.clouddn.com/four.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"matplotlib绘制图形基础","published":1,"updated":"2017-04-01T03:49:03.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayf001ul0uzdjnl4tta","content":"<h1 id=\"matplotlib绘制基本图形\"><a href=\"#matplotlib绘制基本图形\" class=\"headerlink\" title=\"matplotlib绘制基本图形\"></a>matplotlib绘制基本图形</h1><h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x=np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">1</span>) <span class=\"comment\">#创建一个0-10之间以1为间隔的numpy数组</span></div><div class=\"line\">y=x+<span class=\"number\">10</span>   </div><div class=\"line\">plt.plot(x,y,color=<span class=\"string\">'red'</span>,linestyle=<span class=\"string\">'--'</span>,marker=<span class=\"string\">'&gt;'</span>,linewidth=<span class=\"number\">3</span>,label=<span class=\"string\">'example one'</span>)  <span class=\"comment\">#绘制图形</span></div><div class=\"line\">plt.savefig(<span class=\"string\">'first.png'</span>,dpi=<span class=\"number\">50</span>)  <span class=\"comment\">#保存图形，dpi表示</span></div><div class=\"line\">plt.legend()   <span class=\"comment\">#显示图例</span></div><div class=\"line\">plt.show()   <span class=\"comment\">#显示图形</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图形展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/first.png\" alt=\"折线图\"><br><strong>说明</strong><br>plt.plot()可以直接绘制折线，其中marker是折线上的标记，linewidth是折线的宽度，label是图例，如果要想显示就要设置plt.legend(),linestyle是折线的风格，color是颜色</p>\n</blockquote>\n<h2 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"></div><div class=\"line\">slices = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>]   <span class=\"comment\">#指定每一个切片的大小，这里就是每块的比例</span></div><div class=\"line\">activities = [<span class=\"string\">'sleeping'</span>,<span class=\"string\">'eating'</span>,<span class=\"string\">'working'</span>,<span class=\"string\">'playing'</span>]   <span class=\"comment\">#指定标签</span></div><div class=\"line\">cols = [<span class=\"string\">'c'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'r'</span>,<span class=\"string\">'b'</span>]   <span class=\"comment\">#y颜色</span></div><div class=\"line\"></div><div class=\"line\">plt.pie(slices,   </div><div class=\"line\">        labels=activities,</div><div class=\"line\">        colors=cols,   <span class=\"comment\">#指定每一个区块的颜色</span></div><div class=\"line\">        startangle=<span class=\"number\">90</span>,     <span class=\"comment\">#开始角度，默认是0度，从x轴开始，90度从y轴开始</span></div><div class=\"line\">        shadow= <span class=\"keyword\">True</span>,    <span class=\"comment\">#阴影效果</span></div><div class=\"line\">        explode=(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),     <span class=\"comment\">#拉出第二个切片，如果全为0就不拉出，这里的数字是相对与圆心的距离</span></div><div class=\"line\">        autopct=<span class=\"string\">'%1.1f%%'</span>)       <span class=\"comment\">#显示百分比</span></div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)  <span class=\"comment\">#设置标题</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/second.png\" alt=\"饼状图\"></p>\n</blockquote>\n<h2 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">x=np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">y=np.random.rand(len(x))</div><div class=\"line\">plt.scatter(x,y,color=<span class=\"string\">'r'</span>,alpha=<span class=\"number\">0.3</span>,label=<span class=\"string\">'example one'</span>,marker=<span class=\"string\">'o'</span>)  <span class=\"comment\">#绘图</span></div><div class=\"line\">plt.legend()</div><div class=\"line\"><span class=\"comment\">#plt.axis([0,2,0,2]) #设置坐标的范围</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/third.png\" alt=\"散点图\"></p>\n</blockquote>\n<h2 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x=np.random.randint(<span class=\"number\">1</span>,<span class=\"number\">1000</span>,<span class=\"number\">200</span>)</div><div class=\"line\">axis=plt.gca()   <span class=\"comment\">#得到当前的绘图对象</span></div><div class=\"line\">axis.hist(x,bins=<span class=\"number\">35</span>,facecolor=<span class=\"string\">'r'</span>,normed=<span class=\"keyword\">True</span>,histtype=<span class=\"string\">'bar'</span>,alpha=<span class=\"number\">0.5</span>)<span class=\"comment\">#bins表示直方图的个数，histtype表示直方图的样式，normed如果为True就将直方归一化，显示概率密度，默认是False</span></div><div class=\"line\">axis.set_xlabel(<span class=\"string\">\"Values\"</span>)  <span class=\"comment\">#设置x的标签</span></div><div class=\"line\">axis.set_ylabel(<span class=\"string\">\"Frequency\"</span>)   </div><div class=\"line\">axis.set_title(<span class=\"string\">\"HIST\"</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/four.png\" alt=\"直方图\"></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"matplotlib绘制基本图形\"><a href=\"#matplotlib绘制基本图形\" class=\"headerlink\" title=\"matplotlib绘制基本图形\"></a>matplotlib绘制基本图形</h1><h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x=np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">1</span>) <span class=\"comment\">#创建一个0-10之间以1为间隔的numpy数组</span></div><div class=\"line\">y=x+<span class=\"number\">10</span>   </div><div class=\"line\">plt.plot(x,y,color=<span class=\"string\">'red'</span>,linestyle=<span class=\"string\">'--'</span>,marker=<span class=\"string\">'&gt;'</span>,linewidth=<span class=\"number\">3</span>,label=<span class=\"string\">'example one'</span>)  <span class=\"comment\">#绘制图形</span></div><div class=\"line\">plt.savefig(<span class=\"string\">'first.png'</span>,dpi=<span class=\"number\">50</span>)  <span class=\"comment\">#保存图形，dpi表示</span></div><div class=\"line\">plt.legend()   <span class=\"comment\">#显示图例</span></div><div class=\"line\">plt.show()   <span class=\"comment\">#显示图形</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图形展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/first.png\" alt=\"折线图\"><br><strong>说明</strong><br>plt.plot()可以直接绘制折线，其中marker是折线上的标记，linewidth是折线的宽度，label是图例，如果要想显示就要设置plt.legend(),linestyle是折线的风格，color是颜色</p>\n</blockquote>\n<h2 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"></div><div class=\"line\">slices = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>]   <span class=\"comment\">#指定每一个切片的大小，这里就是每块的比例</span></div><div class=\"line\">activities = [<span class=\"string\">'sleeping'</span>,<span class=\"string\">'eating'</span>,<span class=\"string\">'working'</span>,<span class=\"string\">'playing'</span>]   <span class=\"comment\">#指定标签</span></div><div class=\"line\">cols = [<span class=\"string\">'c'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'r'</span>,<span class=\"string\">'b'</span>]   <span class=\"comment\">#y颜色</span></div><div class=\"line\"></div><div class=\"line\">plt.pie(slices,   </div><div class=\"line\">        labels=activities,</div><div class=\"line\">        colors=cols,   <span class=\"comment\">#指定每一个区块的颜色</span></div><div class=\"line\">        startangle=<span class=\"number\">90</span>,     <span class=\"comment\">#开始角度，默认是0度，从x轴开始，90度从y轴开始</span></div><div class=\"line\">        shadow= <span class=\"keyword\">True</span>,    <span class=\"comment\">#阴影效果</span></div><div class=\"line\">        explode=(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),     <span class=\"comment\">#拉出第二个切片，如果全为0就不拉出，这里的数字是相对与圆心的距离</span></div><div class=\"line\">        autopct=<span class=\"string\">'%1.1f%%'</span>)       <span class=\"comment\">#显示百分比</span></div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)  <span class=\"comment\">#设置标题</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/second.png\" alt=\"饼状图\"></p>\n</blockquote>\n<h2 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">x=np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">y=np.random.rand(len(x))</div><div class=\"line\">plt.scatter(x,y,color=<span class=\"string\">'r'</span>,alpha=<span class=\"number\">0.3</span>,label=<span class=\"string\">'example one'</span>,marker=<span class=\"string\">'o'</span>)  <span class=\"comment\">#绘图</span></div><div class=\"line\">plt.legend()</div><div class=\"line\"><span class=\"comment\">#plt.axis([0,2,0,2]) #设置坐标的范围</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/third.png\" alt=\"散点图\"></p>\n</blockquote>\n<h2 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x=np.random.randint(<span class=\"number\">1</span>,<span class=\"number\">1000</span>,<span class=\"number\">200</span>)</div><div class=\"line\">axis=plt.gca()   <span class=\"comment\">#得到当前的绘图对象</span></div><div class=\"line\">axis.hist(x,bins=<span class=\"number\">35</span>,facecolor=<span class=\"string\">'r'</span>,normed=<span class=\"keyword\">True</span>,histtype=<span class=\"string\">'bar'</span>,alpha=<span class=\"number\">0.5</span>)<span class=\"comment\">#bins表示直方图的个数，histtype表示直方图的样式，normed如果为True就将直方归一化，显示概率密度，默认是False</span></div><div class=\"line\">axis.set_xlabel(<span class=\"string\">\"Values\"</span>)  <span class=\"comment\">#设置x的标签</span></div><div class=\"line\">axis.set_ylabel(<span class=\"string\">\"Frequency\"</span>)   </div><div class=\"line\">axis.set_title(<span class=\"string\">\"HIST\"</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>图片展示</strong><br><img src=\"http://ono60m7tl.bkt.clouddn.com/four.png\" alt=\"直方图\"></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"python爬虫之BeautifulSoup","date":"2017-04-29T02:06:56.000Z","_content":"\n# python爬虫之BeautifulSoup\n\n## 简介\n>**`Beautiful Soup`提供一些简单的、`python`式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。`Beautiful Soup`自动将输入文档转换为`Unicode`编码，输出文档转换为`utf-8`编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，`Beautiful Soup`就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。\n`Beautiful Soup`已成为和`lxml`、`html6lib`一样出色的`python`解释器，为用户灵活地提供不同的解析策略或强劲的速度。**\n\n## 安装\n\n>* **`pip install BeautifulSoup4`**\n>* **`easy_install BeautifulSoup4`**\n\n## 创建BeautifulSoup对象\n>* 首先应该导入`BeautifulSoup`类库 `from bs4 import BeautifulSoup`\n\n>* **下面开始创建对像，在开始之前为了方便演示，先创建一个`html`文本，如下：**\n\n```python\nhtml = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\" name=\"dromouse\"><b>The Dormouse's story</b></p>\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"><!-- Elsie --></a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n<p class=\"story\">...</p>\n\"\"\"\n```\n\n>* **创建对象：`soup=BeautifulSoup(html,'lxml')`,这里的lxml是解析的类库，目前来说个人觉得最好的解析器了，一直在用这个，安装方法：`pip install lxml`**\n\n\n## Tag\n\n>**`Tag`就是`html`中的一个标签，用`BeautifulSoup`就能解析出来`Tag`的具体内容，具体的格式为`soup.name`,其中`name`是`html`下的标签，具体实例如下：**\n\n>* **`print soup.title`输出`title`标签下的内容，包括此标签，这个将会输出`<title>The Dormouse's story</title>`**\n\n>* **`print soup.head`**\n\n### 注意：\n>**这里的格式只能获取这些标签的第一个，后面会讲到获取多个标签的方法。其中对于`Tag`有两个重要的属性`name`和`attrs`,分别表示名字和属性,介绍如下：**\n\n>>* **`name`:对于`Tag`，它的`name`就是其本身，如`soup.p.name`就是`p`**\n\n>>* **`attrs`是一个字典类型的，对应的是属性-值，如`print soup.p.attrs`,输出的就是`{'class': ['title'], 'name': 'dromouse'}`,当然你也可以得到具体的值，如`print soup.p.attrs['class']`,输出的就是`[title]`是一个列表的类型，因为一个属性可能对应多个值,当然你也可以通过get方法得到属性的，如：`print soup.p.get('class')`。还可以直接使用`print soup.p['class']`**\n\n### get\n>**`get`方法用于得到标签下的属性值，注意这是一个重要的方法，在许多场合都能用到，比如你要得到`<img src=\"#\">`标签下的图像`url`,那么就可以用`soup.img.get('src')`,具体解析如下：**\n\n```python\n    print soup.p.get(\"class\")   #得到第一个p标签下的src属性\n```\n\n### string\n>**得到标签下的文本内容，只有在此标签下没有子标签，或者只有一个子标签的情况下才能返回其中的内容，否则返回的是`None`具体实例如下：**\n\n```python\n    print soup.p.string #在上面的一段文本中p标签没有子标签，因此能够正确返回文本的内容\n    \n    print soup.html.string  #这里得到的就是None,因为这里的html中有很多的子标签\n```\n\n### get_text()\n>**可以获得一个标签中的所有文本内容，包括子孙节点的内容，这是最常用的方法**\n\n\n## 搜索文档树\n\n### find_all( name , attrs , recursive , text , **kwargs )\n>**`find_all`是用于搜索节点中所有符合过滤条件的节点**\n\n>1.**`name`参数：是`Tag`的名字，如`p`,`div`,`title` .....**\n>>* **`soup.find_all(\"p\")`  查找所有的`p`标签，返回的是`[<b>The Dormouse's story</b>]`，可以通过遍历获取每一个节点，如下：**\n```python\n    ps=soup.find_all(\"p\")\n    for p in ps:\n        print p.get('class')   #得到p标签下的class属性\n```\n\n>>* **传入正则表达式：`soup.find_all(re.compile(r'^b')`查找以`b`开头的所有标签，这里的`body`和`b`标签都会被查到**\n\n>>* **传入类列表：如果传入列表参数,`BeautifulSoup`会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有`<a>`标签和`<b>`标签**\n\n```python\nsoup.find_all([\"a\", \"b\"])   \n\n```\n>2.`KeyWords`参数，就是传入属性和对应的属性值，或者一些其他的表达式\n>>* **`soup.find_all(id='link2')`,这个将会搜索找到所有的`id`属性为`link2`的标签。传入正则表达式`soup.find_all(href=re.compile(\"elsie\"))`,这个将会查找所有`href`属性满足正则表达式的标签**\n>>* **传入多个值：`soup.find_all(id='link2',class_='title')` ,这个将会查找到同时满足这两个属性的标签，这里的`class`必须用`class_`传入参数，因为`class`是`python`中的关键词**\n\n>>* **有些属性不能通过以上方法直接搜索，比如`html5`中的`data-*`属性，不过可以通过`attrs`参数指定一个字典参数来搜索包含特殊属性的标签，如下：**\n\n```python\n# [<div data-foo=\"value\">foo!</div>]\ndata_soup.find_all(attrs={\"data-foo\": \"value\"})   #注意这里的atts不仅能够搜索特殊属性，亦可以搜索普通属性\n\nsoup.find_all(\"p\",attrs={'class':'title','id':'value'})  #相当与soup.find_all('p',class_='title',id='value')\n\n\n```\n\n>3.`text`参数：通过 `text` 参数可以搜搜文档中的字符串内容.与 `name` 参数的可选值一样, `text` 参数接受 字符串 , 正则表达式 , 列表, `True`\n```python\nsoup.find_all(text=\"Elsie\")\n# [u'Elsie']\n \nsoup.find_all(text=[\"Tillie\", \"Elsie\", \"Lacie\"])\n# [u'Elsie', u'Lacie', u'Tillie']\n \nsoup.find_all(text=re.compile(\"Dormouse\"))\n[u\"The Dormouse's story\", u\"The Dormouse's story\"]\n```\n\n>4.**`limit`参数：`find_all()` 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 `limit` 参数限制返回结果的数量.效果与`SQL`中的`limit`关键字类似,当搜索到的结果数量达到 `limit` 的限制时,就停止搜索返回结果.**\n\n>>**文档树中有`3`个`tag`符合搜索条件,但结果只返回了`2`个,因为我们限制了返回数量,代码如下：**\n\n```python\nsoup.find_all(\"a\", limit=2)\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\n>5.**`recursive` 参数:调用`tag`的 `find_all()` 方法时,`BeautifulSoup`会检索当前`tag`的所有子孙节点,如果只想搜索`tag`的直接子节点,可以使用参数 `recursive=False` **\n\n### find( name , attrs , recursive , text , **kwargs )\n>**它与 `find_all()` 方法唯一的区别是 `find_all()` 方法的返回结果是值包含一个元素的列表,而 `find()` 方法直接返回结果,就是直接返回第一匹配到的元素，不是列表，不用遍历，如`soup.find(\"p\").get(\"class\")`**\n\n## css选择器\n>**我们在写 `CSS` 时，标签名不加任何修饰，类名前加点，`id`名前加`#`，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 `soup.select()`，返回类型是 `list`**\n\n### 通过标签名查找\n\n```python\nprint soup.select('title') \n#[<title>The Dormouse's story</title>]\n\n\nprint soup.select('a')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\n```\n\n### 通过类名查找\n\n```python\nprint soup.select('.sister')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n### 通过id名查找\n\n```python\nprint soup.select('#link1')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n\n### 组合查找\n>**学过`css`的都知道`css`选择器，如`p #link1`是查找`p`标签下的`id`属性为`link1`的标签**\n\n```python\nprint soup.select('p #link1')    #查找p标签中内容为id属性为link1的标签\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n\nprint soup.select(\"head > title\")   #直接查找子标签\n#[<title>The Dormouse's story</title>]  \n\n```\n### 属性查找\n>**查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。**\n\n```python\nprint soup.select('a[class=\"sister\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\n\nprint soup.select('a[href=\"http://example.com/elsie\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n\n>**同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格,代码如下：**\n\n```python\nprint soup.select('p a[href=\"http://example.com/elsie\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n>**以上的 `select` 方法返回的结果都是列表形式，可以遍历形式输出，然后用 `get_text()` 方法来获取它的内容**\n\n```python\n\nsoup = BeautifulSoup(html, 'lxml')\nprint type(soup.select('title'))\nprint soup.select('title')[0].get_text()\n\nfor title in soup.select('title'):\n    print title.get_text()\n```\n\n## 参考文章\n>* [中文文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/python爬虫之BeautifulSoup.md","raw":"---\ntitle: python爬虫之BeautifulSoup\ndate: 2017-04-29 10:06:56\ncategories: python\ntags: python爬虫\n---\n\n# python爬虫之BeautifulSoup\n\n## 简介\n>**`Beautiful Soup`提供一些简单的、`python`式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。`Beautiful Soup`自动将输入文档转换为`Unicode`编码，输出文档转换为`utf-8`编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，`Beautiful Soup`就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。\n`Beautiful Soup`已成为和`lxml`、`html6lib`一样出色的`python`解释器，为用户灵活地提供不同的解析策略或强劲的速度。**\n\n## 安装\n\n>* **`pip install BeautifulSoup4`**\n>* **`easy_install BeautifulSoup4`**\n\n## 创建BeautifulSoup对象\n>* 首先应该导入`BeautifulSoup`类库 `from bs4 import BeautifulSoup`\n\n>* **下面开始创建对像，在开始之前为了方便演示，先创建一个`html`文本，如下：**\n\n```python\nhtml = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\" name=\"dromouse\"><b>The Dormouse's story</b></p>\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"><!-- Elsie --></a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n<p class=\"story\">...</p>\n\"\"\"\n```\n\n>* **创建对象：`soup=BeautifulSoup(html,'lxml')`,这里的lxml是解析的类库，目前来说个人觉得最好的解析器了，一直在用这个，安装方法：`pip install lxml`**\n\n\n## Tag\n\n>**`Tag`就是`html`中的一个标签，用`BeautifulSoup`就能解析出来`Tag`的具体内容，具体的格式为`soup.name`,其中`name`是`html`下的标签，具体实例如下：**\n\n>* **`print soup.title`输出`title`标签下的内容，包括此标签，这个将会输出`<title>The Dormouse's story</title>`**\n\n>* **`print soup.head`**\n\n### 注意：\n>**这里的格式只能获取这些标签的第一个，后面会讲到获取多个标签的方法。其中对于`Tag`有两个重要的属性`name`和`attrs`,分别表示名字和属性,介绍如下：**\n\n>>* **`name`:对于`Tag`，它的`name`就是其本身，如`soup.p.name`就是`p`**\n\n>>* **`attrs`是一个字典类型的，对应的是属性-值，如`print soup.p.attrs`,输出的就是`{'class': ['title'], 'name': 'dromouse'}`,当然你也可以得到具体的值，如`print soup.p.attrs['class']`,输出的就是`[title]`是一个列表的类型，因为一个属性可能对应多个值,当然你也可以通过get方法得到属性的，如：`print soup.p.get('class')`。还可以直接使用`print soup.p['class']`**\n\n### get\n>**`get`方法用于得到标签下的属性值，注意这是一个重要的方法，在许多场合都能用到，比如你要得到`<img src=\"#\">`标签下的图像`url`,那么就可以用`soup.img.get('src')`,具体解析如下：**\n\n```python\n    print soup.p.get(\"class\")   #得到第一个p标签下的src属性\n```\n\n### string\n>**得到标签下的文本内容，只有在此标签下没有子标签，或者只有一个子标签的情况下才能返回其中的内容，否则返回的是`None`具体实例如下：**\n\n```python\n    print soup.p.string #在上面的一段文本中p标签没有子标签，因此能够正确返回文本的内容\n    \n    print soup.html.string  #这里得到的就是None,因为这里的html中有很多的子标签\n```\n\n### get_text()\n>**可以获得一个标签中的所有文本内容，包括子孙节点的内容，这是最常用的方法**\n\n\n## 搜索文档树\n\n### find_all( name , attrs , recursive , text , **kwargs )\n>**`find_all`是用于搜索节点中所有符合过滤条件的节点**\n\n>1.**`name`参数：是`Tag`的名字，如`p`,`div`,`title` .....**\n>>* **`soup.find_all(\"p\")`  查找所有的`p`标签，返回的是`[<b>The Dormouse's story</b>]`，可以通过遍历获取每一个节点，如下：**\n```python\n    ps=soup.find_all(\"p\")\n    for p in ps:\n        print p.get('class')   #得到p标签下的class属性\n```\n\n>>* **传入正则表达式：`soup.find_all(re.compile(r'^b')`查找以`b`开头的所有标签，这里的`body`和`b`标签都会被查到**\n\n>>* **传入类列表：如果传入列表参数,`BeautifulSoup`会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有`<a>`标签和`<b>`标签**\n\n```python\nsoup.find_all([\"a\", \"b\"])   \n\n```\n>2.`KeyWords`参数，就是传入属性和对应的属性值，或者一些其他的表达式\n>>* **`soup.find_all(id='link2')`,这个将会搜索找到所有的`id`属性为`link2`的标签。传入正则表达式`soup.find_all(href=re.compile(\"elsie\"))`,这个将会查找所有`href`属性满足正则表达式的标签**\n>>* **传入多个值：`soup.find_all(id='link2',class_='title')` ,这个将会查找到同时满足这两个属性的标签，这里的`class`必须用`class_`传入参数，因为`class`是`python`中的关键词**\n\n>>* **有些属性不能通过以上方法直接搜索，比如`html5`中的`data-*`属性，不过可以通过`attrs`参数指定一个字典参数来搜索包含特殊属性的标签，如下：**\n\n```python\n# [<div data-foo=\"value\">foo!</div>]\ndata_soup.find_all(attrs={\"data-foo\": \"value\"})   #注意这里的atts不仅能够搜索特殊属性，亦可以搜索普通属性\n\nsoup.find_all(\"p\",attrs={'class':'title','id':'value'})  #相当与soup.find_all('p',class_='title',id='value')\n\n\n```\n\n>3.`text`参数：通过 `text` 参数可以搜搜文档中的字符串内容.与 `name` 参数的可选值一样, `text` 参数接受 字符串 , 正则表达式 , 列表, `True`\n```python\nsoup.find_all(text=\"Elsie\")\n# [u'Elsie']\n \nsoup.find_all(text=[\"Tillie\", \"Elsie\", \"Lacie\"])\n# [u'Elsie', u'Lacie', u'Tillie']\n \nsoup.find_all(text=re.compile(\"Dormouse\"))\n[u\"The Dormouse's story\", u\"The Dormouse's story\"]\n```\n\n>4.**`limit`参数：`find_all()` 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 `limit` 参数限制返回结果的数量.效果与`SQL`中的`limit`关键字类似,当搜索到的结果数量达到 `limit` 的限制时,就停止搜索返回结果.**\n\n>>**文档树中有`3`个`tag`符合搜索条件,但结果只返回了`2`个,因为我们限制了返回数量,代码如下：**\n\n```python\nsoup.find_all(\"a\", limit=2)\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\n>5.**`recursive` 参数:调用`tag`的 `find_all()` 方法时,`BeautifulSoup`会检索当前`tag`的所有子孙节点,如果只想搜索`tag`的直接子节点,可以使用参数 `recursive=False` **\n\n### find( name , attrs , recursive , text , **kwargs )\n>**它与 `find_all()` 方法唯一的区别是 `find_all()` 方法的返回结果是值包含一个元素的列表,而 `find()` 方法直接返回结果,就是直接返回第一匹配到的元素，不是列表，不用遍历，如`soup.find(\"p\").get(\"class\")`**\n\n## css选择器\n>**我们在写 `CSS` 时，标签名不加任何修饰，类名前加点，`id`名前加`#`，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 `soup.select()`，返回类型是 `list`**\n\n### 通过标签名查找\n\n```python\nprint soup.select('title') \n#[<title>The Dormouse's story</title>]\n\n\nprint soup.select('a')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\n```\n\n### 通过类名查找\n\n```python\nprint soup.select('.sister')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n### 通过id名查找\n\n```python\nprint soup.select('#link1')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n\n### 组合查找\n>**学过`css`的都知道`css`选择器，如`p #link1`是查找`p`标签下的`id`属性为`link1`的标签**\n\n```python\nprint soup.select('p #link1')    #查找p标签中内容为id属性为link1的标签\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n\nprint soup.select(\"head > title\")   #直接查找子标签\n#[<title>The Dormouse's story</title>]  \n\n```\n### 属性查找\n>**查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。**\n\n```python\nprint soup.select('a[class=\"sister\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>, <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>, <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\n\nprint soup.select('a[href=\"http://example.com/elsie\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n\n>**同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格,代码如下：**\n\n```python\nprint soup.select('p a[href=\"http://example.com/elsie\"]')\n#[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"><!-- Elsie --></a>]\n```\n>**以上的 `select` 方法返回的结果都是列表形式，可以遍历形式输出，然后用 `get_text()` 方法来获取它的内容**\n\n```python\n\nsoup = BeautifulSoup(html, 'lxml')\nprint type(soup.select('title'))\nprint soup.select('title')[0].get_text()\n\nfor title in soup.select('title'):\n    print title.get_text()\n```\n\n## 参考文章\n>* [中文文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"python爬虫之BeautifulSoup","published":1,"updated":"2017-04-29T02:37:47.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayl001zl0uz55ki5axf","content":"<h1 id=\"python爬虫之BeautifulSoup\"><a href=\"#python爬虫之BeautifulSoup\" class=\"headerlink\" title=\"python爬虫之BeautifulSoup\"></a>python爬虫之BeautifulSoup</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p><strong><code>Beautiful Soup</code>提供一些简单的、<code>python</code>式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。<code>Beautiful Soup</code>自动将输入文档转换为<code>Unicode</code>编码，输出文档转换为<code>utf-8</code>编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，<code>Beautiful Soup</code>就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。<br><code>Beautiful Soup</code>已成为和<code>lxml</code>、<code>html6lib</code>一样出色的<code>python</code>解释器，为用户灵活地提供不同的解析策略或强劲的速度。</strong></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<ul>\n<li><strong><code>pip install BeautifulSoup4</code></strong></li>\n<li><strong><code>easy_install BeautifulSoup4</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"创建BeautifulSoup对象\"><a href=\"#创建BeautifulSoup对象\" class=\"headerlink\" title=\"创建BeautifulSoup对象\"></a>创建BeautifulSoup对象</h2><blockquote>\n<ul>\n<li><p>首先应该导入<code>BeautifulSoup</code>类库 <code>from bs4 import BeautifulSoup</code></p>\n</li>\n<li><p><strong>下面开始创建对像，在开始之前为了方便演示，先创建一个<code>html</code>文本，如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">html = <span class=\"string\">\"\"\"</span></div><div class=\"line\">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</div><div class=\"line\">&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were</div><div class=\"line\">&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</div><div class=\"line\">&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and</div><div class=\"line\">&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;</div><div class=\"line\">and they lived at the bottom of a well.&lt;/p&gt;</div><div class=\"line\">&lt;p class=\"story\"&gt;...&lt;/p&gt;</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>创建对象：<code>soup=BeautifulSoup(html,&#39;lxml&#39;)</code>,这里的lxml是解析的类库，目前来说个人觉得最好的解析器了，一直在用这个，安装方法：<code>pip install lxml</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h2><blockquote>\n<p><strong><code>Tag</code>就是<code>html</code>中的一个标签，用<code>BeautifulSoup</code>就能解析出来<code>Tag</code>的具体内容，具体的格式为<code>soup.name</code>,其中<code>name</code>是<code>html</code>下的标签，具体实例如下：</strong></p>\n<ul>\n<li><p><strong><code>print soup.title</code>输出<code>title</code>标签下的内容，包括此标签，这个将会输出<code>&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</code></strong></p>\n</li>\n<li><p><strong><code>print soup.head</code></strong></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><blockquote>\n<p><strong>这里的格式只能获取这些标签的第一个，后面会讲到获取多个标签的方法。其中对于<code>Tag</code>有两个重要的属性<code>name</code>和<code>attrs</code>,分别表示名字和属性,介绍如下：</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>name</code>:对于<code>Tag</code>，它的<code>name</code>就是其本身，如<code>soup.p.name</code>就是<code>p</code></strong></p>\n</li>\n<li><p><strong><code>attrs</code>是一个字典类型的，对应的是属性-值，如<code>print soup.p.attrs</code>,输出的就是<code>{&#39;class&#39;: [&#39;title&#39;], &#39;name&#39;: &#39;dromouse&#39;}</code>,当然你也可以得到具体的值，如<code>print soup.p.attrs[&#39;class&#39;]</code>,输出的就是<code>[title]</code>是一个列表的类型，因为一个属性可能对应多个值,当然你也可以通过get方法得到属性的，如：<code>print soup.p.get(&#39;class&#39;)</code>。还可以直接使用<code>print soup.p[&#39;class&#39;]</code></strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h3><blockquote>\n<p><strong><code>get</code>方法用于得到标签下的属性值，注意这是一个重要的方法，在许多场合都能用到，比如你要得到<code>&lt;img src=&quot;#&quot;&gt;</code>标签下的图像<code>url</code>,那么就可以用<code>soup.img.get(&#39;src&#39;)</code>,具体解析如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.p.get(<span class=\"string\">\"class\"</span>)   <span class=\"comment\">#得到第一个p标签下的src属性</span></div></pre></td></tr></table></figure>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><blockquote>\n<p><strong>得到标签下的文本内容，只有在此标签下没有子标签，或者只有一个子标签的情况下才能返回其中的内容，否则返回的是<code>None</code>具体实例如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.p.string <span class=\"comment\">#在上面的一段文本中p标签没有子标签，因此能够正确返回文本的内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.html.string  <span class=\"comment\">#这里得到的就是None,因为这里的html中有很多的子标签</span></div></pre></td></tr></table></figure>\n<h3 id=\"get-text\"><a href=\"#get-text\" class=\"headerlink\" title=\"get_text()\"></a>get_text()</h3><blockquote>\n<p><strong>可以获得一个标签中的所有文本内容，包括子孙节点的内容，这是最常用的方法</strong></p>\n</blockquote>\n<h2 id=\"搜索文档树\"><a href=\"#搜索文档树\" class=\"headerlink\" title=\"搜索文档树\"></a>搜索文档树</h2><h3 id=\"find-all-name-attrs-recursive-text-kwargs\"><a href=\"#find-all-name-attrs-recursive-text-kwargs\" class=\"headerlink\" title=\"find_all( name , attrs , recursive , text , **kwargs )\"></a>find_all( name , attrs , recursive , text , **kwargs )</h3><blockquote>\n<p><strong><code>find_all</code>是用于搜索节点中所有符合过滤条件的节点</strong></p>\n<p>1.<strong><code>name</code>参数：是<code>Tag</code>的名字，如<code>p</code>,<code>div</code>,<code>title</code> …..</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>soup.find_all(&quot;p&quot;)</code>  查找所有的<code>p</code>标签，返回的是<code>[&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;]</code>，可以通过遍历获取每一个节点，如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps=soup.find_all(<span class=\"string\">\"p\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ps:</div><div class=\"line\">    <span class=\"keyword\">print</span> p.get(<span class=\"string\">'class'</span>)   <span class=\"comment\">#得到p标签下的class属性</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>传入正则表达式：<code>soup.find_all(re.compile(r&#39;^b&#39;)</code>查找以<code>b</code>开头的所有标签，这里的<code>body</code>和<code>b</code>标签都会被查到</strong></p>\n</li>\n<li><p><strong>传入类列表：如果传入列表参数,<code>BeautifulSoup</code>会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有<code>&lt;a&gt;</code>标签和<code>&lt;b&gt;</code>标签</strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>])</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.<code>KeyWords</code>参数，就是传入属性和对应的属性值，或者一些其他的表达式</p>\n<blockquote>\n<ul>\n<li><strong><code>soup.find_all(id=&#39;link2&#39;)</code>,这个将会搜索找到所有的<code>id</code>属性为<code>link2</code>的标签。传入正则表达式<code>soup.find_all(href=re.compile(&quot;elsie&quot;))</code>,这个将会查找所有<code>href</code>属性满足正则表达式的标签</strong></li>\n<li><p><strong>传入多个值：<code>soup.find_all(id=&#39;link2&#39;,class_=&#39;title&#39;)</code> ,这个将会查找到同时满足这两个属性的标签，这里的<code>class</code>必须用<code>class_</code>传入参数，因为<code>class</code>是<code>python</code>中的关键词</strong></p>\n</li>\n<li><p><strong>有些属性不能通过以上方法直接搜索，比如<code>html5</code>中的<code>data-*</code>属性，不过可以通过<code>attrs</code>参数指定一个字典参数来搜索包含特殊属性的标签，如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># [&lt;div data-foo=\"value\"&gt;foo!&lt;/div&gt;]</span></div><div class=\"line\">data_soup.find_all(attrs=&#123;<span class=\"string\">\"data-foo\"</span>: <span class=\"string\">\"value\"</span>&#125;)   <span class=\"comment\">#注意这里的atts不仅能够搜索特殊属性，亦可以搜索普通属性</span></div><div class=\"line\"></div><div class=\"line\">soup.find_all(<span class=\"string\">\"p\"</span>,attrs=&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'title'</span>,<span class=\"string\">'id'</span>:<span class=\"string\">'value'</span>&#125;)  <span class=\"comment\">#相当与soup.find_all('p',class_='title',id='value')</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.<code>text</code>参数：通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, <code>True</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all(text=<span class=\"string\">\"Elsie\"</span>)</div><div class=\"line\"><span class=\"comment\"># [u'Elsie']</span></div><div class=\"line\"> </div><div class=\"line\">soup.find_all(text=[<span class=\"string\">\"Tillie\"</span>, <span class=\"string\">\"Elsie\"</span>, <span class=\"string\">\"Lacie\"</span>])</div><div class=\"line\"><span class=\"comment\"># [u'Elsie', u'Lacie', u'Tillie']</span></div><div class=\"line\"> </div><div class=\"line\">soup.find_all(text=re.compile(<span class=\"string\">\"Dormouse\"</span>))</div><div class=\"line\">[<span class=\"string\">u\"The Dormouse's story\"</span>, <span class=\"string\">u\"The Dormouse's story\"</span>]</div></pre></td></tr></table></figure></p>\n<p>4.<strong><code>limit</code>参数：<code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</strong></p>\n<blockquote>\n<p><strong>文档树中有<code>3</code>个<code>tag</code>符合搜索条件,但结果只返回了<code>2</code>个,因为我们限制了返回数量,代码如下：</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all(<span class=\"string\">\"a\"</span>, limit=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\"># [&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;,</span></div><div class=\"line\"><span class=\"comment\">#  &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>5.<strong><code>recursive</code> 参数:调用<code>tag</code>的 <code>find_all()</code> 方法时,<code>BeautifulSoup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code> </strong></p>\n</blockquote>\n<h3 id=\"find-name-attrs-recursive-text-kwargs\"><a href=\"#find-name-attrs-recursive-text-kwargs\" class=\"headerlink\" title=\"find( name , attrs , recursive , text , **kwargs )\"></a>find( name , attrs , recursive , text , **kwargs )</h3><blockquote>\n<p><strong>它与 <code>find_all()</code> 方法唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果,就是直接返回第一匹配到的元素，不是列表，不用遍历，如<code>soup.find(&quot;p&quot;).get(&quot;class&quot;)</code></strong></p>\n</blockquote>\n<h2 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h2><blockquote>\n<p><strong>我们在写 <code>CSS</code> 时，标签名不加任何修饰，类名前加点，<code>id</code>名前加<code>#</code>，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <code>soup.select()</code>，返回类型是 <code>list</code></strong></p>\n</blockquote>\n<h3 id=\"通过标签名查找\"><a href=\"#通过标签名查找\" class=\"headerlink\" title=\"通过标签名查找\"></a>通过标签名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'title'</span>) </div><div class=\"line\"><span class=\"comment\">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过类名查找\"><a href=\"#通过类名查找\" class=\"headerlink\" title=\"通过类名查找\"></a>通过类名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'.sister'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过id名查找\"><a href=\"#通过id名查找\" class=\"headerlink\" title=\"通过id名查找\"></a>通过id名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'#link1'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"组合查找\"><a href=\"#组合查找\" class=\"headerlink\" title=\"组合查找\"></a>组合查找</h3><blockquote>\n<p><strong>学过<code>css</code>的都知道<code>css</code>选择器，如<code>p #link1</code>是查找<code>p</code>标签下的<code>id</code>属性为<code>link1</code>的标签</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'p #link1'</span>)    <span class=\"comment\">#查找p标签中内容为id属性为link1的标签</span></div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">\"head &gt; title\"</span>)   <span class=\"comment\">#直接查找子标签</span></div><div class=\"line\"><span class=\"comment\">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"属性查找\"><a href=\"#属性查找\" class=\"headerlink\" title=\"属性查找\"></a>属性查找</h3><blockquote>\n<p><strong>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a[class=\"sister\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a[href=\"http://example.com/elsie\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格,代码如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'p a[href=\"http://example.com/elsie\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>以上的 <code>select</code> 方法返回的结果都是列表形式，可以遍历形式输出，然后用 <code>get_text()</code> 方法来获取它的内容</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> type(soup.select(<span class=\"string\">'title'</span>))</div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'title'</span>)[<span class=\"number\">0</span>].get_text()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> soup.select(<span class=\"string\">'title'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> title.get_text()</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">中文文档</a></li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"python爬虫之BeautifulSoup\"><a href=\"#python爬虫之BeautifulSoup\" class=\"headerlink\" title=\"python爬虫之BeautifulSoup\"></a>python爬虫之BeautifulSoup</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p><strong><code>Beautiful Soup</code>提供一些简单的、<code>python</code>式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。<code>Beautiful Soup</code>自动将输入文档转换为<code>Unicode</code>编码，输出文档转换为<code>utf-8</code>编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，<code>Beautiful Soup</code>就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。<br><code>Beautiful Soup</code>已成为和<code>lxml</code>、<code>html6lib</code>一样出色的<code>python</code>解释器，为用户灵活地提供不同的解析策略或强劲的速度。</strong></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<ul>\n<li><strong><code>pip install BeautifulSoup4</code></strong></li>\n<li><strong><code>easy_install BeautifulSoup4</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"创建BeautifulSoup对象\"><a href=\"#创建BeautifulSoup对象\" class=\"headerlink\" title=\"创建BeautifulSoup对象\"></a>创建BeautifulSoup对象</h2><blockquote>\n<ul>\n<li><p>首先应该导入<code>BeautifulSoup</code>类库 <code>from bs4 import BeautifulSoup</code></p>\n</li>\n<li><p><strong>下面开始创建对像，在开始之前为了方便演示，先创建一个<code>html</code>文本，如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">html = <span class=\"string\">\"\"\"</div><div class=\"line\">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</div><div class=\"line\">&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were</div><div class=\"line\">&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</div><div class=\"line\">&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and</div><div class=\"line\">&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;</div><div class=\"line\">and they lived at the bottom of a well.&lt;/p&gt;</div><div class=\"line\">&lt;p class=\"story\"&gt;...&lt;/p&gt;</div><div class=\"line\">\"\"\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>创建对象：<code>soup=BeautifulSoup(html,&#39;lxml&#39;)</code>,这里的lxml是解析的类库，目前来说个人觉得最好的解析器了，一直在用这个，安装方法：<code>pip install lxml</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h2><blockquote>\n<p><strong><code>Tag</code>就是<code>html</code>中的一个标签，用<code>BeautifulSoup</code>就能解析出来<code>Tag</code>的具体内容，具体的格式为<code>soup.name</code>,其中<code>name</code>是<code>html</code>下的标签，具体实例如下：</strong></p>\n<ul>\n<li><p><strong><code>print soup.title</code>输出<code>title</code>标签下的内容，包括此标签，这个将会输出<code>&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</code></strong></p>\n</li>\n<li><p><strong><code>print soup.head</code></strong></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><blockquote>\n<p><strong>这里的格式只能获取这些标签的第一个，后面会讲到获取多个标签的方法。其中对于<code>Tag</code>有两个重要的属性<code>name</code>和<code>attrs</code>,分别表示名字和属性,介绍如下：</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>name</code>:对于<code>Tag</code>，它的<code>name</code>就是其本身，如<code>soup.p.name</code>就是<code>p</code></strong></p>\n</li>\n<li><p><strong><code>attrs</code>是一个字典类型的，对应的是属性-值，如<code>print soup.p.attrs</code>,输出的就是<code>{&#39;class&#39;: [&#39;title&#39;], &#39;name&#39;: &#39;dromouse&#39;}</code>,当然你也可以得到具体的值，如<code>print soup.p.attrs[&#39;class&#39;]</code>,输出的就是<code>[title]</code>是一个列表的类型，因为一个属性可能对应多个值,当然你也可以通过get方法得到属性的，如：<code>print soup.p.get(&#39;class&#39;)</code>。还可以直接使用<code>print soup.p[&#39;class&#39;]</code></strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h3><blockquote>\n<p><strong><code>get</code>方法用于得到标签下的属性值，注意这是一个重要的方法，在许多场合都能用到，比如你要得到<code>&lt;img src=&quot;#&quot;&gt;</code>标签下的图像<code>url</code>,那么就可以用<code>soup.img.get(&#39;src&#39;)</code>,具体解析如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.p.get(<span class=\"string\">\"class\"</span>)   <span class=\"comment\">#得到第一个p标签下的src属性</span></div></pre></td></tr></table></figure>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><blockquote>\n<p><strong>得到标签下的文本内容，只有在此标签下没有子标签，或者只有一个子标签的情况下才能返回其中的内容，否则返回的是<code>None</code>具体实例如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.p.string <span class=\"comment\">#在上面的一段文本中p标签没有子标签，因此能够正确返回文本的内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.html.string  <span class=\"comment\">#这里得到的就是None,因为这里的html中有很多的子标签</span></div></pre></td></tr></table></figure>\n<h3 id=\"get-text\"><a href=\"#get-text\" class=\"headerlink\" title=\"get_text()\"></a>get_text()</h3><blockquote>\n<p><strong>可以获得一个标签中的所有文本内容，包括子孙节点的内容，这是最常用的方法</strong></p>\n</blockquote>\n<h2 id=\"搜索文档树\"><a href=\"#搜索文档树\" class=\"headerlink\" title=\"搜索文档树\"></a>搜索文档树</h2><h3 id=\"find-all-name-attrs-recursive-text-kwargs\"><a href=\"#find-all-name-attrs-recursive-text-kwargs\" class=\"headerlink\" title=\"find_all( name , attrs , recursive , text , **kwargs )\"></a>find_all( name , attrs , recursive , text , **kwargs )</h3><blockquote>\n<p><strong><code>find_all</code>是用于搜索节点中所有符合过滤条件的节点</strong></p>\n<p>1.<strong><code>name</code>参数：是<code>Tag</code>的名字，如<code>p</code>,<code>div</code>,<code>title</code> …..</strong></p>\n<blockquote>\n<ul>\n<li><p><strong><code>soup.find_all(&quot;p&quot;)</code>  查找所有的<code>p</code>标签，返回的是<code>[&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;]</code>，可以通过遍历获取每一个节点，如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps=soup.find_all(<span class=\"string\">\"p\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ps:</div><div class=\"line\">    <span class=\"keyword\">print</span> p.get(<span class=\"string\">'class'</span>)   <span class=\"comment\">#得到p标签下的class属性</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>传入正则表达式：<code>soup.find_all(re.compile(r&#39;^b&#39;)</code>查找以<code>b</code>开头的所有标签，这里的<code>body</code>和<code>b</code>标签都会被查到</strong></p>\n</li>\n<li><p><strong>传入类列表：如果传入列表参数,<code>BeautifulSoup</code>会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有<code>&lt;a&gt;</code>标签和<code>&lt;b&gt;</code>标签</strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>])</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.<code>KeyWords</code>参数，就是传入属性和对应的属性值，或者一些其他的表达式</p>\n<blockquote>\n<ul>\n<li><strong><code>soup.find_all(id=&#39;link2&#39;)</code>,这个将会搜索找到所有的<code>id</code>属性为<code>link2</code>的标签。传入正则表达式<code>soup.find_all(href=re.compile(&quot;elsie&quot;))</code>,这个将会查找所有<code>href</code>属性满足正则表达式的标签</strong></li>\n<li><p><strong>传入多个值：<code>soup.find_all(id=&#39;link2&#39;,class_=&#39;title&#39;)</code> ,这个将会查找到同时满足这两个属性的标签，这里的<code>class</code>必须用<code>class_</code>传入参数，因为<code>class</code>是<code>python</code>中的关键词</strong></p>\n</li>\n<li><p><strong>有些属性不能通过以上方法直接搜索，比如<code>html5</code>中的<code>data-*</code>属性，不过可以通过<code>attrs</code>参数指定一个字典参数来搜索包含特殊属性的标签，如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># [&lt;div data-foo=\"value\"&gt;foo!&lt;/div&gt;]</span></div><div class=\"line\">data_soup.find_all(attrs=&#123;<span class=\"string\">\"data-foo\"</span>: <span class=\"string\">\"value\"</span>&#125;)   <span class=\"comment\">#注意这里的atts不仅能够搜索特殊属性，亦可以搜索普通属性</span></div><div class=\"line\"></div><div class=\"line\">soup.find_all(<span class=\"string\">\"p\"</span>,attrs=&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'title'</span>,<span class=\"string\">'id'</span>:<span class=\"string\">'value'</span>&#125;)  <span class=\"comment\">#相当与soup.find_all('p',class_='title',id='value')</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.<code>text</code>参数：通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, <code>True</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all(text=<span class=\"string\">\"Elsie\"</span>)</div><div class=\"line\"><span class=\"comment\"># [u'Elsie']</span></div><div class=\"line\"> </div><div class=\"line\">soup.find_all(text=[<span class=\"string\">\"Tillie\"</span>, <span class=\"string\">\"Elsie\"</span>, <span class=\"string\">\"Lacie\"</span>])</div><div class=\"line\"><span class=\"comment\"># [u'Elsie', u'Lacie', u'Tillie']</span></div><div class=\"line\"> </div><div class=\"line\">soup.find_all(text=re.compile(<span class=\"string\">\"Dormouse\"</span>))</div><div class=\"line\">[<span class=\"string\">u\"The Dormouse's story\"</span>, <span class=\"string\">u\"The Dormouse's story\"</span>]</div></pre></td></tr></table></figure></p>\n<p>4.<strong><code>limit</code>参数：<code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</strong></p>\n<blockquote>\n<p><strong>文档树中有<code>3</code>个<code>tag</code>符合搜索条件,但结果只返回了<code>2</code>个,因为我们限制了返回数量,代码如下：</strong></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">soup.find_all(<span class=\"string\">\"a\"</span>, limit=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\"># [&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;,</span></div><div class=\"line\"><span class=\"comment\">#  &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>5.<strong><code>recursive</code> 参数:调用<code>tag</code>的 <code>find_all()</code> 方法时,<code>BeautifulSoup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code> </strong></p>\n</blockquote>\n<h3 id=\"find-name-attrs-recursive-text-kwargs\"><a href=\"#find-name-attrs-recursive-text-kwargs\" class=\"headerlink\" title=\"find( name , attrs , recursive , text , **kwargs )\"></a>find( name , attrs , recursive , text , **kwargs )</h3><blockquote>\n<p><strong>它与 <code>find_all()</code> 方法唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果,就是直接返回第一匹配到的元素，不是列表，不用遍历，如<code>soup.find(&quot;p&quot;).get(&quot;class&quot;)</code></strong></p>\n</blockquote>\n<h2 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h2><blockquote>\n<p><strong>我们在写 <code>CSS</code> 时，标签名不加任何修饰，类名前加点，<code>id</code>名前加<code>#</code>，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <code>soup.select()</code>，返回类型是 <code>list</code></strong></p>\n</blockquote>\n<h3 id=\"通过标签名查找\"><a href=\"#通过标签名查找\" class=\"headerlink\" title=\"通过标签名查找\"></a>通过标签名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'title'</span>) </div><div class=\"line\"><span class=\"comment\">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过类名查找\"><a href=\"#通过类名查找\" class=\"headerlink\" title=\"通过类名查找\"></a>通过类名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'.sister'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过id名查找\"><a href=\"#通过id名查找\" class=\"headerlink\" title=\"通过id名查找\"></a>通过id名查找</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'#link1'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"组合查找\"><a href=\"#组合查找\" class=\"headerlink\" title=\"组合查找\"></a>组合查找</h3><blockquote>\n<p><strong>学过<code>css</code>的都知道<code>css</code>选择器，如<code>p #link1</code>是查找<code>p</code>标签下的<code>id</code>属性为<code>link1</code>的标签</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'p #link1'</span>)    <span class=\"comment\">#查找p标签中内容为id属性为link1的标签</span></div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">\"head &gt; title\"</span>)   <span class=\"comment\">#直接查找子标签</span></div><div class=\"line\"><span class=\"comment\">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div></pre></td></tr></table></figure>\n<h3 id=\"属性查找\"><a href=\"#属性查找\" class=\"headerlink\" title=\"属性查找\"></a>属性查找</h3><blockquote>\n<p><strong>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a[class=\"sister\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'a[href=\"http://example.com/elsie\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格,代码如下：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'p a[href=\"http://example.com/elsie\"]'</span>)</div><div class=\"line\"><span class=\"comment\">#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>以上的 <code>select</code> 方法返回的结果都是列表形式，可以遍历形式输出，然后用 <code>get_text()</code> 方法来获取它的内容</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> type(soup.select(<span class=\"string\">'title'</span>))</div><div class=\"line\"><span class=\"keyword\">print</span> soup.select(<span class=\"string\">'title'</span>)[<span class=\"number\">0</span>].get_text()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> soup.select(<span class=\"string\">'title'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> title.get_text()</div></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<ul>\n<li><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\">中文文档</a></li>\n</ul>\n</blockquote>\n"},{"title":"python爬虫大战京东商城","date":"2017-04-23T10:34:48.000Z","_content":"# python大规模爬取京东\n## 主要工具\n>* **`scrapy`**\n>* **`BeautifulSoup`**\n>* **`requests`**\n\n## 分析步骤\n\n>* **打开京东首页，输入**裤子**将会看到页面跳转到了[这里](https://search.jd.com/Search?keyword=%E8%A3%A4%E5%AD%90&enc=utf-8&wq=%E8%A3%A4%E5%AD%90&pvid=a424f5c84d7844aaa56d4d62286878be)，这就是我们要分析的起点**\n\n>* **我们可以看到这个页面并不是完全的，当我们往下拉的时候将会看到图片在不停的加载，这就是`ajax`,但是当我们下拉到底的时候就会看到整个页面加载了60条裤子的信息，我们打开chrome的调试工具，查找页面元素时可以看到每条裤子的信息都在`<li class='gl-item'></li>`这个标签中，如下图：**\n\n>![生成图](http://ono60m7tl.bkt.clouddn.com/jd1.bmp)\n\n>* **接着我们打开网页源码就会发现其实网页源码只有前30条的数据，后面30条的数据找不到，因此这里就会想到ajax，一种异步加载的方式，于是我们就要开始抓包了，我们打开chrome按F12，点击上面的NetWork,然后点击XHR,这个比较容易好找,下面开始抓包，如下图：**\n\n>![抓包图](http://ono60m7tl.bkt.clouddn.com/jd2.bmp)\n\n>* **从上面可以找到请求的`url`，发现有很长的一大段，我们试着去掉一些看看可不可以打开，简化之后的`url`=https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&enc=utf-8&qrst=1&rt=1&stop=1&vt=2&offset=3&wq=%E8%A3%A4%E5%AD%90&page={0}&s=26&scrolling=y&pos=30&show_items={1}**\n>**这里的`showitems`是裤子的`id`,`page`是翻页的，可以看出来我们只需要改动两处就可以打开不同的网页了，这里的`page`很好找，你会发现一个很好玩的事情，就是主网页的`page`是奇数，但是异步加载的网页中的`page`是偶数，因此这里只要填上偶数就可以了，但是填奇数也是可以访问的。这里的`show_items`就是`id`了，我们可以在页面的源码中找到，通过查找可以看到`id`在`li`标签的`data-pid`中，详情请看下图**\n\n>![id](http://ono60m7tl.bkt.clouddn.com/jd3.bmp)\n\n>* **上面我们知道怎样找参数了，现在就可以撸代码了**\n\n## 代码讲解\n\n>* **首先我们要获取网页的源码，这里我用的requests库，安装方法为`pip install requests`，代码如下:**\n```python\n    def get_html(self):\n        res = requests.get(self.url, headers=self.headers)\n        html = res.text     \n        return html    #返回的源代码\n```\n\n>* **根据上面的分析可以知道，第二步就是得到异步加载的url中的参数`show_items`,就是`li`标签中的`data-pid`,代码如下：**\n\n```python\n    def get_pids(self):\n        html = self.get_html()\n        soup = BeautifulSoup(html, 'lxml')    #创建BeautifulSoup对象\n        lis = soup.find_all(\"li\", class_='gl-item')   #查找li标签\n        for li in lis:\n            data_pid = li.get(\"data-pid\")      #得到li标签下的data-pid\n            if (data_pid):\n                self.pids.add(data_pid)    #这里的self.pids是一个集合，用于过滤重复的\n```\n\n>* **下面就是获取前30张图片的url了，也就是主网页上的图片，其中一个问题是img标签的属性并不是一样的，也就是源码中的`img`中不都是`src`属性，一开始已经加载出来的图片就是src属性，但是没有加载出来的图片是`data-lazy-img`，因此在解析页面的时候要加上讨论。代码如下：**\n\n```python\n    def get_src_imgs_data(self):\n        html = self.get_html()\n        soup = BeautifulSoup(html, 'lxml')\n        divs = soup.find_all(\"div\", class_='p-img')  # 图片\n        # divs_prices = soup.find_all(\"div\", class_='p-price')   #价格\n        for div in divs:\n            img_1 = div.find(\"img\").get('data-lazy-img')  # 得到没有加载出来的url\n            img_2 = div.find(\"img\").get(\"src\")  # 得到已经加载出来的url\n            if img_1:\n                print img_1\n                self.sql.save_img(img_1)\n                self.img_urls.add(img_1)\n            if img_2:\n                print img_2\n                self.sql.save_img(img_2)\n                self.img_urls.add(img_2)\n```\n\n>**前三十张图片找到了，现在开始找后三十张图片了，当然是要请求那个异步加载的`url`，前面已经把需要的参数给找到了，下面就好办了，直接贴代码：**\n\n```python\n    def get_extend_imgs_data(self):\n        # self.search_urls=self.search_urls+','.join(self.pids)\n        self.search_urls = self.search_urls.format(str(self.search_page), ','.join(self.pids))  #拼凑url,将获得的单数拼成url,其中show_items中的id是用','隔开的，因此要对集合中的每一个id分割，page就是偶数，这里直接用主网页的page加一就可以了\n        print self.search_urls\n        html = requests.get(self.search_urls, headers=self.headers).text   #请求\n        soup = BeautifulSoup(html, 'lxml')   \n        div_search = soup.find_all(\"div\", class_='p-img')   #解析\n        for div in div_search:  \n            img_3 = div.find(\"img\").get('data-lazy-img')    #这里可以看到分开查找img属性了\n            img_4 = div.find(\"img\").get(\"src\")\n\n            if img_3:    #如果是data-lazy-img\n                print img_3\n                self.sql.save_img(img_3)    #存储到数据库\n                self.img_urls.add(img_3)      #用集合去重\n            if img_4:    #如果是src属性\n                print img_4\n                self.sql.save_img(img_4)     \n                self.img_urls.add(img_4)\n```\n\n\n>* **通过上面就可以爬取了，但是还是要考虑速度的问题，这里我用了多线程，直接每一页面开启一个线程，速度还是可以的，感觉这个速度还是可以的，几分钟解决问题，总共爬取了`100`个网页,这里的存储方式是`mysql`数据库存储的，要用发哦`MySQLdb`这个库，详情自己百度，当然也可以用mogodb但是还没有学呢，想要的源码的朋友请看[GitHub源码](https://github.com/chenjiabing666/JD_Spider_python/tree/master)**\n\n\n## 拓展\n**写到这里可以看到搜索首页的网址中`keyword`和`wq`都是你输入的词，如果你想要爬取更多的信息，可以将这两个词改成你想要搜索的词即可，直接将汉字写上，在请求的时候会自动帮你编码的，我也试过了，可以抓取源码的，如果你想要不断的抓取，可以将要搜索的词写上文件里，然后从文件中读取就可以了。以上只是一个普通的爬虫，并没有用到什么框架，接下来将会写`scrapy`框架爬取的，请继续关注我的博客哦！！！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/python爬虫大战京东商城.md","raw":"---\ntitle: python爬虫大战京东商城\ndate: 2017-04-23 18:34:48\ncategories: python\ntags: python爬虫\n---\n# python大规模爬取京东\n## 主要工具\n>* **`scrapy`**\n>* **`BeautifulSoup`**\n>* **`requests`**\n\n## 分析步骤\n\n>* **打开京东首页，输入**裤子**将会看到页面跳转到了[这里](https://search.jd.com/Search?keyword=%E8%A3%A4%E5%AD%90&enc=utf-8&wq=%E8%A3%A4%E5%AD%90&pvid=a424f5c84d7844aaa56d4d62286878be)，这就是我们要分析的起点**\n\n>* **我们可以看到这个页面并不是完全的，当我们往下拉的时候将会看到图片在不停的加载，这就是`ajax`,但是当我们下拉到底的时候就会看到整个页面加载了60条裤子的信息，我们打开chrome的调试工具，查找页面元素时可以看到每条裤子的信息都在`<li class='gl-item'></li>`这个标签中，如下图：**\n\n>![生成图](http://ono60m7tl.bkt.clouddn.com/jd1.bmp)\n\n>* **接着我们打开网页源码就会发现其实网页源码只有前30条的数据，后面30条的数据找不到，因此这里就会想到ajax，一种异步加载的方式，于是我们就要开始抓包了，我们打开chrome按F12，点击上面的NetWork,然后点击XHR,这个比较容易好找,下面开始抓包，如下图：**\n\n>![抓包图](http://ono60m7tl.bkt.clouddn.com/jd2.bmp)\n\n>* **从上面可以找到请求的`url`，发现有很长的一大段，我们试着去掉一些看看可不可以打开，简化之后的`url`=https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&enc=utf-8&qrst=1&rt=1&stop=1&vt=2&offset=3&wq=%E8%A3%A4%E5%AD%90&page={0}&s=26&scrolling=y&pos=30&show_items={1}**\n>**这里的`showitems`是裤子的`id`,`page`是翻页的，可以看出来我们只需要改动两处就可以打开不同的网页了，这里的`page`很好找，你会发现一个很好玩的事情，就是主网页的`page`是奇数，但是异步加载的网页中的`page`是偶数，因此这里只要填上偶数就可以了，但是填奇数也是可以访问的。这里的`show_items`就是`id`了，我们可以在页面的源码中找到，通过查找可以看到`id`在`li`标签的`data-pid`中，详情请看下图**\n\n>![id](http://ono60m7tl.bkt.clouddn.com/jd3.bmp)\n\n>* **上面我们知道怎样找参数了，现在就可以撸代码了**\n\n## 代码讲解\n\n>* **首先我们要获取网页的源码，这里我用的requests库，安装方法为`pip install requests`，代码如下:**\n```python\n    def get_html(self):\n        res = requests.get(self.url, headers=self.headers)\n        html = res.text     \n        return html    #返回的源代码\n```\n\n>* **根据上面的分析可以知道，第二步就是得到异步加载的url中的参数`show_items`,就是`li`标签中的`data-pid`,代码如下：**\n\n```python\n    def get_pids(self):\n        html = self.get_html()\n        soup = BeautifulSoup(html, 'lxml')    #创建BeautifulSoup对象\n        lis = soup.find_all(\"li\", class_='gl-item')   #查找li标签\n        for li in lis:\n            data_pid = li.get(\"data-pid\")      #得到li标签下的data-pid\n            if (data_pid):\n                self.pids.add(data_pid)    #这里的self.pids是一个集合，用于过滤重复的\n```\n\n>* **下面就是获取前30张图片的url了，也就是主网页上的图片，其中一个问题是img标签的属性并不是一样的，也就是源码中的`img`中不都是`src`属性，一开始已经加载出来的图片就是src属性，但是没有加载出来的图片是`data-lazy-img`，因此在解析页面的时候要加上讨论。代码如下：**\n\n```python\n    def get_src_imgs_data(self):\n        html = self.get_html()\n        soup = BeautifulSoup(html, 'lxml')\n        divs = soup.find_all(\"div\", class_='p-img')  # 图片\n        # divs_prices = soup.find_all(\"div\", class_='p-price')   #价格\n        for div in divs:\n            img_1 = div.find(\"img\").get('data-lazy-img')  # 得到没有加载出来的url\n            img_2 = div.find(\"img\").get(\"src\")  # 得到已经加载出来的url\n            if img_1:\n                print img_1\n                self.sql.save_img(img_1)\n                self.img_urls.add(img_1)\n            if img_2:\n                print img_2\n                self.sql.save_img(img_2)\n                self.img_urls.add(img_2)\n```\n\n>**前三十张图片找到了，现在开始找后三十张图片了，当然是要请求那个异步加载的`url`，前面已经把需要的参数给找到了，下面就好办了，直接贴代码：**\n\n```python\n    def get_extend_imgs_data(self):\n        # self.search_urls=self.search_urls+','.join(self.pids)\n        self.search_urls = self.search_urls.format(str(self.search_page), ','.join(self.pids))  #拼凑url,将获得的单数拼成url,其中show_items中的id是用','隔开的，因此要对集合中的每一个id分割，page就是偶数，这里直接用主网页的page加一就可以了\n        print self.search_urls\n        html = requests.get(self.search_urls, headers=self.headers).text   #请求\n        soup = BeautifulSoup(html, 'lxml')   \n        div_search = soup.find_all(\"div\", class_='p-img')   #解析\n        for div in div_search:  \n            img_3 = div.find(\"img\").get('data-lazy-img')    #这里可以看到分开查找img属性了\n            img_4 = div.find(\"img\").get(\"src\")\n\n            if img_3:    #如果是data-lazy-img\n                print img_3\n                self.sql.save_img(img_3)    #存储到数据库\n                self.img_urls.add(img_3)      #用集合去重\n            if img_4:    #如果是src属性\n                print img_4\n                self.sql.save_img(img_4)     \n                self.img_urls.add(img_4)\n```\n\n\n>* **通过上面就可以爬取了，但是还是要考虑速度的问题，这里我用了多线程，直接每一页面开启一个线程，速度还是可以的，感觉这个速度还是可以的，几分钟解决问题，总共爬取了`100`个网页,这里的存储方式是`mysql`数据库存储的，要用发哦`MySQLdb`这个库，详情自己百度，当然也可以用mogodb但是还没有学呢，想要的源码的朋友请看[GitHub源码](https://github.com/chenjiabing666/JD_Spider_python/tree/master)**\n\n\n## 拓展\n**写到这里可以看到搜索首页的网址中`keyword`和`wq`都是你输入的词，如果你想要爬取更多的信息，可以将这两个词改成你想要搜索的词即可，直接将汉字写上，在请求的时候会自动帮你编码的，我也试过了，可以抓取源码的，如果你想要不断的抓取，可以将要搜索的词写上文件里，然后从文件中读取就可以了。以上只是一个普通的爬虫，并没有用到什么框架，接下来将会写`scrapy`框架爬取的，请继续关注我的博客哦！！！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"python爬虫大战京东商城","published":1,"updated":"2017-04-23T10:48:02.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayq0022l0uzb4rgr4bu","content":"<h1 id=\"python大规模爬取京东\"><a href=\"#python大规模爬取京东\" class=\"headerlink\" title=\"python大规模爬取京东\"></a>python大规模爬取京东</h1><h2 id=\"主要工具\"><a href=\"#主要工具\" class=\"headerlink\" title=\"主要工具\"></a>主要工具</h2><blockquote>\n<ul>\n<li><strong><code>scrapy</code></strong></li>\n<li><strong><code>BeautifulSoup</code></strong></li>\n<li><strong><code>requests</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"分析步骤\"><a href=\"#分析步骤\" class=\"headerlink\" title=\"分析步骤\"></a>分析步骤</h2><blockquote>\n<ul>\n<li><p><strong>打开京东首页，输入</strong>裤子<strong>将会看到页面跳转到了<a href=\"https://search.jd.com/Search?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;wq=%E8%A3%A4%E5%AD%90&amp;pvid=a424f5c84d7844aaa56d4d62286878be\" target=\"_blank\" rel=\"external\">这里</a>，这就是我们要分析的起点</strong></p>\n</li>\n<li><p><strong>我们可以看到这个页面并不是完全的，当我们往下拉的时候将会看到图片在不停的加载，这就是<code>ajax</code>,但是当我们下拉到底的时候就会看到整个页面加载了60条裤子的信息，我们打开chrome的调试工具，查找页面元素时可以看到每条裤子的信息都在<code>&lt;li class=&#39;gl-item&#39;&gt;&lt;/li&gt;</code>这个标签中，如下图：</strong></p>\n</li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd1.bmp\" alt=\"生成图\"></p>\n<ul>\n<li><strong>接着我们打开网页源码就会发现其实网页源码只有前30条的数据，后面30条的数据找不到，因此这里就会想到ajax，一种异步加载的方式，于是我们就要开始抓包了，我们打开chrome按F12，点击上面的NetWork,然后点击XHR,这个比较容易好找,下面开始抓包，如下图：</strong></li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd2.bmp\" alt=\"抓包图\"></p>\n<ul>\n<li><strong>从上面可以找到请求的<code>url</code>，发现有很长的一大段，我们试着去掉一些看看可不可以打开，简化之后的<code>url</code>=<a href=\"https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}\" target=\"_blank\" rel=\"external\">https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}</a></strong><br><strong>这里的<code>showitems</code>是裤子的<code>id</code>,<code>page</code>是翻页的，可以看出来我们只需要改动两处就可以打开不同的网页了，这里的<code>page</code>很好找，你会发现一个很好玩的事情，就是主网页的<code>page</code>是奇数，但是异步加载的网页中的<code>page</code>是偶数，因此这里只要填上偶数就可以了，但是填奇数也是可以访问的。这里的<code>show_items</code>就是<code>id</code>了，我们可以在页面的源码中找到，通过查找可以看到<code>id</code>在<code>li</code>标签的<code>data-pid</code>中，详情请看下图</strong></li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd3.bmp\" alt=\"id\"></p>\n<ul>\n<li><strong>上面我们知道怎样找参数了，现在就可以撸代码了</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"代码讲解\"><a href=\"#代码讲解\" class=\"headerlink\" title=\"代码讲解\"></a>代码讲解</h2><blockquote>\n<ul>\n<li><p><strong>首先我们要获取网页的源码，这里我用的requests库，安装方法为<code>pip install requests</code>，代码如下:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_html</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    res = requests.get(self.url, headers=self.headers)</div><div class=\"line\">    html = res.text     </div><div class=\"line\">    <span class=\"keyword\">return</span> html    <span class=\"comment\">#返回的源代码</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>根据上面的分析可以知道，第二步就是得到异步加载的url中的参数<code>show_items</code>,就是<code>li</code>标签中的<code>data-pid</code>,代码如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pids</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    html = self.get_html()</div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)    <span class=\"comment\">#创建BeautifulSoup对象</span></div><div class=\"line\">    lis = soup.find_all(<span class=\"string\">\"li\"</span>, class_=<span class=\"string\">'gl-item'</span>)   <span class=\"comment\">#查找li标签</span></div><div class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> lis:</div><div class=\"line\">        data_pid = li.get(<span class=\"string\">\"data-pid\"</span>)      <span class=\"comment\">#得到li标签下的data-pid</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (data_pid):</div><div class=\"line\">            self.pids.add(data_pid)    <span class=\"comment\">#这里的self.pids是一个集合，用于过滤重复的</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面就是获取前30张图片的url了，也就是主网页上的图片，其中一个问题是img标签的属性并不是一样的，也就是源码中的<code>img</code>中不都是<code>src</code>属性，一开始已经加载出来的图片就是src属性，但是没有加载出来的图片是<code>data-lazy-img</code>，因此在解析页面的时候要加上讨论。代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_src_imgs_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    html = self.get_html()</div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">    divs = soup.find_all(<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">'p-img'</span>)  <span class=\"comment\"># 图片</span></div><div class=\"line\">    <span class=\"comment\"># divs_prices = soup.find_all(\"div\", class_='p-price')   #价格</span></div><div class=\"line\">    <span class=\"keyword\">for</span> div <span class=\"keyword\">in</span> divs:</div><div class=\"line\">        img_1 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">'data-lazy-img'</span>)  <span class=\"comment\"># 得到没有加载出来的url</span></div><div class=\"line\">        img_2 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">\"src\"</span>)  <span class=\"comment\"># 得到已经加载出来的url</span></div><div class=\"line\">        <span class=\"keyword\">if</span> img_1:</div><div class=\"line\">            <span class=\"keyword\">print</span> img_1</div><div class=\"line\">            self.sql.save_img(img_1)</div><div class=\"line\">            self.img_urls.add(img_1)</div><div class=\"line\">        <span class=\"keyword\">if</span> img_2:</div><div class=\"line\">            <span class=\"keyword\">print</span> img_2</div><div class=\"line\">            self.sql.save_img(img_2)</div><div class=\"line\">            self.img_urls.add(img_2)</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>前三十张图片找到了，现在开始找后三十张图片了，当然是要请求那个异步加载的<code>url</code>，前面已经把需要的参数给找到了，下面就好办了，直接贴代码：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_extend_imgs_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># self.search_urls=self.search_urls+','.join(self.pids)</span></div><div class=\"line\">    self.search_urls = self.search_urls.format(str(self.search_page), <span class=\"string\">','</span>.join(self.pids))  <span class=\"comment\">#拼凑url,将获得的单数拼成url,其中show_items中的id是用','隔开的，因此要对集合中的每一个id分割，page就是偶数，这里直接用主网页的page加一就可以了</span></div><div class=\"line\">    <span class=\"keyword\">print</span> self.search_urls</div><div class=\"line\">    html = requests.get(self.search_urls, headers=self.headers).text   <span class=\"comment\">#请求</span></div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)   </div><div class=\"line\">    div_search = soup.find_all(<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">'p-img'</span>)   <span class=\"comment\">#解析</span></div><div class=\"line\">    <span class=\"keyword\">for</span> div <span class=\"keyword\">in</span> div_search:  </div><div class=\"line\">        img_3 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">'data-lazy-img'</span>)    <span class=\"comment\">#这里可以看到分开查找img属性了</span></div><div class=\"line\">        img_4 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">\"src\"</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> img_3:    <span class=\"comment\">#如果是data-lazy-img</span></div><div class=\"line\">            <span class=\"keyword\">print</span> img_3</div><div class=\"line\">            self.sql.save_img(img_3)    <span class=\"comment\">#存储到数据库</span></div><div class=\"line\">            self.img_urls.add(img_3)      <span class=\"comment\">#用集合去重</span></div><div class=\"line\">        <span class=\"keyword\">if</span> img_4:    <span class=\"comment\">#如果是src属性</span></div><div class=\"line\">            <span class=\"keyword\">print</span> img_4</div><div class=\"line\">            self.sql.save_img(img_4)     </div><div class=\"line\">            self.img_urls.add(img_4)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>通过上面就可以爬取了，但是还是要考虑速度的问题，这里我用了多线程，直接每一页面开启一个线程，速度还是可以的，感觉这个速度还是可以的，几分钟解决问题，总共爬取了<code>100</code>个网页,这里的存储方式是<code>mysql</code>数据库存储的，要用发哦<code>MySQLdb</code>这个库，详情自己百度，当然也可以用mogodb但是还没有学呢，想要的源码的朋友请看<a href=\"https://github.com/chenjiabing666/JD_Spider_python/tree/master\" target=\"_blank\" rel=\"external\">GitHub源码</a></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p><strong>写到这里可以看到搜索首页的网址中<code>keyword</code>和<code>wq</code>都是你输入的词，如果你想要爬取更多的信息，可以将这两个词改成你想要搜索的词即可，直接将汉字写上，在请求的时候会自动帮你编码的，我也试过了，可以抓取源码的，如果你想要不断的抓取，可以将要搜索的词写上文件里，然后从文件中读取就可以了。以上只是一个普通的爬虫，并没有用到什么框架，接下来将会写<code>scrapy</code>框架爬取的，请继续关注我的博客哦！！！</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"python大规模爬取京东\"><a href=\"#python大规模爬取京东\" class=\"headerlink\" title=\"python大规模爬取京东\"></a>python大规模爬取京东</h1><h2 id=\"主要工具\"><a href=\"#主要工具\" class=\"headerlink\" title=\"主要工具\"></a>主要工具</h2><blockquote>\n<ul>\n<li><strong><code>scrapy</code></strong></li>\n<li><strong><code>BeautifulSoup</code></strong></li>\n<li><strong><code>requests</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"分析步骤\"><a href=\"#分析步骤\" class=\"headerlink\" title=\"分析步骤\"></a>分析步骤</h2><blockquote>\n<ul>\n<li><p><strong>打开京东首页，输入</strong>裤子<strong>将会看到页面跳转到了<a href=\"https://search.jd.com/Search?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;wq=%E8%A3%A4%E5%AD%90&amp;pvid=a424f5c84d7844aaa56d4d62286878be\">这里</a>，这就是我们要分析的起点</strong></p>\n</li>\n<li><p><strong>我们可以看到这个页面并不是完全的，当我们往下拉的时候将会看到图片在不停的加载，这就是<code>ajax</code>,但是当我们下拉到底的时候就会看到整个页面加载了60条裤子的信息，我们打开chrome的调试工具，查找页面元素时可以看到每条裤子的信息都在<code>&lt;li class=&#39;gl-item&#39;&gt;&lt;/li&gt;</code>这个标签中，如下图：</strong></p>\n</li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd1.bmp\" alt=\"生成图\"></p>\n<ul>\n<li><strong>接着我们打开网页源码就会发现其实网页源码只有前30条的数据，后面30条的数据找不到，因此这里就会想到ajax，一种异步加载的方式，于是我们就要开始抓包了，我们打开chrome按F12，点击上面的NetWork,然后点击XHR,这个比较容易好找,下面开始抓包，如下图：</strong></li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd2.bmp\" alt=\"抓包图\"></p>\n<ul>\n<li><strong>从上面可以找到请求的<code>url</code>，发现有很长的一大段，我们试着去掉一些看看可不可以打开，简化之后的<code>url</code>=<a href=\"https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}\">https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}</a></strong><br><strong>这里的<code>showitems</code>是裤子的<code>id</code>,<code>page</code>是翻页的，可以看出来我们只需要改动两处就可以打开不同的网页了，这里的<code>page</code>很好找，你会发现一个很好玩的事情，就是主网页的<code>page</code>是奇数，但是异步加载的网页中的<code>page</code>是偶数，因此这里只要填上偶数就可以了，但是填奇数也是可以访问的。这里的<code>show_items</code>就是<code>id</code>了，我们可以在页面的源码中找到，通过查找可以看到<code>id</code>在<code>li</code>标签的<code>data-pid</code>中，详情请看下图</strong></li>\n</ul>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/jd3.bmp\" alt=\"id\"></p>\n<ul>\n<li><strong>上面我们知道怎样找参数了，现在就可以撸代码了</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"代码讲解\"><a href=\"#代码讲解\" class=\"headerlink\" title=\"代码讲解\"></a>代码讲解</h2><blockquote>\n<ul>\n<li><p><strong>首先我们要获取网页的源码，这里我用的requests库，安装方法为<code>pip install requests</code>，代码如下:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_html</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    res = requests.get(self.url, headers=self.headers)</div><div class=\"line\">    html = res.text     </div><div class=\"line\">    <span class=\"keyword\">return</span> html    <span class=\"comment\">#返回的源代码</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>根据上面的分析可以知道，第二步就是得到异步加载的url中的参数<code>show_items</code>,就是<code>li</code>标签中的<code>data-pid</code>,代码如下：</strong></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pids</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    html = self.get_html()</div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)    <span class=\"comment\">#创建BeautifulSoup对象</span></div><div class=\"line\">    lis = soup.find_all(<span class=\"string\">\"li\"</span>, class_=<span class=\"string\">'gl-item'</span>)   <span class=\"comment\">#查找li标签</span></div><div class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> lis:</div><div class=\"line\">        data_pid = li.get(<span class=\"string\">\"data-pid\"</span>)      <span class=\"comment\">#得到li标签下的data-pid</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (data_pid):</div><div class=\"line\">            self.pids.add(data_pid)    <span class=\"comment\">#这里的self.pids是一个集合，用于过滤重复的</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>下面就是获取前30张图片的url了，也就是主网页上的图片，其中一个问题是img标签的属性并不是一样的，也就是源码中的<code>img</code>中不都是<code>src</code>属性，一开始已经加载出来的图片就是src属性，但是没有加载出来的图片是<code>data-lazy-img</code>，因此在解析页面的时候要加上讨论。代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_src_imgs_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    html = self.get_html()</div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">    divs = soup.find_all(<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">'p-img'</span>)  <span class=\"comment\"># 图片</span></div><div class=\"line\">    <span class=\"comment\"># divs_prices = soup.find_all(\"div\", class_='p-price')   #价格</span></div><div class=\"line\">    <span class=\"keyword\">for</span> div <span class=\"keyword\">in</span> divs:</div><div class=\"line\">        img_1 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">'data-lazy-img'</span>)  <span class=\"comment\"># 得到没有加载出来的url</span></div><div class=\"line\">        img_2 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">\"src\"</span>)  <span class=\"comment\"># 得到已经加载出来的url</span></div><div class=\"line\">        <span class=\"keyword\">if</span> img_1:</div><div class=\"line\">            <span class=\"keyword\">print</span> img_1</div><div class=\"line\">            self.sql.save_img(img_1)</div><div class=\"line\">            self.img_urls.add(img_1)</div><div class=\"line\">        <span class=\"keyword\">if</span> img_2:</div><div class=\"line\">            <span class=\"keyword\">print</span> img_2</div><div class=\"line\">            self.sql.save_img(img_2)</div><div class=\"line\">            self.img_urls.add(img_2)</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>前三十张图片找到了，现在开始找后三十张图片了，当然是要请求那个异步加载的<code>url</code>，前面已经把需要的参数给找到了，下面就好办了，直接贴代码：</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_extend_imgs_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># self.search_urls=self.search_urls+','.join(self.pids)</span></div><div class=\"line\">    self.search_urls = self.search_urls.format(str(self.search_page), <span class=\"string\">','</span>.join(self.pids))  <span class=\"comment\">#拼凑url,将获得的单数拼成url,其中show_items中的id是用','隔开的，因此要对集合中的每一个id分割，page就是偶数，这里直接用主网页的page加一就可以了</span></div><div class=\"line\">    <span class=\"keyword\">print</span> self.search_urls</div><div class=\"line\">    html = requests.get(self.search_urls, headers=self.headers).text   <span class=\"comment\">#请求</span></div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)   </div><div class=\"line\">    div_search = soup.find_all(<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">'p-img'</span>)   <span class=\"comment\">#解析</span></div><div class=\"line\">    <span class=\"keyword\">for</span> div <span class=\"keyword\">in</span> div_search:  </div><div class=\"line\">        img_3 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">'data-lazy-img'</span>)    <span class=\"comment\">#这里可以看到分开查找img属性了</span></div><div class=\"line\">        img_4 = div.find(<span class=\"string\">\"img\"</span>).get(<span class=\"string\">\"src\"</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> img_3:    <span class=\"comment\">#如果是data-lazy-img</span></div><div class=\"line\">            <span class=\"keyword\">print</span> img_3</div><div class=\"line\">            self.sql.save_img(img_3)    <span class=\"comment\">#存储到数据库</span></div><div class=\"line\">            self.img_urls.add(img_3)      <span class=\"comment\">#用集合去重</span></div><div class=\"line\">        <span class=\"keyword\">if</span> img_4:    <span class=\"comment\">#如果是src属性</span></div><div class=\"line\">            <span class=\"keyword\">print</span> img_4</div><div class=\"line\">            self.sql.save_img(img_4)     </div><div class=\"line\">            self.img_urls.add(img_4)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>通过上面就可以爬取了，但是还是要考虑速度的问题，这里我用了多线程，直接每一页面开启一个线程，速度还是可以的，感觉这个速度还是可以的，几分钟解决问题，总共爬取了<code>100</code>个网页,这里的存储方式是<code>mysql</code>数据库存储的，要用发哦<code>MySQLdb</code>这个库，详情自己百度，当然也可以用mogodb但是还没有学呢，想要的源码的朋友请看<a href=\"https://github.com/chenjiabing666/JD_Spider_python/tree/master\">GitHub源码</a></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p><strong>写到这里可以看到搜索首页的网址中<code>keyword</code>和<code>wq</code>都是你输入的词，如果你想要爬取更多的信息，可以将这两个词改成你想要搜索的词即可，直接将汉字写上，在请求的时候会自动帮你编码的，我也试过了，可以抓取源码的，如果你想要不断的抓取，可以将要搜索的词写上文件里，然后从文件中读取就可以了。以上只是一个普通的爬虫，并没有用到什么框架，接下来将会写<code>scrapy</code>框架爬取的，请继续关注我的博客哦！！！</strong></p>\n<blockquote>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy初试","date":"2017-03-25T06:21:21.000Z","_content":"\n# scrapy初试\n>## 创建项目\n>>打开`cmd`，在终端输入`scrapy startproject tutorial`,这里将在指定的文件夹下创建一个`scrapy`工程\n\n>## 其中将会创建以下的文件：\n>>* `scrapy.cfg`: 项目的配置文件\n>>* `tutorial/`: 该项目的python模块。之后您将在此加入代码。\n>>* `tutorial/items.py`: 项目中的item文件.\n>>* `tutorial/pipelines.py`: 项目中的pipelines文件.\n>> * `tutorial/settings.py`: 项目的设置文件.\n>> * `tutorial/spiders/`: 放置spider代码的目录.\n\n>定义item\n>>`Item `是保存爬取到的数据的容器；其使用方法和`python`字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。\n\n>>类似在`ORM`中做的一样，您可以通过创建一个 `scrapy.Item` 类， 并且定义类型为 `scrapy.Field `的类属性来定义一个`Item`。 (如果不了解`ORM`, 不用担心，您会发现这个步骤非常简单)\n\n>>首先根据需要从`dmoz.org`获取到的数据对`item`进行建模。 我们需要从`dmoz`中获取名字，`url`，以及网站的描述。 对此，在`item`中定义相应的字段。编辑 `tutorial` 目录中的 `items.py` 文件:\n\n```python  \n    import scrapy\n    class DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n>>一开始这看起来可能有点复杂，但是通过定义item， 您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义.\n\n>## 编写第一个爬虫\n>>>在工程的根目录下打开终端输入`scrapy genspider demo douban.com`\n>>>这里的`demo`是`spders`文件下的主要`py`文件\n>>>`douban.com`是要爬取的域名，会在`demo.py`中的 `allowed_domains`中显示，主要的功能就是限制爬取的`url`\n>>### spider代码中内容解析\n>>>* `name`: 用于区别`Spider`。 该名字必须是唯一的，您不可以为不同的`Spider`设定相同的名字。\n>>* `start_urls`: 包含了`Spider`在启动时进行爬取的`url`列表。 因此，第一个被获取到的页面将是其中之一。 后续的`URL`则从初始的`URL`获取到的数据中提取。\n>>* `parse()` 是spider的一个方法。 被调用时，每个初始`URL`完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(`response data`)，提取数据(生成`item`)以及生成需要进一步处理的`URL`的 `Request `对象。\n\n>>### 以下是spider目录下的demo.py的代码\n\n```python\n    import scrapy\n\n    class DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n            \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2]\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n```\n\n            \n>## spider的爬取\n>>进入工程的根目录下打开终端输入：`scrapy crawl dmoz`\n\n>## spider中的数据存取\n>>在工程的根目录下打开终端输入`scrapy crawl dmoz -o items.json`\n>>这里是将数据存储到`json`文件中\n\n\n    \n    \n","source":"_posts/scrapy初试.md","raw":"---\ntitle: scrapy初试\ndate: 2017-03-25 14:21:21\ncategories: Scrapy学习\ntags: scrapy\n---\n\n# scrapy初试\n>## 创建项目\n>>打开`cmd`，在终端输入`scrapy startproject tutorial`,这里将在指定的文件夹下创建一个`scrapy`工程\n\n>## 其中将会创建以下的文件：\n>>* `scrapy.cfg`: 项目的配置文件\n>>* `tutorial/`: 该项目的python模块。之后您将在此加入代码。\n>>* `tutorial/items.py`: 项目中的item文件.\n>>* `tutorial/pipelines.py`: 项目中的pipelines文件.\n>> * `tutorial/settings.py`: 项目的设置文件.\n>> * `tutorial/spiders/`: 放置spider代码的目录.\n\n>定义item\n>>`Item `是保存爬取到的数据的容器；其使用方法和`python`字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。\n\n>>类似在`ORM`中做的一样，您可以通过创建一个 `scrapy.Item` 类， 并且定义类型为 `scrapy.Field `的类属性来定义一个`Item`。 (如果不了解`ORM`, 不用担心，您会发现这个步骤非常简单)\n\n>>首先根据需要从`dmoz.org`获取到的数据对`item`进行建模。 我们需要从`dmoz`中获取名字，`url`，以及网站的描述。 对此，在`item`中定义相应的字段。编辑 `tutorial` 目录中的 `items.py` 文件:\n\n```python  \n    import scrapy\n    class DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n>>一开始这看起来可能有点复杂，但是通过定义item， 您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义.\n\n>## 编写第一个爬虫\n>>>在工程的根目录下打开终端输入`scrapy genspider demo douban.com`\n>>>这里的`demo`是`spders`文件下的主要`py`文件\n>>>`douban.com`是要爬取的域名，会在`demo.py`中的 `allowed_domains`中显示，主要的功能就是限制爬取的`url`\n>>### spider代码中内容解析\n>>>* `name`: 用于区别`Spider`。 该名字必须是唯一的，您不可以为不同的`Spider`设定相同的名字。\n>>* `start_urls`: 包含了`Spider`在启动时进行爬取的`url`列表。 因此，第一个被获取到的页面将是其中之一。 后续的`URL`则从初始的`URL`获取到的数据中提取。\n>>* `parse()` 是spider的一个方法。 被调用时，每个初始`URL`完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(`response data`)，提取数据(生成`item`)以及生成需要进一步处理的`URL`的 `Request `对象。\n\n>>### 以下是spider目录下的demo.py的代码\n\n```python\n    import scrapy\n\n    class DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n            \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2]\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n```\n\n            \n>## spider的爬取\n>>进入工程的根目录下打开终端输入：`scrapy crawl dmoz`\n\n>## spider中的数据存取\n>>在工程的根目录下打开终端输入`scrapy crawl dmoz -o items.json`\n>>这里是将数据存储到`json`文件中\n\n\n    \n    \n","slug":"scrapy初试","published":1,"updated":"2017-03-27T03:30:06.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayu0026l0uzqozkx7k9","content":"<h1 id=\"scrapy初试\"><a href=\"#scrapy初试\" class=\"headerlink\" title=\"scrapy初试\"></a>scrapy初试</h1><blockquote>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><blockquote>\n<p>打开<code>cmd</code>，在终端输入<code>scrapy startproject tutorial</code>,这里将在指定的文件夹下创建一个<code>scrapy</code>工程</p>\n</blockquote>\n<h2 id=\"其中将会创建以下的文件：\"><a href=\"#其中将会创建以下的文件：\" class=\"headerlink\" title=\"其中将会创建以下的文件：\"></a>其中将会创建以下的文件：</h2><blockquote>\n<ul>\n<li><code>scrapy.cfg</code>: 项目的配置文件</li>\n<li><code>tutorial/</code>: 该项目的python模块。之后您将在此加入代码。</li>\n<li><code>tutorial/items.py</code>: 项目中的item文件.</li>\n<li><code>tutorial/pipelines.py</code>: 项目中的pipelines文件.</li>\n<li><code>tutorial/settings.py</code>: 项目的设置文件.</li>\n<li><code>tutorial/spiders/</code>: 放置spider代码的目录.</li>\n</ul>\n</blockquote>\n<p>定义item</p>\n<blockquote>\n<p><code>Item</code>是保存爬取到的数据的容器；其使用方法和<code>python</code>字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。</p>\n<p>类似在<code>ORM</code>中做的一样，您可以通过创建一个 <code>scrapy.Item</code> 类， 并且定义类型为 <code>scrapy.Field</code>的类属性来定义一个<code>Item</code>。 (如果不了解<code>ORM</code>, 不用担心，您会发现这个步骤非常简单)</p>\n<p>首先根据需要从<code>dmoz.org</code>获取到的数据对<code>item</code>进行建模。 我们需要从<code>dmoz</code>中获取名字，<code>url</code>，以及网站的描述。 对此，在<code>item</code>中定义相应的字段。编辑 <code>tutorial</code> 目录中的 <code>items.py</code> 文件:</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">title = scrapy.Field()</div><div class=\"line\">link = scrapy.Field()</div><div class=\"line\">desc = scrapy.Field()</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>一开始这看起来可能有点复杂，但是通过定义item， 您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义.</p>\n</blockquote>\n<h2 id=\"编写第一个爬虫\"><a href=\"#编写第一个爬虫\" class=\"headerlink\" title=\"编写第一个爬虫\"></a>编写第一个爬虫</h2><blockquote>\n<blockquote>\n<p>在工程的根目录下打开终端输入<code>scrapy genspider demo douban.com</code><br>这里的<code>demo</code>是<code>spders</code>文件下的主要<code>py</code>文件<br><code>douban.com</code>是要爬取的域名，会在<code>demo.py</code>中的 <code>allowed_domains</code>中显示，主要的功能就是限制爬取的<code>url</code></p>\n<h3 id=\"spider代码中内容解析\"><a href=\"#spider代码中内容解析\" class=\"headerlink\" title=\"spider代码中内容解析\"></a>spider代码中内容解析</h3><ul>\n<li><code>name</code>: 用于区别<code>Spider</code>。 该名字必须是唯一的，您不可以为不同的<code>Spider</code>设定相同的名字。</li>\n<li><code>start_urls</code>: 包含了<code>Spider</code>在启动时进行爬取的<code>url</code>列表。 因此，第一个被获取到的页面将是其中之一。 后续的<code>URL</code>则从初始的<code>URL</code>获取到的数据中提取。</li>\n<li><code>parse()</code> 是spider的一个方法。 被调用时，每个初始<code>URL</code>完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(<code>response data</code>)，提取数据(生成<code>item</code>)以及生成需要进一步处理的<code>URL</code>的 <code>Request</code>对象。</li>\n</ul>\n</blockquote>\n<h3 id=\"以下是spider目录下的demo-py的代码\"><a href=\"#以下是spider目录下的demo-py的代码\" class=\"headerlink\" title=\"以下是spider目录下的demo.py的代码\"></a>以下是spider目录下的demo.py的代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</div><div class=\"line\">    <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.body)</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"spider的爬取\"><a href=\"#spider的爬取\" class=\"headerlink\" title=\"spider的爬取\"></a>spider的爬取</h2><blockquote>\n<p>进入工程的根目录下打开终端输入：<code>scrapy crawl dmoz</code></p>\n</blockquote>\n<h2 id=\"spider中的数据存取\"><a href=\"#spider中的数据存取\" class=\"headerlink\" title=\"spider中的数据存取\"></a>spider中的数据存取</h2><blockquote>\n<p>在工程的根目录下打开终端输入<code>scrapy crawl dmoz -o items.json</code><br>这里是将数据存储到<code>json</code>文件中</p>\n</blockquote>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"scrapy初试\"><a href=\"#scrapy初试\" class=\"headerlink\" title=\"scrapy初试\"></a>scrapy初试</h1><blockquote>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><blockquote>\n<p>打开<code>cmd</code>，在终端输入<code>scrapy startproject tutorial</code>,这里将在指定的文件夹下创建一个<code>scrapy</code>工程</p>\n</blockquote>\n<h2 id=\"其中将会创建以下的文件：\"><a href=\"#其中将会创建以下的文件：\" class=\"headerlink\" title=\"其中将会创建以下的文件：\"></a>其中将会创建以下的文件：</h2><blockquote>\n<ul>\n<li><code>scrapy.cfg</code>: 项目的配置文件</li>\n<li><code>tutorial/</code>: 该项目的python模块。之后您将在此加入代码。</li>\n<li><code>tutorial/items.py</code>: 项目中的item文件.</li>\n<li><code>tutorial/pipelines.py</code>: 项目中的pipelines文件.</li>\n<li><code>tutorial/settings.py</code>: 项目的设置文件.</li>\n<li><code>tutorial/spiders/</code>: 放置spider代码的目录.</li>\n</ul>\n</blockquote>\n<p>定义item</p>\n<blockquote>\n<p><code>Item</code>是保存爬取到的数据的容器；其使用方法和<code>python</code>字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。</p>\n<p>类似在<code>ORM</code>中做的一样，您可以通过创建一个 <code>scrapy.Item</code> 类， 并且定义类型为 <code>scrapy.Field</code>的类属性来定义一个<code>Item</code>。 (如果不了解<code>ORM</code>, 不用担心，您会发现这个步骤非常简单)</p>\n<p>首先根据需要从<code>dmoz.org</code>获取到的数据对<code>item</code>进行建模。 我们需要从<code>dmoz</code>中获取名字，<code>url</code>，以及网站的描述。 对此，在<code>item</code>中定义相应的字段。编辑 <code>tutorial</code> 目录中的 <code>items.py</code> 文件:</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">title = scrapy.Field()</div><div class=\"line\">link = scrapy.Field()</div><div class=\"line\">desc = scrapy.Field()</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>一开始这看起来可能有点复杂，但是通过定义item， 您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义.</p>\n</blockquote>\n<h2 id=\"编写第一个爬虫\"><a href=\"#编写第一个爬虫\" class=\"headerlink\" title=\"编写第一个爬虫\"></a>编写第一个爬虫</h2><blockquote>\n<blockquote>\n<p>在工程的根目录下打开终端输入<code>scrapy genspider demo douban.com</code><br>这里的<code>demo</code>是<code>spders</code>文件下的主要<code>py</code>文件<br><code>douban.com</code>是要爬取的域名，会在<code>demo.py</code>中的 <code>allowed_domains</code>中显示，主要的功能就是限制爬取的<code>url</code></p>\n<h3 id=\"spider代码中内容解析\"><a href=\"#spider代码中内容解析\" class=\"headerlink\" title=\"spider代码中内容解析\"></a>spider代码中内容解析</h3><ul>\n<li><code>name</code>: 用于区别<code>Spider</code>。 该名字必须是唯一的，您不可以为不同的<code>Spider</code>设定相同的名字。</li>\n<li><code>start_urls</code>: 包含了<code>Spider</code>在启动时进行爬取的<code>url</code>列表。 因此，第一个被获取到的页面将是其中之一。 后续的<code>URL</code>则从初始的<code>URL</code>获取到的数据中提取。</li>\n<li><code>parse()</code> 是spider的一个方法。 被调用时，每个初始<code>URL</code>完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(<code>response data</code>)，提取数据(生成<code>item</code>)以及生成需要进一步处理的<code>URL</code>的 <code>Request</code>对象。</li>\n</ul>\n</blockquote>\n<h3 id=\"以下是spider目录下的demo-py的代码\"><a href=\"#以下是spider目录下的demo-py的代码\" class=\"headerlink\" title=\"以下是spider目录下的demo.py的代码\"></a>以下是spider目录下的demo.py的代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</div><div class=\"line\">    <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.body)</div></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"spider的爬取\"><a href=\"#spider的爬取\" class=\"headerlink\" title=\"spider的爬取\"></a>spider的爬取</h2><blockquote>\n<p>进入工程的根目录下打开终端输入：<code>scrapy crawl dmoz</code></p>\n</blockquote>\n<h2 id=\"spider中的数据存取\"><a href=\"#spider中的数据存取\" class=\"headerlink\" title=\"spider中的数据存取\"></a>spider中的数据存取</h2><blockquote>\n<p>在工程的根目录下打开终端输入<code>scrapy crawl dmoz -o items.json</code><br>这里是将数据存储到<code>json</code>文件中</p>\n</blockquote>\n</blockquote>\n"},{"title":"scrapy大战京东商城","date":"2017-04-23T14:12:30.000Z","_content":"\n# SCrapy爬虫大战京东商城\n\n## 引言\n>**上一篇已经讲过怎样获取链接，怎样获得参数了，详情请看[python爬取京东商城普通篇](https://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/)**\n\n## 代码详解\n\n>* **首先应该构造请求，这里使用[scrapy.Request](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spiders.html),这个方法默认调用的是`start_urls`构造请求，如果要改变默认的请求，那么必须重载该方法，这个方法的返回值必须是一个可迭代的对象，一般是用`yield`返回，代码如下：**\n\n```python\n    def start_requests(self):\n        for i in range(1,101):\n            page=i*2-1    #这里是构造请求url的page,表示奇数\n            url=self.start_url+str(page)\n            yield scrapy.Request(url,meta={'search_page':page+1},callback=self.parse_url)   #这里使用meta想回调函数传入数据，回调函数使用response.meta['search-page']接受数据\n```\n\n>**下面就是解析网页了，从上面看出这里的解析回调函数是`parse_url`,因此在此函数中解析网页。这里还是和上面说的一样，这个`url`得到的仅仅是前一半的信息，如果想要得到后一半的信息还有再次请求，这里还有注意的就是一个技巧：一般先解析出一个数据的数组，不急着取出第一个数，先要用if语句判断，因为如果得到的是`[]`，那么直接取出`[0]`是会报错的，这只是一个避免报错的方法吧，代码如下:**\n\n```python\n    def parse_url(self,response):\n        if response.status==200:   #判断是否请求成功\n            # print response.url\n            pids = set()    #这个集合用于过滤和保存得到的id,用于作为后面的ajax请求的url构成\n            try:\n                all_goods = response.xpath(\"//div[@id='J_goodsList']/ul/li\")   #首先得到所有衣服的整个框架，然后从中抽取每一个框架\n\n                for goods in all_goods:   #从中解析每一个\n                    # scrapy.shell.inspect_response(response,self)   #这是一个调试的方法，这里会直接打开调试模式\n                    items = JdSpiderItem()   #定义要抓取的数据\n                    img_url_src = goods.xpath(\"div/div[1]/a/img/@src\").extract()  # 如果不存在就是一个空数组[]，因此不能在这里取[0]\n                    img_url_delay = goods.xpath(\n                        \"div/div[1]/a/img/@data-lazy-img\").extract()  # 这个是没有加载出来的图片，这里不能写上数组取第一个[0]\n                    price = goods.xpath(\"div/div[3]/strong/i/text()\").extract()  #价格\n                    cloths_name = goods.xpath(\"div/div[4]/a/em/text()\").extract()\n                    shop_id = goods.xpath(\"div/div[7]/@ data-shopid\").extract()\n                    cloths_url = goods.xpath(\"div/div[1]/a/@href\").extract()\n                    person_number = goods.xpath(\"div/div[5]/strong/a/text()\").extract()\n                    pid = goods.xpath(\"@data-pid\").extract()\n                    # product_id=goods.xpath(\"@data-sku\").extract()\n                    if pid:\n                        pids.add(pid[0])\n                    if img_url_src:  # 如果img_url_src存在\n                        print img_url_src[0]\n                        items['img_url'] = img_url_src[0]\n                    if img_url_delay:  # 如果到了没有加载完成的图片，就取这个url\n                        print img_url_delay[0]\n                        items['img_url'] = img_url_delay[0]  # 这里如果数组不是空的，就能写了\n                    if price:\n                        items['price'] = price[0]\n                    if cloths_name:\n                        items['cloths_name'] = cloths_name[0]\n                    if shop_id:\n                        items['shop_id'] = shop_id[0]\n                        shop_url = \"https://mall.jd.com/index-\" + str(shop_id[0]) + \".html\"\n                        items['shop_url'] = shop_url\n                    if cloths_url:\n                        items['cloths_url'] = cloths_url[0]\n                    if person_number:\n                        items['person_number'] = person_number[0]\n                    # if product_id:\n                    #     print \"************************************csdjkvjfskvnk***********************\"\n                    #     print self.comments_url.format(str(product_id[0]),str(self.count))\n                    #     yield scrapy.Request(url=self.comments_url.format(str(product_id[0]),str(self.count)),callback=self.comments)\n                    #yield scrapy.Request写在这里就是每解析一个键裤子就会调用回调函数一次\n                    yield items\n            except Exception:\n                print \"********************************************ERROR**********************************************************************\"\n\n            yield scrapy.Request(url=self.search_url.format(str(response.meta['search_page']),\",\".join(pids)),callback=self.next_half_parse)    #再次请求，这里是请求ajax加载的数据，必须放在这里，因为只有等到得到所有的pid才能构成这个请求，回调函数用于下面的解析\n```\n\n>* **从上面代码的最后可以看出最后就是解析`ajax`加载的网页了，这里调用的`next_half_parse`函数，和解析前面一个网页一样，这里需要的注意的是，如果前面定义的数据没有搜索完毕是不能使用`yield items`的，必须将items通过meta传入下一个回调函数继续完善后才能`yield items`,这里就不需要了，代码如下：**\n\n```python\n#分析异步加载的网页\n    def next_half_parse(self,response):\n        if response.status==200:\n            print response.url\n            items=JdSpiderItem()\n            #scrapy.shell.inspect_response(response,self)    #y用来调试的\n            try:\n                lis=response.xpath(\"//li[@class='gl-item']\")\n                for li in lis:\n                    cloths_url=li.xpath(\"div/div[1]/a/@href\").extract()\n                    img_url_1=li.xpath(\"div/div[1]/a/img/@src\").extract()\n                    img_url_2=li.xpath(\"div/div[1]/a/img/@data-lazy-img\").extract()\n                    cloths_name=li.xpath(\"div/div[4]/a/em/text()\").extract()\n                    price=li.xpath(\"div/div[3]/strong/i/text()\").extract()\n                    shop_id=li.xpath(\"div/div[7]/@data-shopid\").extract()\n                    person_number=li.xpath(\"div/div[5]/strong/a/text()\").extract()\n                    if cloths_url:\n                        print cloths_url[0]\n                        items['cloths_url']=cloths_url[0]\n                    if img_url_1:\n                        print img_url_1[0]\n                        items['img_url']=img_url_1\n                    if img_url_2:\n                        print img_url_2[0]\n                        items['img_url']=img_url_2[0]\n                    if cloths_name:\n                        items['cloths_name']=cloths_name[0]\n                    if price:\n                        items['price']=price[0]\n                    if shop_id:\n                        items['shop_id']=shop_id[0]\n                        items['shop_url']=\"https://mall.jd.com/index-\" + str(shop_id[0]) + \".html\"\n                    if person_number:\n                        items['person_number']=person_number[0]\n                    yield items   #又一次的生成，这里是完整的数据，因此可以yield items\n            except Exception:\n                print \"**************************************************\"\n```\n\n>* **当然这里还用到了设置请求池，`mysql`存储，没有使用到`ip`代理，这个在我前面的博客中又讲到，这里就不再赘述了，想看源代码的朋友请[点击这里](https://github.com/chenjiabing666/JD_Scrapy_Spider)**\n\n## 小技巧\n>* **人们会抱怨为什么自己的爬虫在中途断开就要重头开始爬，为什么不能从断开那里开始爬呢，这里提供一个方法：在配置文件`settings.py`中加入`JOBDIR=file_name`,这里的`file_name`是一个文件的名字**\n\n>* **设置下载延迟防止被`ban`:`DOWNLOAD_DELAY = 2`:设置每一次的间隔时间   `RANDOMIZE_DOWNLOAD_DELAY = True`:这个是随机设置延迟时间  在设置的时间的`0.5-1.5`倍之间，这样可以更有效的防止被ban,一般是配套使用的**\n\n>* **`ROBOTSTXT_OBEY = False` :这里是表示不遵循`robots.txt`文件，默认是`True`表示遵循，这里将之改成`False`**\n\n>* **`CONCURRENT_REQUESTS` :设置最大请求数，这里默认的时`16`，我们可以根据自己电脑的配置改的大一点来加快请求的速度**\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/scrapy大战京东商城.md","raw":"---\ntitle: scrapy大战京东商城\ndate: 2017-04-23 22:12:30\ncategories: Scrapy学习\ntags: scrapy\n---\n\n# SCrapy爬虫大战京东商城\n\n## 引言\n>**上一篇已经讲过怎样获取链接，怎样获得参数了，详情请看[python爬取京东商城普通篇](https://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/)**\n\n## 代码详解\n\n>* **首先应该构造请求，这里使用[scrapy.Request](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spiders.html),这个方法默认调用的是`start_urls`构造请求，如果要改变默认的请求，那么必须重载该方法，这个方法的返回值必须是一个可迭代的对象，一般是用`yield`返回，代码如下：**\n\n```python\n    def start_requests(self):\n        for i in range(1,101):\n            page=i*2-1    #这里是构造请求url的page,表示奇数\n            url=self.start_url+str(page)\n            yield scrapy.Request(url,meta={'search_page':page+1},callback=self.parse_url)   #这里使用meta想回调函数传入数据，回调函数使用response.meta['search-page']接受数据\n```\n\n>**下面就是解析网页了，从上面看出这里的解析回调函数是`parse_url`,因此在此函数中解析网页。这里还是和上面说的一样，这个`url`得到的仅仅是前一半的信息，如果想要得到后一半的信息还有再次请求，这里还有注意的就是一个技巧：一般先解析出一个数据的数组，不急着取出第一个数，先要用if语句判断，因为如果得到的是`[]`，那么直接取出`[0]`是会报错的，这只是一个避免报错的方法吧，代码如下:**\n\n```python\n    def parse_url(self,response):\n        if response.status==200:   #判断是否请求成功\n            # print response.url\n            pids = set()    #这个集合用于过滤和保存得到的id,用于作为后面的ajax请求的url构成\n            try:\n                all_goods = response.xpath(\"//div[@id='J_goodsList']/ul/li\")   #首先得到所有衣服的整个框架，然后从中抽取每一个框架\n\n                for goods in all_goods:   #从中解析每一个\n                    # scrapy.shell.inspect_response(response,self)   #这是一个调试的方法，这里会直接打开调试模式\n                    items = JdSpiderItem()   #定义要抓取的数据\n                    img_url_src = goods.xpath(\"div/div[1]/a/img/@src\").extract()  # 如果不存在就是一个空数组[]，因此不能在这里取[0]\n                    img_url_delay = goods.xpath(\n                        \"div/div[1]/a/img/@data-lazy-img\").extract()  # 这个是没有加载出来的图片，这里不能写上数组取第一个[0]\n                    price = goods.xpath(\"div/div[3]/strong/i/text()\").extract()  #价格\n                    cloths_name = goods.xpath(\"div/div[4]/a/em/text()\").extract()\n                    shop_id = goods.xpath(\"div/div[7]/@ data-shopid\").extract()\n                    cloths_url = goods.xpath(\"div/div[1]/a/@href\").extract()\n                    person_number = goods.xpath(\"div/div[5]/strong/a/text()\").extract()\n                    pid = goods.xpath(\"@data-pid\").extract()\n                    # product_id=goods.xpath(\"@data-sku\").extract()\n                    if pid:\n                        pids.add(pid[0])\n                    if img_url_src:  # 如果img_url_src存在\n                        print img_url_src[0]\n                        items['img_url'] = img_url_src[0]\n                    if img_url_delay:  # 如果到了没有加载完成的图片，就取这个url\n                        print img_url_delay[0]\n                        items['img_url'] = img_url_delay[0]  # 这里如果数组不是空的，就能写了\n                    if price:\n                        items['price'] = price[0]\n                    if cloths_name:\n                        items['cloths_name'] = cloths_name[0]\n                    if shop_id:\n                        items['shop_id'] = shop_id[0]\n                        shop_url = \"https://mall.jd.com/index-\" + str(shop_id[0]) + \".html\"\n                        items['shop_url'] = shop_url\n                    if cloths_url:\n                        items['cloths_url'] = cloths_url[0]\n                    if person_number:\n                        items['person_number'] = person_number[0]\n                    # if product_id:\n                    #     print \"************************************csdjkvjfskvnk***********************\"\n                    #     print self.comments_url.format(str(product_id[0]),str(self.count))\n                    #     yield scrapy.Request(url=self.comments_url.format(str(product_id[0]),str(self.count)),callback=self.comments)\n                    #yield scrapy.Request写在这里就是每解析一个键裤子就会调用回调函数一次\n                    yield items\n            except Exception:\n                print \"********************************************ERROR**********************************************************************\"\n\n            yield scrapy.Request(url=self.search_url.format(str(response.meta['search_page']),\",\".join(pids)),callback=self.next_half_parse)    #再次请求，这里是请求ajax加载的数据，必须放在这里，因为只有等到得到所有的pid才能构成这个请求，回调函数用于下面的解析\n```\n\n>* **从上面代码的最后可以看出最后就是解析`ajax`加载的网页了，这里调用的`next_half_parse`函数，和解析前面一个网页一样，这里需要的注意的是，如果前面定义的数据没有搜索完毕是不能使用`yield items`的，必须将items通过meta传入下一个回调函数继续完善后才能`yield items`,这里就不需要了，代码如下：**\n\n```python\n#分析异步加载的网页\n    def next_half_parse(self,response):\n        if response.status==200:\n            print response.url\n            items=JdSpiderItem()\n            #scrapy.shell.inspect_response(response,self)    #y用来调试的\n            try:\n                lis=response.xpath(\"//li[@class='gl-item']\")\n                for li in lis:\n                    cloths_url=li.xpath(\"div/div[1]/a/@href\").extract()\n                    img_url_1=li.xpath(\"div/div[1]/a/img/@src\").extract()\n                    img_url_2=li.xpath(\"div/div[1]/a/img/@data-lazy-img\").extract()\n                    cloths_name=li.xpath(\"div/div[4]/a/em/text()\").extract()\n                    price=li.xpath(\"div/div[3]/strong/i/text()\").extract()\n                    shop_id=li.xpath(\"div/div[7]/@data-shopid\").extract()\n                    person_number=li.xpath(\"div/div[5]/strong/a/text()\").extract()\n                    if cloths_url:\n                        print cloths_url[0]\n                        items['cloths_url']=cloths_url[0]\n                    if img_url_1:\n                        print img_url_1[0]\n                        items['img_url']=img_url_1\n                    if img_url_2:\n                        print img_url_2[0]\n                        items['img_url']=img_url_2[0]\n                    if cloths_name:\n                        items['cloths_name']=cloths_name[0]\n                    if price:\n                        items['price']=price[0]\n                    if shop_id:\n                        items['shop_id']=shop_id[0]\n                        items['shop_url']=\"https://mall.jd.com/index-\" + str(shop_id[0]) + \".html\"\n                    if person_number:\n                        items['person_number']=person_number[0]\n                    yield items   #又一次的生成，这里是完整的数据，因此可以yield items\n            except Exception:\n                print \"**************************************************\"\n```\n\n>* **当然这里还用到了设置请求池，`mysql`存储，没有使用到`ip`代理，这个在我前面的博客中又讲到，这里就不再赘述了，想看源代码的朋友请[点击这里](https://github.com/chenjiabing666/JD_Scrapy_Spider)**\n\n## 小技巧\n>* **人们会抱怨为什么自己的爬虫在中途断开就要重头开始爬，为什么不能从断开那里开始爬呢，这里提供一个方法：在配置文件`settings.py`中加入`JOBDIR=file_name`,这里的`file_name`是一个文件的名字**\n\n>* **设置下载延迟防止被`ban`:`DOWNLOAD_DELAY = 2`:设置每一次的间隔时间   `RANDOMIZE_DOWNLOAD_DELAY = True`:这个是随机设置延迟时间  在设置的时间的`0.5-1.5`倍之间，这样可以更有效的防止被ban,一般是配套使用的**\n\n>* **`ROBOTSTXT_OBEY = False` :这里是表示不遵循`robots.txt`文件，默认是`True`表示遵循，这里将之改成`False`**\n\n>* **`CONCURRENT_REQUESTS` :设置最大请求数，这里默认的时`16`，我们可以根据自己电脑的配置改的大一点来加快请求的速度**\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"scrapy大战京东商城","published":1,"updated":"2017-04-23T14:16:59.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwayx0029l0uzua2yp4ry","content":"<h1 id=\"SCrapy爬虫大战京东商城\"><a href=\"#SCrapy爬虫大战京东商城\" class=\"headerlink\" title=\"SCrapy爬虫大战京东商城\"></a>SCrapy爬虫大战京东商城</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><strong>上一篇已经讲过怎样获取链接，怎样获得参数了，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/\">python爬取京东商城普通篇</a></strong></p>\n</blockquote>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><blockquote>\n<ul>\n<li><strong>首先应该构造请求，这里使用<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spiders.html\" target=\"_blank\" rel=\"external\">scrapy.Request</a>,这个方法默认调用的是<code>start_urls</code>构造请求，如果要改变默认的请求，那么必须重载该方法，这个方法的返回值必须是一个可迭代的对象，一般是用<code>yield</code>返回，代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">101</span>):</div><div class=\"line\">        page=i*<span class=\"number\">2</span><span class=\"number\">-1</span>    <span class=\"comment\">#这里是构造请求url的page,表示奇数</span></div><div class=\"line\">        url=self.start_url+str(page)</div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url,meta=&#123;<span class=\"string\">'search_page'</span>:page+<span class=\"number\">1</span>&#125;,callback=self.parse_url)   <span class=\"comment\">#这里使用meta想回调函数传入数据，回调函数使用response.meta['search-page']接受数据</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>下面就是解析网页了，从上面看出这里的解析回调函数是<code>parse_url</code>,因此在此函数中解析网页。这里还是和上面说的一样，这个<code>url</code>得到的仅仅是前一半的信息，如果想要得到后一半的信息还有再次请求，这里还有注意的就是一个技巧：一般先解析出一个数据的数组，不急着取出第一个数，先要用if语句判断，因为如果得到的是<code>[]</code>，那么直接取出<code>[0]</code>是会报错的，这只是一个避免报错的方法吧，代码如下:</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_url</span><span class=\"params\">(self,response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> response.status==<span class=\"number\">200</span>:   <span class=\"comment\">#判断是否请求成功</span></div><div class=\"line\">        <span class=\"comment\"># print response.url</span></div><div class=\"line\">        pids = set()    <span class=\"comment\">#这个集合用于过滤和保存得到的id,用于作为后面的ajax请求的url构成</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            all_goods = response.xpath(<span class=\"string\">\"//div[@id='J_goodsList']/ul/li\"</span>)   <span class=\"comment\">#首先得到所有衣服的整个框架，然后从中抽取每一个框架</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> goods <span class=\"keyword\">in</span> all_goods:   <span class=\"comment\">#从中解析每一个</span></div><div class=\"line\">                <span class=\"comment\"># scrapy.shell.inspect_response(response,self)   #这是一个调试的方法，这里会直接打开调试模式</span></div><div class=\"line\">                items = JdSpiderItem()   <span class=\"comment\">#定义要抓取的数据</span></div><div class=\"line\">                img_url_src = goods.xpath(<span class=\"string\">\"div/div[1]/a/img/@src\"</span>).extract()  <span class=\"comment\"># 如果不存在就是一个空数组[]，因此不能在这里取[0]</span></div><div class=\"line\">                img_url_delay = goods.xpath(</div><div class=\"line\">                    <span class=\"string\">\"div/div[1]/a/img/@data-lazy-img\"</span>).extract()  <span class=\"comment\"># 这个是没有加载出来的图片，这里不能写上数组取第一个[0]</span></div><div class=\"line\">                price = goods.xpath(<span class=\"string\">\"div/div[3]/strong/i/text()\"</span>).extract()  <span class=\"comment\">#价格</span></div><div class=\"line\">                cloths_name = goods.xpath(<span class=\"string\">\"div/div[4]/a/em/text()\"</span>).extract()</div><div class=\"line\">                shop_id = goods.xpath(<span class=\"string\">\"div/div[7]/@ data-shopid\"</span>).extract()</div><div class=\"line\">                cloths_url = goods.xpath(<span class=\"string\">\"div/div[1]/a/@href\"</span>).extract()</div><div class=\"line\">                person_number = goods.xpath(<span class=\"string\">\"div/div[5]/strong/a/text()\"</span>).extract()</div><div class=\"line\">                pid = goods.xpath(<span class=\"string\">\"@data-pid\"</span>).extract()</div><div class=\"line\">                <span class=\"comment\"># product_id=goods.xpath(\"@data-sku\").extract()</span></div><div class=\"line\">                <span class=\"keyword\">if</span> pid:</div><div class=\"line\">                    pids.add(pid[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">if</span> img_url_src:  <span class=\"comment\"># 如果img_url_src存在</span></div><div class=\"line\">                    <span class=\"keyword\">print</span> img_url_src[<span class=\"number\">0</span>]</div><div class=\"line\">                    items[<span class=\"string\">'img_url'</span>] = img_url_src[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> img_url_delay:  <span class=\"comment\"># 如果到了没有加载完成的图片，就取这个url</span></div><div class=\"line\">                    <span class=\"keyword\">print</span> img_url_delay[<span class=\"number\">0</span>]</div><div class=\"line\">                    items[<span class=\"string\">'img_url'</span>] = img_url_delay[<span class=\"number\">0</span>]  <span class=\"comment\"># 这里如果数组不是空的，就能写了</span></div><div class=\"line\">                <span class=\"keyword\">if</span> price:</div><div class=\"line\">                    items[<span class=\"string\">'price'</span>] = price[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> cloths_name:</div><div class=\"line\">                    items[<span class=\"string\">'cloths_name'</span>] = cloths_name[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> shop_id:</div><div class=\"line\">                    items[<span class=\"string\">'shop_id'</span>] = shop_id[<span class=\"number\">0</span>]</div><div class=\"line\">                    shop_url = <span class=\"string\">\"https://mall.jd.com/index-\"</span> + str(shop_id[<span class=\"number\">0</span>]) + <span class=\"string\">\".html\"</span></div><div class=\"line\">                    items[<span class=\"string\">'shop_url'</span>] = shop_url</div><div class=\"line\">                <span class=\"keyword\">if</span> cloths_url:</div><div class=\"line\">                    items[<span class=\"string\">'cloths_url'</span>] = cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> person_number:</div><div class=\"line\">                    items[<span class=\"string\">'person_number'</span>] = person_number[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"comment\"># if product_id:</span></div><div class=\"line\">                <span class=\"comment\">#     print \"************************************csdjkvjfskvnk***********************\"</span></div><div class=\"line\">                <span class=\"comment\">#     print self.comments_url.format(str(product_id[0]),str(self.count))</span></div><div class=\"line\">                <span class=\"comment\">#     yield scrapy.Request(url=self.comments_url.format(str(product_id[0]),str(self.count)),callback=self.comments)</span></div><div class=\"line\">                <span class=\"comment\">#yield scrapy.Request写在这里就是每解析一个键裤子就会调用回调函数一次</span></div><div class=\"line\">                <span class=\"keyword\">yield</span> items</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"********************************************ERROR**********************************************************************\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url=self.search_url.format(str(response.meta[<span class=\"string\">'search_page'</span>]),<span class=\"string\">\",\"</span>.join(pids)),callback=self.next_half_parse)    <span class=\"comment\">#再次请求，这里是请求ajax加载的数据，必须放在这里，因为只有等到得到所有的pid才能构成这个请求，回调函数用于下面的解析</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>从上面代码的最后可以看出最后就是解析<code>ajax</code>加载的网页了，这里调用的<code>next_half_parse</code>函数，和解析前面一个网页一样，这里需要的注意的是，如果前面定义的数据没有搜索完毕是不能使用<code>yield items</code>的，必须将items通过meta传入下一个回调函数继续完善后才能<code>yield items</code>,这里就不需要了，代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#分析异步加载的网页</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_half_parse</span><span class=\"params\">(self,response)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> response.status==<span class=\"number\">200</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> response.url</div><div class=\"line\">            items=JdSpiderItem()</div><div class=\"line\">            <span class=\"comment\">#scrapy.shell.inspect_response(response,self)    #y用来调试的</span></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                lis=response.xpath(<span class=\"string\">\"//li[@class='gl-item']\"</span>)</div><div class=\"line\">                <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> lis:</div><div class=\"line\">                    cloths_url=li.xpath(<span class=\"string\">\"div/div[1]/a/@href\"</span>).extract()</div><div class=\"line\">                    img_url_1=li.xpath(<span class=\"string\">\"div/div[1]/a/img/@src\"</span>).extract()</div><div class=\"line\">                    img_url_2=li.xpath(<span class=\"string\">\"div/div[1]/a/img/@data-lazy-img\"</span>).extract()</div><div class=\"line\">                    cloths_name=li.xpath(<span class=\"string\">\"div/div[4]/a/em/text()\"</span>).extract()</div><div class=\"line\">                    price=li.xpath(<span class=\"string\">\"div/div[3]/strong/i/text()\"</span>).extract()</div><div class=\"line\">                    shop_id=li.xpath(<span class=\"string\">\"div/div[7]/@data-shopid\"</span>).extract()</div><div class=\"line\">                    person_number=li.xpath(<span class=\"string\">\"div/div[5]/strong/a/text()\"</span>).extract()</div><div class=\"line\">                    <span class=\"keyword\">if</span> cloths_url:</div><div class=\"line\">                        <span class=\"keyword\">print</span> cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'cloths_url'</span>]=cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> img_url_1:</div><div class=\"line\">                        <span class=\"keyword\">print</span> img_url_1[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'img_url'</span>]=img_url_1</div><div class=\"line\">                    <span class=\"keyword\">if</span> img_url_2:</div><div class=\"line\">                        <span class=\"keyword\">print</span> img_url_2[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'img_url'</span>]=img_url_2[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> cloths_name:</div><div class=\"line\">                        items[<span class=\"string\">'cloths_name'</span>]=cloths_name[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> price:</div><div class=\"line\">                        items[<span class=\"string\">'price'</span>]=price[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> shop_id:</div><div class=\"line\">                        items[<span class=\"string\">'shop_id'</span>]=shop_id[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'shop_url'</span>]=<span class=\"string\">\"https://mall.jd.com/index-\"</span> + str(shop_id[<span class=\"number\">0</span>]) + <span class=\"string\">\".html\"</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> person_number:</div><div class=\"line\">                        items[<span class=\"string\">'person_number'</span>]=person_number[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">yield</span> items   <span class=\"comment\">#又一次的生成，这里是完整的数据，因此可以yield items</span></div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"**************************************************\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>当然这里还用到了设置请求池，<code>mysql</code>存储，没有使用到<code>ip</code>代理，这个在我前面的博客中又讲到，这里就不再赘述了，想看源代码的朋友请<a href=\"https://github.com/chenjiabing666/JD_Scrapy_Spider\" target=\"_blank\" rel=\"external\">点击这里</a></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><blockquote>\n<ul>\n<li><p><strong>人们会抱怨为什么自己的爬虫在中途断开就要重头开始爬，为什么不能从断开那里开始爬呢，这里提供一个方法：在配置文件<code>settings.py</code>中加入<code>JOBDIR=file_name</code>,这里的<code>file_name</code>是一个文件的名字</strong></p>\n</li>\n<li><p><strong>设置下载延迟防止被<code>ban</code>:<code>DOWNLOAD_DELAY = 2</code>:设置每一次的间隔时间   <code>RANDOMIZE_DOWNLOAD_DELAY = True</code>:这个是随机设置延迟时间  在设置的时间的<code>0.5-1.5</code>倍之间，这样可以更有效的防止被ban,一般是配套使用的</strong></p>\n</li>\n<li><p><strong><code>ROBOTSTXT_OBEY = False</code> :这里是表示不遵循<code>robots.txt</code>文件，默认是<code>True</code>表示遵循，这里将之改成<code>False</code></strong></p>\n</li>\n<li><p><strong><code>CONCURRENT_REQUESTS</code> :设置最大请求数，这里默认的时<code>16</code>，我们可以根据自己电脑的配置改的大一点来加快请求的速度</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"SCrapy爬虫大战京东商城\"><a href=\"#SCrapy爬虫大战京东商城\" class=\"headerlink\" title=\"SCrapy爬虫大战京东商城\"></a>SCrapy爬虫大战京东商城</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p><strong>上一篇已经讲过怎样获取链接，怎样获得参数了，详情请看<a href=\"https://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/\">python爬取京东商城普通篇</a></strong></p>\n</blockquote>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><blockquote>\n<ul>\n<li><strong>首先应该构造请求，这里使用<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spiders.html\">scrapy.Request</a>,这个方法默认调用的是<code>start_urls</code>构造请求，如果要改变默认的请求，那么必须重载该方法，这个方法的返回值必须是一个可迭代的对象，一般是用<code>yield</code>返回，代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">101</span>):</div><div class=\"line\">        page=i*<span class=\"number\">2</span><span class=\"number\">-1</span>    <span class=\"comment\">#这里是构造请求url的page,表示奇数</span></div><div class=\"line\">        url=self.start_url+str(page)</div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url,meta=&#123;<span class=\"string\">'search_page'</span>:page+<span class=\"number\">1</span>&#125;,callback=self.parse_url)   <span class=\"comment\">#这里使用meta想回调函数传入数据，回调函数使用response.meta['search-page']接受数据</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>下面就是解析网页了，从上面看出这里的解析回调函数是<code>parse_url</code>,因此在此函数中解析网页。这里还是和上面说的一样，这个<code>url</code>得到的仅仅是前一半的信息，如果想要得到后一半的信息还有再次请求，这里还有注意的就是一个技巧：一般先解析出一个数据的数组，不急着取出第一个数，先要用if语句判断，因为如果得到的是<code>[]</code>，那么直接取出<code>[0]</code>是会报错的，这只是一个避免报错的方法吧，代码如下:</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_url</span><span class=\"params\">(self,response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> response.status==<span class=\"number\">200</span>:   <span class=\"comment\">#判断是否请求成功</span></div><div class=\"line\">        <span class=\"comment\"># print response.url</span></div><div class=\"line\">        pids = set()    <span class=\"comment\">#这个集合用于过滤和保存得到的id,用于作为后面的ajax请求的url构成</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            all_goods = response.xpath(<span class=\"string\">\"//div[@id='J_goodsList']/ul/li\"</span>)   <span class=\"comment\">#首先得到所有衣服的整个框架，然后从中抽取每一个框架</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> goods <span class=\"keyword\">in</span> all_goods:   <span class=\"comment\">#从中解析每一个</span></div><div class=\"line\">                <span class=\"comment\"># scrapy.shell.inspect_response(response,self)   #这是一个调试的方法，这里会直接打开调试模式</span></div><div class=\"line\">                items = JdSpiderItem()   <span class=\"comment\">#定义要抓取的数据</span></div><div class=\"line\">                img_url_src = goods.xpath(<span class=\"string\">\"div/div[1]/a/img/@src\"</span>).extract()  <span class=\"comment\"># 如果不存在就是一个空数组[]，因此不能在这里取[0]</span></div><div class=\"line\">                img_url_delay = goods.xpath(</div><div class=\"line\">                    <span class=\"string\">\"div/div[1]/a/img/@data-lazy-img\"</span>).extract()  <span class=\"comment\"># 这个是没有加载出来的图片，这里不能写上数组取第一个[0]</span></div><div class=\"line\">                price = goods.xpath(<span class=\"string\">\"div/div[3]/strong/i/text()\"</span>).extract()  <span class=\"comment\">#价格</span></div><div class=\"line\">                cloths_name = goods.xpath(<span class=\"string\">\"div/div[4]/a/em/text()\"</span>).extract()</div><div class=\"line\">                shop_id = goods.xpath(<span class=\"string\">\"div/div[7]/@ data-shopid\"</span>).extract()</div><div class=\"line\">                cloths_url = goods.xpath(<span class=\"string\">\"div/div[1]/a/@href\"</span>).extract()</div><div class=\"line\">                person_number = goods.xpath(<span class=\"string\">\"div/div[5]/strong/a/text()\"</span>).extract()</div><div class=\"line\">                pid = goods.xpath(<span class=\"string\">\"@data-pid\"</span>).extract()</div><div class=\"line\">                <span class=\"comment\"># product_id=goods.xpath(\"@data-sku\").extract()</span></div><div class=\"line\">                <span class=\"keyword\">if</span> pid:</div><div class=\"line\">                    pids.add(pid[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">if</span> img_url_src:  <span class=\"comment\"># 如果img_url_src存在</span></div><div class=\"line\">                    <span class=\"keyword\">print</span> img_url_src[<span class=\"number\">0</span>]</div><div class=\"line\">                    items[<span class=\"string\">'img_url'</span>] = img_url_src[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> img_url_delay:  <span class=\"comment\"># 如果到了没有加载完成的图片，就取这个url</span></div><div class=\"line\">                    <span class=\"keyword\">print</span> img_url_delay[<span class=\"number\">0</span>]</div><div class=\"line\">                    items[<span class=\"string\">'img_url'</span>] = img_url_delay[<span class=\"number\">0</span>]  <span class=\"comment\"># 这里如果数组不是空的，就能写了</span></div><div class=\"line\">                <span class=\"keyword\">if</span> price:</div><div class=\"line\">                    items[<span class=\"string\">'price'</span>] = price[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> cloths_name:</div><div class=\"line\">                    items[<span class=\"string\">'cloths_name'</span>] = cloths_name[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> shop_id:</div><div class=\"line\">                    items[<span class=\"string\">'shop_id'</span>] = shop_id[<span class=\"number\">0</span>]</div><div class=\"line\">                    shop_url = <span class=\"string\">\"https://mall.jd.com/index-\"</span> + str(shop_id[<span class=\"number\">0</span>]) + <span class=\"string\">\".html\"</span></div><div class=\"line\">                    items[<span class=\"string\">'shop_url'</span>] = shop_url</div><div class=\"line\">                <span class=\"keyword\">if</span> cloths_url:</div><div class=\"line\">                    items[<span class=\"string\">'cloths_url'</span>] = cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"keyword\">if</span> person_number:</div><div class=\"line\">                    items[<span class=\"string\">'person_number'</span>] = person_number[<span class=\"number\">0</span>]</div><div class=\"line\">                <span class=\"comment\"># if product_id:</span></div><div class=\"line\">                <span class=\"comment\">#     print \"************************************csdjkvjfskvnk***********************\"</span></div><div class=\"line\">                <span class=\"comment\">#     print self.comments_url.format(str(product_id[0]),str(self.count))</span></div><div class=\"line\">                <span class=\"comment\">#     yield scrapy.Request(url=self.comments_url.format(str(product_id[0]),str(self.count)),callback=self.comments)</span></div><div class=\"line\">                <span class=\"comment\">#yield scrapy.Request写在这里就是每解析一个键裤子就会调用回调函数一次</span></div><div class=\"line\">                <span class=\"keyword\">yield</span> items</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"********************************************ERROR**********************************************************************\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url=self.search_url.format(str(response.meta[<span class=\"string\">'search_page'</span>]),<span class=\"string\">\",\"</span>.join(pids)),callback=self.next_half_parse)    <span class=\"comment\">#再次请求，这里是请求ajax加载的数据，必须放在这里，因为只有等到得到所有的pid才能构成这个请求，回调函数用于下面的解析</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>从上面代码的最后可以看出最后就是解析<code>ajax</code>加载的网页了，这里调用的<code>next_half_parse</code>函数，和解析前面一个网页一样，这里需要的注意的是，如果前面定义的数据没有搜索完毕是不能使用<code>yield items</code>的，必须将items通过meta传入下一个回调函数继续完善后才能<code>yield items</code>,这里就不需要了，代码如下：</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#分析异步加载的网页</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_half_parse</span><span class=\"params\">(self,response)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> response.status==<span class=\"number\">200</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> response.url</div><div class=\"line\">            items=JdSpiderItem()</div><div class=\"line\">            <span class=\"comment\">#scrapy.shell.inspect_response(response,self)    #y用来调试的</span></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                lis=response.xpath(<span class=\"string\">\"//li[@class='gl-item']\"</span>)</div><div class=\"line\">                <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> lis:</div><div class=\"line\">                    cloths_url=li.xpath(<span class=\"string\">\"div/div[1]/a/@href\"</span>).extract()</div><div class=\"line\">                    img_url_1=li.xpath(<span class=\"string\">\"div/div[1]/a/img/@src\"</span>).extract()</div><div class=\"line\">                    img_url_2=li.xpath(<span class=\"string\">\"div/div[1]/a/img/@data-lazy-img\"</span>).extract()</div><div class=\"line\">                    cloths_name=li.xpath(<span class=\"string\">\"div/div[4]/a/em/text()\"</span>).extract()</div><div class=\"line\">                    price=li.xpath(<span class=\"string\">\"div/div[3]/strong/i/text()\"</span>).extract()</div><div class=\"line\">                    shop_id=li.xpath(<span class=\"string\">\"div/div[7]/@data-shopid\"</span>).extract()</div><div class=\"line\">                    person_number=li.xpath(<span class=\"string\">\"div/div[5]/strong/a/text()\"</span>).extract()</div><div class=\"line\">                    <span class=\"keyword\">if</span> cloths_url:</div><div class=\"line\">                        <span class=\"keyword\">print</span> cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'cloths_url'</span>]=cloths_url[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> img_url_1:</div><div class=\"line\">                        <span class=\"keyword\">print</span> img_url_1[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'img_url'</span>]=img_url_1</div><div class=\"line\">                    <span class=\"keyword\">if</span> img_url_2:</div><div class=\"line\">                        <span class=\"keyword\">print</span> img_url_2[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'img_url'</span>]=img_url_2[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> cloths_name:</div><div class=\"line\">                        items[<span class=\"string\">'cloths_name'</span>]=cloths_name[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> price:</div><div class=\"line\">                        items[<span class=\"string\">'price'</span>]=price[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">if</span> shop_id:</div><div class=\"line\">                        items[<span class=\"string\">'shop_id'</span>]=shop_id[<span class=\"number\">0</span>]</div><div class=\"line\">                        items[<span class=\"string\">'shop_url'</span>]=<span class=\"string\">\"https://mall.jd.com/index-\"</span> + str(shop_id[<span class=\"number\">0</span>]) + <span class=\"string\">\".html\"</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> person_number:</div><div class=\"line\">                        items[<span class=\"string\">'person_number'</span>]=person_number[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">yield</span> items   <span class=\"comment\">#又一次的生成，这里是完整的数据，因此可以yield items</span></div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"**************************************************\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>当然这里还用到了设置请求池，<code>mysql</code>存储，没有使用到<code>ip</code>代理，这个在我前面的博客中又讲到，这里就不再赘述了，想看源代码的朋友请<a href=\"https://github.com/chenjiabing666/JD_Scrapy_Spider\">点击这里</a></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><blockquote>\n<ul>\n<li><p><strong>人们会抱怨为什么自己的爬虫在中途断开就要重头开始爬，为什么不能从断开那里开始爬呢，这里提供一个方法：在配置文件<code>settings.py</code>中加入<code>JOBDIR=file_name</code>,这里的<code>file_name</code>是一个文件的名字</strong></p>\n</li>\n<li><p><strong>设置下载延迟防止被<code>ban</code>:<code>DOWNLOAD_DELAY = 2</code>:设置每一次的间隔时间   <code>RANDOMIZE_DOWNLOAD_DELAY = True</code>:这个是随机设置延迟时间  在设置的时间的<code>0.5-1.5</code>倍之间，这样可以更有效的防止被ban,一般是配套使用的</strong></p>\n</li>\n<li><p><strong><code>ROBOTSTXT_OBEY = False</code> :这里是表示不遵循<code>robots.txt</code>文件，默认是<code>True</code>表示遵循，这里将之改成<code>False</code></strong></p>\n</li>\n<li><p><strong><code>CONCURRENT_REQUESTS</code> :设置最大请求数，这里默认的时<code>16</code>，我们可以根据自己电脑的配置改的大一点来加快请求的速度</strong></p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy架构初探","date":"2017-03-25T05:11:58.000Z","_content":"# scrapy架构初探\n## 引言\n>>Python即时网络爬虫启动的目标是一起把互联网变成大数据库。单纯的开放源代码并不是开源的全部，开源的核心是“开放的思想”，聚合最好的想法、技术、人员，所以将会参照众多领先产品，比如，Scrapy，ScrapingHub，[import io](http://Import.io)等。\n\n>>本文简单讲解一下Scrapy的架构。没错，通用提取器gsExtractor就是要集成到Scrapy架构中。\n\n>>请注意，本文不想复述原文内容，而是为了开源Python爬虫的发展方向找参照，而且以9年来开发网络爬虫经验作为对标，从而本文含有不少笔者主观评述，如果想读Scrapy官方原文，请点击[Scrapy官网的Architecture](https://doc.scrapy.org/en/latest/topics/architecture.html)。\n\n## scrapy数据流\n>>Scrapy中的数据流由执行引擎控制，下面的原文摘自Scrapy官网，我根据猜测做了点评，为进一步开发GooSeeker开源爬虫指示方向：\n>>>* The Engine gets the first URLs to crawl from the Spider and schedules them in the Scheduler, as Requests.\n\n>>URL谁来准备呢？看样子是Spider自己来准备，那么可以猜测Scrapy架构部分（不包括Spider）主要做事件调度，不管网址的存储。看起来类似GooSeeker会员中心的爬虫罗盘，为目标网站准备一批网址，放在罗盘中准备执行爬虫调度操作。所以，这个开源项目的下一个目标是把URL的管理放在一个集中的调度库里面。\n>>>* The Engine asks the Scheduler for the next URLs to crawl.\n\n>>看到这里其实挺难理解的，要看一些其他文档才能理解透。接第1点，引擎从Spider中把网址拿到以后，封装成一个Request，交给了事件循环，会被Scheduler收来做调度管理的，暂且理解成对Request做排队。引擎现在就找Scheduler要接下来要下载的网页地址。\n>>>* The Scheduler returns the next URLs to crawl to the Engine and the Engine sends them to the Downloader, passing through the Downloader Middleware (request direction).\n\n>>从调度器申请任务，把申请到的任务交给下载器，在下载器和引擎之间有个下载器中间件，这是作为一个开发框架的必备亮点，开发者可以在这里进行一些定制化扩展。\n>>>* Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middleware (response direction).\n\n\n>>下载完成了，产生一个Response，通过下载器中间件交给引擎。注意，Response和前面的Request的首字母都是大写，虽然我还没有看其它Scrapy文档，但是我猜测这是Scrapy框架内部的事件对象，也可以推测出是一个异步的事件驱动的引擎，就像DS打数机的三级事件循环一样，对于高性能、低开销引擎来说，这是必须的。\n>>>* The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (input direction).\n\n>>再次出现一个中间件，给开发者足够的发挥空间。\n>>> * The Spider processes the Response and returns scraped items and new Requests (to follow) to the Engine.\n\n>>每个Spider顺序抓取一个个网页，完成一个就构造另一个Request事件，开始另一个网页的抓取。\n>>> * The Engine passes scraped items and new Requests returned by a spider through Spider Middleware (output direction), and then sends processed items to Item Pipelines and processed Requests to the Scheduler.\n\n>>引擎作事件分发\n>>>* The process repeats (from step 1) until there are no more requests from the Scheduler.\n\n>>持续不断地运行。\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/scrapy架构初探.md","raw":"---\ntitle: scrapy架构初探\ndate: 2017-03-25 13:11:58\ncategories: Scrapy学习\ntags: scrapy\n---\n# scrapy架构初探\n## 引言\n>>Python即时网络爬虫启动的目标是一起把互联网变成大数据库。单纯的开放源代码并不是开源的全部，开源的核心是“开放的思想”，聚合最好的想法、技术、人员，所以将会参照众多领先产品，比如，Scrapy，ScrapingHub，[import io](http://Import.io)等。\n\n>>本文简单讲解一下Scrapy的架构。没错，通用提取器gsExtractor就是要集成到Scrapy架构中。\n\n>>请注意，本文不想复述原文内容，而是为了开源Python爬虫的发展方向找参照，而且以9年来开发网络爬虫经验作为对标，从而本文含有不少笔者主观评述，如果想读Scrapy官方原文，请点击[Scrapy官网的Architecture](https://doc.scrapy.org/en/latest/topics/architecture.html)。\n\n## scrapy数据流\n>>Scrapy中的数据流由执行引擎控制，下面的原文摘自Scrapy官网，我根据猜测做了点评，为进一步开发GooSeeker开源爬虫指示方向：\n>>>* The Engine gets the first URLs to crawl from the Spider and schedules them in the Scheduler, as Requests.\n\n>>URL谁来准备呢？看样子是Spider自己来准备，那么可以猜测Scrapy架构部分（不包括Spider）主要做事件调度，不管网址的存储。看起来类似GooSeeker会员中心的爬虫罗盘，为目标网站准备一批网址，放在罗盘中准备执行爬虫调度操作。所以，这个开源项目的下一个目标是把URL的管理放在一个集中的调度库里面。\n>>>* The Engine asks the Scheduler for the next URLs to crawl.\n\n>>看到这里其实挺难理解的，要看一些其他文档才能理解透。接第1点，引擎从Spider中把网址拿到以后，封装成一个Request，交给了事件循环，会被Scheduler收来做调度管理的，暂且理解成对Request做排队。引擎现在就找Scheduler要接下来要下载的网页地址。\n>>>* The Scheduler returns the next URLs to crawl to the Engine and the Engine sends them to the Downloader, passing through the Downloader Middleware (request direction).\n\n>>从调度器申请任务，把申请到的任务交给下载器，在下载器和引擎之间有个下载器中间件，这是作为一个开发框架的必备亮点，开发者可以在这里进行一些定制化扩展。\n>>>* Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middleware (response direction).\n\n\n>>下载完成了，产生一个Response，通过下载器中间件交给引擎。注意，Response和前面的Request的首字母都是大写，虽然我还没有看其它Scrapy文档，但是我猜测这是Scrapy框架内部的事件对象，也可以推测出是一个异步的事件驱动的引擎，就像DS打数机的三级事件循环一样，对于高性能、低开销引擎来说，这是必须的。\n>>>* The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (input direction).\n\n>>再次出现一个中间件，给开发者足够的发挥空间。\n>>> * The Spider processes the Response and returns scraped items and new Requests (to follow) to the Engine.\n\n>>每个Spider顺序抓取一个个网页，完成一个就构造另一个Request事件，开始另一个网页的抓取。\n>>> * The Engine passes scraped items and new Requests returned by a spider through Spider Middleware (output direction), and then sends processed items to Item Pipelines and processed Requests to the Scheduler.\n\n>>引擎作事件分发\n>>>* The process repeats (from step 1) until there are no more requests from the Scheduler.\n\n>>持续不断地运行。\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"scrapy架构初探","published":1,"updated":"2017-03-25T05:12:46.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaz0002dl0uzjd2kkaht","content":"<h1 id=\"scrapy架构初探\"><a href=\"#scrapy架构初探\" class=\"headerlink\" title=\"scrapy架构初探\"></a>scrapy架构初探</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<blockquote>\n<p>Python即时网络爬虫启动的目标是一起把互联网变成大数据库。单纯的开放源代码并不是开源的全部，开源的核心是“开放的思想”，聚合最好的想法、技术、人员，所以将会参照众多领先产品，比如，Scrapy，ScrapingHub，<a href=\"http://Import.io\" target=\"_blank\" rel=\"external\">import io</a>等。</p>\n<p>本文简单讲解一下Scrapy的架构。没错，通用提取器gsExtractor就是要集成到Scrapy架构中。</p>\n<p>请注意，本文不想复述原文内容，而是为了开源Python爬虫的发展方向找参照，而且以9年来开发网络爬虫经验作为对标，从而本文含有不少笔者主观评述，如果想读Scrapy官方原文，请点击<a href=\"https://doc.scrapy.org/en/latest/topics/architecture.html\" target=\"_blank\" rel=\"external\">Scrapy官网的Architecture</a>。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"scrapy数据流\"><a href=\"#scrapy数据流\" class=\"headerlink\" title=\"scrapy数据流\"></a>scrapy数据流</h2><blockquote>\n<blockquote>\n<p>Scrapy中的数据流由执行引擎控制，下面的原文摘自Scrapy官网，我根据猜测做了点评，为进一步开发GooSeeker开源爬虫指示方向：</p>\n<blockquote>\n<ul>\n<li>The Engine gets the first URLs to crawl from the Spider and schedules them in the Scheduler, as Requests.</li>\n</ul>\n</blockquote>\n<p>URL谁来准备呢？看样子是Spider自己来准备，那么可以猜测Scrapy架构部分（不包括Spider）主要做事件调度，不管网址的存储。看起来类似GooSeeker会员中心的爬虫罗盘，为目标网站准备一批网址，放在罗盘中准备执行爬虫调度操作。所以，这个开源项目的下一个目标是把URL的管理放在一个集中的调度库里面。</p>\n<blockquote>\n<ul>\n<li>The Engine asks the Scheduler for the next URLs to crawl.</li>\n</ul>\n</blockquote>\n<p>看到这里其实挺难理解的，要看一些其他文档才能理解透。接第1点，引擎从Spider中把网址拿到以后，封装成一个Request，交给了事件循环，会被Scheduler收来做调度管理的，暂且理解成对Request做排队。引擎现在就找Scheduler要接下来要下载的网页地址。</p>\n<blockquote>\n<ul>\n<li>The Scheduler returns the next URLs to crawl to the Engine and the Engine sends them to the Downloader, passing through the Downloader Middleware (request direction).</li>\n</ul>\n</blockquote>\n<p>从调度器申请任务，把申请到的任务交给下载器，在下载器和引擎之间有个下载器中间件，这是作为一个开发框架的必备亮点，开发者可以在这里进行一些定制化扩展。</p>\n<blockquote>\n<ul>\n<li>Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middleware (response direction).</li>\n</ul>\n</blockquote>\n<p>下载完成了，产生一个Response，通过下载器中间件交给引擎。注意，Response和前面的Request的首字母都是大写，虽然我还没有看其它Scrapy文档，但是我猜测这是Scrapy框架内部的事件对象，也可以推测出是一个异步的事件驱动的引擎，就像DS打数机的三级事件循环一样，对于高性能、低开销引擎来说，这是必须的。</p>\n<blockquote>\n<ul>\n<li>The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (input direction).</li>\n</ul>\n</blockquote>\n<p>再次出现一个中间件，给开发者足够的发挥空间。</p>\n<blockquote>\n<ul>\n<li>The Spider processes the Response and returns scraped items and new Requests (to follow) to the Engine.</li>\n</ul>\n</blockquote>\n<p>每个Spider顺序抓取一个个网页，完成一个就构造另一个Request事件，开始另一个网页的抓取。</p>\n<blockquote>\n<ul>\n<li>The Engine passes scraped items and new Requests returned by a spider through Spider Middleware (output direction), and then sends processed items to Item Pipelines and processed Requests to the Scheduler.</li>\n</ul>\n</blockquote>\n<p>引擎作事件分发</p>\n<blockquote>\n<ul>\n<li>The process repeats (from step 1) until there are no more requests from the Scheduler.</li>\n</ul>\n</blockquote>\n<p>持续不断地运行。</p>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"scrapy架构初探\"><a href=\"#scrapy架构初探\" class=\"headerlink\" title=\"scrapy架构初探\"></a>scrapy架构初探</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<blockquote>\n<p>Python即时网络爬虫启动的目标是一起把互联网变成大数据库。单纯的开放源代码并不是开源的全部，开源的核心是“开放的思想”，聚合最好的想法、技术、人员，所以将会参照众多领先产品，比如，Scrapy，ScrapingHub，<a href=\"http://Import.io\">import io</a>等。</p>\n<p>本文简单讲解一下Scrapy的架构。没错，通用提取器gsExtractor就是要集成到Scrapy架构中。</p>\n<p>请注意，本文不想复述原文内容，而是为了开源Python爬虫的发展方向找参照，而且以9年来开发网络爬虫经验作为对标，从而本文含有不少笔者主观评述，如果想读Scrapy官方原文，请点击<a href=\"https://doc.scrapy.org/en/latest/topics/architecture.html\">Scrapy官网的Architecture</a>。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"scrapy数据流\"><a href=\"#scrapy数据流\" class=\"headerlink\" title=\"scrapy数据流\"></a>scrapy数据流</h2><blockquote>\n<blockquote>\n<p>Scrapy中的数据流由执行引擎控制，下面的原文摘自Scrapy官网，我根据猜测做了点评，为进一步开发GooSeeker开源爬虫指示方向：</p>\n<blockquote>\n<ul>\n<li>The Engine gets the first URLs to crawl from the Spider and schedules them in the Scheduler, as Requests.</li>\n</ul>\n</blockquote>\n<p>URL谁来准备呢？看样子是Spider自己来准备，那么可以猜测Scrapy架构部分（不包括Spider）主要做事件调度，不管网址的存储。看起来类似GooSeeker会员中心的爬虫罗盘，为目标网站准备一批网址，放在罗盘中准备执行爬虫调度操作。所以，这个开源项目的下一个目标是把URL的管理放在一个集中的调度库里面。</p>\n<blockquote>\n<ul>\n<li>The Engine asks the Scheduler for the next URLs to crawl.</li>\n</ul>\n</blockquote>\n<p>看到这里其实挺难理解的，要看一些其他文档才能理解透。接第1点，引擎从Spider中把网址拿到以后，封装成一个Request，交给了事件循环，会被Scheduler收来做调度管理的，暂且理解成对Request做排队。引擎现在就找Scheduler要接下来要下载的网页地址。</p>\n<blockquote>\n<ul>\n<li>The Scheduler returns the next URLs to crawl to the Engine and the Engine sends them to the Downloader, passing through the Downloader Middleware (request direction).</li>\n</ul>\n</blockquote>\n<p>从调度器申请任务，把申请到的任务交给下载器，在下载器和引擎之间有个下载器中间件，这是作为一个开发框架的必备亮点，开发者可以在这里进行一些定制化扩展。</p>\n<blockquote>\n<ul>\n<li>Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middleware (response direction).</li>\n</ul>\n</blockquote>\n<p>下载完成了，产生一个Response，通过下载器中间件交给引擎。注意，Response和前面的Request的首字母都是大写，虽然我还没有看其它Scrapy文档，但是我猜测这是Scrapy框架内部的事件对象，也可以推测出是一个异步的事件驱动的引擎，就像DS打数机的三级事件循环一样，对于高性能、低开销引擎来说，这是必须的。</p>\n<blockquote>\n<ul>\n<li>The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (input direction).</li>\n</ul>\n</blockquote>\n<p>再次出现一个中间件，给开发者足够的发挥空间。</p>\n<blockquote>\n<ul>\n<li>The Spider processes the Response and returns scraped items and new Requests (to follow) to the Engine.</li>\n</ul>\n</blockquote>\n<p>每个Spider顺序抓取一个个网页，完成一个就构造另一个Request事件，开始另一个网页的抓取。</p>\n<blockquote>\n<ul>\n<li>The Engine passes scraped items and new Requests returned by a spider through Spider Middleware (output direction), and then sends processed items to Item Pipelines and processed Requests to the Scheduler.</li>\n</ul>\n</blockquote>\n<p>引擎作事件分发</p>\n<blockquote>\n<ul>\n<li>The process repeats (from step 1) until there are no more requests from the Scheduler.</li>\n</ul>\n</blockquote>\n<p>持续不断地运行。</p>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy爬取豆瓣全站","date":"2017-04-08T06:24:26.000Z","_content":"# Scrapy爬取豆瓣读书全站\n## 分析网页\n>首先打开[豆瓣读书中的分类浏览](https://book.douban.com/tag/?icn=index-nav)，可以看到其中有很多的分类\n\n>![分类](http://ono60m7tl.bkt.clouddn.com/2.bmp)\n\n>豆瓣应该是一个比较好爬的网站，所有的数据都不是`ajax`加载的，我们打开谷歌的`F12`或者是火狐的`FireBug`可以很轻松的找到每一个分类的链接\n\n>![url所在地](http://ono60m7tl.bkt.clouddn.com/NonName.bmp)\n\n>这里我们使用scrapy中的一个[linkextractors库](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html),这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需`Rule(LinkExtractor(allow='/tag/',restrict_xpaths=\"//div[@class='article']\"),follow=True),`这里的allow是一个`正则表达式`，用来筛选分类url,`restrict_xpaths`是限制在哪个结构中筛选url,这里限制的是在`<div class='article'>`这个盒模型中，`follow`表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在`回调函数`中测试下，输入所得的url,可以使用`respose.url`\n\n>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!\n\n\n>![作品网页](http://ono60m7tl.bkt.clouddn.com/3.bmp)\n>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示\n\n>![翻页url](http://ono60m7tl.bkt.clouddn.com/6.bmp)\n>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码\n\n```python\nRule(LinkExtractor(allow=\"\\?start=\\d+\\&type=\",restrict_xpaths=\"//div[@class='pa>ginator']\"),follow=True),\n```\n\n\n>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在`li`标签中，如下图\n\n\n>>![url](http://ono60m7tl.bkt.clouddn.com/4.bmp)\n\n>我们打开`li`标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下\n\n```python\nRule(LinkExtractor(allow='/tag/',restrict_xpaths=\"/ /div[@class='article']\"),follow=True),#第一步\nRule(LinkExtractor(allow=\"\\?start=\\d+\\&type=\",restrict_xpaths=\"//div[@class='pa>ginator']\"),follow=True),  #第二步翻翻页\nRule(LinkExtractor(allow=\"/subject/\\d+/$\",restrict_>xpaths=\"//ul[@class='subject-list']\"),callback='parse_item')#得到所需网页的url\n```\n\n>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页\n\n>![图片](http://ono60m7tl.bkt.clouddn.com/5.bmp)\n>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看[源码](https://github.com/chenjiabing666/douban_book_spider),值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。\n\n## 参考文档：\n> **[scrapy中文文档](http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#)**\n\n>**最后附上本人的[github地址](https://github.com/chenjiabing666),不要忘了给个star哦**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/scrapy爬取豆瓣全站.md","raw":"---\ntitle: scrapy爬取豆瓣全站\ndate: 2017-04-08 14:24:26\ncategories: Scrapy学习\ntags: scrapy\n---\n# Scrapy爬取豆瓣读书全站\n## 分析网页\n>首先打开[豆瓣读书中的分类浏览](https://book.douban.com/tag/?icn=index-nav)，可以看到其中有很多的分类\n\n>![分类](http://ono60m7tl.bkt.clouddn.com/2.bmp)\n\n>豆瓣应该是一个比较好爬的网站，所有的数据都不是`ajax`加载的，我们打开谷歌的`F12`或者是火狐的`FireBug`可以很轻松的找到每一个分类的链接\n\n>![url所在地](http://ono60m7tl.bkt.clouddn.com/NonName.bmp)\n\n>这里我们使用scrapy中的一个[linkextractors库](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html),这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需`Rule(LinkExtractor(allow='/tag/',restrict_xpaths=\"//div[@class='article']\"),follow=True),`这里的allow是一个`正则表达式`，用来筛选分类url,`restrict_xpaths`是限制在哪个结构中筛选url,这里限制的是在`<div class='article'>`这个盒模型中，`follow`表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在`回调函数`中测试下，输入所得的url,可以使用`respose.url`\n\n>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!\n\n\n>![作品网页](http://ono60m7tl.bkt.clouddn.com/3.bmp)\n>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示\n\n>![翻页url](http://ono60m7tl.bkt.clouddn.com/6.bmp)\n>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码\n\n```python\nRule(LinkExtractor(allow=\"\\?start=\\d+\\&type=\",restrict_xpaths=\"//div[@class='pa>ginator']\"),follow=True),\n```\n\n\n>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在`li`标签中，如下图\n\n\n>>![url](http://ono60m7tl.bkt.clouddn.com/4.bmp)\n\n>我们打开`li`标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下\n\n```python\nRule(LinkExtractor(allow='/tag/',restrict_xpaths=\"/ /div[@class='article']\"),follow=True),#第一步\nRule(LinkExtractor(allow=\"\\?start=\\d+\\&type=\",restrict_xpaths=\"//div[@class='pa>ginator']\"),follow=True),  #第二步翻翻页\nRule(LinkExtractor(allow=\"/subject/\\d+/$\",restrict_>xpaths=\"//ul[@class='subject-list']\"),callback='parse_item')#得到所需网页的url\n```\n\n>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页\n\n>![图片](http://ono60m7tl.bkt.clouddn.com/5.bmp)\n>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看[源码](https://github.com/chenjiabing666/douban_book_spider),值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。\n\n## 参考文档：\n> **[scrapy中文文档](http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#)**\n\n>**最后附上本人的[github地址](https://github.com/chenjiabing666),不要忘了给个star哦**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"scrapy爬取豆瓣全站","published":1,"updated":"2017-04-08T06:36:20.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaz2002gl0uz4qgsvo1g","content":"<h1 id=\"Scrapy爬取豆瓣读书全站\"><a href=\"#Scrapy爬取豆瓣读书全站\" class=\"headerlink\" title=\"Scrapy爬取豆瓣读书全站\"></a>Scrapy爬取豆瓣读书全站</h1><h2 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h2><blockquote>\n<p>首先打开<a href=\"https://book.douban.com/tag/?icn=index-nav\" target=\"_blank\" rel=\"external\">豆瓣读书中的分类浏览</a>，可以看到其中有很多的分类</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/2.bmp\" alt=\"分类\"></p>\n<p>豆瓣应该是一个比较好爬的网站，所有的数据都不是<code>ajax</code>加载的，我们打开谷歌的<code>F12</code>或者是火狐的<code>FireBug</code>可以很轻松的找到每一个分类的链接</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/NonName.bmp\" alt=\"url所在地\"></p>\n<p>这里我们使用scrapy中的一个<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html\" target=\"_blank\" rel=\"external\">linkextractors库</a>,这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需<code>Rule(LinkExtractor(allow=&#39;/tag/&#39;,restrict_xpaths=&quot;//div[@class=&#39;article&#39;]&quot;),follow=True),</code>这里的allow是一个<code>正则表达式</code>，用来筛选分类url,<code>restrict_xpaths</code>是限制在哪个结构中筛选url,这里限制的是在<code>&lt;div class=&#39;article&#39;&gt;</code>这个盒模型中，<code>follow</code>表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在<code>回调函数</code>中测试下，输入所得的url,可以使用<code>respose.url</code></p>\n<p>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/3.bmp\" alt=\"作品网页\"><br>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/6.bmp\" alt=\"翻页url\"><br>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"\\?start=\\d+\\&amp;type=\"</span>,restrict_xpaths=<span class=\"string\">\"//div[@class='pa&gt;ginator']\"</span>),follow=<span class=\"keyword\">True</span>),</div></pre></td></tr></table></figure>\n<blockquote>\n<p>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在<code>li</code>标签中，如下图</p>\n<blockquote>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/4.bmp\" alt=\"url\"></p>\n</blockquote>\n<p>我们打开<code>li</code>标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">'/tag/'</span>,restrict_xpaths=<span class=\"string\">\"/ /div[@class='article']\"</span>),follow=<span class=\"keyword\">True</span>),<span class=\"comment\">#第一步</span></div><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"\\?start=\\d+\\&amp;type=\"</span>,restrict_xpaths=<span class=\"string\">\"//div[@class='pa&gt;ginator']\"</span>),follow=<span class=\"keyword\">True</span>),  <span class=\"comment\">#第二步翻翻页</span></div><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"/subject/\\d+/$\"</span>,restrict_&gt;xpaths=<span class=\"string\">\"//ul[@class='subject-list']\"</span>),callback=<span class=\"string\">'parse_item'</span>)<span class=\"comment\">#得到所需网页的url</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/5.bmp\" alt=\"图片\"><br>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看<a href=\"https://github.com/chenjiabing666/douban_book_spider\" target=\"_blank\" rel=\"external\">源码</a>,值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。</p>\n</blockquote>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><blockquote>\n<p><strong><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#\" target=\"_blank\" rel=\"external\">scrapy中文文档</a></strong></p>\n<p><strong>最后附上本人的<a href=\"https://github.com/chenjiabing666\" target=\"_blank\" rel=\"external\">github地址</a>,不要忘了给个star哦</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"Scrapy爬取豆瓣读书全站\"><a href=\"#Scrapy爬取豆瓣读书全站\" class=\"headerlink\" title=\"Scrapy爬取豆瓣读书全站\"></a>Scrapy爬取豆瓣读书全站</h1><h2 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h2><blockquote>\n<p>首先打开<a href=\"https://book.douban.com/tag/?icn=index-nav\">豆瓣读书中的分类浏览</a>，可以看到其中有很多的分类</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/2.bmp\" alt=\"分类\"></p>\n<p>豆瓣应该是一个比较好爬的网站，所有的数据都不是<code>ajax</code>加载的，我们打开谷歌的<code>F12</code>或者是火狐的<code>FireBug</code>可以很轻松的找到每一个分类的链接</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/NonName.bmp\" alt=\"url所在地\"></p>\n<p>这里我们使用scrapy中的一个<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html\">linkextractors库</a>,这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需<code>Rule(LinkExtractor(allow=&#39;/tag/&#39;,restrict_xpaths=&quot;//div[@class=&#39;article&#39;]&quot;),follow=True),</code>这里的allow是一个<code>正则表达式</code>，用来筛选分类url,<code>restrict_xpaths</code>是限制在哪个结构中筛选url,这里限制的是在<code>&lt;div class=&#39;article&#39;&gt;</code>这个盒模型中，<code>follow</code>表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在<code>回调函数</code>中测试下，输入所得的url,可以使用<code>respose.url</code></p>\n<p>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/3.bmp\" alt=\"作品网页\"><br>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/6.bmp\" alt=\"翻页url\"><br>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"\\?start=\\d+\\&amp;type=\"</span>,restrict_xpaths=<span class=\"string\">\"//div[@class='pa&gt;ginator']\"</span>),follow=<span class=\"keyword\">True</span>),</div></pre></td></tr></table></figure>\n<blockquote>\n<p>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在<code>li</code>标签中，如下图</p>\n<blockquote>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/4.bmp\" alt=\"url\"></p>\n</blockquote>\n<p>我们打开<code>li</code>标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">'/tag/'</span>,restrict_xpaths=<span class=\"string\">\"/ /div[@class='article']\"</span>),follow=<span class=\"keyword\">True</span>),<span class=\"comment\">#第一步</span></div><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"\\?start=\\d+\\&amp;type=\"</span>,restrict_xpaths=<span class=\"string\">\"//div[@class='pa&gt;ginator']\"</span>),follow=<span class=\"keyword\">True</span>),  <span class=\"comment\">#第二步翻翻页</span></div><div class=\"line\">Rule(LinkExtractor(allow=<span class=\"string\">\"/subject/\\d+/$\"</span>,restrict_&gt;xpaths=<span class=\"string\">\"//ul[@class='subject-list']\"</span>),callback=<span class=\"string\">'parse_item'</span>)<span class=\"comment\">#得到所需网页的url</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页</p>\n<p><img src=\"http://ono60m7tl.bkt.clouddn.com/5.bmp\" alt=\"图片\"><br>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看<a href=\"https://github.com/chenjiabing666/douban_book_spider\">源码</a>,值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。</p>\n</blockquote>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><blockquote>\n<p><strong><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#\">scrapy中文文档</a></strong></p>\n<p><strong>最后附上本人的<a href=\"https://github.com/chenjiabing666\">github地址</a>,不要忘了给个star哦</strong></p>\n<blockquote>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy的下载器中间件","date":"2017-03-25T07:04:08.000Z","_content":"\n# scrapy中的下载器中间件\n## 下载中间件\n>下载器中间件是介于Scrapy的request/response处理的钩子框架。 是用于全局修改Scrapy request和response的一个轻量、底层的系统。\n>>## 编写下载器中间件\n>>>### 1. `process_request(request, spider)`\n\n>>>当每个`request`通过下载中间件时，该方法被调用。\n>>>`process_request()` 必须返回其中之一: 返回 `None` 、返回一个 `Response` 对象、返回一个 `Request `对象或`raise IgnoreRequest` 。\n\n>>>如果其返回 `None` ，Scrapy将继续处理该`request`，执行其他的中间件的相应方法，直到合适的下载器处理函数(`download handler`)被调用， 该`request`被执行(其`response`被下载)。\n\n>>>如果其返回 `Response` 对象，Scrapy将不会调用 任何 其他的 `process_request()` 或 `process_exception()` 方法，或相应地下载函数； 其将返回该`response`。 已安装的中间件的 `process_response()` 方法则会在每个`response`返回时被调用。\n\n>>>如果其返回 `Request` 对象，Scrapy则停止调用 `process_request`方法并重新调度返回的`request`。当新返回的`request`被执行后， 相应地中间件链将会根据下载的`response`被调用。\n\n>>>如果其`raise`一个 `IgnoreRequest` 异常，则安装的下载中间件的 `process_exception()` 方法会被调用。如果没有任何一个方法处理该异常， 则`request`的`errback(Request.errback)`方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。\n\n>>>参数:\t\n>>>>* `request` (`Request` 对象) – 处理的`request`\n>>>>* `spider` (`Spider` 对象) – 该`request`对应的`spider`\n\n>>>### 2. `process_response(request, response, spider)`\n>>>>`process_response()` 必须返回以下之一: 返回一个 `Response `对象、 返回一个` Request` 对象或`raise`一个 `IgnoreRequest` 异常。\n\n>>>>如果其返回一个 `Response` (可以与传入的`response`相同，也可以是全新的对象)， 该`response`会被在链中的其他中间件的 `process_response()` 方法处理。\n\n>>>>如果其返回一个 `Request` 对象，则中间件链停止， 返回的`request`会被重新调度下载。处理类似于 `process_request()` 返回`request`所做的那样。\n\n>>>>如果其抛出一个 `IgnoreRequest` 异常，则调用`request的errback(Request.errback)。` 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。\n\n>>>>参数:\t\n>>>>>>* `request` (`Request `对象) – `response`所对应的request\n>>>>>>* `response` (`Response` 对象) – 被处理的response\n>>>>>>* `spider` (`Spider` 对象) – `response`所对应的`spider`\n\n>>>### 3.`process_exception(request, exception, spider)`\n>>>>当下载处理器(`download handler`)或 `process_request()` (下载中间件)抛出异常(包括 `IgnoreRequest` 异常)时， Scrapy调用 `process_exception()` 。\n\n>>>>`process_exception()` 应该返回以下之一: 返回 `None` 、 一个 `Response` 对象、或者一个 `Request` 对象。\n\n>>>>如果其返回 `None` ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 `process_exception()` 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。\n\n>>>>如果其返回一个 `Response` 对象，则已安装的中间件链的 `process_response()` 方法被调用。Scrapy将不会调用任何其他中间件的 `process_exception()` 方法。\n\n>>>>如果其返回一个 `Request` 对象， 则返回的`request`将会被重新调用下载。这将停止中间件的 `process_exception()` 方法执行，就如返回一个`response`的那样。\n\n>>>>参数:\t\n>>>>>* `request` (是 `Request` 对象) – 产生异常的`request`\n>>>>>* `exception` (`Exception` 对象) – 抛出的异常\n>>>>>* `spider` (`Spider` 对象) – `request`对应的`spider`\n\n>> ## 总结：\n>>>总的来说下载器中间件就是起到处理request请求并且返回response的作用，一切从网页爬取的url发起的请求会组成一个请求队列，然后一个一个排队经过下载器中间件，之后下载器中间件会对request做出相应的处理，比如添加请求头，添加代理等等，然后通过process_response返回一个response，之后就是用得到的response做出相应的分析，当然这里的内容页可以不实现，但是如果要爬取大型的网站，会遇到被ban的可能就要在下载器中间件这里着手，设置一些相应的请求头，ip代理等等内容。\n>>>**以上纯属个人逐渐摸索总结出来的内容，如果有什么错误欢迎指正**\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/scrapy的下载器中间件.md","raw":"---\ntitle: scrapy的下载器中间件\ndate: 2017-03-25 15:04:08\ncategories: Scrapy学习\ntags: scrapy\n---\n\n# scrapy中的下载器中间件\n## 下载中间件\n>下载器中间件是介于Scrapy的request/response处理的钩子框架。 是用于全局修改Scrapy request和response的一个轻量、底层的系统。\n>>## 编写下载器中间件\n>>>### 1. `process_request(request, spider)`\n\n>>>当每个`request`通过下载中间件时，该方法被调用。\n>>>`process_request()` 必须返回其中之一: 返回 `None` 、返回一个 `Response` 对象、返回一个 `Request `对象或`raise IgnoreRequest` 。\n\n>>>如果其返回 `None` ，Scrapy将继续处理该`request`，执行其他的中间件的相应方法，直到合适的下载器处理函数(`download handler`)被调用， 该`request`被执行(其`response`被下载)。\n\n>>>如果其返回 `Response` 对象，Scrapy将不会调用 任何 其他的 `process_request()` 或 `process_exception()` 方法，或相应地下载函数； 其将返回该`response`。 已安装的中间件的 `process_response()` 方法则会在每个`response`返回时被调用。\n\n>>>如果其返回 `Request` 对象，Scrapy则停止调用 `process_request`方法并重新调度返回的`request`。当新返回的`request`被执行后， 相应地中间件链将会根据下载的`response`被调用。\n\n>>>如果其`raise`一个 `IgnoreRequest` 异常，则安装的下载中间件的 `process_exception()` 方法会被调用。如果没有任何一个方法处理该异常， 则`request`的`errback(Request.errback)`方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。\n\n>>>参数:\t\n>>>>* `request` (`Request` 对象) – 处理的`request`\n>>>>* `spider` (`Spider` 对象) – 该`request`对应的`spider`\n\n>>>### 2. `process_response(request, response, spider)`\n>>>>`process_response()` 必须返回以下之一: 返回一个 `Response `对象、 返回一个` Request` 对象或`raise`一个 `IgnoreRequest` 异常。\n\n>>>>如果其返回一个 `Response` (可以与传入的`response`相同，也可以是全新的对象)， 该`response`会被在链中的其他中间件的 `process_response()` 方法处理。\n\n>>>>如果其返回一个 `Request` 对象，则中间件链停止， 返回的`request`会被重新调度下载。处理类似于 `process_request()` 返回`request`所做的那样。\n\n>>>>如果其抛出一个 `IgnoreRequest` 异常，则调用`request的errback(Request.errback)。` 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。\n\n>>>>参数:\t\n>>>>>>* `request` (`Request `对象) – `response`所对应的request\n>>>>>>* `response` (`Response` 对象) – 被处理的response\n>>>>>>* `spider` (`Spider` 对象) – `response`所对应的`spider`\n\n>>>### 3.`process_exception(request, exception, spider)`\n>>>>当下载处理器(`download handler`)或 `process_request()` (下载中间件)抛出异常(包括 `IgnoreRequest` 异常)时， Scrapy调用 `process_exception()` 。\n\n>>>>`process_exception()` 应该返回以下之一: 返回 `None` 、 一个 `Response` 对象、或者一个 `Request` 对象。\n\n>>>>如果其返回 `None` ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 `process_exception()` 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。\n\n>>>>如果其返回一个 `Response` 对象，则已安装的中间件链的 `process_response()` 方法被调用。Scrapy将不会调用任何其他中间件的 `process_exception()` 方法。\n\n>>>>如果其返回一个 `Request` 对象， 则返回的`request`将会被重新调用下载。这将停止中间件的 `process_exception()` 方法执行，就如返回一个`response`的那样。\n\n>>>>参数:\t\n>>>>>* `request` (是 `Request` 对象) – 产生异常的`request`\n>>>>>* `exception` (`Exception` 对象) – 抛出的异常\n>>>>>* `spider` (`Spider` 对象) – `request`对应的`spider`\n\n>> ## 总结：\n>>>总的来说下载器中间件就是起到处理request请求并且返回response的作用，一切从网页爬取的url发起的请求会组成一个请求队列，然后一个一个排队经过下载器中间件，之后下载器中间件会对request做出相应的处理，比如添加请求头，添加代理等等，然后通过process_response返回一个response，之后就是用得到的response做出相应的分析，当然这里的内容页可以不实现，但是如果要爬取大型的网站，会遇到被ban的可能就要在下载器中间件这里着手，设置一些相应的请求头，ip代理等等内容。\n>>>**以上纯属个人逐渐摸索总结出来的内容，如果有什么错误欢迎指正**\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"scrapy的下载器中间件","published":1,"updated":"2017-03-25T07:08:40.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaz8002ll0uzhgnim7nc","content":"<h1 id=\"scrapy中的下载器中间件\"><a href=\"#scrapy中的下载器中间件\" class=\"headerlink\" title=\"scrapy中的下载器中间件\"></a>scrapy中的下载器中间件</h1><h2 id=\"下载中间件\"><a href=\"#下载中间件\" class=\"headerlink\" title=\"下载中间件\"></a>下载中间件</h2><blockquote>\n<p>下载器中间件是介于Scrapy的request/response处理的钩子框架。 是用于全局修改Scrapy request和response的一个轻量、底层的系统。</p>\n<blockquote>\n<h2 id=\"编写下载器中间件\"><a href=\"#编写下载器中间件\" class=\"headerlink\" title=\"编写下载器中间件\"></a>编写下载器中间件</h2><blockquote>\n<h3 id=\"1-process-request-request-spider\"><a href=\"#1-process-request-request-spider\" class=\"headerlink\" title=\"1. process_request(request, spider)\"></a>1. <code>process_request(request, spider)</code></h3><p>当每个<code>request</code>通过下载中间件时，该方法被调用。<br><code>process_request()</code> 必须返回其中之一: 返回 <code>None</code> 、返回一个 <code>Response</code> 对象、返回一个 <code>Request</code>对象或<code>raise IgnoreRequest</code> 。</p>\n<p>如果其返回 <code>None</code> ，Scrapy将继续处理该<code>request</code>，执行其他的中间件的相应方法，直到合适的下载器处理函数(<code>download handler</code>)被调用， 该<code>request</code>被执行(其<code>response</code>被下载)。</p>\n<p>如果其返回 <code>Response</code> 对象，Scrapy将不会调用 任何 其他的 <code>process_request()</code> 或 <code>process_exception()</code> 方法，或相应地下载函数； 其将返回该<code>response</code>。 已安装的中间件的 <code>process_response()</code> 方法则会在每个<code>response</code>返回时被调用。</p>\n<p>如果其返回 <code>Request</code> 对象，Scrapy则停止调用 <code>process_request</code>方法并重新调度返回的<code>request</code>。当新返回的<code>request</code>被执行后， 相应地中间件链将会根据下载的<code>response</code>被调用。</p>\n<p>如果其<code>raise</code>一个 <code>IgnoreRequest</code> 异常，则安装的下载中间件的 <code>process_exception()</code> 方法会被调用。如果没有任何一个方法处理该异常， 则<code>request</code>的<code>errback(Request.errback)</code>方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p>\n<p>参数:    </p>\n<blockquote>\n<ul>\n<li><code>request</code> (<code>Request</code> 对象) – 处理的<code>request</code></li>\n<li><code>spider</code> (<code>Spider</code> 对象) – 该<code>request</code>对应的<code>spider</code></li>\n</ul>\n</blockquote>\n<h3 id=\"2-process-response-request-response-spider\"><a href=\"#2-process-response-request-response-spider\" class=\"headerlink\" title=\"2. process_response(request, response, spider)\"></a>2. <code>process_response(request, response, spider)</code></h3><blockquote>\n<p><code>process_response()</code> 必须返回以下之一: 返回一个 <code>Response</code>对象、 返回一个<code>Request</code> 对象或<code>raise</code>一个 <code>IgnoreRequest</code> 异常。</p>\n<p>如果其返回一个 <code>Response</code> (可以与传入的<code>response</code>相同，也可以是全新的对象)， 该<code>response</code>会被在链中的其他中间件的 <code>process_response()</code> 方法处理。</p>\n<p>如果其返回一个 <code>Request</code> 对象，则中间件链停止， 返回的<code>request</code>会被重新调度下载。处理类似于 <code>process_request()</code> 返回<code>request</code>所做的那样。</p>\n<p>如果其抛出一个 <code>IgnoreRequest</code> 异常，则调用<code>request的errback(Request.errback)。</code> 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p>\n<p>参数:    </p>\n<blockquote>\n<blockquote>\n<ul>\n<li><code>request</code> (<code>Request</code>对象) – <code>response</code>所对应的request</li>\n<li><code>response</code> (<code>Response</code> 对象) – 被处理的response</li>\n<li><code>spider</code> (<code>Spider</code> 对象) – <code>response</code>所对应的<code>spider</code></li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"3-process-exception-request-exception-spider\"><a href=\"#3-process-exception-request-exception-spider\" class=\"headerlink\" title=\"3.process_exception(request, exception, spider)\"></a>3.<code>process_exception(request, exception, spider)</code></h3><blockquote>\n<p>当下载处理器(<code>download handler</code>)或 <code>process_request()</code> (下载中间件)抛出异常(包括 <code>IgnoreRequest</code> 异常)时， Scrapy调用 <code>process_exception()</code> 。</p>\n<p><code>process_exception()</code> 应该返回以下之一: 返回 <code>None</code> 、 一个 <code>Response</code> 对象、或者一个 <code>Request</code> 对象。</p>\n<p>如果其返回 <code>None</code> ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 <code>process_exception()</code> 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。</p>\n<p>如果其返回一个 <code>Response</code> 对象，则已安装的中间件链的 <code>process_response()</code> 方法被调用。Scrapy将不会调用任何其他中间件的 <code>process_exception()</code> 方法。</p>\n<p>如果其返回一个 <code>Request</code> 对象， 则返回的<code>request</code>将会被重新调用下载。这将停止中间件的 <code>process_exception()</code> 方法执行，就如返回一个<code>response</code>的那样。</p>\n<p>参数:    </p>\n<blockquote>\n<ul>\n<li><code>request</code> (是 <code>Request</code> 对象) – 产生异常的<code>request</code></li>\n<li><code>exception</code> (<code>Exception</code> 对象) – 抛出的异常</li>\n<li><code>spider</code> (<code>Spider</code> 对象) – <code>request</code>对应的<code>spider</code></li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><blockquote>\n<p>总的来说下载器中间件就是起到处理request请求并且返回response的作用，一切从网页爬取的url发起的请求会组成一个请求队列，然后一个一个排队经过下载器中间件，之后下载器中间件会对request做出相应的处理，比如添加请求头，添加代理等等，然后通过process_response返回一个response，之后就是用得到的response做出相应的分析，当然这里的内容页可以不实现，但是如果要爬取大型的网站，会遇到被ban的可能就要在下载器中间件这里着手，设置一些相应的请求头，ip代理等等内容。<br><strong>以上纯属个人逐渐摸索总结出来的内容，如果有什么错误欢迎指正</strong></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"scrapy中的下载器中间件\"><a href=\"#scrapy中的下载器中间件\" class=\"headerlink\" title=\"scrapy中的下载器中间件\"></a>scrapy中的下载器中间件</h1><h2 id=\"下载中间件\"><a href=\"#下载中间件\" class=\"headerlink\" title=\"下载中间件\"></a>下载中间件</h2><blockquote>\n<p>下载器中间件是介于Scrapy的request/response处理的钩子框架。 是用于全局修改Scrapy request和response的一个轻量、底层的系统。</p>\n<blockquote>\n<h2 id=\"编写下载器中间件\"><a href=\"#编写下载器中间件\" class=\"headerlink\" title=\"编写下载器中间件\"></a>编写下载器中间件</h2><blockquote>\n<h3 id=\"1-process-request-request-spider\"><a href=\"#1-process-request-request-spider\" class=\"headerlink\" title=\"1. process_request(request, spider)\"></a>1. <code>process_request(request, spider)</code></h3><p>当每个<code>request</code>通过下载中间件时，该方法被调用。<br><code>process_request()</code> 必须返回其中之一: 返回 <code>None</code> 、返回一个 <code>Response</code> 对象、返回一个 <code>Request</code>对象或<code>raise IgnoreRequest</code> 。</p>\n<p>如果其返回 <code>None</code> ，Scrapy将继续处理该<code>request</code>，执行其他的中间件的相应方法，直到合适的下载器处理函数(<code>download handler</code>)被调用， 该<code>request</code>被执行(其<code>response</code>被下载)。</p>\n<p>如果其返回 <code>Response</code> 对象，Scrapy将不会调用 任何 其他的 <code>process_request()</code> 或 <code>process_exception()</code> 方法，或相应地下载函数； 其将返回该<code>response</code>。 已安装的中间件的 <code>process_response()</code> 方法则会在每个<code>response</code>返回时被调用。</p>\n<p>如果其返回 <code>Request</code> 对象，Scrapy则停止调用 <code>process_request</code>方法并重新调度返回的<code>request</code>。当新返回的<code>request</code>被执行后， 相应地中间件链将会根据下载的<code>response</code>被调用。</p>\n<p>如果其<code>raise</code>一个 <code>IgnoreRequest</code> 异常，则安装的下载中间件的 <code>process_exception()</code> 方法会被调用。如果没有任何一个方法处理该异常， 则<code>request</code>的<code>errback(Request.errback)</code>方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p>\n<p>参数:    </p>\n<blockquote>\n<ul>\n<li><code>request</code> (<code>Request</code> 对象) – 处理的<code>request</code></li>\n<li><code>spider</code> (<code>Spider</code> 对象) – 该<code>request</code>对应的<code>spider</code></li>\n</ul>\n</blockquote>\n<h3 id=\"2-process-response-request-response-spider\"><a href=\"#2-process-response-request-response-spider\" class=\"headerlink\" title=\"2. process_response(request, response, spider)\"></a>2. <code>process_response(request, response, spider)</code></h3><blockquote>\n<p><code>process_response()</code> 必须返回以下之一: 返回一个 <code>Response</code>对象、 返回一个<code>Request</code> 对象或<code>raise</code>一个 <code>IgnoreRequest</code> 异常。</p>\n<p>如果其返回一个 <code>Response</code> (可以与传入的<code>response</code>相同，也可以是全新的对象)， 该<code>response</code>会被在链中的其他中间件的 <code>process_response()</code> 方法处理。</p>\n<p>如果其返回一个 <code>Request</code> 对象，则中间件链停止， 返回的<code>request</code>会被重新调度下载。处理类似于 <code>process_request()</code> 返回<code>request</code>所做的那样。</p>\n<p>如果其抛出一个 <code>IgnoreRequest</code> 异常，则调用<code>request的errback(Request.errback)。</code> 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p>\n<p>参数:    </p>\n<blockquote>\n<blockquote>\n<ul>\n<li><code>request</code> (<code>Request</code>对象) – <code>response</code>所对应的request</li>\n<li><code>response</code> (<code>Response</code> 对象) – 被处理的response</li>\n<li><code>spider</code> (<code>Spider</code> 对象) – <code>response</code>所对应的<code>spider</code></li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"3-process-exception-request-exception-spider\"><a href=\"#3-process-exception-request-exception-spider\" class=\"headerlink\" title=\"3.process_exception(request, exception, spider)\"></a>3.<code>process_exception(request, exception, spider)</code></h3><blockquote>\n<p>当下载处理器(<code>download handler</code>)或 <code>process_request()</code> (下载中间件)抛出异常(包括 <code>IgnoreRequest</code> 异常)时， Scrapy调用 <code>process_exception()</code> 。</p>\n<p><code>process_exception()</code> 应该返回以下之一: 返回 <code>None</code> 、 一个 <code>Response</code> 对象、或者一个 <code>Request</code> 对象。</p>\n<p>如果其返回 <code>None</code> ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 <code>process_exception()</code> 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。</p>\n<p>如果其返回一个 <code>Response</code> 对象，则已安装的中间件链的 <code>process_response()</code> 方法被调用。Scrapy将不会调用任何其他中间件的 <code>process_exception()</code> 方法。</p>\n<p>如果其返回一个 <code>Request</code> 对象， 则返回的<code>request</code>将会被重新调用下载。这将停止中间件的 <code>process_exception()</code> 方法执行，就如返回一个<code>response</code>的那样。</p>\n<p>参数:    </p>\n<blockquote>\n<ul>\n<li><code>request</code> (是 <code>Request</code> 对象) – 产生异常的<code>request</code></li>\n<li><code>exception</code> (<code>Exception</code> 对象) – 抛出的异常</li>\n<li><code>spider</code> (<code>Spider</code> 对象) – <code>request</code>对应的<code>spider</code></li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><blockquote>\n<p>总的来说下载器中间件就是起到处理request请求并且返回response的作用，一切从网页爬取的url发起的请求会组成一个请求队列，然后一个一个排队经过下载器中间件，之后下载器中间件会对request做出相应的处理，比如添加请求头，添加代理等等，然后通过process_response返回一个response，之后就是用得到的response做出相应的分析，当然这里的内容页可以不实现，但是如果要爬取大型的网站，会遇到被ban的可能就要在下载器中间件这里着手，设置一些相应的请求头，ip代理等等内容。<br><strong>以上纯属个人逐渐摸索总结出来的内容，如果有什么错误欢迎指正</strong></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy设置代理ip","date":"2017-03-25T16:49:29.000Z","_content":"\n# scrapy代理的设置\n>在我的上一篇文章介绍了[scrapy下载器中间件的使用](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/),这里的scrapy`IP`的代理就是用这个原理实现的，重写了下载器中间件的`process_request(self,request,spider)`这个函数,这个函数的主要作用就是对request进行处理。\n>>### 话不多说直接撸代码\n\n```python\n    import random  \n    import scrapy\n    import logging\n    class proxMiddleware(object):\n    #proxy_list=[{'http': 'http://123.157.146.116:8123'}, {'http': 'http://116.55.16.233:8998'}, {'http': 'http://115.85.233.94:80'}, {'http': 'http://180.76.154.5:8888'}, {'http': 'http://139.213.135.81:80'}, {'http': 'http://124.88.67.14:80'}, {'http': 'http://106.46.136.90:808'}, {'http': 'http://106.46.136.226:808'}, {'http': 'http://124.88.67.21:843'}, {'http': 'http://113.245.84.253:8118'}, {'http': 'http://124.88.67.10:80'}, {'http': 'http://171.38.141.12:8123'}, {'http': 'http://124.88.67.52:843'}, {'http': 'http://106.46.136.237:808'}, {'http': 'http://106.46.136.105:808'}, {'http': 'http://106.46.136.190:808'}, {'http': 'http://106.46.136.186:808'}, {'http': 'http://101.81.120.58:8118'}, {'http': 'http://106.46.136.250:808'}, {'http': 'http://106.46.136.8:808'}, {'http': 'http://111.78.188.157:8998'}, {'http': 'http://106.46.136.139:808'}, {'http': 'http://101.53.101.172:9999'}, {'http': 'http://27.159.125.68:8118'}, {'http': 'http://183.32.88.133:808'}, {'http': 'http://171.38.37.193:8123'}]\n    proxy_list=[\n        \"http://180.76.154.5:8888\",\n        \"http://14.109.107.1:8998\",\n        \"http://106.46.136.159:808\",\n        \"http://175.155.24.107:808\",\n        \"http://124.88.67.10:80\",\n        \"http://124.88.67.14:80\",\n        \"http://58.23.122.79:8118\",\n        \"http://123.157.146.116:8123\",\n        \"http://124.88.67.21:843\",\n        \"http://106.46.136.226:808\",\n        \"http://101.81.120.58:8118\",\n        \"http://180.175.145.148:808\"]\n    def process_request(self,request,spider):\n        # if not request.meta['proxies']:\n        ip = random.choice(self.proxy_list)\n        print ip\n        #print 'ip=' %ip\n        request.meta['proxy'] = ip\n```\n        \n>>## 主要的原理：\n>>>给出一个代理列表，然后在这个列表中随机取出一个代理，设置在request中，其中`request.meta['proxy']`就是设置代理的格式\n\n>**但是现在主要的问题就是没有代理ip可用，如果去买的话又太贵了，自己玩玩买代理不值当，所以只好自己写爬虫去爬取免费的代理了，但是免费的代理存活的时间是有限的，这是个非常麻烦的事情，我提供的方法就是实现自己的一个ip代理池，每天定时更新自己的代理池，具体的实现方法会在下一篇文章中介绍，现在提供一段代码用来爬\n取西刺网站的代理**\n>## 直接撸代码，接招吧\n\n```python\n    #coding:utf-8\n    import requests\n    from bs4 import BeautifulSoup\n    import threading\n    import Queue\n    class Get_ips():\n    def __init__(self,page):\n        self.ips=[]\n        self.urls=[]\n        for i in range(page):\n            self.urls.append(\"http://www.xicidaili.com/nn/\" + str(i))\n        self.header = {\"User-Agent\": 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'}\n        #self.file=open(\"ips\",'w')\n        self.q=Queue.Queue()\n        self.Lock=threading.Lock()\n    def get_ips(self):\n        for url in self.urls:\n            res = requests.get(url, headers=self.header)\n            soup = BeautifulSoup(res.text, 'lxml')\n            ips = soup.find_all('tr')\n            for i in range(1, len(ips)):\n                ip = ips[i]\n                tds = ip.find_all(\"td\")\n                ip_temp = \"http://\" + tds[1].contents[0] + \":\" + tds[2].contents[0]\n                # print str(ip_temp)\n                self.q.put(str(ip_temp))\n\n    def review_ips(self):\n        while not self.q.empty():\n            ip=self.q.get()\n            try:\n                proxy={\"http\": ip}\n                #print proxy\n                res = requests.get(\"http://www.baidu.com\", proxies=proxy,timeout=5)\n                self.Lock.acquire()\n                if res.status_code == 200:\n                    self.ips.append(ip)\n                    print ip\n                    self.Lock.release()\n            except Exception:\n                pass\n                #print 'error'\n    def main(self):\n        self.get_ips()\n        threads=[]\n        for i in range(40):\n            threads.append(threading.Thread(target=self.review_ips,args=[]))\n        for t in threads:\n            t.start()\n        for t in threads:\n            t.join()\n        return self.ips\n    def get_ip():\n    my=Get_ips(4)\n    return my.main()\n    get_ip()\n```\n\n>>### 实现的原理\n>>>这里用到了BeautifulSoup解析页面，然后将提取到的代理交给队列，然后再通过共享队列分配给线程，这里主要开启线程通过设置代理ip访问一个网站，因为访问网站的时间比较长，因此要开起多个线程，相信大家能够学习设置代理ip了应该都是比较上手的了，这里具体的代码就不一一解释了，如果代码有什么问题可以及时联系我，我的联系方式在**关于我**的一栏中有提到\n\n>### 补充\n>>想要ip应用起来，还要在配置文件`settings`中添加`DOWNLOADER_MIDDLEWARES = {\n'demo.proxy.proxMiddleware':400\n}`这里的demo是工程的名字，proxy是py文件的名,proxMiddleware是类的名字\n\n>>>当然这里可能你觉得proxy_list写在这里有点冗余，你可以在配置文件中定义，然后将配置文件的内容`import`到py文件中\n\n>**以上全是博主慢慢摸索出来的，可以说自学一门技术真的很难，学习python爬虫已经有两三个月了，可以说全是自己通过看项目，网上查资料才有了今天的成功，不过现在还有几个问题没有解决，就是分布式爬虫、移动端爬取，博主接下来就要主攻这两个方面，学好之后会在自己的博客上分享学习心得的，因为网上没有系统的学习教程，对于自学的人来说实在是太痛苦了**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/scrapy设置代理ip.md","raw":"---\ntitle: scrapy设置代理ip\ndate: 2017-03-26 00:49:29\ncategories: Scrapy学习\ntags: scrapy\n---\n\n# scrapy代理的设置\n>在我的上一篇文章介绍了[scrapy下载器中间件的使用](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/),这里的scrapy`IP`的代理就是用这个原理实现的，重写了下载器中间件的`process_request(self,request,spider)`这个函数,这个函数的主要作用就是对request进行处理。\n>>### 话不多说直接撸代码\n\n```python\n    import random  \n    import scrapy\n    import logging\n    class proxMiddleware(object):\n    #proxy_list=[{'http': 'http://123.157.146.116:8123'}, {'http': 'http://116.55.16.233:8998'}, {'http': 'http://115.85.233.94:80'}, {'http': 'http://180.76.154.5:8888'}, {'http': 'http://139.213.135.81:80'}, {'http': 'http://124.88.67.14:80'}, {'http': 'http://106.46.136.90:808'}, {'http': 'http://106.46.136.226:808'}, {'http': 'http://124.88.67.21:843'}, {'http': 'http://113.245.84.253:8118'}, {'http': 'http://124.88.67.10:80'}, {'http': 'http://171.38.141.12:8123'}, {'http': 'http://124.88.67.52:843'}, {'http': 'http://106.46.136.237:808'}, {'http': 'http://106.46.136.105:808'}, {'http': 'http://106.46.136.190:808'}, {'http': 'http://106.46.136.186:808'}, {'http': 'http://101.81.120.58:8118'}, {'http': 'http://106.46.136.250:808'}, {'http': 'http://106.46.136.8:808'}, {'http': 'http://111.78.188.157:8998'}, {'http': 'http://106.46.136.139:808'}, {'http': 'http://101.53.101.172:9999'}, {'http': 'http://27.159.125.68:8118'}, {'http': 'http://183.32.88.133:808'}, {'http': 'http://171.38.37.193:8123'}]\n    proxy_list=[\n        \"http://180.76.154.5:8888\",\n        \"http://14.109.107.1:8998\",\n        \"http://106.46.136.159:808\",\n        \"http://175.155.24.107:808\",\n        \"http://124.88.67.10:80\",\n        \"http://124.88.67.14:80\",\n        \"http://58.23.122.79:8118\",\n        \"http://123.157.146.116:8123\",\n        \"http://124.88.67.21:843\",\n        \"http://106.46.136.226:808\",\n        \"http://101.81.120.58:8118\",\n        \"http://180.175.145.148:808\"]\n    def process_request(self,request,spider):\n        # if not request.meta['proxies']:\n        ip = random.choice(self.proxy_list)\n        print ip\n        #print 'ip=' %ip\n        request.meta['proxy'] = ip\n```\n        \n>>## 主要的原理：\n>>>给出一个代理列表，然后在这个列表中随机取出一个代理，设置在request中，其中`request.meta['proxy']`就是设置代理的格式\n\n>**但是现在主要的问题就是没有代理ip可用，如果去买的话又太贵了，自己玩玩买代理不值当，所以只好自己写爬虫去爬取免费的代理了，但是免费的代理存活的时间是有限的，这是个非常麻烦的事情，我提供的方法就是实现自己的一个ip代理池，每天定时更新自己的代理池，具体的实现方法会在下一篇文章中介绍，现在提供一段代码用来爬\n取西刺网站的代理**\n>## 直接撸代码，接招吧\n\n```python\n    #coding:utf-8\n    import requests\n    from bs4 import BeautifulSoup\n    import threading\n    import Queue\n    class Get_ips():\n    def __init__(self,page):\n        self.ips=[]\n        self.urls=[]\n        for i in range(page):\n            self.urls.append(\"http://www.xicidaili.com/nn/\" + str(i))\n        self.header = {\"User-Agent\": 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'}\n        #self.file=open(\"ips\",'w')\n        self.q=Queue.Queue()\n        self.Lock=threading.Lock()\n    def get_ips(self):\n        for url in self.urls:\n            res = requests.get(url, headers=self.header)\n            soup = BeautifulSoup(res.text, 'lxml')\n            ips = soup.find_all('tr')\n            for i in range(1, len(ips)):\n                ip = ips[i]\n                tds = ip.find_all(\"td\")\n                ip_temp = \"http://\" + tds[1].contents[0] + \":\" + tds[2].contents[0]\n                # print str(ip_temp)\n                self.q.put(str(ip_temp))\n\n    def review_ips(self):\n        while not self.q.empty():\n            ip=self.q.get()\n            try:\n                proxy={\"http\": ip}\n                #print proxy\n                res = requests.get(\"http://www.baidu.com\", proxies=proxy,timeout=5)\n                self.Lock.acquire()\n                if res.status_code == 200:\n                    self.ips.append(ip)\n                    print ip\n                    self.Lock.release()\n            except Exception:\n                pass\n                #print 'error'\n    def main(self):\n        self.get_ips()\n        threads=[]\n        for i in range(40):\n            threads.append(threading.Thread(target=self.review_ips,args=[]))\n        for t in threads:\n            t.start()\n        for t in threads:\n            t.join()\n        return self.ips\n    def get_ip():\n    my=Get_ips(4)\n    return my.main()\n    get_ip()\n```\n\n>>### 实现的原理\n>>>这里用到了BeautifulSoup解析页面，然后将提取到的代理交给队列，然后再通过共享队列分配给线程，这里主要开启线程通过设置代理ip访问一个网站，因为访问网站的时间比较长，因此要开起多个线程，相信大家能够学习设置代理ip了应该都是比较上手的了，这里具体的代码就不一一解释了，如果代码有什么问题可以及时联系我，我的联系方式在**关于我**的一栏中有提到\n\n>### 补充\n>>想要ip应用起来，还要在配置文件`settings`中添加`DOWNLOADER_MIDDLEWARES = {\n'demo.proxy.proxMiddleware':400\n}`这里的demo是工程的名字，proxy是py文件的名,proxMiddleware是类的名字\n\n>>>当然这里可能你觉得proxy_list写在这里有点冗余，你可以在配置文件中定义，然后将配置文件的内容`import`到py文件中\n\n>**以上全是博主慢慢摸索出来的，可以说自学一门技术真的很难，学习python爬虫已经有两三个月了，可以说全是自己通过看项目，网上查资料才有了今天的成功，不过现在还有几个问题没有解决，就是分布式爬虫、移动端爬取，博主接下来就要主攻这两个方面，学好之后会在自己的博客上分享学习心得的，因为网上没有系统的学习教程，对于自学的人来说实在是太痛苦了**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"scrapy设置代理ip","published":1,"updated":"2017-03-27T03:31:13.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwaza002ol0uzauz8a45s","content":"<h1 id=\"scrapy代理的设置\"><a href=\"#scrapy代理的设置\" class=\"headerlink\" title=\"scrapy代理的设置\"></a>scrapy代理的设置</h1><blockquote>\n<p>在我的上一篇文章介绍了<a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">scrapy下载器中间件的使用</a>,这里的scrapy<code>IP</code>的代理就是用这个原理实现的，重写了下载器中间件的<code>process_request(self,request,spider)</code>这个函数,这个函数的主要作用就是对request进行处理。</p>\n<blockquote>\n<h3 id=\"话不多说直接撸代码\"><a href=\"#话不多说直接撸代码\" class=\"headerlink\" title=\"话不多说直接撸代码\"></a>话不多说直接撸代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random  </div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">proxMiddleware</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"comment\">#proxy_list=[&#123;'http': 'http://123.157.146.116:8123'&#125;, &#123;'http': 'http://116.55.16.233:8998'&#125;, &#123;'http': 'http://115.85.233.94:80'&#125;, &#123;'http': 'http://180.76.154.5:8888'&#125;, &#123;'http': 'http://139.213.135.81:80'&#125;, &#123;'http': 'http://124.88.67.14:80'&#125;, &#123;'http': 'http://106.46.136.90:808'&#125;, &#123;'http': 'http://106.46.136.226:808'&#125;, &#123;'http': 'http://124.88.67.21:843'&#125;, &#123;'http': 'http://113.245.84.253:8118'&#125;, &#123;'http': 'http://124.88.67.10:80'&#125;, &#123;'http': 'http://171.38.141.12:8123'&#125;, &#123;'http': 'http://124.88.67.52:843'&#125;, &#123;'http': 'http://106.46.136.237:808'&#125;, &#123;'http': 'http://106.46.136.105:808'&#125;, &#123;'http': 'http://106.46.136.190:808'&#125;, &#123;'http': 'http://106.46.136.186:808'&#125;, &#123;'http': 'http://101.81.120.58:8118'&#125;, &#123;'http': 'http://106.46.136.250:808'&#125;, &#123;'http': 'http://106.46.136.8:808'&#125;, &#123;'http': 'http://111.78.188.157:8998'&#125;, &#123;'http': 'http://106.46.136.139:808'&#125;, &#123;'http': 'http://101.53.101.172:9999'&#125;, &#123;'http': 'http://27.159.125.68:8118'&#125;, &#123;'http': 'http://183.32.88.133:808'&#125;, &#123;'http': 'http://171.38.37.193:8123'&#125;]</span></div><div class=\"line\">proxy_list=[</div><div class=\"line\">    <span class=\"string\">\"http://180.76.154.5:8888\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://14.109.107.1:8998\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://106.46.136.159:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://175.155.24.107:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.10:80\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.14:80\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://58.23.122.79:8118\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://123.157.146.116:8123\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.21:843\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://106.46.136.226:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://101.81.120.58:8118\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://180.175.145.148:808\"</span>]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self,request,spider)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># if not request.meta['proxies']:</span></div><div class=\"line\">    ip = random.choice(self.proxy_list)</div><div class=\"line\">    <span class=\"keyword\">print</span> ip</div><div class=\"line\">    <span class=\"comment\">#print 'ip=' %ip</span></div><div class=\"line\">    request.meta[<span class=\"string\">'proxy'</span>] = ip</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"主要的原理：\"><a href=\"#主要的原理：\" class=\"headerlink\" title=\"主要的原理：\"></a>主要的原理：</h2><blockquote>\n<p>给出一个代理列表，然后在这个列表中随机取出一个代理，设置在request中，其中<code>request.meta[&#39;proxy&#39;]</code>就是设置代理的格式</p>\n</blockquote>\n</blockquote>\n<p><strong>但是现在主要的问题就是没有代理ip可用，如果去买的话又太贵了，自己玩玩买代理不值当，所以只好自己写爬虫去爬取免费的代理了，但是免费的代理存活的时间是有限的，这是个非常麻烦的事情，我提供的方法就是实现自己的一个ip代理池，每天定时更新自己的代理池，具体的实现方法会在下一篇文章中介绍，现在提供一段代码用来爬<br>取西刺网站的代理</strong></p>\n<h2 id=\"直接撸代码，接招吧\"><a href=\"#直接撸代码，接招吧\" class=\"headerlink\" title=\"直接撸代码，接招吧\"></a>直接撸代码，接招吧</h2></blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> Queue</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Get_ips</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,page)</span>:</span></div><div class=\"line\">    self.ips=[]</div><div class=\"line\">    self.urls=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(page):</div><div class=\"line\">        self.urls.append(<span class=\"string\">\"http://www.xicidaili.com/nn/\"</span> + str(i))</div><div class=\"line\">    self.header = &#123;<span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>&#125;</div><div class=\"line\">    <span class=\"comment\">#self.file=open(\"ips\",'w')</span></div><div class=\"line\">    self.q=Queue.Queue()</div><div class=\"line\">    self.Lock=threading.Lock()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ips</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> self.urls:</div><div class=\"line\">        res = requests.get(url, headers=self.header)</div><div class=\"line\">        soup = BeautifulSoup(res.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">        ips = soup.find_all(<span class=\"string\">'tr'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(ips)):</div><div class=\"line\">            ip = ips[i]</div><div class=\"line\">            tds = ip.find_all(<span class=\"string\">\"td\"</span>)</div><div class=\"line\">            ip_temp = <span class=\"string\">\"http://\"</span> + tds[<span class=\"number\">1</span>].contents[<span class=\"number\">0</span>] + <span class=\"string\">\":\"</span> + tds[<span class=\"number\">2</span>].contents[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"comment\"># print str(ip_temp)</span></div><div class=\"line\">            self.q.put(str(ip_temp))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">review_ips</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.q.empty():</div><div class=\"line\">        ip=self.q.get()</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            proxy=&#123;<span class=\"string\">\"http\"</span>: ip&#125;</div><div class=\"line\">            <span class=\"comment\">#print proxy</span></div><div class=\"line\">            res = requests.get(<span class=\"string\">\"http://www.baidu.com\"</span>, proxies=proxy,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">            self.Lock.acquire()</div><div class=\"line\">            <span class=\"keyword\">if</span> res.status_code == <span class=\"number\">200</span>:</div><div class=\"line\">                self.ips.append(ip)</div><div class=\"line\">                <span class=\"keyword\">print</span> ip</div><div class=\"line\">                self.Lock.release()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">            <span class=\"comment\">#print 'error'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.get_ips()</div><div class=\"line\">    threads=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">40</span>):</div><div class=\"line\">        threads.append(threading.Thread(target=self.review_ips,args=[]))</div><div class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">        t.start()</div><div class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">        t.join()</div><div class=\"line\">    <span class=\"keyword\">return</span> self.ips</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">my=Get_ips(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"keyword\">return</span> my.main()</div><div class=\"line\">get_ip()</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"实现的原理\"><a href=\"#实现的原理\" class=\"headerlink\" title=\"实现的原理\"></a>实现的原理</h3><blockquote>\n<p>这里用到了BeautifulSoup解析页面，然后将提取到的代理交给队列，然后再通过共享队列分配给线程，这里主要开启线程通过设置代理ip访问一个网站，因为访问网站的时间比较长，因此要开起多个线程，相信大家能够学习设置代理ip了应该都是比较上手的了，这里具体的代码就不一一解释了，如果代码有什么问题可以及时联系我，我的联系方式在<strong>关于我</strong>的一栏中有提到</p>\n</blockquote>\n</blockquote>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><blockquote>\n<p>想要ip应用起来，还要在配置文件<code>settings</code>中添加<code>DOWNLOADER_MIDDLEWARES = {\n&#39;demo.proxy.proxMiddleware&#39;:400\n}</code>这里的demo是工程的名字，proxy是py文件的名,proxMiddleware是类的名字</p>\n<blockquote>\n<p>当然这里可能你觉得proxy_list写在这里有点冗余，你可以在配置文件中定义，然后将配置文件的内容<code>import</code>到py文件中</p>\n</blockquote>\n</blockquote>\n<p><strong>以上全是博主慢慢摸索出来的，可以说自学一门技术真的很难，学习python爬虫已经有两三个月了，可以说全是自己通过看项目，网上查资料才有了今天的成功，不过现在还有几个问题没有解决，就是分布式爬虫、移动端爬取，博主接下来就要主攻这两个方面，学好之后会在自己的博客上分享学习心得的，因为网上没有系统的学习教程，对于自学的人来说实在是太痛苦了</strong></p>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"scrapy代理的设置\"><a href=\"#scrapy代理的设置\" class=\"headerlink\" title=\"scrapy代理的设置\"></a>scrapy代理的设置</h1><blockquote>\n<p>在我的上一篇文章介绍了<a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">scrapy下载器中间件的使用</a>,这里的scrapy<code>IP</code>的代理就是用这个原理实现的，重写了下载器中间件的<code>process_request(self,request,spider)</code>这个函数,这个函数的主要作用就是对request进行处理。</p>\n<blockquote>\n<h3 id=\"话不多说直接撸代码\"><a href=\"#话不多说直接撸代码\" class=\"headerlink\" title=\"话不多说直接撸代码\"></a>话不多说直接撸代码</h3></blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random  </div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">proxMiddleware</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"comment\">#proxy_list=[&#123;'http': 'http://123.157.146.116:8123'&#125;, &#123;'http': 'http://116.55.16.233:8998'&#125;, &#123;'http': 'http://115.85.233.94:80'&#125;, &#123;'http': 'http://180.76.154.5:8888'&#125;, &#123;'http': 'http://139.213.135.81:80'&#125;, &#123;'http': 'http://124.88.67.14:80'&#125;, &#123;'http': 'http://106.46.136.90:808'&#125;, &#123;'http': 'http://106.46.136.226:808'&#125;, &#123;'http': 'http://124.88.67.21:843'&#125;, &#123;'http': 'http://113.245.84.253:8118'&#125;, &#123;'http': 'http://124.88.67.10:80'&#125;, &#123;'http': 'http://171.38.141.12:8123'&#125;, &#123;'http': 'http://124.88.67.52:843'&#125;, &#123;'http': 'http://106.46.136.237:808'&#125;, &#123;'http': 'http://106.46.136.105:808'&#125;, &#123;'http': 'http://106.46.136.190:808'&#125;, &#123;'http': 'http://106.46.136.186:808'&#125;, &#123;'http': 'http://101.81.120.58:8118'&#125;, &#123;'http': 'http://106.46.136.250:808'&#125;, &#123;'http': 'http://106.46.136.8:808'&#125;, &#123;'http': 'http://111.78.188.157:8998'&#125;, &#123;'http': 'http://106.46.136.139:808'&#125;, &#123;'http': 'http://101.53.101.172:9999'&#125;, &#123;'http': 'http://27.159.125.68:8118'&#125;, &#123;'http': 'http://183.32.88.133:808'&#125;, &#123;'http': 'http://171.38.37.193:8123'&#125;]</span></div><div class=\"line\">proxy_list=[</div><div class=\"line\">    <span class=\"string\">\"http://180.76.154.5:8888\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://14.109.107.1:8998\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://106.46.136.159:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://175.155.24.107:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.10:80\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.14:80\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://58.23.122.79:8118\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://123.157.146.116:8123\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://124.88.67.21:843\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://106.46.136.226:808\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://101.81.120.58:8118\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://180.175.145.148:808\"</span>]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self,request,spider)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># if not request.meta['proxies']:</span></div><div class=\"line\">    ip = random.choice(self.proxy_list)</div><div class=\"line\">    <span class=\"keyword\">print</span> ip</div><div class=\"line\">    <span class=\"comment\">#print 'ip=' %ip</span></div><div class=\"line\">    request.meta[<span class=\"string\">'proxy'</span>] = ip</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h2 id=\"主要的原理：\"><a href=\"#主要的原理：\" class=\"headerlink\" title=\"主要的原理：\"></a>主要的原理：</h2><blockquote>\n<p>给出一个代理列表，然后在这个列表中随机取出一个代理，设置在request中，其中<code>request.meta[&#39;proxy&#39;]</code>就是设置代理的格式</p>\n</blockquote>\n</blockquote>\n<p><strong>但是现在主要的问题就是没有代理ip可用，如果去买的话又太贵了，自己玩玩买代理不值当，所以只好自己写爬虫去爬取免费的代理了，但是免费的代理存活的时间是有限的，这是个非常麻烦的事情，我提供的方法就是实现自己的一个ip代理池，每天定时更新自己的代理池，具体的实现方法会在下一篇文章中介绍，现在提供一段代码用来爬<br>取西刺网站的代理</strong></p>\n<h2 id=\"直接撸代码，接招吧\"><a href=\"#直接撸代码，接招吧\" class=\"headerlink\" title=\"直接撸代码，接招吧\"></a>直接撸代码，接招吧</h2></blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> Queue</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Get_ips</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,page)</span>:</span></div><div class=\"line\">    self.ips=[]</div><div class=\"line\">    self.urls=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(page):</div><div class=\"line\">        self.urls.append(<span class=\"string\">\"http://www.xicidaili.com/nn/\"</span> + str(i))</div><div class=\"line\">    self.header = &#123;<span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>&#125;</div><div class=\"line\">    <span class=\"comment\">#self.file=open(\"ips\",'w')</span></div><div class=\"line\">    self.q=Queue.Queue()</div><div class=\"line\">    self.Lock=threading.Lock()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ips</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> self.urls:</div><div class=\"line\">        res = requests.get(url, headers=self.header)</div><div class=\"line\">        soup = BeautifulSoup(res.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">        ips = soup.find_all(<span class=\"string\">'tr'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(ips)):</div><div class=\"line\">            ip = ips[i]</div><div class=\"line\">            tds = ip.find_all(<span class=\"string\">\"td\"</span>)</div><div class=\"line\">            ip_temp = <span class=\"string\">\"http://\"</span> + tds[<span class=\"number\">1</span>].contents[<span class=\"number\">0</span>] + <span class=\"string\">\":\"</span> + tds[<span class=\"number\">2</span>].contents[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"comment\"># print str(ip_temp)</span></div><div class=\"line\">            self.q.put(str(ip_temp))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">review_ips</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.q.empty():</div><div class=\"line\">        ip=self.q.get()</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            proxy=&#123;<span class=\"string\">\"http\"</span>: ip&#125;</div><div class=\"line\">            <span class=\"comment\">#print proxy</span></div><div class=\"line\">            res = requests.get(<span class=\"string\">\"http://www.baidu.com\"</span>, proxies=proxy,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">            self.Lock.acquire()</div><div class=\"line\">            <span class=\"keyword\">if</span> res.status_code == <span class=\"number\">200</span>:</div><div class=\"line\">                self.ips.append(ip)</div><div class=\"line\">                <span class=\"keyword\">print</span> ip</div><div class=\"line\">                self.Lock.release()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">            <span class=\"comment\">#print 'error'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.get_ips()</div><div class=\"line\">    threads=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">40</span>):</div><div class=\"line\">        threads.append(threading.Thread(target=self.review_ips,args=[]))</div><div class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">        t.start()</div><div class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">        t.join()</div><div class=\"line\">    <span class=\"keyword\">return</span> self.ips</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">my=Get_ips(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"keyword\">return</span> my.main()</div><div class=\"line\">get_ip()</div></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<h3 id=\"实现的原理\"><a href=\"#实现的原理\" class=\"headerlink\" title=\"实现的原理\"></a>实现的原理</h3><blockquote>\n<p>这里用到了BeautifulSoup解析页面，然后将提取到的代理交给队列，然后再通过共享队列分配给线程，这里主要开启线程通过设置代理ip访问一个网站，因为访问网站的时间比较长，因此要开起多个线程，相信大家能够学习设置代理ip了应该都是比较上手的了，这里具体的代码就不一一解释了，如果代码有什么问题可以及时联系我，我的联系方式在<strong>关于我</strong>的一栏中有提到</p>\n</blockquote>\n</blockquote>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><blockquote>\n<p>想要ip应用起来，还要在配置文件<code>settings</code>中添加<code>DOWNLOADER_MIDDLEWARES = {\n&#39;demo.proxy.proxMiddleware&#39;:400\n}</code>这里的demo是工程的名字，proxy是py文件的名,proxMiddleware是类的名字</p>\n<blockquote>\n<p>当然这里可能你觉得proxy_list写在这里有点冗余，你可以在配置文件中定义，然后将配置文件的内容<code>import</code>到py文件中</p>\n</blockquote>\n</blockquote>\n<p><strong>以上全是博主慢慢摸索出来的，可以说自学一门技术真的很难，学习python爬虫已经有两三个月了，可以说全是自己通过看项目，网上查资料才有了今天的成功，不过现在还有几个问题没有解决，就是分布式爬虫、移动端爬取，博主接下来就要主攻这两个方面，学好之后会在自己的博客上分享学习心得的，因为网上没有系统的学习教程，对于自学的人来说实在是太痛苦了</strong></p>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"},{"title":"scrapy设置请求池","date":"2017-03-26T06:20:10.000Z","_content":"\n# scrapy设置\"请求池\"\n## 引言\n>相信大家有时候爬虫发出请求的时候会被ban，返回的是403错误，这个就是请求头的问题，其实在python发出请求时，使用的是默认的自己的请求头，网站管理者肯定会不允许机器访问的，但是有些比较low的网站还是可以访问的，有时候网站管理者看到同一个请求头在一秒内请求多次，傻子都知道这是机器在访问，因此会被ban掉，这时就需要设置请求池了，这个和ip代理池是一个概念\n## 爬虫请求常见的错误\n>>200：请求成功      处理方式：获得响应的内容，进行处理   \n201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到    处理方式：爬虫中不会遇到   \n202：请求被接受，但处理尚未完成    处理方式：阻塞等待   \n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃 \n300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃 \n301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源    处理方式：重定向到分配的 URL   \n302：请求到的资源在一个不同的 URL 处临时保存     处理方式：重定向到临时的 URL   \n304 请求的资源未更新     处理方式：丢弃   \n400 非法请求     处理方式：丢弃   \n401 未授权     处理方式：丢弃   \n403 禁止     处理方式：丢弃   \n404 没有找到     处理方式：丢弃   \n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n\n## 话不多说直接撸代码\n```python\n    from scrapy import log\n    import random\n    from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware\n    class RotateUserAgentMiddleware(UserAgentMiddleware):\n    # for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php\n    user_agent_list = [\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 \"\n        \"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\",\n        \"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\",\n        \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 \"\n        \"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5\",\n        \"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\",\n        \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"\n    ]\n    def process_request(self, request, spider):\n        ua = random.choice(self.user_agent_list)\n        if ua:\n            # 显示当前使用的useragent\n            print \"********Current UserAgent:%s************\" % ua\n            # 记录\n            log.msg('Current UserAgent: ' + ua)\n            request.headers.setdefault('User-Agent', ua)\n```\n           \n## 说明\n>>这里的思路就是在下载器中间件中对request设置请求，这里是使用`request.headers.setdefault(\"User-Agent\",user_agent)`这个函数设置请求头，对于下载器中间件在我博客前面的文章已经有说明，想要了解的请[点击](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/)\n\n## 注意\n>> 这里还要说明的是设置了请求池还要在配置文件settins中设置一下，具体设置方法和设置代理ip一样，详情请看[scrapy代理ip的设置](https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/)\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","source":"_posts/scrapy设置请求池.md","raw":"---\ntitle: scrapy设置请求池\ndate: 2017-03-26 14:20:10\ncategories: Scrapy学习\ntags: scrapy\n---\n\n# scrapy设置\"请求池\"\n## 引言\n>相信大家有时候爬虫发出请求的时候会被ban，返回的是403错误，这个就是请求头的问题，其实在python发出请求时，使用的是默认的自己的请求头，网站管理者肯定会不允许机器访问的，但是有些比较low的网站还是可以访问的，有时候网站管理者看到同一个请求头在一秒内请求多次，傻子都知道这是机器在访问，因此会被ban掉，这时就需要设置请求池了，这个和ip代理池是一个概念\n## 爬虫请求常见的错误\n>>200：请求成功      处理方式：获得响应的内容，进行处理   \n201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到    处理方式：爬虫中不会遇到   \n202：请求被接受，但处理尚未完成    处理方式：阻塞等待   \n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃 \n300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃 \n301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源    处理方式：重定向到分配的 URL   \n302：请求到的资源在一个不同的 URL 处临时保存     处理方式：重定向到临时的 URL   \n304 请求的资源未更新     处理方式：丢弃   \n400 非法请求     处理方式：丢弃   \n401 未授权     处理方式：丢弃   \n403 禁止     处理方式：丢弃   \n404 没有找到     处理方式：丢弃   \n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n\n## 话不多说直接撸代码\n```python\n    from scrapy import log\n    import random\n    from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware\n    class RotateUserAgentMiddleware(UserAgentMiddleware):\n    # for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php\n    user_agent_list = [\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 \"\n        \"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\",\n        \"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 \"\n        \"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\",\n        \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 \"\n        \"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5\",\n        \"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n        \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\",\n        \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 \"\n        \"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"\n    ]\n    def process_request(self, request, spider):\n        ua = random.choice(self.user_agent_list)\n        if ua:\n            # 显示当前使用的useragent\n            print \"********Current UserAgent:%s************\" % ua\n            # 记录\n            log.msg('Current UserAgent: ' + ua)\n            request.headers.setdefault('User-Agent', ua)\n```\n           \n## 说明\n>>这里的思路就是在下载器中间件中对request设置请求，这里是使用`request.headers.setdefault(\"User-Agent\",user_agent)`这个函数设置请求头，对于下载器中间件在我博客前面的文章已经有说明，想要了解的请[点击](https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/)\n\n## 注意\n>> 这里还要说明的是设置了请求池还要在配置文件settins中设置一下，具体设置方法和设置代理ip一样，详情请看[scrapy代理ip的设置](https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/)\n\n\n\n\n\n\n\n\n\n\n\n\n>>## 作者说\n>>> 本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持\n\n*版权信息所有者：chenjiabing*\n*如若转载请标明出处：chenjiabing666.github.io6*","slug":"scrapy设置请求池","published":1,"updated":"2017-03-27T03:31:34.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ahwazd002tl0uzy7yje78b","content":"<h1 id=\"scrapy设置”请求池”\"><a href=\"#scrapy设置”请求池”\" class=\"headerlink\" title=\"scrapy设置”请求池”\"></a>scrapy设置”请求池”</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>相信大家有时候爬虫发出请求的时候会被ban，返回的是403错误，这个就是请求头的问题，其实在python发出请求时，使用的是默认的自己的请求头，网站管理者肯定会不允许机器访问的，但是有些比较low的网站还是可以访问的，有时候网站管理者看到同一个请求头在一秒内请求多次，傻子都知道这是机器在访问，因此会被ban掉，这时就需要设置请求池了，这个和ip代理池是一个概念</p>\n<h2 id=\"爬虫请求常见的错误\"><a href=\"#爬虫请求常见的错误\" class=\"headerlink\" title=\"爬虫请求常见的错误\"></a>爬虫请求常见的错误</h2><blockquote>\n<p>200：请求成功      处理方式：获得响应的内容，进行处理<br>201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到    处理方式：爬虫中不会遇到<br>202：请求被接受，但处理尚未完成    处理方式：阻塞等待<br>204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃<br>300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃<br>301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源    处理方式：重定向到分配的 URL<br>302：请求到的资源在一个不同的 URL 处临时保存     处理方式：重定向到临时的 URL<br>304 请求的资源未更新     处理方式：丢弃<br>400 非法请求     处理方式：丢弃<br>401 未授权     处理方式：丢弃<br>403 禁止     处理方式：丢弃<br>404 没有找到     处理方式：丢弃<br>5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</p>\n</blockquote>\n</blockquote>\n<h2 id=\"话不多说直接撸代码\"><a href=\"#话不多说直接撸代码\" class=\"headerlink\" title=\"话不多说直接撸代码\"></a>话不多说直接撸代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.downloadermiddlewares.useragent <span class=\"keyword\">import</span> UserAgentMiddleware</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RotateUserAgentMiddleware</span><span class=\"params\">(UserAgentMiddleware)</span>:</span></div><div class=\"line\"><span class=\"comment\"># for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php</span></div><div class=\"line\">user_agent_list = [</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"</span></div><div class=\"line\">]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">    ua = random.choice(self.user_agent_list)</div><div class=\"line\">    <span class=\"keyword\">if</span> ua:</div><div class=\"line\">        <span class=\"comment\"># 显示当前使用的useragent</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"********Current UserAgent:%s************\"</span> % ua</div><div class=\"line\">        <span class=\"comment\"># 记录</span></div><div class=\"line\">        log.msg(<span class=\"string\">'Current UserAgent: '</span> + ua)</div><div class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</div></pre></td></tr></table></figure>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><blockquote>\n<blockquote>\n<p>这里的思路就是在下载器中间件中对request设置请求，这里是使用<code>request.headers.setdefault(&quot;User-Agent&quot;,user_agent)</code>这个函数设置请求头，对于下载器中间件在我博客前面的文章已经有说明，想要了解的请<a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">点击</a></p>\n</blockquote>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<blockquote>\n<p>这里还要说明的是设置了请求池还要在配置文件settins中设置一下，具体设置方法和设置代理ip一样，详情请看<a href=\"https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/\">scrapy代理ip的设置</a></p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n","excerpt":"","more":"<h1 id=\"scrapy设置”请求池”\"><a href=\"#scrapy设置”请求池”\" class=\"headerlink\" title=\"scrapy设置”请求池”\"></a>scrapy设置”请求池”</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>相信大家有时候爬虫发出请求的时候会被ban，返回的是403错误，这个就是请求头的问题，其实在python发出请求时，使用的是默认的自己的请求头，网站管理者肯定会不允许机器访问的，但是有些比较low的网站还是可以访问的，有时候网站管理者看到同一个请求头在一秒内请求多次，傻子都知道这是机器在访问，因此会被ban掉，这时就需要设置请求池了，这个和ip代理池是一个概念</p>\n<h2 id=\"爬虫请求常见的错误\"><a href=\"#爬虫请求常见的错误\" class=\"headerlink\" title=\"爬虫请求常见的错误\"></a>爬虫请求常见的错误</h2><blockquote>\n<p>200：请求成功      处理方式：获得响应的内容，进行处理<br>201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到    处理方式：爬虫中不会遇到<br>202：请求被接受，但处理尚未完成    处理方式：阻塞等待<br>204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃<br>300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃<br>301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源    处理方式：重定向到分配的 URL<br>302：请求到的资源在一个不同的 URL 处临时保存     处理方式：重定向到临时的 URL<br>304 请求的资源未更新     处理方式：丢弃<br>400 非法请求     处理方式：丢弃<br>401 未授权     处理方式：丢弃<br>403 禁止     处理方式：丢弃<br>404 没有找到     处理方式：丢弃<br>5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</p>\n</blockquote>\n</blockquote>\n<h2 id=\"话不多说直接撸代码\"><a href=\"#话不多说直接撸代码\" class=\"headerlink\" title=\"话不多说直接撸代码\"></a>话不多说直接撸代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.downloadermiddlewares.useragent <span class=\"keyword\">import</span> UserAgentMiddleware</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RotateUserAgentMiddleware</span><span class=\"params\">(UserAgentMiddleware)</span>:</span></div><div class=\"line\"><span class=\"comment\"># for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php</span></div><div class=\"line\">user_agent_list = [</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 \"</span></div><div class=\"line\">    <span class=\"string\">\"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"</span></div><div class=\"line\">]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">    ua = random.choice(self.user_agent_list)</div><div class=\"line\">    <span class=\"keyword\">if</span> ua:</div><div class=\"line\">        <span class=\"comment\"># 显示当前使用的useragent</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"********Current UserAgent:%s************\"</span> % ua</div><div class=\"line\">        <span class=\"comment\"># 记录</span></div><div class=\"line\">        log.msg(<span class=\"string\">'Current UserAgent: '</span> + ua)</div><div class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</div></pre></td></tr></table></figure>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><blockquote>\n<blockquote>\n<p>这里的思路就是在下载器中间件中对request设置请求，这里是使用<code>request.headers.setdefault(&quot;User-Agent&quot;,user_agent)</code>这个函数设置请求头，对于下载器中间件在我博客前面的文章已经有说明，想要了解的请<a href=\"https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/\">点击</a></p>\n</blockquote>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<blockquote>\n<p>这里还要说明的是设置了请求池还要在配置文件settins中设置一下，具体设置方法和设置代理ip一样，详情请看<a href=\"https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/\">scrapy代理ip的设置</a></p>\n<h2 id=\"作者说\"><a href=\"#作者说\" class=\"headerlink\" title=\"作者说\"></a>作者说</h2><blockquote>\n<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2ahwavb0002l0uzly3d3fpd","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwawh000dl0uzua6cnmh1"},{"post_id":"cj2ahwavi0003l0uzu77j8pqe","category_id":"cj2ahwawc0009l0uzkdnaohcz","_id":"cj2ahwawt000kl0uz7qac7waa"},{"post_id":"cj2ahwavy0006l0uz2wh7owi4","category_id":"cj2ahwawl000fl0uzh59uu6x9","_id":"cj2ahwax1000ql0uz3lwp73po"},{"post_id":"cj2ahwaw10007l0uzt4auafdb","category_id":"cj2ahwawc0009l0uzkdnaohcz","_id":"cj2ahwaxa000wl0uzdhxro0wz"},{"post_id":"cj2ahwaw50008l0uz6fwao1he","category_id":"cj2ahwawc0009l0uzkdnaohcz","_id":"cj2ahwaxf0012l0uzl4wsjk54"},{"post_id":"cj2ahwawe000cl0uzbxhsw1mx","category_id":"cj2ahwaxa000xl0uzkj3nzcd4","_id":"cj2ahwaxn0018l0uzvajg216k"},{"post_id":"cj2ahwaxd0011l0uzg605wre5","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwaxw001cl0uz8qlncwjl"},{"post_id":"cj2ahwaxg0015l0uzzzgos3w2","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwaxz001fl0uzwwjy2kc8"},{"post_id":"cj2ahwaxk0017l0uz614e30wt","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahway5001jl0uzbadbb7p4"},{"post_id":"cj2ahwawj000el0uz91mli5cq","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahway7001ml0uz00gd9ias"},{"post_id":"cj2ahwaxr0019l0uz0dn45cuq","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwayb001ql0uz6ywc6m16"},{"post_id":"cj2ahwaxx001el0uzelfsqdyc","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwayd001tl0uzm3v1liuu"},{"post_id":"cj2ahwawp000hl0uzs7mww090","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahwayk001xl0uzti1g6zva"},{"post_id":"cj2ahway0001gl0uzyl5omp23","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwayn0020l0uzk0kcukc0"},{"post_id":"cj2ahway6001ll0uzrfp79t93","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwayt0025l0uzn2eqxcf6"},{"post_id":"cj2ahwawr000jl0uzf3qxmwjp","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahwayx0028l0uzmy01pxjc"},{"post_id":"cj2ahway8001nl0uzxoam4v7p","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwayz002cl0uzwdd1zalc"},{"post_id":"cj2ahwayb001sl0uzu6rfcz43","category_id":"cj2ahwavl0004l0uzxruzd7jv","_id":"cj2ahwaz1002fl0uzg0cb1i1m"},{"post_id":"cj2ahwaww000nl0uztyy1j3aj","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahwaz7002il0uzl9ado8qz"},{"post_id":"cj2ahwawz000pl0uz65if4vtk","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahwaza002ml0uze7qk3jqh"},{"post_id":"cj2ahwax3000tl0uz2oe667bz","category_id":"cj2ahwaxf0013l0uzthcrhu7x","_id":"cj2ahwazc002ql0uzn50p2p2g"},{"post_id":"cj2ahwaz0002dl0uzjd2kkaht","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazf002ul0uzypq9ns34"},{"post_id":"cj2ahwax7000vl0uz3mlz9i81","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazg002xl0uzwu6npdcz"},{"post_id":"cj2ahwaz2002gl0uz4qgsvo1g","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazi0030l0uzwhp8lwv9"},{"post_id":"cj2ahwaz8002ll0uzhgnim7nc","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazj0032l0uzoqo646eh"},{"post_id":"cj2ahwaxc000zl0uzqlms0lhj","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazm0036l0uzemhh2afw"},{"post_id":"cj2ahwaza002ol0uzauz8a45s","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazn0038l0uzkkwpgo60"},{"post_id":"cj2ahwazd002tl0uzy7yje78b","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazq003cl0uzbzlwp7z1"},{"post_id":"cj2ahwayf001ul0uzdjnl4tta","category_id":"cj2ahwazc002pl0uz3immtlts","_id":"cj2ahwazt003el0uzmxmzitul"},{"post_id":"cj2ahwayl001zl0uz55ki5axf","category_id":"cj2ahwazg002wl0uzqphffgbe","_id":"cj2ahwazw003hl0uzg255eouc"},{"post_id":"cj2ahwayq0022l0uzb4rgr4bu","category_id":"cj2ahwazg002wl0uzqphffgbe","_id":"cj2ahwazx003jl0uzehgzdtnm"},{"post_id":"cj2ahwayu0026l0uzqozkx7k9","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazy003ll0uz2lh0xn6z"},{"post_id":"cj2ahwayx0029l0uzua2yp4ry","category_id":"cj2ahwayz002al0uz0ldude4o","_id":"cj2ahwazz003nl0uzi1vfkj1c"}],"PostTag":[{"post_id":"cj2ahwavb0002l0uzly3d3fpd","tag_id":"cj2ahwavx0005l0uz60vd48im","_id":"cj2ahwawd000bl0uzil4op5p7"},{"post_id":"cj2ahwavi0003l0uzu77j8pqe","tag_id":"cj2ahwawc000al0uzma8yq82g","_id":"cj2ahwawq000il0uz2l0qyap5"},{"post_id":"cj2ahwavy0006l0uz2wh7owi4","tag_id":"cj2ahwawn000gl0uzprptzt1l","_id":"cj2ahwawz000ol0uzn1ur57lb"},{"post_id":"cj2ahwaw10007l0uzt4auafdb","tag_id":"cj2ahwawc000al0uzma8yq82g","_id":"cj2ahwax6000ul0uzk6nuhsyr"},{"post_id":"cj2ahwaw50008l0uz6fwao1he","tag_id":"cj2ahwawc000al0uzma8yq82g","_id":"cj2ahwaxd0010l0uzrb5hu880"},{"post_id":"cj2ahwawe000cl0uzbxhsw1mx","tag_id":"cj2ahwaxb000yl0uz5wl1212n","_id":"cj2ahwaxj0016l0uzbxhwzzf5"},{"post_id":"cj2ahwawj000el0uz91mli5cq","tag_id":"cj2ahwaxg0014l0uzz01twbwn","_id":"cj2ahwaxw001dl0uzv8w6ln62"},{"post_id":"cj2ahwawp000hl0uzs7mww090","tag_id":"cj2ahwaxg0014l0uzz01twbwn","_id":"cj2ahway5001kl0uz6rrgrkvx"},{"post_id":"cj2ahwawr000jl0uzf3qxmwjp","tag_id":"cj2ahwaxg0014l0uzz01twbwn","_id":"cj2ahwayb001rl0uz1hmfeuve"},{"post_id":"cj2ahwayb001sl0uzu6rfcz43","tag_id":"cj2ahwavx0005l0uz60vd48im","_id":"cj2ahwayl001yl0uzagqbuqvn"},{"post_id":"cj2ahwaww000nl0uztyy1j3aj","tag_id":"cj2ahwaya001pl0uzviktvrev","_id":"cj2ahwayp0021l0uze96s0va8"},{"post_id":"cj2ahwawz000pl0uz65if4vtk","tag_id":"cj2ahwaya001pl0uzviktvrev","_id":"cj2ahwayw0027l0uz26g6klzf"},{"post_id":"cj2ahwax3000tl0uz2oe667bz","tag_id":"cj2ahwaya001pl0uzviktvrev","_id":"cj2ahwaz1002el0uzegpkaf12"},{"post_id":"cj2ahwaz0002dl0uzjd2kkaht","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwaz8002kl0uzu4lc6bvr"},{"post_id":"cj2ahwax7000vl0uz3mlz9i81","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwaza002nl0uzrt45f2vj"},{"post_id":"cj2ahwaz2002gl0uz4qgsvo1g","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwazd002sl0uzenmi356w"},{"post_id":"cj2ahwaz8002ll0uzhgnim7nc","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwazf002vl0uzybhcenwi"},{"post_id":"cj2ahwaxc000zl0uzqlms0lhj","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwazg002yl0uzcb2qco2g"},{"post_id":"cj2ahwaza002ol0uzauz8a45s","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwazj0031l0uznxdzdvk2"},{"post_id":"cj2ahwazd002tl0uzy7yje78b","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwazk0033l0uzj25ej1nc"},{"post_id":"cj2ahwaxd0011l0uzg605wre5","tag_id":"cj2ahwazd002rl0uzv0a964k6","_id":"cj2ahwazm0037l0uz7uzuq7rn"},{"post_id":"cj2ahwaxg0015l0uzzzgos3w2","tag_id":"cj2ahwazd002rl0uzv0a964k6","_id":"cj2ahwazn0039l0uzn524t7b3"},{"post_id":"cj2ahwaxk0017l0uz614e30wt","tag_id":"cj2ahwazd002rl0uzv0a964k6","_id":"cj2ahwazq003dl0uz9tywh2zl"},{"post_id":"cj2ahwaxr0019l0uz0dn45cuq","tag_id":"cj2ahwazp003bl0uz2kzp0q93","_id":"cj2ahwazx003il0uzu0s0a6e7"},{"post_id":"cj2ahwaxx001el0uzelfsqdyc","tag_id":"cj2ahwazw003gl0uz568rvldo","_id":"cj2ahwazy003ml0uz9sylzpng"},{"post_id":"cj2ahway0001gl0uzyl5omp23","tag_id":"cj2ahwazw003gl0uz568rvldo","_id":"cj2ahwb01003pl0uzhrlbs6r7"},{"post_id":"cj2ahway6001ll0uzrfp79t93","tag_id":"cj2ahwazd002rl0uzv0a964k6","_id":"cj2ahwb03003rl0uzrcc6knq5"},{"post_id":"cj2ahway8001nl0uzxoam4v7p","tag_id":"cj2ahwazw003gl0uz568rvldo","_id":"cj2ahwb04003tl0uzjqm1x2q8"},{"post_id":"cj2ahwayf001ul0uzdjnl4tta","tag_id":"cj2ahwb03003sl0uzxqmy9hzf","_id":"cj2ahwb05003vl0uz7jb8bnwi"},{"post_id":"cj2ahwayl001zl0uz55ki5axf","tag_id":"cj2ahwb04003ul0uz7sfni58f","_id":"cj2ahwb07003xl0uz9pd1qfk4"},{"post_id":"cj2ahwayq0022l0uzb4rgr4bu","tag_id":"cj2ahwb04003ul0uz7sfni58f","_id":"cj2ahwb09003zl0uz253gajr9"},{"post_id":"cj2ahwayu0026l0uzqozkx7k9","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwb0a0041l0uz6469a68l"},{"post_id":"cj2ahwayx0029l0uzua2yp4ry","tag_id":"cj2ahwayz002bl0uz7k4j0fyw","_id":"cj2ahwb0a0042l0uzu0etne3q"}],"Tag":[{"name":"JDBC","_id":"cj2ahwavx0005l0uz60vd48im"},{"name":"JQuery","_id":"cj2ahwawc000al0uzma8yq82g"},{"name":"BootStrap","_id":"cj2ahwawn000gl0uzprptzt1l"},{"name":"Linux","_id":"cj2ahwaxb000yl0uz5wl1212n"},{"name":"MongoDB","_id":"cj2ahwaxg0014l0uzz01twbwn"},{"name":"SQL","_id":"cj2ahwaya001pl0uzviktvrev"},{"name":"scrapy","_id":"cj2ahwayz002bl0uz7k4j0fyw"},{"name":"swing","_id":"cj2ahwazd002rl0uzv0a964k6"},{"name":"java基础","_id":"cj2ahwazp003bl0uz2kzp0q93"},{"name":"java图形与文本处理","_id":"cj2ahwazw003gl0uz568rvldo"},{"name":"matplotlib","_id":"cj2ahwb03003sl0uzxqmy9hzf"},{"name":"python爬虫","_id":"cj2ahwb04003ul0uz7sfni58f"}]}}