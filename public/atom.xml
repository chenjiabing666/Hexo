<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>觅</title>
  <subtitle>爱生活爱编码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2017-05-01T00:16:55.183Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB干货篇之更新数据</title>
    <link href="http://chenjiabing666.github.io/2017/05/01/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
    <id>http://chenjiabing666.github.io/2017/05/01/MongoDB干货篇之更新数据/</id>
    <published>2017-05-01T00:13:32.000Z</published>
    <updated>2017-05-01T00:16:55.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB干货篇之数据更新"><a href="#MongoDB干货篇之数据更新" class="headerlink" title="MongoDB干货篇之数据更新"></a>MongoDB干货篇之数据更新</h1><h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><blockquote>
<ul>
<li><p><code>update(&lt;query&gt;,&lt;update&gt;,&lt;upsert&gt;,&lt;multi&gt;)</code>,其中<code>&lt;query&gt;</code>表示筛选的条件，<code>&lt;update&gt;</code>是要更新的数据</p>
</li>
<li><p><code>updateMany()</code>   更新所有匹配到的数据</p>
</li>
</ul>
</blockquote>
<h3 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h3><blockquote>
<p><code>upsert</code>是一个布尔类型的数据，如果为<code>true</code>时，当根据<code>query</code>条件没有找到匹配的数据时，就表示插入此条数据，如果为<code>false</code>就表示不插入数据</p>
<p>下面将会在一个空的集合中更新数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//就会插入此条数据，因为没有找到匹配的信息</span></div><div class="line">db.user.update(&#123;<span class="string">'name'</span>:<span class="string">'chenjiabing'</span>,<span class="string">'age'</span>:<span class="number">22</span>,<span class="string">'sex'</span>:<span class="string">"Man"</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;&#125;,&#123;<span class="string">'upsert'</span>:<span class="literal">true</span>&#125;);  </div><div class="line"></div><div class="line">db.user.update(&#123;<span class="string">'name'</span>:<span class="string">'chenjiabing'</span>,<span class="string">'age'</span>:<span class="number">22</span>,<span class="string">'sex'</span>:<span class="string">"Man"</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;&#125;,<span class="literal">true</span>);   <span class="comment">//和上面的语句等价</span></div><div class="line"></div><div class="line"><span class="comment">//输出  db.user.find()</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59067b70856d5893a687655f"</span>), <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"name"</span> : <span class="string">"chenjiabing"</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"hobby"</span> : <span class="string">"read"</span> &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h3><blockquote>
<p><em>如果这个参数为<code>true</code>,就把按条件查出来多条记录全部更新。默认为<code>false</code>,如果为<code>true</code>的话和<code>updateMany()</code>一样的效果</em></p>
<p>下面将会更新所有匹配到的数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'hobby'</span>:<span class="string">'code'</span>&#125;&#125;,&#123;<span class="string">'multi'</span>:<span class="literal">true</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="字段更新操作符-Field-Update-Operators"><a href="#字段更新操作符-Field-Update-Operators" class="headerlink" title="字段更新操作符 Field Update Operators"></a>字段更新操作符 Field Update Operators</h2><h3 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h3><blockquote>
<p><code>$set</code>用来指定一个键的值。如果这个键不存在，则创建它。<strong>注意这里的更新默认是只更新第一条匹配到的数据，如果第一条匹配的数据已经满足修改后的条件，那么将不会执行下面匹配的信息</strong></p>
<ul>
<li>下面我们将会添加一条信息在数据库中</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.insert(&#123;<span class="string">"name"</span>:<span class="string">'jack'</span>,<span class="string">"age"</span>:<span class="number">22</span>,<span class="string">"sex"</span>:<span class="string">'Man'</span>,<span class="string">'school'</span>:&#123;<span class="string">'name'</span>:<span class="string">'jsnu'</span>,<span class="string">'city'</span>:<span class="string">'xuzhou'</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>运行下面的代码，将该用户的兴趣设置为“读书”并添加至文档中(此时文档中<code>hobby</code>键是不存在，该条文档就会创建它)</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>下面将会修改用户的<strong>年龄</strong></p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="string">'name'</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>下面用<code>$set</code>修改<strong>数据类型</strong>，将<code>sex</code>设置为<code>1</code></p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="string">'name'</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'sex'</span>:<span class="number">1</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>下面用<code>$set</code>修改<strong>内嵌文档</strong>，必须指定文档的名字和键值</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">'school.name'</span>:<span class="string">'shida'</span>,<span class="string">'school.city'</span>:<span class="string">'beijing'</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<h3 id="unset"><a href="#unset" class="headerlink" title="$unset"></a>$unset</h3><blockquote>
<p>从文档中<strong>移除</strong>指定的键</p>
<p>下面将要删除上面插入的<code>hobby</code>键</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$unset</span>:&#123;<span class="string">'hobby'</span>:<span class="number">1</span>&#125;&#125;)   <span class="comment">//这里的值是任意给的，随便什么值</span></div></pre></td></tr></table></figure>
<h3 id="inc"><a href="#inc" class="headerlink" title="$inc"></a>$inc</h3><blockquote>
<p><code>$inc</code>修改器用来<strong>增加</strong>已有键的值，<strong>或者在键不存在时创建一个键</strong><code>$inc</code>就是专门来增加（和减少）数字的。<code>$inc</code>只能用于<strong>整数、长整数或双精度浮点数</strong>。要是用在其他类型的数据上就会导致操作失败</p>
<p>例如毎次有人访问该博文，该条博文的浏览数就加<code>1</code>，用键<code>pageViews</code>保存浏览数信息。这个键值上面没有定义过，所以会自动创建一个</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$inc</span>:&#123;<span class="string">'pageViews'</span>:<span class="number">1</span>&#125;&#125;);    <span class="comment">//起初没有就会自动创建一个键</span></div></pre></td></tr></table></figure>
<blockquote>
<p>下面演示增加和减少</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$inc</span>:&#123;<span class="string">'pageViews'</span>:<span class="number">100</span>&#125;&#125;)  ;  <span class="comment">//这里是在上面的基础上加上100，此时变成了101</span></div><div class="line"></div><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">$inc</span>:&#123;<span class="string">"pageViews"</span>:<span class="number">-100</span>&#125;&#125;) ;   <span class="comment">//这里是在上面的基础上减去100,此时还是变成了1</span></div></pre></td></tr></table></figure>
<h3 id="rename"><a href="#rename" class="headerlink" title="$rename"></a>$rename</h3><blockquote>
<p><strong>语法：</strong><code>{$rename: { &lt;old name1&gt;: &lt;new name1&gt;, &lt;old name2&gt;: &lt;new name2&gt;, ... } }</code></p>
<p><code>$rename</code>操作符可以<strong>重命名字段名称</strong>，新的字段名称不能和文档中现有的字段名相同。</p>
<p>下面重新插入一条数据，并且改变这条数据的键的名称</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.user.insert(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>,<span class="string">'age'</span>:<span class="number">22</span>,<span class="string">'sex'</span>:<span class="string">'Man'</span>,<span class="string">'school'</span>:&#123;<span class="string">'name'</span>:<span class="string">'jsnu'</span>,<span class="string">'city'</span>:<span class="string">'beijing'</span>&#125;&#125;);</div><div class="line"></div><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$rename</span>:&#123;<span class="string">'age'</span>:<span class="string">'Age'</span>&#125;&#125;)   <span class="comment">//重命名age为Age</span></div></pre></td></tr></table></figure>
<blockquote>
<p>下面将要演示怎样改变内嵌文档的键的名称，<strong>注意一定要带上文档的名字</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$rename</span>:&#123;<span class="string">'school.name'</span>:<span class="string">'school.Name'</span>,<span class="string">'school.city'</span>:<span class="string">'school.City'</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果重命名的字段字和集合中原有的字段名字相同的话就会<strong>覆盖</strong>原有的字段名称，那么就会造成数据的丢失</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="string">'$rename'</span>:&#123;<span class="string">'sex'</span>,<span class="string">'age'</span>&#125;&#125;);  <span class="comment">//这里sex变成age和原来的age相同，那么原来的age就会丢失</span></div><div class="line"></div><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;);  </div><div class="line"></div><div class="line"><span class="comment">//输出，可以看到原来的age没有了,变成了覆盖之后的</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"590674ce30b9f88dd43d7ee4"</span>), <span class="string">"name"</span> : <span class="string">"chenjiabing"</span>, <span class="string">"age"</span> : <span class="string">"Man"</span>, <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"jsnu"</span>, <span class="string">"city"</span> : <span class="string">"beijing"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>如果指定的字段不存在，那么将不会更新，对原来的字段没有影响</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$rename</span>:&#123;<span class="attr">value</span>:<span class="string">'name'</span>&#125;&#125;);  <span class="comment">//将不会有任何的改变，因为value这个字段根本不存在</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong><code>$rename</code>操作符也可以将子文档中键值移到其他子文档中</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$rename</span>:&#123;<span class="string">'school.name'</span>:<span class="string">'contact.name'</span>&#125;&#125;);<span class="comment">// 这里将会将school.name这个字段的值移到contact.name之中，如果contact不存在，那么就会创建一个</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"590674ce30b9f88dd43d7ee4"</span>), <span class="string">"name"</span> : <span class="string">"chenjiabing"</span>, <span class="string">"age"</span> : <span class="string">"Man"</span>, <span class="string">"school"</span> : &#123; <span class="string">"city"</span> : <span class="string">"beijing"</span> &#125;, <span class="string">"contact"</span> : &#123; <span class="string">"name"</span> : <span class="string">"jsnu"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="数组更新操作符-Array-Update-Operators"><a href="#数组更新操作符-Array-Update-Operators" class="headerlink" title="数组更新操作符 Array Update Operators"></a>数组更新操作符 Array Update Operators</h2><blockquote>
<p><em>只能用在键值为数组的键上的数组操作。</em></p>
</blockquote>
<h3 id="query"><a href="#query" class="headerlink" title="$ (query)"></a>$ (query)</h3><blockquote>
<p><strong>语法</strong>:<code>{ &quot;&lt;array&gt;.$&quot; : value }</code></p>
<p>当对数组字段进行更新时，且没有明确指定的元素在数组中的位置，我们使用定位操作符<code>$</code>标识一个元素，数字都是以<code>0</code>开始的。</p>
<p><strong>注意:</strong></p>
<ul>
<li>定位操作符(“$”)作为第一个匹配查询条件的元素的占位符，也就是在数组中的索引值。</li>
<li>数组字段必须出现查询文档中。</li>
</ul>
<p>向集合中插入两条数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.students.insert(&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"grades"</span> : [ <span class="number">78</span>, <span class="number">88</span>, <span class="number">88</span> ] &#125;);</div><div class="line">db.students.insert(&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"grades"</span> : [ <span class="number">88</span>, <span class="number">90</span>, <span class="number">92</span> ] &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>执行下列操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询匹配的文档中，数组有2个88，只更新第一个匹配的元素，也就是"grades.1"</span></div><div class="line">db.students.update( &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">grades</span>: <span class="number">88</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="string">"grades.$"</span> : <span class="number">82</span> &#125; &#125;) ;</div><div class="line"><span class="comment">//查询文档中没有出现grades字段，查询报错</span></div><div class="line">db.students.update( &#123; <span class="attr">_id</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="string">"grades.$"</span> : <span class="number">82</span> &#125; &#125; );</div></pre></td></tr></table></figure>
<h3 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h3><blockquote>
<p><em>如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。</em></p>
<p>下面我们将使用<code>$push</code>对该文档添加一条评论信息。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//将会创建一个comments数组，因为一开始这个数组没有存在</span></div><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$push</span>:&#123;<span class="attr">comments</span>:&#123;<span class="string">'name'</span>:<span class="string">'jack'</span>,<span class="string">'content'</span>:<span class="string">'hello thanks'</span>&#125;&#125;&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//继续添加一条，在comments的末尾进行添加，此时comments变成两条数据了</span></div><div class="line">db.user.update(&#123;<span class="attr">name</span>:<span class="string">'chenjiabing'</span>&#125;,&#123;<span class="attr">$push</span>:&#123;<span class="attr">comments</span>:&#123;<span class="string">'name'</span>:<span class="string">'john'</span>,<span class="string">'content'</span>:<span class="string">'hello'</span>&#125;&#125;&#125;)</div></pre></td></tr></table></figure>
<h3 id="pull"><a href="#pull" class="headerlink" title="$pull"></a>$pull</h3><blockquote>
<p><strong>语法</strong>：<code>db.collection.update( { field: &lt;query&gt; }, { $pull: { field: &lt;query&gt; } } );</code></p>
<p><em><code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>操作符移除指定字段值为数组，且匹配<code>$pull</code>语句声明的查询条件的所有元素。</em></p>
<p>执行如下操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//插入一条文档</span></div><div class="line">db.profiles.insert(&#123; <span class="attr">votes</span>: [ <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span> ] &#125;);</div><div class="line"><span class="comment">//移除数组中所有元素7</span></div><div class="line">db.profiles.update( &#123; <span class="attr">votes</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">$pull</span>: &#123; <span class="attr">votes</span>: <span class="number">7</span> &#125; &#125; );</div><div class="line"><span class="comment">//移除数组中所有大于6的元素</span></div><div class="line">db.profiles.update( &#123; <span class="attr">votes</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">$pull</span>: &#123; <span class="attr">votes</span>: &#123; <span class="attr">$gt</span>: <span class="number">6</span> &#125; &#125; &#125; );</div><div class="line"></div><div class="line"><span class="comment">//Result</span></div><div class="line">&#123; <span class="attr">votes</span>: [ <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span> ] &#125;</div><div class="line"></div><div class="line">&#123; <span class="attr">votes</span>: [ <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB干货篇之数据更新&quot;&gt;&lt;a href=&quot;#MongoDB干货篇之数据更新&quot; class=&quot;headerlink&quot; title=&quot;MongoDB干货篇之数据更新&quot;&gt;&lt;/a&gt;MongoDB干货篇之数据更新&lt;/h1&gt;&lt;h2 id=&quot;常用的函数&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="MongoDB" scheme="http://chenjiabing666.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB干货篇之查询数据</title>
    <link href="http://chenjiabing666.github.io/2017/04/30/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
    <id>http://chenjiabing666.github.io/2017/04/30/MongoDB干货篇之查询数据/</id>
    <published>2017-04-30T06:53:00.000Z</published>
    <updated>2017-04-30T21:10:23.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB干货篇之查询"><a href="#MongoDB干货篇之查询" class="headerlink" title="MongoDB干货篇之查询"></a>MongoDB干货篇之查询</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p><strong>在开始之前我们应该先准备数据方便演示，这里我插入的了几条数据，数据如下：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">db.user.insertMany(</div><div class="line">[&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'jack'</span>,</div><div class="line"><span class="attr">age</span>:<span class="number">22</span>,</div><div class="line"><span class="attr">sex</span>:<span class="string">'Man'</span>,</div><div class="line"><span class="attr">tags</span>:[<span class="string">'python'</span>,<span class="string">'c++'</span>,<span class="string">'c'</span>],</div><div class="line"><span class="attr">grades</span>:[<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>],</div><div class="line"><span class="attr">school</span>:&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'shida'</span>,</div><div class="line"><span class="attr">city</span>:<span class="string">'xuzhou'</span></div><div class="line">&#125;</div><div class="line">&#125;,&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'jhon'</span>,</div><div class="line"><span class="attr">age</span>:<span class="number">33</span>,</div><div class="line"><span class="attr">sex</span>:<span class="literal">null</span>,</div><div class="line"><span class="attr">tags</span>:[<span class="string">'python'</span>,<span class="string">'java'</span>],</div><div class="line"><span class="attr">grades</span>:[<span class="number">66</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">88</span>],</div><div class="line"><span class="attr">school</span>:&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'kuangda'</span>,</div><div class="line"><span class="attr">city</span>:<span class="string">'xuzhou'</span></div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'xiaoming'</span>,</div><div class="line"><span class="attr">age</span>:<span class="number">33</span>,</div><div class="line"><span class="attr">tags</span>:[<span class="string">'python'</span>,<span class="string">'java'</span>],</div><div class="line"><span class="attr">grades</span>:[<span class="number">66</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">88</span>],</div><div class="line"><span class="attr">school</span>:&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'kuangda'</span>,</div><div class="line"><span class="attr">city</span>:<span class="string">'xuzhou'</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">)</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><blockquote>
<p><strong>其中<code>query</code>表示查找的条件，相当于<code>mysql</code>中<code>where</code>子句,<code>projection</code>列出你想要查找的数据，格式为<code>db.collection.find(find(&lt;query filter&gt;, &lt;projection&gt;))</code></strong></p>
</blockquote>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><blockquote>
<ul>
<li><p><strong>下面不带参数的查找，将会查找出所有的结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    db.find().pretty();</div><div class="line">    </div><div class="line">    //输出结果</div><div class="line">    </div><div class="line">    </div><div class="line">&#123;                                                     </div><div class="line">        &quot;_id&quot; : ObjectId(&quot;59056f81299fe049404b2899&quot;), </div><div class="line">        &quot;name&quot; : &quot;jack&quot;,                              </div><div class="line">        &quot;age&quot; : 22,                                   </div><div class="line">        &quot;tags&quot; : [                                    </div><div class="line">                &quot;python&quot;,                             </div><div class="line">                &quot;c++&quot;,                                </div><div class="line">                &quot;c&quot;                                   </div><div class="line">        ],                                            </div><div class="line">        &quot;grades&quot; : [                                  </div><div class="line">                22,                                   </div><div class="line">                33,                                   </div><div class="line">                44,                                   </div><div class="line">                55                                    </div><div class="line">        ],                                            </div><div class="line">        &quot;school&quot; : &#123;                                  </div><div class="line">                &quot;name&quot; : &quot;shida&quot;,                     </div><div class="line">                &quot;city&quot; : &quot;xuzhou&quot;                     </div><div class="line">        &#125;                                             </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>下面找出满足<code>name</code>为<code>jack</code>的数据，并且只输出<code>name</code>,<code>age</code>,这里的<code>_id</code>是默认输出的，如果不想输出将将它设置为<code>0</code>，想要输出那个字段将它设置为1</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">1</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59056f81299fe049404b2899"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span> &#125;</div><div class="line"></div><div class="line"></div><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">1</span>，_id:<span class="number">0</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line">&#123;<span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>**注意这里的一个 <code>projection</code>不能 同时 指定包括和排除字段，除了排除 <code>_id</code>字段。 在 显式包括 字段的映射中，<code>_id</code> 字段是唯一一个您可以 显式排除 的。</p>
</blockquote>
</blockquote>
<h2 id="查询内嵌文档"><a href="#查询内嵌文档" class="headerlink" title="查询内嵌文档"></a>查询内嵌文档</h2><blockquote>
<p><strong>上述例子中插入的<code>school</code>数据就表示内嵌文档</strong></p>
</blockquote>
<h3 id="完全匹配查询"><a href="#完全匹配查询" class="headerlink" title="完全匹配查询"></a>完全匹配查询</h3><blockquote>
<p><strong>完全匹配查询表示<code>school</code>中的查询数组必须和插入的数组完全一样，顺序都必须一样才能查找出来</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">school</span>:&#123;<span class="attr">name</span>:<span class="string">'shida'</span>,<span class="attr">city</span>:<span class="string">'xuzhou'</span>&#125;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59056f81299fe049404b2899"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//下面是指定输出的字段，这里的school.name表示只输出school文档中name字段，必须加引号</span></div><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">school</span>:&#123;<span class="attr">name</span>:<span class="string">'shida'</span>,<span class="attr">city</span>:<span class="string">'xuzhou'</span>&#125;&#125;,&#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">1</span>,<span class="string">'school.name'</span>:<span class="number">1</span>&#125;);</div><div class="line"><span class="comment">//输出结果</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59056f81299fe049404b2899"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="键值对查询"><a href="#键值对查询" class="headerlink" title="键值对查询"></a>键值对查询</h3><blockquote>
<p><strong>可以通过键值对查询，不用考虑顺序，比如<code>&#39;school.name&#39;:&#39;shida&#39;</code>，表示查询学校名字为<code>shida</code>的数据，这里的引号是必须要的</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="string">'school.name'</span>:<span class="string">'shida'</span>&#125;,&#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">school</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59056f81299fe049404b2899"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="查询操作符"><a href="#查询操作符" class="headerlink" title="查询操作符"></a>查询操作符</h2><blockquote>
<p><strong>下面我们将配合查询操作符来执行复杂的查询操作，比如元素查询、 逻辑查询 、比较查询操作。我们使用下面的比较操作符<code>&quot;$gt&quot;</code> 、<code>&quot;$gte&quot;</code>、 <code>&quot;$lt&quot;</code>、 <code>&quot;$lte&quot;</code>(分别对应<code>&quot;&gt;&quot;</code>、 <code>&quot;&gt;=&quot;</code> 、<code>&quot;&lt;&quot;</code> 、<code>&quot;&lt;=&quot;</code>)</strong></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p><strong>下面查询年龄在<code>20-30</code>之间的信息</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;</div><div class="line"><span class="attr">age</span>:&#123;<span class="attr">$gt</span>:<span class="number">20</span>,<span class="attr">$lt</span>:<span class="number">30</span>&#125;  </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59056f81299fe049404b2899"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="ne"><a href="#ne" class="headerlink" title="$ne"></a>$ne</h3><blockquote>
<p><strong><code>$ne</code>表示不相等，例如查询年龄不等于<code>22</code>岁的信息</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">age</span>:&#123;<span class="attr">$ne</span>:<span class="number">22</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59057c16f551d8c9003d31e0"</span>), <span class="string">"name"</span> : <span class="string">"jhon"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><blockquote>
<p><strong><code>$slice</code>操作符控制查询返回的数组中元素的个数。此操作符根据参数<code>{ field: value }</code> 指定键名和键值选择出文档集合，并且该文档集合中指定<code>array</code>键将返回从指定数量的元素。如果<code>count</code>的值大于数组中元素的数量，该查询返回数组中的所有元素的。</strong></p>
<p><strong>语法：<code>db.collection.find( { field: value }, { array: {$slice: count }})</code>;</strong></p>
<ul>
<li><strong>下面将查询<code>grades</code>中的前两个数</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">grades</span>:&#123;<span class="attr">$slice</span>:<span class="number">2</span>&#125;,<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">1</span>,<span class="string">'school.name'</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//输出，可以看出这里的grades只输出了前面两个</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59057c16f551d8c9003d31df"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>下面将输出后3个数据</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jhon'</span>&#125;,&#123;<span class="attr">grades</span>:&#123;<span class="attr">$slice</span>:<span class="number">-3</span>&#125;,<span class="attr">name</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59057c16f551d8c9003d31e0"</span>), <span class="string">"name"</span> : <span class="string">"jhon"</span>, <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ] &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>下面介绍指定一个数组作为参数。数组参数使用<code>[ skip , limit ]</code> 格式，其中第一个值表示在数组中跳过的项目数,第二个值表示返回的项目数。</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;,&#123;<span class="attr">grades</span>:&#123;<span class="attr">$slice</span>:[<span class="number">2</span>,<span class="number">2</span>]&#125;,<span class="attr">name</span>:<span class="number">1</span>&#125;);  <span class="comment">//这里将会跳过前面的两个，直接得到后面的两个数据</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59057c16f551d8c9003d31df"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"grades"</span> : [ <span class="number">44</span>, <span class="number">55</span> ] &#125;</div></pre></td></tr></table></figure>
<h3 id="exists"><a href="#exists" class="headerlink" title="$exists"></a>$exists</h3><blockquote>
<p><strong>如果<code>$exists</code>的值为<code>true</code>,选择存在该字段的文档,若值为<code>false</code>则选择不包含该字段的文档</strong></p>
<p><strong>下面将会查询不存在sex这一项的信息</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">sex</span>:&#123;<span class="attr">$exists</span>:<span class="literal">false</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cd"</span>), <span class="string">"name"</span> : <span class="string">"xiaoming"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line"></div><div class="line"></div><div class="line">db.user.find(&#123;<span class="attr">sex</span>:&#123;<span class="attr">$exists</span>:<span class="literal">true</span>&#125;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cc"</span>), <span class="string">"name"</span> : <span class="string">"jhon"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"sex"</span> : <span class="literal">null</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h3><blockquote>
<p><strong>执行逻辑<code>OR</code>运算,指定一个至少包含两个表达式的数组，选择出至少满足数组中一条表达式的文档。</strong><br><strong>语法：<code>{ $or: [ { &lt;expression1&gt; }, { &lt;expression2&gt; }, ... , { &lt;expressionN&gt; } ] }</code></strong></p>
<ul>
<li><strong>下面将要查找<code>age</code>等于<code>22</code>或者<code>age</code>等于<code>33</code>的值</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">$or</span>:[&#123;<span class="attr">age</span>:<span class="number">22</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">33</span>&#125;]&#125;)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cc"</span>), <span class="string">"name"</span> : <span class="string">"jhon"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"sex"</span> : <span class="literal">null</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cd"</span>), <span class="string">"name"</span> : <span class="string">"xiaoming"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>下面将会查找出年龄为22或者33并且姓名为<code>jack</code>的人的信息</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">$or</span>:[&#123;<span class="attr">age</span>:<span class="number">33</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">22</span>&#125;]&#125;)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="and"><a href="#and" class="headerlink" title="$and"></a>$and</h3><blockquote>
<p><strong>指定一个至少包含两个表达式的数组，选择出满足该数组中所有表达式的文档。<code>$and</code>操作符使用短路操作，若第一个表达式的值为“<code>false</code>”,余下的表达式将不会执行。</strong><br><strong>语法：<code>{ $and: [ { &lt;expression1&gt; }, { &lt;expression2&gt; } , ... , { &lt;expressionN&gt; } ] }</code></strong></p>
<ul>
<li><strong>下面将会查找年龄在<code>20-30</code>之间的信息，对于下面使用逗号分隔符的表达式列表，<code>MongoDB</code>会提供一个隐式的<code>$and</code>操作：</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">$and</span>:[&#123;<span class="attr">age</span>:&#123;<span class="attr">$gt</span>:<span class="number">20</span>&#125;&#125;,&#123;<span class="attr">age</span>:&#123;<span class="attr">$lt</span>:<span class="number">30</span>&#125;&#125;]&#125;)</div><div class="line"><span class="comment">//上述语句相当于db.user.find(&#123;age:&#123;$gt:20&#125;,age:&#123;$lt:30&#125;&#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="in"><a href="#in" class="headerlink" title="$in"></a>$in</h3><blockquote>
<p><strong>匹配键值等于指定数组中任意值的文档。类似<code>sql</code>中<code>in</code>，只要匹配一个<code>value</code>就会输出</strong><br><strong>语法：<code>{ field: { $in: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] } }</code></strong></p>
<ul>
<li><strong>下面将会查找grades中存在22,33之间的任意一个数的信息</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> db.user.find(&#123;<span class="attr">grades</span>:&#123;<span class="attr">$in</span>:[<span class="number">22</span>,<span class="number">33</span>]&#125;&#125;)</div><div class="line"> </div><div class="line"> <span class="comment">//输出</span></div><div class="line"> </div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cc"</span>), <span class="string">"name"</span> : <span class="string">"jhon"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"sex"</span> : <span class="literal">null</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cd"</span>), <span class="string">"name"</span> : <span class="string">"xiaoming"</span>, <span class="string">"age"</span> : <span class="number">33</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"java"</span> ], <span class="string">"grades"</span> : [ <span class="number">66</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">88</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"kuangda"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="nin"><a href="#nin" class="headerlink" title="$nin"></a>$nin</h3><blockquote>
<p><strong>　匹配键不存在或者键值不等于指定数组的任意值的文档。类似<code>sql</code>中<code>not in</code>(SQL中字段不存在使用会有语法错误).</strong></p>
<ul>
<li><strong>查询出<code>grades</code>中不存在100或者44的文档</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">grades</span>:&#123;<span class="attr">$nin</span>:[<span class="number">100</span>,<span class="number">44</span>]&#125;&#125;)</div></pre></td></tr></table></figure>
<h3 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h3><blockquote>
<p><strong>执行逻辑<code>NOT</code>运算，选择出不能匹配表达式的文档 ，包括没有指定键的文档。<code>$not</code>操作符不能独立使用，必须跟其他操作一起使用</strong></p>
<p><strong>语法:{ field: { $not: { <operator-expression> } } }</operator-expression></strong></p>
<ul>
<li><strong>查询年龄不大于30的信息</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.user.find(&#123;<span class="attr">age</span>:&#123;<span class="attr">$not</span>:&#123;<span class="attr">$gt</span>:<span class="number">30</span>&#125;&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59058460fe58ed1089f2a5cb"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : <span class="number">22</span>, <span class="string">"sex"</span> : <span class="string">"Man"</span>, <span class="string">"tags"</span> : [ <span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span> ], <span class="string">"grades"</span> : [ <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> ], <span class="string">"school"</span> : &#123; <span class="string">"name"</span> : <span class="string">"shida"</span>, <span class="string">"city"</span> : <span class="string">"xuzhou"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="迭代游标的查询"><a href="#迭代游标的查询" class="headerlink" title="迭代游标的查询"></a>迭代游标的查询</h2><blockquote>
<p><strong>学过高级语言的朋友都知道迭代的问题，像java,下面使用迭代的方法查询</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cursor=db.usr.find();</div><div class="line"></div><div class="line"><span class="comment">//这里使用迭代输出所有的数据</span></div><div class="line"><span class="keyword">while</span>(cursor.hasNext())    <span class="comment">//这里的hasNext()是判断是否下一个中还有可迭代的值，如果没有返回false</span></div><div class="line">&#123;</div><div class="line">    printjson(cursor.next());     <span class="comment">//这里的cursor.next是迭代的输出，printjson是代替print(tojson()) </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">print cursor.count()    <span class="comment">//输出其中有多少个数据</span></div><div class="line"></div><div class="line">cursor.forEach(printjson);   <span class="comment">//forEach输出</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="built_in">document</span>=cursor.toArray();     <span class="comment">//将迭代对象转换成数组</span></div><div class="line"></div><div class="line">print <span class="built_in">document</span>[<span class="number">0</span>];       <span class="comment">//以数组的形式输出</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB干货篇之查询&quot;&gt;&lt;a href=&quot;#MongoDB干货篇之查询&quot; class=&quot;headerlink&quot; title=&quot;MongoDB干货篇之查询&quot;&gt;&lt;/a&gt;MongoDB干货篇之查询&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="MongoDB" scheme="http://chenjiabing666.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫之BeautifulSoup</title>
    <link href="http://chenjiabing666.github.io/2017/04/29/python%E7%88%AC%E8%99%AB%E4%B9%8BBeautifulSoup/"/>
    <id>http://chenjiabing666.github.io/2017/04/29/python爬虫之BeautifulSoup/</id>
    <published>2017-04-29T02:06:56.000Z</published>
    <updated>2017-04-29T02:37:47.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python爬虫之BeautifulSoup"><a href="#python爬虫之BeautifulSoup" class="headerlink" title="python爬虫之BeautifulSoup"></a>python爬虫之BeautifulSoup</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><strong><code>Beautiful Soup</code>提供一些简单的、<code>python</code>式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。<code>Beautiful Soup</code>自动将输入文档转换为<code>Unicode</code>编码，输出文档转换为<code>utf-8</code>编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，<code>Beautiful Soup</code>就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。<br><code>Beautiful Soup</code>已成为和<code>lxml</code>、<code>html6lib</code>一样出色的<code>python</code>解释器，为用户灵活地提供不同的解析策略或强劲的速度。</strong></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li><strong><code>pip install BeautifulSoup4</code></strong></li>
<li><strong><code>easy_install BeautifulSoup4</code></strong></li>
</ul>
</blockquote>
<h2 id="创建BeautifulSoup对象"><a href="#创建BeautifulSoup对象" class="headerlink" title="创建BeautifulSoup对象"></a>创建BeautifulSoup对象</h2><blockquote>
<ul>
<li><p>首先应该导入<code>BeautifulSoup</code>类库 <code>from bs4 import BeautifulSoup</code></p>
</li>
<li><p><strong>下面开始创建对像，在开始之前为了方便演示，先创建一个<code>html</code>文本，如下：</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">"""</span></div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</div><div class="line">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</div><div class="line">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</div><div class="line">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</div><div class="line">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</div><div class="line">and they lived at the bottom of a well.&lt;/p&gt;</div><div class="line">&lt;p class="story"&gt;...&lt;/p&gt;</div><div class="line">"""</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>创建对象：<code>soup=BeautifulSoup(html,&#39;lxml&#39;)</code>,这里的lxml是解析的类库，目前来说个人觉得最好的解析器了，一直在用这个，安装方法：<code>pip install lxml</code></strong></li>
</ul>
</blockquote>
<h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><blockquote>
<p><strong><code>Tag</code>就是<code>html</code>中的一个标签，用<code>BeautifulSoup</code>就能解析出来<code>Tag</code>的具体内容，具体的格式为<code>soup.name</code>,其中<code>name</code>是<code>html</code>下的标签，具体实例如下：</strong></p>
<ul>
<li><p><strong><code>print soup.title</code>输出<code>title</code>标签下的内容，包括此标签，这个将会输出<code>&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</code></strong></p>
</li>
<li><p><strong><code>print soup.head</code></strong></p>
</li>
</ul>
</blockquote>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote>
<p><strong>这里的格式只能获取这些标签的第一个，后面会讲到获取多个标签的方法。其中对于<code>Tag</code>有两个重要的属性<code>name</code>和<code>attrs</code>,分别表示名字和属性,介绍如下：</strong></p>
<blockquote>
<ul>
<li><p><strong><code>name</code>:对于<code>Tag</code>，它的<code>name</code>就是其本身，如<code>soup.p.name</code>就是<code>p</code></strong></p>
</li>
<li><p><strong><code>attrs</code>是一个字典类型的，对应的是属性-值，如<code>print soup.p.attrs</code>,输出的就是<code>{&#39;class&#39;: [&#39;title&#39;], &#39;name&#39;: &#39;dromouse&#39;}</code>,当然你也可以得到具体的值，如<code>print soup.p.attrs[&#39;class&#39;]</code>,输出的就是<code>[title]</code>是一个列表的类型，因为一个属性可能对应多个值,当然你也可以通过get方法得到属性的，如：<code>print soup.p.get(&#39;class&#39;)</code>。还可以直接使用<code>print soup.p[&#39;class&#39;]</code></strong></p>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><blockquote>
<p><strong><code>get</code>方法用于得到标签下的属性值，注意这是一个重要的方法，在许多场合都能用到，比如你要得到<code>&lt;img src=&quot;#&quot;&gt;</code>标签下的图像<code>url</code>,那么就可以用<code>soup.img.get(&#39;src&#39;)</code>,具体解析如下：</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.p.get(<span class="string">"class"</span>)   <span class="comment">#得到第一个p标签下的src属性</span></div></pre></td></tr></table></figure>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote>
<p><strong>得到标签下的文本内容，只有在此标签下没有子标签，或者只有一个子标签的情况下才能返回其中的内容，否则返回的是<code>None</code>具体实例如下：</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.p.string <span class="comment">#在上面的一段文本中p标签没有子标签，因此能够正确返回文本的内容</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> soup.html.string  <span class="comment">#这里得到的就是None,因为这里的html中有很多的子标签</span></div></pre></td></tr></table></figure>
<h3 id="get-text"><a href="#get-text" class="headerlink" title="get_text()"></a>get_text()</h3><blockquote>
<p><strong>可以获得一个标签中的所有文本内容，包括子孙节点的内容，这是最常用的方法</strong></p>
</blockquote>
<h2 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h2><h3 id="find-all-name-attrs-recursive-text-kwargs"><a href="#find-all-name-attrs-recursive-text-kwargs" class="headerlink" title="find_all( name , attrs , recursive , text , **kwargs )"></a>find_all( name , attrs , recursive , text , **kwargs )</h3><blockquote>
<p><strong><code>find_all</code>是用于搜索节点中所有符合过滤条件的节点</strong></p>
<p>1.<strong><code>name</code>参数：是<code>Tag</code>的名字，如<code>p</code>,<code>div</code>,<code>title</code> …..</strong></p>
<blockquote>
<ul>
<li><p><strong><code>soup.find_all(&quot;p&quot;)</code>  查找所有的<code>p</code>标签，返回的是<code>[&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;]</code>，可以通过遍历获取每一个节点，如下：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps=soup.find_all(<span class="string">"p"</span>)</div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ps:</div><div class="line">    <span class="keyword">print</span> p.get(<span class="string">'class'</span>)   <span class="comment">#得到p标签下的class属性</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>传入正则表达式：<code>soup.find_all(re.compile(r&#39;^b&#39;)</code>查找以<code>b</code>开头的所有标签，这里的<code>body</code>和<code>b</code>标签都会被查到</strong></p>
</li>
<li><p><strong>传入类列表：如果传入列表参数,<code>BeautifulSoup</code>会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有<code>&lt;a&gt;</code>标签和<code>&lt;b&gt;</code>标签</strong></p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">soup.find_all([<span class="string">"a"</span>, <span class="string">"b"</span>])</div></pre></td></tr></table></figure>
<blockquote>
<p>2.<code>KeyWords</code>参数，就是传入属性和对应的属性值，或者一些其他的表达式</p>
<blockquote>
<ul>
<li><strong><code>soup.find_all(id=&#39;link2&#39;)</code>,这个将会搜索找到所有的<code>id</code>属性为<code>link2</code>的标签。传入正则表达式<code>soup.find_all(href=re.compile(&quot;elsie&quot;))</code>,这个将会查找所有<code>href</code>属性满足正则表达式的标签</strong></li>
<li><p><strong>传入多个值：<code>soup.find_all(id=&#39;link2&#39;,class_=&#39;title&#39;)</code> ,这个将会查找到同时满足这两个属性的标签，这里的<code>class</code>必须用<code>class_</code>传入参数，因为<code>class</code>是<code>python</code>中的关键词</strong></p>
</li>
<li><p><strong>有些属性不能通过以上方法直接搜索，比如<code>html5</code>中的<code>data-*</code>属性，不过可以通过<code>attrs</code>参数指定一个字典参数来搜索包含特殊属性的标签，如下：</strong></p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># [&lt;div data-foo="value"&gt;foo!&lt;/div&gt;]</span></div><div class="line">data_soup.find_all(attrs=&#123;<span class="string">"data-foo"</span>: <span class="string">"value"</span>&#125;)   <span class="comment">#注意这里的atts不仅能够搜索特殊属性，亦可以搜索普通属性</span></div><div class="line"></div><div class="line">soup.find_all(<span class="string">"p"</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'title'</span>,<span class="string">'id'</span>:<span class="string">'value'</span>&#125;)  <span class="comment">#相当与soup.find_all('p',class_='title',id='value')</span></div></pre></td></tr></table></figure>
<blockquote>
<p>3.<code>text</code>参数：通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, <code>True</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">soup.find_all(text=<span class="string">"Elsie"</span>)</div><div class="line"><span class="comment"># [u'Elsie']</span></div><div class="line"> </div><div class="line">soup.find_all(text=[<span class="string">"Tillie"</span>, <span class="string">"Elsie"</span>, <span class="string">"Lacie"</span>])</div><div class="line"><span class="comment"># [u'Elsie', u'Lacie', u'Tillie']</span></div><div class="line"> </div><div class="line">soup.find_all(text=re.compile(<span class="string">"Dormouse"</span>))</div><div class="line">[<span class="string">u"The Dormouse's story"</span>, <span class="string">u"The Dormouse's story"</span>]</div></pre></td></tr></table></figure></p>
<p>4.<strong><code>limit</code>参数：<code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</strong></p>
<blockquote>
<p><strong>文档树中有<code>3</code>个<code>tag</code>符合搜索条件,但结果只返回了<code>2</code>个,因为我们限制了返回数量,代码如下：</strong></p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">soup.find_all(<span class="string">"a"</span>, limit=<span class="number">2</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>5.<strong><code>recursive</code> 参数:调用<code>tag</code>的 <code>find_all()</code> 方法时,<code>BeautifulSoup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code> </strong></p>
</blockquote>
<h3 id="find-name-attrs-recursive-text-kwargs"><a href="#find-name-attrs-recursive-text-kwargs" class="headerlink" title="find( name , attrs , recursive , text , **kwargs )"></a>find( name , attrs , recursive , text , **kwargs )</h3><blockquote>
<p><strong>它与 <code>find_all()</code> 方法唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果,就是直接返回第一匹配到的元素，不是列表，不用遍历，如<code>soup.find(&quot;p&quot;).get(&quot;class&quot;)</code></strong></p>
</blockquote>
<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><blockquote>
<p><strong>我们在写 <code>CSS</code> 时，标签名不加任何修饰，类名前加点，<code>id</code>名前加<code>#</code>，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <code>soup.select()</code>，返回类型是 <code>list</code></strong></p>
</blockquote>
<h3 id="通过标签名查找"><a href="#通过标签名查找" class="headerlink" title="通过标签名查找"></a>通过标签名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'title'</span>) </div><div class="line"><span class="comment">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'a'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<h3 id="通过类名查找"><a href="#通过类名查找" class="headerlink" title="通过类名查找"></a>通过类名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'.sister'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<h3 id="通过id名查找"><a href="#通过id名查找" class="headerlink" title="通过id名查找"></a>通过id名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'#link1'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<h3 id="组合查找"><a href="#组合查找" class="headerlink" title="组合查找"></a>组合查找</h3><blockquote>
<p><strong>学过<code>css</code>的都知道<code>css</code>选择器，如<code>p #link1</code>是查找<code>p</code>标签下的<code>id</code>属性为<code>link1</code>的标签</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'p #link1'</span>)    <span class="comment">#查找p标签中内容为id属性为link1的标签</span></div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> soup.select(<span class="string">"head &gt; title"</span>)   <span class="comment">#直接查找子标签</span></div><div class="line"><span class="comment">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div></pre></td></tr></table></figure>
<h3 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h3><blockquote>
<p><strong>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'a[class="sister"]'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格,代码如下：</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'p a[href="http://example.com/elsie"]'</span>)</div><div class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>以上的 <code>select</code> 方法返回的结果都是列表形式，可以遍历形式输出，然后用 <code>get_text()</code> 方法来获取它的内容</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line"><span class="keyword">print</span> type(soup.select(<span class="string">'title'</span>))</div><div class="line"><span class="keyword">print</span> soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</div><div class="line"></div><div class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">'title'</span>):</div><div class="line">    <span class="keyword">print</span> title.get_text()</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">中文文档</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python爬虫之BeautifulSoup&quot;&gt;&lt;a href=&quot;#python爬虫之BeautifulSoup&quot; class=&quot;headerlink&quot; title=&quot;python爬虫之BeautifulSoup&quot;&gt;&lt;/a&gt;python爬虫之BeautifulSo
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB干货篇之安装</title>
    <link href="http://chenjiabing666.github.io/2017/04/28/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
    <id>http://chenjiabing666.github.io/2017/04/28/MongoDB干货篇之安装/</id>
    <published>2017-04-28T02:53:32.000Z</published>
    <updated>2017-04-28T02:59:18.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB干货篇之安装"><a href="#MongoDB干货篇之安装" class="headerlink" title="MongoDB干货篇之安装"></a>MongoDB干货篇之安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li><p><strong><a href="http://www.mongodb.org/downloads" target="_blank" rel="external">下载地址</a></strong></p>
</li>
<li><p><strong>点击安装,选择自定义，后选择安装路径，不过最好安装在根目录下(<code>C盘</code>)，然后点解<code>next</code>,这里我安装的路径是<code>C:\MongoDB</code></strong></p>
</li>
<li><p><strong>创建文件夹:在<code>C:\MongoDB</code>下创建一个文件夹<code>data</code>,然后在<code>data</code>文件夹下创建<code>db</code>,<code>log</code>两个子文件夹,在<code>log</code>文件下创建一个<code>MongoDB.log</code>文档，总得来说创建了<code>C:\MongoDB\data</code>,<code>C:\MongoDB\data\db</code>,<code>C:\MongoDB\data\log</code>,<code>C:\MongoDB\data\log\MongoDB.log</code></strong></p>
</li>
<li><p><strong>在<code>C:\MongoDB\bin</code>文件夹下运行<code>cmd.exe</code>进入<code>dos</code>命令，执行以下命令：</strong></p>
<blockquote>
<ul>
<li><strong>然后在<code>cmd</code>下输入<code>mongod -dbpath &quot;C:\MongoDB\data\db</code>,将会看到一些信息，说明已经安装成功了</strong></li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><blockquote>
<ul>
<li><p><strong>在<code>C:\MongoDB\bin</code>文件夹下运行<code>cmd.exe</code>,输入<code>mongo</code>或者<code>mongo.exe</code>,将会出现连接的信息，说明已经连接成功了</strong></p>
</li>
<li><p><strong>然后在另外一个<code>cmd.exe</code>在<code>bin</code>目录下运行<code>mongo</code>可以看到已经连接上<code>MongoDB</code>了，注意上面打开的终端不能关闭，否则不能成功连接，这是比较麻烦的，需要每次连接都要启动，下面我们需要把它安装为<code>windows</code>服务</strong></p>
</li>
</ul>
</blockquote>
<h2 id="安装程windows服务"><a href="#安装程windows服务" class="headerlink" title="安装程windows服务"></a>安装程windows服务</h2><p><strong>注意在管理员的<code>cmd.exe</code>中运行以下命令，否则在<code>MongoDB.log</code>文件里出现遭到拒绝</strong></p>
<blockquote>
<ul>
<li><p><strong>运行<code>cmd</code>，进入<code>bin</code>目录，执行以下命令:</strong></p>
<blockquote>
<ul>
<li><strong><code>mongod --dbpath &quot;C:\MongoDB\data\db&quot; --logpath &quot;D:\MongoDB\data\log\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;</code>,这里的服务名为<code>MongoDB</code>，可以在<code>C:\MongoDB\data\log\MongoDB.log</code>文件里查看相关信息，如果出现遭到拒绝就是没有在管理员的权限下执行命令</strong></li>
</ul>
</blockquote>
</li>
<li><p><strong>接下来就是启动服务了，现在在<code>cmd.exe</code>中运行<code>NET START MongoDB</code>，如果看到服务成功启动，那么就成功了，但是我在启动的时候出现<code>48</code>错误，下面将会做出解决方法：</strong></p>
<blockquote>
<ul>
<li><strong>先删除服务:<code>mongod --dbpath &quot;C:\MongoDB\data\db&quot; --logpath &quot;C:\MongoDB\data\log\MongoDB.log&quot; --remove --serviceName &quot;MongoDB&quot;</code></strong></li>
<li><strong>删除<code>MongoDB</code>目录下的<code>mongod.lock</code></strong></li>
<li><strong>然后就是重新安装了,执行以下命令：</strong><blockquote>
<ul>
<li><strong><code>mongod --logpath &quot;C:\MongoDB\data\log\MongoDB.log&quot; --logappend --dbpath &quot;C:\Mongodb\data&quot; --directoryperdb --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install</code></strong></li>
</ul>
</blockquote>
</li>
<li><strong>接下来重新启动服务，<code>net start MongoDB</code>,可以看到成功启动了</strong></li>
</ul>
</blockquote>
</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB干货篇之安装&quot;&gt;&lt;a href=&quot;#MongoDB干货篇之安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB干货篇之安装&quot;&gt;&lt;/a&gt;MongoDB干货篇之安装&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cla
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="MongoDB" scheme="http://chenjiabing666.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JDBC干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/27/JDBC%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/04/27/JDBC干货篇一/</id>
    <published>2017-04-27T15:03:51.000Z</published>
    <updated>2017-04-27T15:04:31.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC干货篇一"><a href="#JDBC干货篇一" class="headerlink" title="JDBC干货篇一"></a>JDBC干货篇一</h1><h2 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h2><blockquote>
<ul>
<li><p><strong><code>JDBC</code>的全称是<code>Java Database Connectivity</code>，即<code>Java</code>数据库连接，它是一种可以执行<code>SQL</code>语句的<code>Java API</code>。程序可通过<code>JDBC API</code>连接到关系数据库，并使用结构化查询语言（<code>SQL</code>，数据库标准的查询语言）来完成对数据库的查询、更新</strong></p>
</li>
<li><p><strong>与其他数据库编程环境相比，<code>JDBC</code>为数据库开发提供了标准的<code>API</code>，使用<code>JDBC</code>开发的数据库应用可以跨平台运行，而且还可以跨数据库（如果全部使用标准的<code>SQL</code>语句）。也就是说如果使用JDBC开发一个数据库应用，则该应用既可以在Windows操作系统上运行，又可以在<code>Unix</code>等其他操作系统上运行，既可以使用<code>MySQ</code>L数据库，又可以使用<code>Oracle</code>等其他的数据库，应用程序不需要做任何的修改</strong></p>
</li>
</ul>
</blockquote>
<h2 id="加载数据库驱动"><a href="#加载数据库驱动" class="headerlink" title="加载数据库驱动"></a>加载数据库驱动</h2><blockquote>
<ul>
<li><strong><code>Class.forName(classDriver)</code>其中<code>classDrive</code>r就是数据库驱动类对应的字符串,下面给出加载<code>mysql</code>,<code>oracle</code>数据库的例子：</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);   <span class="comment">//mysql</span></div><div class="line">Class.forName(<span class="string">"oracle.jabc.driver.OracleDriver"</span>);    <span class="comment">//oracle</span></div></pre></td></tr></table></figure>
<h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p><strong>获得数据库连接的方法为<code>DriverManager.getConnection()</code>,其中有不同的参数，也对应不同的方法，下面将会详细介绍</strong></p>
<blockquote>
<ul>
<li><p><strong><code>DriverManager.getConnection(String url)</code></strong>   </p>
</li>
<li><p><strong><code>DriverManager.getConnection(String url, Properties prop)</code>  这里的Properties是一个属性集，详情请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Properties.html" target="_blank" rel="external">文档</a></strong></p>
</li>
<li><p><strong><code>DriverManager.getConnection(String url,String user,String password)</code>  这里的<code>url</code>是<code>jdbc:mysql://localhost:3306/java_demo</code>，其中<code>java_demo</code>表示你自己创建的数据库名字，<code>urser</code>表示当前数据库的登录的用户名，<code>password</code>表示密码</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第二种方法</span></div><div class="line">String url=<span class="string">"jdbc:mysql://localhost:3306/java_demo"</span>;  <span class="comment">//这是连接的url</span></div><div class="line">String user=<span class="string">"root"</span>;</div><div class="line">String password=<span class="string">"root"</span>;   </div><div class="line">Properties properties=<span class="keyword">new</span> Properties();   <span class="comment">//创建属性集</span></div><div class="line">properties.setProperty(<span class="string">"password"</span>, password);   <span class="comment">//向起中添加属性,很想python中的字典</span></div><div class="line">properties.setProperty(<span class="string">"user"</span>,user);   </div><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);   <span class="comment">//加载数据库驱动</span></div><div class="line">Connection conn=DriverManager.getConnection(url,properties);   <span class="comment">//连接数据库</span></div><div class="line"></div><div class="line"><span class="comment">//第三种方法</span></div><div class="line"></div><div class="line">Connection conn=DriverManager.getConnection(url,user,password);   <span class="comment">//连接数据库</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：以上只是一些例子，并不是完整的代码，其中并没有处理异常，还应该注意的是要关闭connection</strong></p>
</blockquote>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><blockquote>
<p><strong>查询数据有两种方法，分别为静态查询和动态查询，静态查询使用的<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html" target="_blank" rel="external">Statement</a>，动态查询使用的<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/index.html?index-filesindex-16.html" target="_blank" rel="external">PrepareStatement</a>,下面详细介绍这两种查询方法</strong></p>
</blockquote>
<h3 id="静态查询"><a href="#静态查询" class="headerlink" title="静态查询"></a>静态查询</h3><blockquote>
<p><strong>使用的是<code>Statement</code>,其中常用的函数如下：</strong></p>
<ul>
<li><p><strong><code>boolean execute(String SQL)</code>  如果<code>ResultSet</code>对象可以被检索，则返回的布尔值为<code>true</code>，否则返回 <code>false</code> 。当你需要使用真正的动态 <code>SQL</code> 时，可以使用这个方法来执行 <code>SQL DDL</code> 语句</strong></p>
</li>
<li><p><strong><code>int executeUpdate(String SQL)</code>  返回执行 <code>SQL</code> 语句影响的行的数目。使用该方法来执行 <code>SQL</code> 语句，是希望得到一些受影响的行的数目，例如，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句</strong></p>
</li>
<li><p><strong><code>ResultSet executeQuery(String SQL)</code>: 返回一个 <code>ResultSet</code> 对象。当你希望得到一个结果集时使用该方法，就像你使用一个 <code>SELECT</code> 语句。</strong></p>
</li>
<li><p><strong><code>close()</code>关闭<code>statement</code>对象，这个是必须有的，为了程序的安全，必须在结束之前关闭</strong></p>
</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    Statement stmt = <span class="keyword">null</span>;   <span class="comment">//申请对象</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">   stmt = connection.createStatement( );   <span class="comment">//通过Connection对象创建statement对象</span></div><div class="line">   </div><div class="line">   String sql_1=<span class="string">"select * from course;"</span>;</div><div class="line">   String sql_2=<span class="string">"select * from course where id=2;"</span>;</div><div class="line">   </div><div class="line">   ResultSet res_1=stm.executeQuery(sql_1);   <span class="comment">//执行查询语句，返回的是一个结果集合，上面已经说明了</span></div><div class="line">   ResultSet res_2=stm.executeQuery(sql_1);</div><div class="line">   </div><div class="line">   <span class="keyword">while</span>(res_1.next())</div><div class="line">   &#123;</div><div class="line">   System.out.println(res_1.getInt(<span class="number">1</span>)+<span class="string">"---"</span>+res_1.getString(<span class="number">2</span>));   <span class="comment">//分别查询第一列和第二列的值，通过列数查询</span></div><div class="line">   System.out.println(res_1.getInt(<span class="string">"id"</span>)+<span class="string">"---"</span>+res_1.getString(<span class="string">"name"</span>));   <span class="comment">//通过列名查询</span></div><div class="line">   </div><div class="line">   &#125;</div><div class="line">  </div><div class="line">   &#125;</div><div class="line"><span class="keyword">catch</span> (SQLException e) &#123;    <span class="comment">//捕捉异常</span></div><div class="line">   . . .</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        connection.close();    <span class="comment">//关闭连接</span></div><div class="line">    &#125;</div><div class="line">   <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</div><div class="line">   &#123;</div><div class="line">       stmt.close();  <span class="comment">//关闭</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：<code>ResultSet</code>常用的方法如下：注意下面的方法会发生<code>SQLException</code>异常</strong></p>
<ul>
<li><p><strong><code>public void beforeFirst()</code> 将光标移动到第一行之前。</strong></p>
</li>
<li><p><strong><code>public void afterLast()</code>  将光标移动到最后一行之后。</strong></p>
</li>
<li><p><strong><code>public boolean first()</code>  将光标移动到第一行。从第一行的数据开始读取</strong></p>
</li>
<li><p><strong><code>public void last()</code> 将光标移动到最后一行。</strong></p>
</li>
<li><p><strong><code>public boolean absolute(int row)</code> 将光标移动到指定的第<code>row</code>行。</strong></p>
</li>
<li><p><strong><code>public boolean previous()</code> 将光标移动到上一行，如果超过结果集的范围则返回<code>false</code>。</strong></p>
</li>
<li><p><strong><code>public boolean next()</code> 将光标移动到下一行，如果是结果集的最后一行则返回 false。</strong></p>
</li>
<li><p><strong><code>public int getRow()</code> 返回当前光标指向的行数的值。</strong></p>
</li>
<li><p><strong><code>public void moveToInsertRow()</code> 将光标移动到结果集中指定的行，可以在数据库中插入新的一行。当前光标位置将被记住</strong></p>
</li>
<li><p><strong><code>public void moveToCurrentRow()</code> 如果光标处于插入行，则将光标返回到当前行，其他情况下，这个方法不执行任何操作</strong></p>
</li>
<li><p><strong><code>public int getInt(String columnName)</code>返回当前行中名为 <code>columnName</code>的列的 <code>int</code> 值。</strong></p>
</li>
<li><p><strong><code>public int getInt(int columnIndex)</code> 返回当前行中指定列的索引的<code>int</code>值。列索引从 <code>1</code> 开始，意味着行中的第一列是<code>1</code> ，第二列是 <code>2</code> ，以此类推。</strong></p>
</li>
<li><p><strong><code>getString(int columIndex)</code> 返回指定列的<code>String</code>类型的数据</strong></p>
</li>
<li><p><strong><code>getString(String columName)</code> 返回当前行中名为<code>columName</code>的<code>String</code>类型的值</strong></p>
</li>
</ul>
</blockquote>
<h3 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h3><blockquote>
<p><strong>动态查询使用的<code>PrepareStatement</code>这个类实现的，<code>PreparedStatement</code> 接口扩展了 <code>Statement</code> 接口，它让你用一个常用的 <code>Statement</code> 对象增加几个高级功能。这个 <code>statement</code> 对象可以提供灵活多变的动态参数</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">   String SQL = <span class="string">"select * from course where age=? and name=?"</span>;</div><div class="line">   pstmt = conn.prepareStatement(SQL);   <span class="comment">//创建对象</span></div><div class="line">   pstmt.setInt(<span class="number">1</span>,<span class="number">22</span>);   <span class="comment">//设置参数age的值 ，1表示第一个参数</span></div><div class="line">   pstmt.setString(<span class="number">2</span>,<span class="string">"chenjiabing"</span>);   <span class="comment">//设置name的值，其中2表示第二个参数</span></div><div class="line">   ResultSet res=pstmt.execteQuery();</div><div class="line">   <span class="keyword">while</span>(res.next)</div><div class="line">   &#123;</div><div class="line">       ....</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   . . .</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">   . . .</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        connection.close();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pstmt!=<span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">    pstmt.close();   <span class="comment">//关闭</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">   . . .</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明:<code>JDBC</code> 中所有的参数都被用<code>?</code>符号表示，这是已知的参数标记。在执行<code>SQL</code> 语句之前，你必须赋予每一个参数确切的数值。其中<code>PrepareStatement</code>的常用函数如下，当然<code>Statement</code>中的<code>execute</code> ,<code>executeQuery</code>,<code>executeUpdate</code>也可以使用</strong></p>
<ul>
<li><strong><code>void setInt(int parameterIndex, int x)</code> <code>parameterIndex</code>表示第几个<code>?</code>,这里的<code>int x</code>表示是<code>mysql</code>中定义的<code>int</code>类型的值</strong></li>
<li><strong><code>void setString(int parameterIndex,String x)</code>  为第<code>parameterIndex</code>个<code>String</code>类型的?赋予<code>x</code>的值</strong></li>
</ul>
</blockquote>
<h2 id="其他的操作"><a href="#其他的操作" class="headerlink" title="其他的操作"></a>其他的操作</h2><blockquote>
<p><strong>这里还有<code>delete</code>,<code>update</code>,<code>alter</code>等一系列的操作都是和上面的一样，就是把<code>sql</code>语句改变以下，如果使用的是静态的就要为<code>delete</code>,<code>update</code>,使用<code>Statement.execteUpdate(sql)</code>这个函数,当然要使用动态的也是<code>executeUpdate</code>函数</strong></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDBC干货篇一&quot;&gt;&lt;a href=&quot;#JDBC干货篇一&quot; class=&quot;headerlink&quot; title=&quot;JDBC干货篇一&quot;&gt;&lt;/a&gt;JDBC干货篇一&lt;/h1&gt;&lt;h2 id=&quot;JDBC基础&quot;&gt;&lt;a href=&quot;#JDBC基础&quot; class=&quot;headerli
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JDBC" scheme="http://chenjiabing666.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>BootStrap干货篇之表单</title>
    <link href="http://chenjiabing666.github.io/2017/04/26/BootStrap%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95/"/>
    <id>http://chenjiabing666.github.io/2017/04/26/BootStrap干货篇之表单/</id>
    <published>2017-04-26T15:11:37.000Z</published>
    <updated>2017-04-26T15:18:01.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BootStrap干货篇之表单"><a href="#BootStrap干货篇之表单" class="headerlink" title="BootStrap干货篇之表单"></a>BootStrap干货篇之表单</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote>
<p><strong>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%</code>;。 将 <code>label</code>元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</strong></p>
<p><strong>基本实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    &lt;div class=&apos;container&apos;&gt;</div><div class="line">    &lt;form&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label for=&quot;exampleInputEmail1&quot;&gt;Email address&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Email&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label for=&quot;exampleInputPassword1&quot;&gt;Password&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Password&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label for=&quot;exampleInputFile&quot;&gt;File input&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;file&quot; id=&quot;exampleInputFile&quot;&gt;</div><div class="line">    &lt;p class=&quot;help-block&quot;&gt;Example block-level help text here.&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class="line">    &lt;label&gt;</div><div class="line">      &lt;input type=&quot;checkbox&quot;&gt; Check me out</div><div class="line">    &lt;/label&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里的<code>form-control</code>是对所有的输入控件而言的,源码中将width设置为<code>100%</code>，表示会将这个输入控件占满一整行，<code>form-group</code>是用来对<code>label</code>和<code>input</code>更好的排版的，其中还有<code>form-group-sm</code>,<code>form-group-lg</code>，源码中分别利用这个对带有<code>form-control</code>的控件设置了不同的高度，具体看源码，不过正常情况下还是使用<code>form-group</code></strong></p>
</blockquote>
<h2 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h2><blockquote>
<p><strong>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为<code>inline-block</code>级别的控件。只适用于视口（<code>viewport</code>）至少在 <code>768px</code> 宽度时（视口宽度再小的话就会使表单折叠）从源码中可以看到对<code>form-inline</code>下的<code>form-group</code>,<code>form-control</code>,<code>form-control-static</code>,<code>input-group</code>,<code>radio</code>,<code>checkbox</code>都是用了<code>display:inline-block</code></strong></p>
<p><strong>注意：</strong></p>
<ul>
<li>在 <code>Bootstrap</code> 中，输入框和单选/多选框控件默认被设置为 <code>width</code>: <code>100%</code>; 宽度。在内联表单，我们将这些元素的宽度设置为<code>width: auto</code>;，因此，多个控件可以排列在同一行。根据你的布局需求，可能需要一些额外的定制化组件。</li>
<li><strong>一定要有<code>label</code>标签，如果不想要<code>label</code>标签可以设置<code>.sr-only</code>将其隐藏</strong>如果你没有为每个输入控件设置 <code>label</code> 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 <code>aria-label</code>、<code>aria-labelledby</code>或 <code>title</code> 属性。如果这些都不存在，屏幕阅读器可能会采取使用 <code>placeholder</code> 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。</li>
</ul>
<p><strong>实例:</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;form-inline&quot;&gt;    &lt;!--指定了form-inline类--&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">  &lt;!--label中的for标签是用于绑定组件的，如果指定了for标签，input中的id也和for标签的内容相同，那么就会当鼠标点击&lt;label&gt;内容时会自动聚焦在input上--&gt;</div><div class="line">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputEmail3&quot;&gt;Email address&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label class=&quot;sr-only&quot; for=&quot;exampleInputPassword3&quot;&gt;Password&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;checkbox&quot;&gt;</div><div class="line">    &lt;label&gt;</div><div class="line">      &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class="line">    &lt;/label&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="水平表单"><a href="#水平表单" class="headerlink" title="水平表单"></a>水平表单</h2><blockquote>
<p><strong>水平表单通过指定为form指定<code>form-horizontal</code>类来设定，其中可以使用<code>BootStrap</code>的栅栏系统设置水平间距，其中的<code>form-group</code>的<code>div</code>就表示一行了，相当于<code>&lt;div class=&#39;row&#39;&gt;&lt;/div&gt;</code>,因此只需要在<code>label</code>和<code>input</code>中指定列就行了，但是<code>input</code>标签不能直接使用，要在外面加上<code>div</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;   </div><div class="line">    &lt;label for=&quot;inputEmail3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class="line">      &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; placeholder=&quot;Email&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;   &lt;!--相当与&lt;div class=&apos;row&apos;&gt;&lt;/div&gt;--&gt;</div><div class="line">    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class="line">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; placeholder=&quot;Password&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class="line">      &lt;div class=&quot;checkbox&quot;&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          &lt;input type=&quot;checkbox&quot;&gt; Remember me</div><div class="line">        &lt;/label&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</div><div class="line">      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明上面的<code>label</code>标签中的<code>control-label</code>主要的作用是设置文字的对齐方式为左对齐，如果不加这个将会在右边出现很大的空白</strong></p>
</blockquote>
<h2 id="多选和单选框"><a href="#多选和单选框" class="headerlink" title="多选和单选框"></a>多选和单选框</h2><blockquote>
<p><strong>多选框<code>（checkbox）</code>用于选择列表中的一个或多个选项，而单选框（<code>radio</code>）用于从多个选项中只选择一个。其中提供的类有<code>checkbox</code>,<code>checkbox-inline</code>,<code>radio</code>,<code>radio-inline</code></strong></p>
</blockquote>
<h4 id="内联单选和多选框"><a href="#内联单选和多选框" class="headerlink" title="内联单选和多选框"></a>内联单选和多选框</h4><blockquote>
<p><strong>通过将 .checkbox-inline 或 .radio-inline 类应用到一系列的多选框（<code>checkbox</code>）或单选框（<code>radio</code>）控件上，可以使这些控件排列在一行。</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox1&quot; value=&quot;option1&quot;&gt; 1</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox2&quot; value=&quot;option2&quot;&gt; 2</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;label class=&quot;checkbox-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox3&quot; value=&quot;option3&quot;&gt; 3</div><div class="line">&lt;/label&gt;</div><div class="line"></div><div class="line">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio1&quot; value=&quot;option1&quot;&gt; 1</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio2&quot; value=&quot;option2&quot;&gt; 2</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;label class=&quot;radio-inline&quot;&gt;</div><div class="line">  &lt;input type=&quot;radio&quot; name=&quot;inlineRadioOptions&quot; id=&quot;inlineRadio3&quot; value=&quot;option3&quot;&gt; 3</div><div class="line">&lt;/label&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class="line">            &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;checkbox-inline&quot;&gt;</div><div class="line">        &lt;label for=&quot;sex&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;男&lt;/label&gt;</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="不带label文本的Checkbox-和-radio"><a href="#不带label文本的Checkbox-和-radio" class="headerlink" title="不带label文本的Checkbox 和 radio"></a>不带label文本的Checkbox 和 radio</h4><blockquote>
<p><strong>如果需要 <code>&lt;label&gt;</code> 内没有文字，输入框（<code>input</code>）正是你所期望的。 目前只适用于</strong>非内联<strong>的 <code>checkbox</code>和 <code>radio</code>。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 <code>label</code>（例如，使用 <code>aria-label</code>）。</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;checkbox&quot;&gt;</div><div class="line">  &lt;label&gt;</div><div class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;blankCheckbox&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class="line">  &lt;/label&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;radio&quot;&gt;</div><div class="line">  &lt;label&gt;</div><div class="line">    &lt;input type=&quot;radio&quot; name=&quot;blankRadio&quot; id=&quot;blankRadio1&quot; value=&quot;option1&quot; aria-label=&quot;...&quot;&gt;</div><div class="line">  &lt;/label&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="下拉列表（select）"><a href="#下拉列表（select）" class="headerlink" title="下拉列表（select）"></a>下拉列表（select）</h4><blockquote>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;select class=&quot;form-control&quot;&gt;</div><div class="line">  &lt;option&gt;1&lt;/option&gt;</div><div class="line">  &lt;option&gt;2&lt;/option&gt;</div><div class="line">  &lt;option&gt;3&lt;/option&gt;</div><div class="line">  &lt;option&gt;4&lt;/option&gt;</div><div class="line">  &lt;option&gt;5&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h2 id="静态控件"><a href="#静态控件" class="headerlink" title="静态控件"></a>静态控件</h2><blockquote>
<p><strong>如果需要在表单中将一行纯文本和 <code>label</code> 元素放置于同一行，为<code>&lt;p&gt;</code>标签设置为<code>form-control-static</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;form-horizontal&quot;&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</div><div class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class="line">      &lt;p class=&quot;form-control-static&quot;&gt;email@example.com&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label for=&quot;inputPassword&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</div><div class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</div><div class="line">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword&quot; placeholder=&quot;Password&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://v3.bootcss.com/css/#forms-controls-static" target="_blank" rel="external">中文官网</a></li>
<li><a href="http://www.shouce.ren/api/view/a/779" target="_blank" rel="external">文档手册</a></li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BootStrap干货篇之表单&quot;&gt;&lt;a href=&quot;#BootStrap干货篇之表单&quot; class=&quot;headerlink&quot; title=&quot;BootStrap干货篇之表单&quot;&gt;&lt;/a&gt;BootStrap干货篇之表单&lt;/h1&gt;&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="BootStrap学习" scheme="http://chenjiabing666.github.io/categories/BootStrap%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="BootStrap" scheme="http://chenjiabing666.github.io/tags/BootStrap/"/>
    
  </entry>
  
  <entry>
    <title>Scrapyd部署爬虫</title>
    <link href="http://chenjiabing666.github.io/2017/04/24/Scrapyd%E9%83%A8%E7%BD%B2%E7%88%AC%E8%99%AB/"/>
    <id>http://chenjiabing666.github.io/2017/04/24/Scrapyd部署爬虫/</id>
    <published>2017-04-24T02:58:07.000Z</published>
    <updated>2017-04-24T03:07:54.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapyd部署爬虫"><a href="#Scrapyd部署爬虫" class="headerlink" title="Scrapyd部署爬虫"></a>Scrapyd部署爬虫</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<ul>
<li><strong><code>安装scrapyd: pip install scrapyd</code></strong></li>
<li><strong>安装<code>scrapyd-client : pip install scrapyd-client</code></strong></li>
<li><strong><code>安装curl:[安装地址](http://ono60m7tl.bkt.clouddn.com/curl.exe)</code>,安装完成以后将所在目录配置到环境变量中</strong></li>
</ul>
</blockquote>
<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><blockquote>
<ul>
<li><p><strong>修改<code>scrapy</code>项目目录下的<code>scrapy.cfg</code>文件，修改如下</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[deploy:JD_Spider]    <span class="comment">#加上target   :name</span></div><div class="line">url = http://localhost:<span class="number">6800</span>/   <span class="comment">#将前面的#删除</span></div><div class="line">project = JD               <span class="comment">#project的名字，可以使用默认的，当然也可以改变</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>在任意目录下的打开终端，输入<code>scrapyd</code>,观察是否运行成功，运行成功的话，就可以打开<code>http://localhost:6800</code>看是否正常显示，如果正常显示则看到下面的这张图,这里的<code>JD</code>是部署之后才能看到的，现在是看不到的，所以没出现也不要担心：</strong></p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/scrayd.bmp" alt="scrapyd"></p>
<ul>
<li><p><strong>在项目的根目录下运行如下的命令：<code>python E:\python2.7\Scripts\scrapyd-deploy target -p project</code>,这里的E:\python2.7\Scripts\是你的python安装目录，Scripts是安装目录下的一个文件夹，注意前面一定要加上python,target是在前面scrapy.cfg中设置的deploy:JD_Spider，JD_Spider就是target,project 是JD,因此这个完整的命令是<code>python E:\python2.7\Scripts\scrapyd-deploy JD_Spider -p JD</code>,现在项目就部署到上面了，这下网页上就有<code>JD</code>了，详情请见上图</strong></p>
</li>
<li><p><strong>验证是否成功，你可以在网页上看有没有显示你的工程名字，另外在根目录下输入<code>python E:\python2.7\Scripts\scrapyd-deploy -l</code>就能列出你所有部署过的项目了</strong></p>
</li>
<li><p><strong>启动爬虫：<code>curl http://localhost:6800/schedule.json -d project=myproject -d spider=spider_name</code>,这里的<code>project</code>填入的是项目名，<code>spider_name</code>填入的是你的爬虫中定义的<code>name</code>,运行我的实例完整的代码为：<code>curl http://localhost:6800/schedule.json -d project=JD -d spider=spider</code>，这里将会显示如下信息：</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这里的jobid比较重要，下面会用到这个取消爬虫</span></div><div class="line">&#123;<span class="string">"status"</span>: <span class="string">"ok"</span>, <span class="string">"jobid"</span>: <span class="string">"3013f9d1283611e79a63acb57dec5d04"</span>, <span class="string">"node_name"</span>: <span class="string">"DESKTOP-L78TJQ7"</span>&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>取消爬虫：<code>curl http://localhost:6800/cancel.json -d project=myproject -d job=jobid</code>,<code>jobid</code>就是上面的提到过的，如果取消我的这个实例代码如：<code>curl http://localhost:6800/cancel.json -d project=JD -d job=3013f9d1283611e79a63acb57dec5d04</code>,那么它的状态就会变成如下：</strong></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"status"</span>: <span class="string">"ok"</span>, <span class="string">"prevstate"</span>: <span class="string">"running"</span>, <span class="string">"node_name"</span>: <span class="string">"DESKTOP-L78TJQ7"</span>&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p><strong>列出项目：<code>curl http://localhost:6800/listprojects.json</code>,下面将会出现你已经部署的项目</strong></p>
</li>
<li><p><strong>删除项目：<code>curl http://localhost:6800/delproject.json -d project=myproject</code></strong></p>
</li>
<li><p><strong>列出版本：<code>curl http://localhost:6800/listversions.json?project=myproject</code>,这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>
</li>
<li><p><strong>列出爬虫：<code>curl http://localhost:6800/listspiders.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在scrapy.cfg设置的</strong></p>
</li>
<li><p><strong>列出<code>job</code>:<code>curl http://localhost:6800/listjobs.json?project=myproject</code>这里的<code>project</code>是项目的名字，是在<code>scrapy.cfg</code>设置的</strong></p>
</li>
<li><p><strong>删除版本：<code>curl http://localhost:6800/delversion.json -d project=myproject -d version=r99</code>，这里的<code>version</code>是自己的项目版本号，在删除之前需要查看版本号</strong></p>
</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapyd部署爬虫&quot;&gt;&lt;a href=&quot;#Scrapyd部署爬虫&quot; class=&quot;headerlink&quot; title=&quot;Scrapyd部署爬虫&quot;&gt;&lt;/a&gt;Scrapyd部署爬虫&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy大战京东商城</title>
    <link href="http://chenjiabing666.github.io/2017/04/23/scrapy%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/"/>
    <id>http://chenjiabing666.github.io/2017/04/23/scrapy大战京东商城/</id>
    <published>2017-04-23T14:12:30.000Z</published>
    <updated>2017-04-23T14:16:59.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SCrapy爬虫大战京东商城"><a href="#SCrapy爬虫大战京东商城" class="headerlink" title="SCrapy爬虫大战京东商城"></a>SCrapy爬虫大战京东商城</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><strong>上一篇已经讲过怎样获取链接，怎样获得参数了，详情请看<a href="https://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/">python爬取京东商城普通篇</a></strong></p>
</blockquote>
<h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><blockquote>
<ul>
<li><strong>首先应该构造请求，这里使用<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spiders.html" target="_blank" rel="external">scrapy.Request</a>,这个方法默认调用的是<code>start_urls</code>构造请求，如果要改变默认的请求，那么必须重载该方法，这个方法的返回值必须是一个可迭代的对象，一般是用<code>yield</code>返回，代码如下：</strong></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">        page=i*<span class="number">2</span><span class="number">-1</span>    <span class="comment">#这里是构造请求url的page,表示奇数</span></div><div class="line">        url=self.start_url+str(page)</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url,meta=&#123;<span class="string">'search_page'</span>:page+<span class="number">1</span>&#125;,callback=self.parse_url)   <span class="comment">#这里使用meta想回调函数传入数据，回调函数使用response.meta['search-page']接受数据</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>下面就是解析网页了，从上面看出这里的解析回调函数是<code>parse_url</code>,因此在此函数中解析网页。这里还是和上面说的一样，这个<code>url</code>得到的仅仅是前一半的信息，如果想要得到后一半的信息还有再次请求，这里还有注意的就是一个技巧：一般先解析出一个数据的数组，不急着取出第一个数，先要用if语句判断，因为如果得到的是<code>[]</code>，那么直接取出<code>[0]</code>是会报错的，这只是一个避免报错的方法吧，代码如下:</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self,response)</span>:</span></div><div class="line">    <span class="keyword">if</span> response.status==<span class="number">200</span>:   <span class="comment">#判断是否请求成功</span></div><div class="line">        <span class="comment"># print response.url</span></div><div class="line">        pids = set()    <span class="comment">#这个集合用于过滤和保存得到的id,用于作为后面的ajax请求的url构成</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            all_goods = response.xpath(<span class="string">"//div[@id='J_goodsList']/ul/li"</span>)   <span class="comment">#首先得到所有衣服的整个框架，然后从中抽取每一个框架</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> goods <span class="keyword">in</span> all_goods:   <span class="comment">#从中解析每一个</span></div><div class="line">                <span class="comment"># scrapy.shell.inspect_response(response,self)   #这是一个调试的方法，这里会直接打开调试模式</span></div><div class="line">                items = JdSpiderItem()   <span class="comment">#定义要抓取的数据</span></div><div class="line">                img_url_src = goods.xpath(<span class="string">"div/div[1]/a/img/@src"</span>).extract()  <span class="comment"># 如果不存在就是一个空数组[]，因此不能在这里取[0]</span></div><div class="line">                img_url_delay = goods.xpath(</div><div class="line">                    <span class="string">"div/div[1]/a/img/@data-lazy-img"</span>).extract()  <span class="comment"># 这个是没有加载出来的图片，这里不能写上数组取第一个[0]</span></div><div class="line">                price = goods.xpath(<span class="string">"div/div[3]/strong/i/text()"</span>).extract()  <span class="comment">#价格</span></div><div class="line">                cloths_name = goods.xpath(<span class="string">"div/div[4]/a/em/text()"</span>).extract()</div><div class="line">                shop_id = goods.xpath(<span class="string">"div/div[7]/@ data-shopid"</span>).extract()</div><div class="line">                cloths_url = goods.xpath(<span class="string">"div/div[1]/a/@href"</span>).extract()</div><div class="line">                person_number = goods.xpath(<span class="string">"div/div[5]/strong/a/text()"</span>).extract()</div><div class="line">                pid = goods.xpath(<span class="string">"@data-pid"</span>).extract()</div><div class="line">                <span class="comment"># product_id=goods.xpath("@data-sku").extract()</span></div><div class="line">                <span class="keyword">if</span> pid:</div><div class="line">                    pids.add(pid[<span class="number">0</span>])</div><div class="line">                <span class="keyword">if</span> img_url_src:  <span class="comment"># 如果img_url_src存在</span></div><div class="line">                    <span class="keyword">print</span> img_url_src[<span class="number">0</span>]</div><div class="line">                    items[<span class="string">'img_url'</span>] = img_url_src[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> img_url_delay:  <span class="comment"># 如果到了没有加载完成的图片，就取这个url</span></div><div class="line">                    <span class="keyword">print</span> img_url_delay[<span class="number">0</span>]</div><div class="line">                    items[<span class="string">'img_url'</span>] = img_url_delay[<span class="number">0</span>]  <span class="comment"># 这里如果数组不是空的，就能写了</span></div><div class="line">                <span class="keyword">if</span> price:</div><div class="line">                    items[<span class="string">'price'</span>] = price[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> cloths_name:</div><div class="line">                    items[<span class="string">'cloths_name'</span>] = cloths_name[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> shop_id:</div><div class="line">                    items[<span class="string">'shop_id'</span>] = shop_id[<span class="number">0</span>]</div><div class="line">                    shop_url = <span class="string">"https://mall.jd.com/index-"</span> + str(shop_id[<span class="number">0</span>]) + <span class="string">".html"</span></div><div class="line">                    items[<span class="string">'shop_url'</span>] = shop_url</div><div class="line">                <span class="keyword">if</span> cloths_url:</div><div class="line">                    items[<span class="string">'cloths_url'</span>] = cloths_url[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> person_number:</div><div class="line">                    items[<span class="string">'person_number'</span>] = person_number[<span class="number">0</span>]</div><div class="line">                <span class="comment"># if product_id:</span></div><div class="line">                <span class="comment">#     print "************************************csdjkvjfskvnk***********************"</span></div><div class="line">                <span class="comment">#     print self.comments_url.format(str(product_id[0]),str(self.count))</span></div><div class="line">                <span class="comment">#     yield scrapy.Request(url=self.comments_url.format(str(product_id[0]),str(self.count)),callback=self.comments)</span></div><div class="line">                <span class="comment">#yield scrapy.Request写在这里就是每解析一个键裤子就会调用回调函数一次</span></div><div class="line">                <span class="keyword">yield</span> items</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">print</span> <span class="string">"********************************************ERROR**********************************************************************"</span></div><div class="line"></div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url=self.search_url.format(str(response.meta[<span class="string">'search_page'</span>]),<span class="string">","</span>.join(pids)),callback=self.next_half_parse)    <span class="comment">#再次请求，这里是请求ajax加载的数据，必须放在这里，因为只有等到得到所有的pid才能构成这个请求，回调函数用于下面的解析</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>从上面代码的最后可以看出最后就是解析<code>ajax</code>加载的网页了，这里调用的<code>next_half_parse</code>函数，和解析前面一个网页一样，这里需要的注意的是，如果前面定义的数据没有搜索完毕是不能使用<code>yield items</code>的，必须将items通过meta传入下一个回调函数继续完善后才能<code>yield items</code>,这里就不需要了，代码如下：</strong></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#分析异步加载的网页</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_half_parse</span><span class="params">(self,response)</span>:</span></div><div class="line">        <span class="keyword">if</span> response.status==<span class="number">200</span>:</div><div class="line">            <span class="keyword">print</span> response.url</div><div class="line">            items=JdSpiderItem()</div><div class="line">            <span class="comment">#scrapy.shell.inspect_response(response,self)    #y用来调试的</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                lis=response.xpath(<span class="string">"//li[@class='gl-item']"</span>)</div><div class="line">                <span class="keyword">for</span> li <span class="keyword">in</span> lis:</div><div class="line">                    cloths_url=li.xpath(<span class="string">"div/div[1]/a/@href"</span>).extract()</div><div class="line">                    img_url_1=li.xpath(<span class="string">"div/div[1]/a/img/@src"</span>).extract()</div><div class="line">                    img_url_2=li.xpath(<span class="string">"div/div[1]/a/img/@data-lazy-img"</span>).extract()</div><div class="line">                    cloths_name=li.xpath(<span class="string">"div/div[4]/a/em/text()"</span>).extract()</div><div class="line">                    price=li.xpath(<span class="string">"div/div[3]/strong/i/text()"</span>).extract()</div><div class="line">                    shop_id=li.xpath(<span class="string">"div/div[7]/@data-shopid"</span>).extract()</div><div class="line">                    person_number=li.xpath(<span class="string">"div/div[5]/strong/a/text()"</span>).extract()</div><div class="line">                    <span class="keyword">if</span> cloths_url:</div><div class="line">                        <span class="keyword">print</span> cloths_url[<span class="number">0</span>]</div><div class="line">                        items[<span class="string">'cloths_url'</span>]=cloths_url[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">if</span> img_url_1:</div><div class="line">                        <span class="keyword">print</span> img_url_1[<span class="number">0</span>]</div><div class="line">                        items[<span class="string">'img_url'</span>]=img_url_1</div><div class="line">                    <span class="keyword">if</span> img_url_2:</div><div class="line">                        <span class="keyword">print</span> img_url_2[<span class="number">0</span>]</div><div class="line">                        items[<span class="string">'img_url'</span>]=img_url_2[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">if</span> cloths_name:</div><div class="line">                        items[<span class="string">'cloths_name'</span>]=cloths_name[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">if</span> price:</div><div class="line">                        items[<span class="string">'price'</span>]=price[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">if</span> shop_id:</div><div class="line">                        items[<span class="string">'shop_id'</span>]=shop_id[<span class="number">0</span>]</div><div class="line">                        items[<span class="string">'shop_url'</span>]=<span class="string">"https://mall.jd.com/index-"</span> + str(shop_id[<span class="number">0</span>]) + <span class="string">".html"</span></div><div class="line">                    <span class="keyword">if</span> person_number:</div><div class="line">                        items[<span class="string">'person_number'</span>]=person_number[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">yield</span> items   <span class="comment">#又一次的生成，这里是完整的数据，因此可以yield items</span></div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                <span class="keyword">print</span> <span class="string">"**************************************************"</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>当然这里还用到了设置请求池，<code>mysql</code>存储，没有使用到<code>ip</code>代理，这个在我前面的博客中又讲到，这里就不再赘述了，想看源代码的朋友请<a href="https://github.com/chenjiabing666/JD_Scrapy_Spider" target="_blank" rel="external">点击这里</a></strong></li>
</ul>
</blockquote>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><blockquote>
<ul>
<li><p><strong>人们会抱怨为什么自己的爬虫在中途断开就要重头开始爬，为什么不能从断开那里开始爬呢，这里提供一个方法：在配置文件<code>settings.py</code>中加入<code>JOBDIR=file_name</code>,这里的<code>file_name</code>是一个文件的名字</strong></p>
</li>
<li><p><strong>设置下载延迟防止被<code>ban</code>:<code>DOWNLOAD_DELAY = 2</code>:设置每一次的间隔时间   <code>RANDOMIZE_DOWNLOAD_DELAY = True</code>:这个是随机设置延迟时间  在设置的时间的<code>0.5-1.5</code>倍之间，这样可以更有效的防止被ban,一般是配套使用的</strong></p>
</li>
<li><p><strong><code>ROBOTSTXT_OBEY = False</code> :这里是表示不遵循<code>robots.txt</code>文件，默认是<code>True</code>表示遵循，这里将之改成<code>False</code></strong></p>
</li>
<li><p><strong><code>CONCURRENT_REQUESTS</code> :设置最大请求数，这里默认的时<code>16</code>，我们可以根据自己电脑的配置改的大一点来加快请求的速度</strong></p>
</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SCrapy爬虫大战京东商城&quot;&gt;&lt;a href=&quot;#SCrapy爬虫大战京东商城&quot; class=&quot;headerlink&quot; title=&quot;SCrapy爬虫大战京东商城&quot;&gt;&lt;/a&gt;SCrapy爬虫大战京东商城&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot;
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫大战京东商城</title>
    <link href="http://chenjiabing666.github.io/2017/04/23/python%E7%88%AC%E8%99%AB%E5%A4%A7%E6%88%98%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E/"/>
    <id>http://chenjiabing666.github.io/2017/04/23/python爬虫大战京东商城/</id>
    <published>2017-04-23T10:34:48.000Z</published>
    <updated>2017-04-23T10:48:02.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python大规模爬取京东"><a href="#python大规模爬取京东" class="headerlink" title="python大规模爬取京东"></a>python大规模爬取京东</h1><h2 id="主要工具"><a href="#主要工具" class="headerlink" title="主要工具"></a>主要工具</h2><blockquote>
<ul>
<li><strong><code>scrapy</code></strong></li>
<li><strong><code>BeautifulSoup</code></strong></li>
<li><strong><code>requests</code></strong></li>
</ul>
</blockquote>
<h2 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h2><blockquote>
<ul>
<li><p><strong>打开京东首页，输入</strong>裤子<strong>将会看到页面跳转到了<a href="https://search.jd.com/Search?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;wq=%E8%A3%A4%E5%AD%90&amp;pvid=a424f5c84d7844aaa56d4d62286878be" target="_blank" rel="external">这里</a>，这就是我们要分析的起点</strong></p>
</li>
<li><p><strong>我们可以看到这个页面并不是完全的，当我们往下拉的时候将会看到图片在不停的加载，这就是<code>ajax</code>,但是当我们下拉到底的时候就会看到整个页面加载了60条裤子的信息，我们打开chrome的调试工具，查找页面元素时可以看到每条裤子的信息都在<code>&lt;li class=&#39;gl-item&#39;&gt;&lt;/li&gt;</code>这个标签中，如下图：</strong></p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jd1.bmp" alt="生成图"></p>
<ul>
<li><strong>接着我们打开网页源码就会发现其实网页源码只有前30条的数据，后面30条的数据找不到，因此这里就会想到ajax，一种异步加载的方式，于是我们就要开始抓包了，我们打开chrome按F12，点击上面的NetWork,然后点击XHR,这个比较容易好找,下面开始抓包，如下图：</strong></li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jd2.bmp" alt="抓包图"></p>
<ul>
<li><strong>从上面可以找到请求的<code>url</code>，发现有很长的一大段，我们试着去掉一些看看可不可以打开，简化之后的<code>url</code>=<a href="https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}" target="_blank" rel="external">https://search.jd.com/s_new.php?keyword=%E8%A3%A4%E5%AD%90&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;offset=3&amp;wq=%E8%A3%A4%E5%AD%90&amp;page={0}&amp;s=26&amp;scrolling=y&amp;pos=30&amp;show_items={1}</a></strong><br><strong>这里的<code>showitems</code>是裤子的<code>id</code>,<code>page</code>是翻页的，可以看出来我们只需要改动两处就可以打开不同的网页了，这里的<code>page</code>很好找，你会发现一个很好玩的事情，就是主网页的<code>page</code>是奇数，但是异步加载的网页中的<code>page</code>是偶数，因此这里只要填上偶数就可以了，但是填奇数也是可以访问的。这里的<code>show_items</code>就是<code>id</code>了，我们可以在页面的源码中找到，通过查找可以看到<code>id</code>在<code>li</code>标签的<code>data-pid</code>中，详情请看下图</strong></li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jd3.bmp" alt="id"></p>
<ul>
<li><strong>上面我们知道怎样找参数了，现在就可以撸代码了</strong></li>
</ul>
</blockquote>
<h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><blockquote>
<ul>
<li><p><strong>首先我们要获取网页的源码，这里我用的requests库，安装方法为<code>pip install requests</code>，代码如下:</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self)</span>:</span></div><div class="line">    res = requests.get(self.url, headers=self.headers)</div><div class="line">    html = res.text     </div><div class="line">    <span class="keyword">return</span> html    <span class="comment">#返回的源代码</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>根据上面的分析可以知道，第二步就是得到异步加载的url中的参数<code>show_items</code>,就是<code>li</code>标签中的<code>data-pid</code>,代码如下：</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pids</span><span class="params">(self)</span>:</span></div><div class="line">    html = self.get_html()</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)    <span class="comment">#创建BeautifulSoup对象</span></div><div class="line">    lis = soup.find_all(<span class="string">"li"</span>, class_=<span class="string">'gl-item'</span>)   <span class="comment">#查找li标签</span></div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</div><div class="line">        data_pid = li.get(<span class="string">"data-pid"</span>)      <span class="comment">#得到li标签下的data-pid</span></div><div class="line">        <span class="keyword">if</span> (data_pid):</div><div class="line">            self.pids.add(data_pid)    <span class="comment">#这里的self.pids是一个集合，用于过滤重复的</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>下面就是获取前30张图片的url了，也就是主网页上的图片，其中一个问题是img标签的属性并不是一样的，也就是源码中的<code>img</code>中不都是<code>src</code>属性，一开始已经加载出来的图片就是src属性，但是没有加载出来的图片是<code>data-lazy-img</code>，因此在解析页面的时候要加上讨论。代码如下：</strong></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_src_imgs_data</span><span class="params">(self)</span>:</span></div><div class="line">    html = self.get_html()</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    divs = soup.find_all(<span class="string">"div"</span>, class_=<span class="string">'p-img'</span>)  <span class="comment"># 图片</span></div><div class="line">    <span class="comment"># divs_prices = soup.find_all("div", class_='p-price')   #价格</span></div><div class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> divs:</div><div class="line">        img_1 = div.find(<span class="string">"img"</span>).get(<span class="string">'data-lazy-img'</span>)  <span class="comment"># 得到没有加载出来的url</span></div><div class="line">        img_2 = div.find(<span class="string">"img"</span>).get(<span class="string">"src"</span>)  <span class="comment"># 得到已经加载出来的url</span></div><div class="line">        <span class="keyword">if</span> img_1:</div><div class="line">            <span class="keyword">print</span> img_1</div><div class="line">            self.sql.save_img(img_1)</div><div class="line">            self.img_urls.add(img_1)</div><div class="line">        <span class="keyword">if</span> img_2:</div><div class="line">            <span class="keyword">print</span> img_2</div><div class="line">            self.sql.save_img(img_2)</div><div class="line">            self.img_urls.add(img_2)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>前三十张图片找到了，现在开始找后三十张图片了，当然是要请求那个异步加载的<code>url</code>，前面已经把需要的参数给找到了，下面就好办了，直接贴代码：</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_extend_imgs_data</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># self.search_urls=self.search_urls+','.join(self.pids)</span></div><div class="line">    self.search_urls = self.search_urls.format(str(self.search_page), <span class="string">','</span>.join(self.pids))  <span class="comment">#拼凑url,将获得的单数拼成url,其中show_items中的id是用','隔开的，因此要对集合中的每一个id分割，page就是偶数，这里直接用主网页的page加一就可以了</span></div><div class="line">    <span class="keyword">print</span> self.search_urls</div><div class="line">    html = requests.get(self.search_urls, headers=self.headers).text   <span class="comment">#请求</span></div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)   </div><div class="line">    div_search = soup.find_all(<span class="string">"div"</span>, class_=<span class="string">'p-img'</span>)   <span class="comment">#解析</span></div><div class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> div_search:  </div><div class="line">        img_3 = div.find(<span class="string">"img"</span>).get(<span class="string">'data-lazy-img'</span>)    <span class="comment">#这里可以看到分开查找img属性了</span></div><div class="line">        img_4 = div.find(<span class="string">"img"</span>).get(<span class="string">"src"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> img_3:    <span class="comment">#如果是data-lazy-img</span></div><div class="line">            <span class="keyword">print</span> img_3</div><div class="line">            self.sql.save_img(img_3)    <span class="comment">#存储到数据库</span></div><div class="line">            self.img_urls.add(img_3)      <span class="comment">#用集合去重</span></div><div class="line">        <span class="keyword">if</span> img_4:    <span class="comment">#如果是src属性</span></div><div class="line">            <span class="keyword">print</span> img_4</div><div class="line">            self.sql.save_img(img_4)     </div><div class="line">            self.img_urls.add(img_4)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>通过上面就可以爬取了，但是还是要考虑速度的问题，这里我用了多线程，直接每一页面开启一个线程，速度还是可以的，感觉这个速度还是可以的，几分钟解决问题，总共爬取了<code>100</code>个网页,这里的存储方式是<code>mysql</code>数据库存储的，要用发哦<code>MySQLdb</code>这个库，详情自己百度，当然也可以用mogodb但是还没有学呢，想要的源码的朋友请看<a href="https://github.com/chenjiabing666/JD_Spider_python/tree/master" target="_blank" rel="external">GitHub源码</a></strong></li>
</ul>
</blockquote>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><strong>写到这里可以看到搜索首页的网址中<code>keyword</code>和<code>wq</code>都是你输入的词，如果你想要爬取更多的信息，可以将这两个词改成你想要搜索的词即可，直接将汉字写上，在请求的时候会自动帮你编码的，我也试过了，可以抓取源码的，如果你想要不断的抓取，可以将要搜索的词写上文件里，然后从文件中读取就可以了。以上只是一个普通的爬虫，并没有用到什么框架，接下来将会写<code>scrapy</code>框架爬取的，请继续关注我的博客哦！！！</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python大规模爬取京东&quot;&gt;&lt;a href=&quot;#python大规模爬取京东&quot; class=&quot;headerlink&quot; title=&quot;python大规模爬取京东&quot;&gt;&lt;/a&gt;python大规模爬取京东&lt;/h1&gt;&lt;h2 id=&quot;主要工具&quot;&gt;&lt;a href=&quot;#主要工具&quot;
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>JQuery干货篇之处理元素</title>
    <link href="http://chenjiabing666.github.io/2017/04/22/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E5%A4%84%E7%90%86%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/04/22/JQuery干货篇之处理元素/</id>
    <published>2017-04-22T13:45:23.000Z</published>
    <updated>2017-04-22T13:47:46.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery干货篇之处理元素"><a href="#JQuery干货篇之处理元素" class="headerlink" title="JQuery干货篇之处理元素"></a>JQuery干货篇之处理元素</h1><blockquote>
<p><strong>注意这里用的还是我前两篇用的例子，详情请看<a href="https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/">我的博客</a></strong></p>
<h2 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h2><p><strong><code>attr()</code> 方法设置或返回被选元素的属性值。</strong></p>
<p><strong>语法：</strong></p>
<blockquote>
<ul>
<li><code>$(selector).attr(attribute)</code> 返回被选元素的属性值。</li>
<li><code>$(selector).attr(attribute,value)</code> 设置被选元素的属性和值</li>
<li><code>$(selector).attr(attribute,function(index,oldvalue))</code> 设置被选元素的属性和值。</li>
</ul>
</blockquote>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>attribute</code></td>
<td style="text-align:center">规定属性的名称。</td>
</tr>
<tr>
<td style="text-align:center"><code>function(index,oldvalue)</code></td>
<td style="text-align:center">规定返回属性值的数。该函数可接收并使用选择器的 index 值和当前属性值。</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    $(<span class="string">"img"</span>).filter(<span class="string">":first"</span>).attr(<span class="string">'src'</span>);   <span class="comment">//得到属性</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;    </div><div class="line">        <span class="keyword">if</span>(index%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            $(elem).attr(<span class="string">"src"</span>,<span class="string">'lily.png'</span>);      <span class="comment">//设置属性</span></div><div class="line">        <span class="built_in">console</span>.log($(elem).attr(<span class="string">"src"</span>));</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        </div><div class="line">        $(<span class="string">"img"</span>).attr(<span class="string">'src'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">index,oldValue</span>) </span>&#123;  <span class="comment">//这里的oldValue表示原来属性的值，index是索引</span></div><div class="line">        <span class="keyword">if</span>(oldValue==<span class="string">"rose.png"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">'lily.png'</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="string">'astor.png'</span>;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    </div><div class="line">    attrs=&#123;       <span class="comment">//使用映射对象一次设置多个值</span></div><div class="line">        src:<span class="string">'lily.png'</span>,</div><div class="line">        <span class="attr">style</span>: <span class="string">'border: thick double red'</span></div><div class="line">    &#125;;</div><div class="line">    $(<span class="string">"img:eq(1)"</span>).attr(attrs);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="removeAttr"><a href="#removeAttr" class="headerlink" title="removeAttr"></a>removeAttr</h2><blockquote>
<p><strong><code>removeAttr()</code> 方法从被选元素中移除属性。</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><code>$(selector).removeAttr(attribute)</code>  这里的attribute是属性的名字</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img:first"</span>).removeAttr(<span class="string">"src"</span>);  <span class="comment">//删除属性src</span></div></pre></td></tr></table></figure>
<h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass"></a>addClass</h2><blockquote>
<p><strong><code>addClass()</code> 方法向被选元素添加一个或多个类</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><p><code>$(selector).addClass(class)</code> 这里的class是类名如果需要添加多个类，中间用<strong>空格</strong>隔开</p>
</li>
<li><p><code>$(selector).addClass(function(index,oldclass))</code>  这里的index是索引，oldClass是原来就有的类名，都是<strong>可选参数</strong>。这个函数的返回的就是要添加的类名</p>
</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img:even"</span>).addClass(<span class="string">"redBar"</span>);  <span class="comment">//向偶数的img添加类redBar</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).addClass(<span class="function"><span class="keyword">function</span> (<span class="params">index,currentClass</span>) </span>&#123;    <span class="comment">//这里的currentClass就是原来有的类名，可选</span></div><div class="line">        <span class="keyword">if</span>(index==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">'blueBar'</span>;   <span class="comment">//第二个img应用blueBar这个类</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="string">'redBar'</span>;      <span class="comment">//这里需要注意的是，对同一个img应用类的时候，因为这个类的定义有优先级，上面定义会被后面定义的覆盖，所以要注意类定义的位置</span></div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    </div><div class="line">    $(<span class="string">"img"</span>).filter(<span class="string">":odd"</span>).addClass(<span class="string">"redBar"</span>).end().filter(<span class="string">":even"</span>).addClass(<span class="string">"blueBar"</span>);  <span class="comment">//链式调用</span></div><div class="line">    </div><div class="line">    $(<span class="string">"img"</span>).addClass(<span class="string">"blueBar redBar"</span>);   <span class="comment">//添加两个类</span></div></pre></td></tr></table></figure>
<h2 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass"></a>hasClass</h2><blockquote>
<p><strong><code>hasClass()</code> 方法检查被选元素是否包含指定的<code>class</code></strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><code>$(selector).hasClass(class)</code>  //返回值是false和true</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log($(<span class="string">"img:odd"</span>).hasClass(<span class="string">"redBar"</span>));</div></pre></td></tr></table></figure>
<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass"></a>toggleClass</h2><blockquote>
<p><strong>toggleClass() 对设置或移除被选元素的一个或多个类进行切换。该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><p><code>$(selector).toggleClass(class,switch)</code>  <code>class</code>必需的，用来规定添加或移除<code>class</code>的指定元素，如需规定若干 <code>class</code>，请使用空格来分隔类名。<code>switch</code>是<code>boolean</code>可选参数，规定是否添加或移除<code>class</code></p>
</li>
<li><p><code>$(selector).toggleClass(function(index,class),switch)</code>   <code>index</code>表示索引，<code>class</code>表示选择器当前拥有的类</p>
</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).toggleClass(<span class="string">"redBar"</span>);   <span class="comment">//这里对所有的img在redBar这个类之间切换</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).toggleClass(<span class="string">"redBar blueBar"</span>);  <span class="comment">//在两个类之间来回的切换</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"&lt;button&gt;ToggleClass&lt;/button&gt;"</span>).appendTo(<span class="string">"#buttonDiv"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        $(<span class="string">"img"</span>).toggleClass(<span class="string">'redBar blueBar'</span>);   <span class="comment">//在两种class之间切换，如果有就删除，没有的就添加</span></div><div class="line">        e.preventDefault();    </div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//下面添加一个按钮，完成同时添加多个图片的效果</span></div><div class="line">    $(<span class="string">"&lt;button&gt;ToggleClass&lt;/button&gt;"</span>).appendTo(<span class="string">"#buttonDiv"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        $(<span class="string">"img"</span>).toggleClass(<span class="function"><span class="keyword">function</span> (<span class="params">index,currentClass</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(index%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="string">'blueBar'</span>;   <span class="comment">//动态的切换，这里是偶数就切换blue</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="string">'redBar blueBar'</span>;  <span class="comment">//这里是奇数的图片在两种颜色来回的切换</span></div><div class="line"></div><div class="line">        &#125;);</div><div class="line">        e.preventDefault();</div><div class="line"></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><blockquote>
<p><strong><code>css()</code> 方法返回或设置匹配的元素的一个或多个样式属性，这里只说<code>css</code>，还有其他的设置<code>css</code>样式请看<a href="http://www.w3school.com.cn/jquery/jquery_ref_css.asp" target="_blank" rel="external">w3School</a></strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><p><code>$(selector).css(name)</code>  返回第一个匹配元素的 <code>CSS</code>属性值。<code>name</code>是<code>css</code>属性的名称</p>
</li>
<li><p><code>$(selector).css(name,value)</code> 设置所有匹配元素的指定 <code>CSS</code> 属性。<code>name</code>表示属性名称，<code>value</code>表示属性的值</p>
</li>
<li><p><code>$(selector).css(name,function(index,value))</code>   此函数返回要设置的属性值。接受两个参数，<code>index</code>为元素在对象集合中的索引位置，<code>value</code> 是原先的属性值。<code>name</code>表示要设置的属性名称，返回值就是要设置的属性值</p>
</li>
</ul>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"label"</span>).css(<span class="string">'font-size'</span>,<span class="string">'30px'</span>);  <span class="comment">//设置字体大小</span></div><div class="line"></div><div class="line">$(<span class="string">"label"</span>).css(<span class="string">'font-size'</span>,<span class="string">'+=10'</span>);  <span class="comment">//使用相对值设置属性值，在原有的基础上加上10</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log($(<span class="string">"h1"</span>).css(<span class="string">'font-family'</span>));   <span class="comment">//获取h1标签的字体</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cssValues=&#123;</div><div class="line">    <span class="string">'border'</span>:<span class="string">'thick double red'</span>,</div><div class="line">    <span class="string">'font-size'</span>:<span class="string">'1.5em'</span></div><div class="line">&#125;;</div><div class="line">$(<span class="string">"label"</span>).css(cssValues);   <span class="comment">//同时设置多个属性</span></div></pre></td></tr></table></figure>
<h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><blockquote>
<p><strong><code>text()</code> 方法方法设置或返回被选元素的文本内容。当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容(会删除 <code>HTML</code> 标记)</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><code>$(selector).text()</code>   当该方法用于返回一个值时，它会返回所有匹配元素的组合的文本内容（会删除 <code>HTML</code> 标记）。</li>
<li><code>$(selector).text(content)</code>  当该方法用于设置值时，它会覆盖被选元素的所有内容。</li>
<li><code>$(selector).text(function(index,oldcontent))</code>  <code>index</code>表示索引,<code>oldcontent</code>表示选择器当前的文本内容</li>
</ul>
</blockquote>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><blockquote>
<p><strong><code>html()</code> 方法返回或设置被选元素的内容 <code>(inner HTML)</code>。如果该方法未设置参数，则返回被选元素的当前内容。</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><p><code>$(selector).html()</code>    当使用该方法返回一个值时，它会返回<strong>第一个</strong>匹配元素的内容。</p>
</li>
<li><p><code>$(selector).html(content)</code>   当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。</p>
</li>
<li><p><code>$(selector).html(function(index,oldcontent))</code>  使用函数来设置所有匹配元素的内容。<code>index</code> - 可选。接收选择器的<code>index</code> 位置,<code>oldcontent</code> - 可选。接收选择器的当前内容</p>
</li>
</ul>
</blockquote>
<h2 id="val"><a href="#val" class="headerlink" title="val"></a>val</h2><blockquote>
<p><strong><code>val()</code> 方法返回或设置被选元素的值,元素的值是通过 <code>value</code> 属性设置的。该方法大多用于 <code>input</code> 元素,如果该方法未设置参数，则返回被选元素的当前值</strong></p>
<p><strong>语法：</strong></p>
<ul>
<li><code>$(selector).val(value)</code>    设置文本域的值为value</li>
<li><code>$(selector).val()</code>       得到文本域的值</li>
<li><code>$(selector).val(function(index,oldvalue))</code>  设置文本域的值，这里函数的返回值将会用来设置文本域的值，<code>index</code>表示元素索引，<code>oldvalue</code>表示选择器当前文本域的值</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery干货篇之处理元素&quot;&gt;&lt;a href=&quot;#JQuery干货篇之处理元素&quot; class=&quot;headerlink&quot; title=&quot;JQuery干货篇之处理元素&quot;&gt;&lt;/a&gt;JQuery干货篇之处理元素&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注
    
    </summary>
    
      <category term="JQuery学习" scheme="http://chenjiabing666.github.io/categories/JQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JQuery" scheme="http://chenjiabing666.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery干货篇之操控DOM</title>
    <link href="http://chenjiabing666.github.io/2017/04/21/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%93%8D%E6%8E%A7DOM/"/>
    <id>http://chenjiabing666.github.io/2017/04/21/JQuery干货篇之操控DOM/</id>
    <published>2017-04-21T09:53:16.000Z</published>
    <updated>2017-04-21T09:53:49.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery干货篇之插入元素"><a href="#JQuery干货篇之插入元素" class="headerlink" title="JQuery干货篇之插入元素"></a>JQuery干货篇之插入元素</h1><p><strong>本次使用的html,css还是我上一篇的源代码，详情请看<a href="https://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/">上一篇文章</a></strong></p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li><strong>插入子元素：<code>append</code>,<code>prepend</code> ,<code>appendTo</code>,<code>prependTo</code></strong></li>
<li><strong>封装包裹元素：<code>wrap</code>,<code>wrapAll</code>,<code>wrapInner</code></strong></li>
<li><strong>插入兄弟元素：<code>after</code>,<code>before</code>,<code>insertAfter</code>,<code>insertBefore</code></strong></li>
<li><strong>替换元素：<code>replaceWith</code>,<code>replaceAll</code></strong></li>
<li><strong>删除元素：<code>remove</code>,<code>deatch</code>,<code>unwrap</code>,<code>empty</code></strong></li>
</ol>
<h2 id="创建新元素"><a href="#创建新元素" class="headerlink" title="创建新元素"></a>创建新元素</h2><p><strong>通常在把新元素插入到<code>DOM</code>中的目标位置之前，要先创建一个新元素才能将它插入到指定位置</strong></p>
<blockquote>
<p><strong>使用<code>$</code>创建元素</strong></p>
<blockquote>
<p><code>$(&lt;div&gt;&lt;img src=&#39;rose.png&#39; alt=&#39;玫瑰&#39;&gt;&lt;/div&gt;)</code></p>
</blockquote>
</blockquote>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><blockquote>
<p><strong>克隆元素，使用<code>clone</code>方法以已有的元素为模子生成新的元素，这个在后面的插入元素起到关键作用，如果在要引用html中的一个标签内容的话，不使用<code>clone</code>方法，那么就会将这段内容移动，因此这里使用<code>clone</code>会很方便，详细请看<code>append</code>的用法实例</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).clone();    <span class="comment">//这里的clone方法必须是JQuery对象调用</span></div></pre></td></tr></table></figure>
<h2 id="使用DOM-API创建新元素"><a href="#使用DOM-API创建新元素" class="headerlink" title="使用DOM API创建新元素"></a>使用DOM API创建新元素</h2><blockquote>
<p><strong><code>DOM API</code>是用<code>js</code>操作的，其实<code>jquery</code>在幕后悄悄的调用<code>DOM API</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> divElem=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);    <span class="comment">//创建一个div元素</span></div><div class="line"> divElem.classList.add(<span class="string">"dcell"</span>);       <span class="comment">//为div添加class=dcell</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> imgElem=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">imgElem.src=<span class="string">"lily.png"</span>;</div><div class="line"></div><div class="line">divElem.appendChild(imgElem);   <span class="comment">//在新创建的元素后面插入img</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> newElem=$(divElem);</div><div class="line"></div><div class="line">newElem.each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(elem.tagName+<span class="string">"    "</span>+elem.className);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="append"><a href="#append" class="headerlink" title="append"></a>append</h2><blockquote>
<p><strong>把参数指定的元素插入到所有的<code>JQuery</code>内含元素内容末尾成为他们的最后一个子元素，形式有<code>append(html)</code>,<code>append(Jquery)</code>,<code>append(HTMLElements[])</code>，<code>append(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里使用append元素创建了一个div元素，在末尾插入元素成为div的子元素</span></div><div class="line"><span class="comment">//</span></div><div class="line">    <span class="keyword">var</span> orchildElems = $(<span class="string">"&lt;div class='dcell'&gt;&lt;/div&gt;"</span>).append(<span class="string">"&lt;img src='orchid.png'/&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;input name='orchild' value='0' required&gt;"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> newElems = $(<span class="string">"&lt;div class='dcell'&gt;&lt;/div&gt;"</span>).append(<span class="string">"&lt;img src='lily.png'/&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;label for='lily'&gt;Lily:&lt;/label&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;input name='lily' value='0' required&gt;"</span>)</div><div class="line">        .css(<span class="string">"border"</span>, <span class="string">'thick double red'</span>);</div><div class="line">        </div><div class="line">    $(<span class="string">"div.drow"</span>).append(orchildElems);   <span class="comment">//在末尾插入数据，这里的参数是jquery对象</span></div><div class="line">    </div><div class="line">    </div><div class="line">    $(<span class="string">"div.drow"</span>).append(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(elem.id==<span class="string">'row1'</span>)</div><div class="line">        <span class="keyword">return</span> orchildElems;</div><div class="line">    </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id=<span class="string">'row2'</span>)</div><div class="line">        <span class="keyword">return</span> newElems;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    </div><div class="line">    $(<span class="string">"div.drow"</span>).last().append(orchildElem,newElems);   <span class="comment">//在其中添加两个参数，插入的先后按照参数的先后位置，当然其中的参数个数没有限制</span></div></pre></td></tr></table></figure>
<h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h2><blockquote>
<p><strong>和<code>append</code>完全相反,向当前元素的前面插入<code>html</code>节点作为当前元素的子元素,形式有<code>prepen d(Jquery)</code>,<code>prepend(html)</code>,<code>prepend(htmlElemnts[])</code>,<code>prepend(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> orchildElems = $(<span class="string">"&lt;div class='dcell'&gt;&lt;/div&gt;"</span>).append(<span class="string">"&lt;img src='orchid.png'/&gt;"</span>)</div><div class="line">    .append(<span class="string">"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;"</span>)</div><div class="line">    .append(<span class="string">"&lt;input name='orchild' value='0' required&gt;"</span>);</div><div class="line">$(<span class="string">"div.dcell"</span>).prepend(orchildElems);    <span class="comment">//将orchildElems插入到div.dcell的最前面，作为他的子元素</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).prepend(<span class="string">"&lt;img src='lily.png'&gt;"</span>); <span class="comment">//将参数html的内容插入到前面，作为子元素</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"div.drow"</span>).append(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;     <span class="comment">//参数是函数，index是索引，返回的内容就是要插入到前面的内容</span></div><div class="line"></div><div class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.id == <span class="string">'row1'</span>)</div><div class="line">         <span class="keyword">return</span> orchildElem;                <span class="comment">//返回的对象可以是jquery对象，也可以是html标签，如：return "&lt;img src='lily.png'&gt;</span></div><div class="line"></div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.id = <span class="string">'row2'</span>)</div><div class="line">         <span class="keyword">return</span> newElems;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h2 id="appendTo"><a href="#appendTo" class="headerlink" title="appendTo"></a>appendTo</h2><blockquote>
<p><strong><code>appendTo</code>是和<code>append</code>一样的函数，都是将指定的元素插入到指定元素的前面作为子元素，但是他们的参数就不同了，<code>append</code>是将指定的参数插入到当前调用它的的结果集中，而<code>appendTo</code>是将当前调用它的结果集插入到指定的参数中，主要的形式有<code>appendTo(jquery)</code>,<code>append(HTMLELments[])</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">"&lt;img src='lily.png'&gt;"</span>).appendTo($(<span class="string">"img"</span>).last().parent());   <span class="comment">//将图片插入到最后一个dcell中，这里参数是目标位置，开头调用的时想要插入的内容</span></div><div class="line"></div><div class="line">$(<span class="string">"img:first"</span>).clone().appendTo($(<span class="string">"img"</span>).last().parent()); <span class="comment">//选择第一个图片插入到最后一个dcell中，这里必须用clone，否则就会将这张图片移到目标位置</span></div><div class="line"></div><div class="line"> $($(<span class="string">"div.dcell"</span>).html()).appendTo($(<span class="string">"img"</span>).last().parent());   <span class="comment">//这里的.html()是获取html文本内容</span></div></pre></td></tr></table></figure>
<h2 id="prependTo"><a href="#prependTo" class="headerlink" title="prependTo"></a>prependTo</h2><blockquote>
<p><strong><code>.prepend()</code>和<code>.prependTo()</code>实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 <code>.prepend()</code> 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 <code>.prependTo()</code> 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。</strong></p>
</blockquote>
<h2 id="after"><a href="#after" class="headerlink" title="after"></a>after</h2><blockquote>
<p><strong>在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。形式有<code>after(content[content,])</code>,<code>after(function())</code>,这里的<code>content</code>内容有HTML字符串，<code>DOM</code> 元素，文本节点，元素和文本节点的数组，或者<code>jQuery</code>对象，用来插入到集合中每个匹配元素的后面</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">      <span class="keyword">var</span> orchildElems = $(<span class="string">"&lt;div class='dcell'&gt;&lt;/div&gt;"</span>).append(<span class="string">"&lt;img src='orchid.png'/&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;label for='orchild'&gt;Orchild:&lt;/label&gt;"</span>)</div><div class="line">        .append(<span class="string">"&lt;input name='orchild' value='0' required&gt;"</span>);     <span class="comment">//创建一个dcell内容</span></div><div class="line">        </div><div class="line">    </div><div class="line">        $(<span class="string">"div.dcell"</span>).after(orchildElems);   <span class="comment">//插入元素作为兄弟元素，在当前元素的后面</span></div><div class="line">        </div><div class="line">        </div><div class="line">        $(<span class="string">"#row1 div.dcell"</span>).after(<span class="function"><span class="keyword">function</span> (<span class="params">index, html</span>) </span>&#123;    <span class="comment">//index表示索引，html表示原来的html文本，指的是没有插入之前的html</span></div><div class="line">        <span class="built_in">console</span>.log(html);</div><div class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)<span class="keyword">return</span> orchildElem;        <span class="comment">//返回的可以是jquery对象，html文本</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> newElems;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="before"><a href="#before" class="headerlink" title="before"></a>before</h2><blockquote>
<p><strong>根据参数设定，在匹配元素的前面插入内容,形式和<code>after</code>一样，内容也差不多</strong></p>
</blockquote>
<h2 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h2><blockquote>
<p><strong>和<code>prependTo</code>的用法差不多，只是参数是要插入的目标位置，作为兄弟元素插入</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orchildElems.clone().insertBefore(<span class="string">"#row2 div.dcell"</span>);</div></pre></td></tr></table></figure>
<h2 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter"></a>insertAfter</h2><blockquote>
<p><strong>和<code>append</code>用法差不多，只是参数是要插入的目标位置，这里的也是作为兄弟元素插入的</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orchildElems.insertAfter(<span class="string">"#row1 div.dcell"</span>);</div></pre></td></tr></table></figure>
<h2 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h2><blockquote>
<p><strong>在集合中匹配的每个元素周围包裹一个<code>HTML</code>结构，将会作为父元素存在。形式为<code>wrap(html)</code>,<code>wrap(jquery)</code>,<code>wrap(HtmlElements[])</code>,<code>wrap(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    div=$(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line">    $(<span class="string">"div.drow"</span>).wrap(div);     <span class="comment">//在drow外层添加了一个div将作为父元素，可以看到现在的源代码变成了&lt;div style...&gt;&lt;div class='drow'&gt;...&lt;/div&gt;&lt;/div&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    $(<span class="string">".drow"</span>).wrap(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;   <span class="comment">//index是索引</span></div><div class="line">    <span class="comment">//if($(this).has("img[src*=astor]").length&gt;0)</span></div><div class="line">    <span class="keyword">if</span>(index==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> div;      <span class="comment">//只在第一个drow中添加父元素div</span></div><div class="line">    <span class="keyword">else</span> </div><div class="line">        <span class="keyword">return</span> $(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double blue'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="unwrap"><a href="#unwrap" class="headerlink" title="unwrap"></a>unwrap</h2><blockquote>
<p><strong>将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。形式为<code>unwrap()</code>,<code>unwrap(selector)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line">  $(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).first().unwrap();   <span class="comment">//这里将第一个img元素的父级元素删除，并且保留了其中的子元素</span></div><div class="line">  </div><div class="line">  $(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).unwrap(<span class="string">":first"</span>);   <span class="comment">//这里使用参数来筛选要删除父级元素的当前元素，这里选择第一个元素</span></div></pre></td></tr></table></figure>
<h2 id="wrapAll"><a href="#wrapAll" class="headerlink" title="wrapAll"></a>wrapAll</h2><blockquote>
<p><strong>在集合中所有匹配元素的外面包裹一个HTML结构,也就是为结果集中的所有元素都设置了一个相同的父级元素来包裹所有的元素，形式为<code>wrapAll(html)</code>,<code>wrapAll(jquery)</code>,<code>wrapAll(htmlElements[])</code>,<code>wrapAll(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = $(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>).css(<span class="string">"border"</span>, <span class="string">'thick double red'</span>);</div><div class="line">$(<span class="string">"div.drow"</span>).wrapAll(div);    <span class="comment">//这里的div成为了他共有的父级元素，原来的父级元素变成了祖先元素了</span></div><div class="line">$(<span class="string">"img"</span>).wrapAll(div);  <span class="comment">//这里的img没有共同的父元素，那么就会强制的将所有的元素拉在一起为他们设置一个父级元素</span></div></pre></td></tr></table></figure>
<h2 id="wrapInner"><a href="#wrapInner" class="headerlink" title="wrapInner"></a>wrapInner</h2><blockquote>
<p><strong>在匹配元素里的内容外包一层结构,也就是为匹配元素的后代元素添加一个父级元素，但是这个父级元素是匹配元素的子代元素，也就是原来的匹配元素变成了祖先元素，形式为<code>wrapInner(html)</code>,<code>wrapInner(jquery)</code>,<code>wrapInner(htmlElements)</code>,<code>wrapInner(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = $(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>).css(<span class="string">"border"</span>, <span class="string">'thick double red'</span>);</div><div class="line">$(<span class="string">".dcell"</span>).wrapInner(div);    <span class="comment">//这里的dcell元素将会变成祖先元素，而div将会变成内部后代元素新的父级元素</span></div></pre></td></tr></table></figure>
<h2 id="replaceWith"><a href="#replaceWith" class="headerlink" title="replaceWith"></a>replaceWith</h2><blockquote>
<p><strong>用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合,形式为<code>replace(html)</code>,<code>replaceWith(jquery)</code>,<code>replaceWith(function())</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> newElems = $(<span class="string">"&lt;div class='dcell'&gt;&lt;/div&gt;"</span>).append(<span class="string">"&lt;img src='lily.png'&gt;"</span>)</div><div class="line"> .append(<span class="string">"&lt;label for='lily'&gt;Lily&lt;/label&gt;"</span>).append(<span class="string">"&lt;input name='lily' value='0' required&gt;"</span>).css(<span class="string">"border"</span>, <span class="string">'thick   double blue'</span>);</div><div class="line">$(<span class="string">".dcell:first"</span>).replaceWith(newElems);  <span class="comment">//用newElems替换第一个dcell</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"div.drow img"</span>).replaceWith(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.src.indexOf(<span class="string">"rose"</span>) &gt; <span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> $(<span class="string">"&lt;img src='lily.png'&gt;"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>); <span class="comment">//返回的时替换的内容，可以是jquery或者html</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.src.indexOf(<span class="string">"peony"</span>) &gt; <span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> newElems;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> $(<span class="keyword">this</span>.clone()).css(<span class="string">"border"</span>,<span class="string">'thick double blue'</span>);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h2><blockquote>
<p><strong>用集合的匹配元素替换每个目标元素。<code>.replaceAll()</code>和<code>.replaceWith()</code>功能类似，但是目标和源相反</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"&lt;img src='lily.png'&gt;"</span>).replaceAll(<span class="string">"#row1 img"</span>);   <span class="comment">//这里使用&lt;img src='lily.png'&gt;替换所有的img元素</span></div></pre></td></tr></table></figure>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><blockquote>
<p><strong>将匹配元素集合从<code>DOM</code>中删除,并且同时移除元素上的事件及 <code>jQuery</code> 数据</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).remove(<span class="string">":has(img[src*=rose])"</span>);  <span class="comment">//删除img</span></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell:first()"</span>).remove();    <span class="comment">//不带参数</span></div></pre></td></tr></table></figure>
<h2 id="detach"><a href="#detach" class="headerlink" title="detach"></a>detach</h2><blockquote>
<p><strong>从<code>DOM</code>中去掉所有匹配的元素,<code>.detach()</code> 方法和<code>.remove()</code>一样, 除了 <code>.detach()</code>保存所有<code>jQuery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).detach();</div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).detach(<span class="string">":has(img[src*=rose])"</span>);</div></pre></td></tr></table></figure>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><blockquote>
<p><strong>从<code>DOM</code>中移除集合中匹配元素的所有子节点。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;div.dcell:first&quot;).empty();   //删除所有的子节点</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="external">JQuery中文文档</a></li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery干货篇之插入元素&quot;&gt;&lt;a href=&quot;#JQuery干货篇之插入元素&quot; class=&quot;headerlink&quot; title=&quot;JQuery干货篇之插入元素&quot;&gt;&lt;/a&gt;JQuery干货篇之插入元素&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本次使用的html,css还
    
    </summary>
    
      <category term="JQuery学习" scheme="http://chenjiabing666.github.io/categories/JQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JQuery" scheme="http://chenjiabing666.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery干货篇之选择元素</title>
    <link href="http://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/04/20/JQuery干货篇之选择元素/</id>
    <published>2017-04-20T06:55:07.000Z</published>
    <updated>2017-04-20T07:02:07.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery-干货篇之选择元素"><a href="#JQuery-干货篇之选择元素" class="headerlink" title="JQuery 干货篇之选择元素"></a>JQuery 干货篇之选择元素</h1><h2 id="实验的HTML-CSS的代码"><a href="#实验的HTML-CSS的代码" class="headerlink" title="实验的HTML+CSS的代码"></a>实验的HTML+CSS的代码</h2><blockquote>
<p><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.2.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Jacqui's Flower Shop<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"oblock"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dtable"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"row1"</span> <span class="attr">class</span>=<span class="string">"drow"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"astor.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"astor"</span>&gt;</span>Astor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"astor"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"daffodil.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"daffodil"</span>&gt;</span>Daffodil:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"daffodil"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"rose.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"rose"</span>&gt;</span>Rose:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rose"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"row2"</span> <span class="attr">class</span>=<span class="string">"drow"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"peony.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"peony"</span>&gt;</span>Peony:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"peony"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"primula.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"primula"</span>&gt;</span>Primula:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"primula"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"snowdrop.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"snowdrop"</span>&gt;</span>Snowdrop:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"snowdrop"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttonDiv"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Place Order<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>css</strong></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">border</span>: thick double black;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">font-size</span>: x-large;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span>;</div><div class="line">    <span class="attribute">color</span>: darkgreen;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"border.png"</span>);</div><div class="line">    <span class="attribute">background-size</span>: contain;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dtable</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.drow</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dcell</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dcell</span> &gt; * &#123;</div><div class="line">    <span class="attribute">vertical-align</span>: middle</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span>;</div><div class="line">    <span class="attribute">text-align</span>: right;</div><div class="line">    <span class="attribute">border</span>: thin solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">5em</span>;</div><div class="line">    <span class="attribute">padding-left</span>: .<span class="number">5em</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#buttonDiv</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#oblock</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">700px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hover</span>&#123;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><blockquote>
<ul>
<li><code>:animated</code> :选择正在处理动画的元素</li>
<li><code>:first</code>    :选择第一个元素</li>
<li><code>:last</code>     :选择最后一个元素</li>
<li><code>:eq(n)</code>    :选择第n个元素(从0开始)</li>
<li><code>:even</code>    :选择序号为偶数的元素</li>
<li><code>:odd</code>      :选择序号为奇数的元素</li>
<li><code>:gt(n)</code>    :选择序号<strong>大于</strong>n的元素</li>
<li><code>:lt(n)</code>    :选择序号小于n的元素</li>
<li><code>:text</code>     :选择所有的文本输入框</li>
<li><code>:contains(text)</code>   :选择包含指定文本的元素</li>
<li><code>file</code>     :选择所有文件上传输入框</li>
<li><code>:button</code>   :选择所有的按钮</li>
<li><code>:checkbox</code>  :选择所有的复选框</li>
<li><code>:hidden</code>     :选择隐藏的元素</li>
</ul>
<p><strong>实例</strong></p>
<blockquote>
<p><code>$(&quot;img:odd&quot;).css(&quot;border&quot;,&quot;thick double red&quot;);</code>选择序号为奇数的<code>img</code>元素<br><code>$(&quot;img:first&quot;).css(&quot;border&quot;,&quot;thick double red&quot;)</code>  选择第一个<code>img</code>元素</p>
</blockquote>
</blockquote>
<h2 id="JQuery对象的方法"><a href="#JQuery对象的方法" class="headerlink" title="JQuery对象的方法"></a>JQuery对象的方法</h2><blockquote>
<ul>
<li><code>context</code> 选择元素时使用的上下文对象</li>
</ul>
<blockquote>
<p><code>$(&quot;img:odd&quot;).context.TagName;</code></p>
</blockquote>
<ul>
<li><code>each(function())</code> 在每个选中的元素上运行给定的函数</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(ele.TagName+<span class="string">"   "</span>+elem.id);<span class="comment">//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引</li>
</ul>
<blockquote>
<p><code>$(&quot;img&quot;).index(&quot;img[src=*astor]&quot;)</code> </p>
</blockquote>
<ul>
<li>length || size()  返回的时jquery对象个数</li>
</ul>
<blockquote>
<p><code>$(&quot;img:odd&quot;).length</code></p>
</blockquote>
<ul>
<li>toArray()  返回一个有jquery对象中包含的htmlEelments数组</li>
</ul>
<blockquote>
<p><code>var content=$(&quot;img:odd&quot;).toArray()</code>  这里content返回的htmlElements数组</p>
</blockquote>
</blockquote>
<h2 id="把jquery当成数组"><a href="#把jquery当成数组" class="headerlink" title="把jquery当成数组"></a>把jquery当成数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content=$(<span class="string">"img:odd"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;content.length;i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(content[i].TagName+<span class="string">"    "</span>+content[i].src);    <span class="comment">//这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><blockquote>
<p><strong><code>add</code>函数允许我们添加更多的项，常用的有<code>add(htmlElement[])</code>,<code>add(selector)</code>,<code>add(jquery)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img:odd"</span>).add(<span class="string">"img:even"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> jq=$(<span class="string">"img[src*=astor]"</span>);</div><div class="line">$(<span class="string">"img:even"</span>).add(jq).add(<span class="string">"img:even"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> label=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"label"</span>);</div><div class="line">$(<span class="string">"img:odd"</span>).add(label).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);</div></pre></td></tr></table></figure>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><blockquote>
<p><strong>用来获取特定的一组子元素</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//获取0-2的元素</span></div><div class="line"></div><div class="line"> $(<span class="string">"img"</span>).slice(<span class="number">3</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//获取3-结束</span></div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote>
<p><strong>filter可以将不满足指定条件的元素剔除，常用的方法有<code>filter(jquery)</code>,<code>filter(htmlElement)</code>,<code>filter(function(index))</code>,<code>filter(selector)</code></strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//这里填入的参数selector</span></div><div class="line">$(<span class="string">"label"</span>).filter(<span class="string">"[for*=p]"</span>).css(<span class="string">"background-color"</span>,<span class="string">'blue'</span>).css(<span class="string">"font-size"</span>,<span class="string">'20px'</span>).css(<span class="string">"border"</span>,<span class="string">"2px solid red"</span>);</div><div class="line">    </div><div class="line">     $(<span class="string">"img"</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;     <span class="comment">//index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素</span></div><div class="line">       <span class="keyword">if</span>(index==<span class="number">4</span>)</div><div class="line">       &#123;</div><div class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">   &#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="keyword">var</span> elem=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"label"</span>)[<span class="number">1</span>];    <span class="comment">//只选择第二个label</span></div><div class="line">   $(<span class="string">"label"</span>).filter(elem).css(<span class="string">"font-size"</span>,<span class="string">'30px'</span>)     <span class="comment">//这里填入的参数是htmlElement对象</span></div></pre></td></tr></table></figure>
<h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><blockquote>
<p><strong><code>not</code>方法是<code>filter</code>方法的补充，主要是删除匹配条件的元素，而<code>filter</code>则是保留满足匹配条件的元素，常用的方法有<code>not(selector)</code>,<code>not(htmlElement)</code>,<code>not(jquery)</code>,<code>not(function(index))</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"label"</span>).not(<span class="string">"[for*=p]"</span>).css(<span class="string">"background-color"</span>,<span class="string">'red'</span>);    <span class="comment">//选择for不带p的label元素</span></div><div class="line"></div><div class="line">   $(<span class="string">"label"</span>).not(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;   <span class="comment">//哪个元素返回true就删除，false保留</span></div><div class="line">       <span class="keyword">if</span>(index==<span class="number">0</span>)</div><div class="line">           <span class="keyword">return</span> <span class="literal">true</span>;      <span class="comment">//这里就会删除第一个label元素，保留后面的元素</span></div><div class="line">       <span class="keyword">else</span></div><div class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">   &#125;).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</div></pre></td></tr></table></figure>
<h2 id="has"><a href="#has" class="headerlink" title="has"></a>has</h2><blockquote>
<p><strong>选择拥有指定后代的选择器</strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).has(<span class="string">"img[src*=astor]"</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);  <span class="comment">//选择子代拥有img属性src带有astor的div.dcell元素</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> s=$(<span class="string">"[for*=astor]"</span>);</div><div class="line">$(<span class="string">"div.dcell"</span>).has(s).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//参数为jquery对象</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote>
<p><strong>以一个函数为参数，map方法能够帮助我们灵活的处理一个<code>jquery</code>对象，从而得到满足需要的一个<code>jquery</code>对象。针对源<code>jquery</code>对象中的每一个元素都调用一次这个函数，而函数返回的<code>HtmlElement</code>对象将会变成一个<code>jquery</code>对象，参数是<code>function(index,elem)</code>,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> elem.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];   <span class="comment">//这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素</span></div><div class="line">&#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);      <span class="comment">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(index==<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> elem;   <span class="comment">//返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象</span></div><div class="line"></div><div class="line">&#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);      <span class="comment">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div></pre></td></tr></table></figure>
<h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><blockquote>
<p><strong><code>is</code>方法确定<code>jquery</code>对象中的某个或者某些元素是否满足测试条件，其中的形式有<code>is(selector)</code>,<code>is(HtmlElement)</code>,<code>is(jquery)</code>,<code>is(function(index))</code>如果结果集中至少有一个元素匹配指定的条件，那么就返回<code>true</code>,否则<code>false</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log($(<span class="string">"img"</span>).is(<span class="string">"[src*=astor]"</span>));<span class="comment">//这里是判断img中的src属性有没有astor字段的，如果存在返回true</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).is(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> c=$(<span class="string">"img"</span>).is(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;    <span class="comment">//函数中如果至少有一个返回true，那么就会返回true，index是索引</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAttribute(<span class="string">'src'</span>)==<span class="string">'rose.png'</span>;   <span class="comment">//判断属性</span></div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><blockquote>
<p><strong>当我们调用方法链来修改结果集的时候，<code>jquery</code>维护者一个历史结果集的查找，我们可以利用<code>end</code>回退到历史的结果集中,<code>end</code>用来扔掉当前的结果集，返回到上一层结果集</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).filter(<span class="string">"[src*=astor]"</span>).end().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//这里回退到$("img")这个结果集中</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).find(<span class="string">"img"</span>).filter(<span class="string">":odd"</span>).filter(<span class="string">":eq(0)"</span>).end().end().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>); <span class="comment">//这里调用了两个end将结果集回退到$("div.dcell").find("img")中</span></div></pre></td></tr></table></figure>
<h2 id="addBack"><a href="#addBack" class="headerlink" title="addBack"></a>addBack</h2><blockquote>
<p><strong>得到当前结果集和上一个结果集的合集</strong></p>
<blockquote>
<p><strong>实例</strong></p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).addBack().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//这里得到的是$("div.dcell")和$("div.dcell").children("img")的合集，并且应用css</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).filter(<span class="string">"[src*=astor]"</span>).addBack().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//$("img").slice(0,3)和$("img").slice(0,3).filter("[src*=astor]")的合集</span></div><div class="line"></div><div class="line"><span class="comment">//这里的选择器参数过滤的是原结果集，相当于$("img").slice(0,3).filter("[src*=daff]")，</span></div><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).filter(<span class="string">"[src*=astor]"</span>).addBack(<span class="string">"[src*=daff]"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div></pre></td></tr></table></figure>
<h2 id="children"><a href="#children" class="headerlink" title="children"></a>children</h2><blockquote>
<p><strong><code>children</code>是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足<code>selector</code>的子元素</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).children().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//得到所有div.dcell的子元素，包括其中的img和input元素</span></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//得到所有子元素中的img元素</span></div></pre></td></tr></table></figure>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote>
<p><strong><code>find</code>是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有<code>find()</code>,<code>find(selector)</code>,<code>find(htmlElement)</code>,<code>find(jquery)</code>,<code>find(htmlElment[])</code>，这里会自动去掉含有重复的元素，因此可以用来过滤元素</strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).find(<span class="string">"img"</span>);   <span class="comment">//找到div.dcell的后代元素img</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> content=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</div><div class="line">$(<span class="string">"div.dcell"</span>).find(content).filter(<span class="string">":first"</span>).css(<span class="string">"font-size"</span>,<span class="string">'1.5em'</span>);<span class="comment">//找到div.dcell后代元素中的input元素</span></div></pre></td></tr></table></figure>
<h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><blockquote>
<p><strong>选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有<code>parent()</code>,<code>parent(selector)</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parent();   <span class="comment">//选取img的父元素</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).parent(<span class="string">":first"</span>);   <span class="comment">//选取img父元素中的第一个元素</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="parents"><a href="#parents" class="headerlink" title="parents"></a>parents</h2><blockquote>
<p><strong>选取祖先元素，包括父元素，形式有<code>parents()</code>,<code>parents(selector)</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parents().each(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;    <span class="comment">//选取所有的祖先元素</span></div><div class="line">    <span class="built_in">console</span>.log(elem.TagName+<span class="string">"   "</span>+elem.id);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).parents(<span class="string">"div.dcell"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//选择所有的div.dcell元素</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="parentsUntil"><a href="#parentsUntil" class="headerlink" title="parentsUntil"></a>parentsUntil</h2><blockquote>
<p><strong>选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,<code>parentsUntil(selector)</code>,<code>parentsUntil(selector,selector)</code>，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parentsUntil(<span class="string">"div.drow"</span>);<span class="comment">//找img的祖先元素，直到div.drow为止，不包括div.drow</span></div><div class="line"></div><div class="line"> $(<span class="string">"img"</span>).parentsUntil(<span class="string">"div.drow"</span>,<span class="string">":first"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);  <span class="comment">//这里选择了结果集中的第一个元素应用了样式</span></div></pre></td></tr></table></figure>
<h2 id="closest"><a href="#closest" class="headerlink" title="closest"></a>closest</h2><blockquote>
<p><strong>得到结果集中元素的祖先元素中匹配<code>selector</code>选择器最接近的那个祖先元素，形式为<code>closest(selector)</code>,<code>closest(selctor,context)</code>,<code>closest(htmlElemtent)</code>,<code>closest(jquery)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">"img"</span>).closest(<span class="string">"div.drow"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;   <span class="comment">//选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系</span></div><div class="line">        <span class="built_in">console</span>.log(elem.tagName+<span class="string">"    "</span>+elem.id);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> jq=$(<span class="string">"#row1,#row2,form"</span>);   <span class="comment">//传入jquery对象</span></div><div class="line">    $(<span class="string">"img"</span>).filter(<span class="string">"[src*=astor]"</span>).closest(jq).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;   <span class="comment">//这里选取的是最接近第一张图的祖先元素，当然是&lt;div id="row1"&gt;</span></div><div class="line">        <span class="built_in">console</span>.log(elem.tagName+<span class="string">"   "</span>+elem.id);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="offestParent"><a href="#offestParent" class="headerlink" title="offestParent"></a>offestParent</h2><blockquote>
<p><strong>得到距离最近的祖先定位元素，使用<code>fixed</code>,<code>absolute</code>,<code>relative</code>定位的元素，形式为<code>offestParent()</code></strong></p>
</blockquote>
<h2 id="siblings"><a href="#siblings" class="headerlink" title="siblings"></a>siblings</h2><blockquote>
<p><strong>得到所有的兄弟元素，可选的<code>selector</code>用来过滤结果，形式为<code>siblings()</code>,<code>siblings(selector)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).siblings().css(<span class="string">"font-size"</span>,<span class="string">'1.4em'</span>);<span class="comment">// 得到img的所有兄弟元素，这里是input</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).siblings(<span class="string">":last"</span>);     <span class="comment">//得到img所有兄弟元素中的最后一个元素</span></div></pre></td></tr></table></figure>
<h2 id="prev"><a href="#prev" class="headerlink" title="prev"></a>prev</h2><blockquote>
<p><strong>得到上一个兄弟元素，形式为<code>prev()</code>,<code>prev(selector)</code>，其中的<code>selector</code>是用来过滤结果的</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prev().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//这里得到input的上一个元素Label元素</span></div></pre></td></tr></table></figure>
<h2 id="prevAll"><a href="#prevAll" class="headerlink" title="prevAll"></a>prevAll</h2><blockquote>
<p><strong>得到当前元素的所有的上面的兄弟元素，形式为<code>prevALl()</code>,<code>prevAll(selector)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prevAll().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//得到input上面的所有的兄弟元素</span></div><div class="line"></div><div class="line">$(<span class="string">"input"</span>).prev(<span class="string">"img"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//得到input上面的所有的img元素</span></div></pre></td></tr></table></figure>
<h3 id="prevUntil"><a href="#prevUntil" class="headerlink" title="prevUntil"></a>prevUntil</h3><blockquote>
<p><strong>这个和parentsUntil一样，直到匹配<code>selector</code>就结束了，不包括</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prevUntil(<span class="string">"i"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div></pre></td></tr></table></figure>
<h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><blockquote>
<p><strong>选择当前元素下面的一个兄弟元素，和<code>prev</code>一样</strong></p>
</blockquote>
<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll"></a>nextAll</h2><blockquote>
<p><strong>选择当前元素下面的所有兄弟元素，和<code>prevAll</code>一样</strong></p>
</blockquote>
<h2 id="nextUntil"><a href="#nextUntil" class="headerlink" title="nextUntil"></a>nextUntil</h2><blockquote>
<p><strong>和<code>prevUntil</code>一样</strong></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery-干货篇之选择元素&quot;&gt;&lt;a href=&quot;#JQuery-干货篇之选择元素&quot; class=&quot;headerlink&quot; title=&quot;JQuery 干货篇之选择元素&quot;&gt;&lt;/a&gt;JQuery 干货篇之选择元素&lt;/h1&gt;&lt;h2 id=&quot;实验的HTML-CSS的代
    
    </summary>
    
      <category term="JQuery学习" scheme="http://chenjiabing666.github.io/categories/JQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JQuery" scheme="http://chenjiabing666.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇三</title>
    <link href="http://chenjiabing666.github.io/2017/04/16/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2017/04/16/SQL干货篇三/</id>
    <published>2017-04-16T14:36:33.000Z</published>
    <updated>2017-04-16T14:37:37.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL干货篇三"><a href="#SQL干货篇三" class="headerlink" title="SQL干货篇三"></a>SQL干货篇三</h1><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><blockquote>
<ul>
<li><strong><code>create view &lt;视图名&gt;[(列名),(列名)...] as &lt;子查询&gt; [with check option]</code></strong></li>
<li><strong>子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了</strong><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><strong>建立在一个表上</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_student <span class="keyword">as</span> <span class="keyword">select</span> Sno,Sname,Sage <span class="keyword">where</span> Sdept=<span class="string">'IS'</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span> ;   <span class="comment">/*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>建立在多个表上</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_Grade(Sno,Sname,Grade) </div><div class="line"><span class="keyword">as</span> <span class="keyword">select</span> student.Sno,Sname,Grade <span class="keyword">from</span> student,SC</div><div class="line"><span class="keyword">where</span> Sdept=<span class="string">'IS'</span> <span class="keyword">and</span> student.Sno=SC.Sno;           <span class="comment">/*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/</span></div></pre></td></tr></table></figure></p>
<p><strong>定义一个带有表达式的视图</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> BT_S(Sno,Sname,Sbirth) </div><div class="line"><span class="keyword">as</span> <span class="keyword">select</span> Sno,Sname,<span class="number">2014</span>-Sage <span class="keyword">from</span> student    <span class="comment">/*这里的2014-Sage是用来计算出生日期的*/</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</div></pre></td></tr></table></figure></p>
<p><strong>聚集函数的视图</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">create view BT(Sno,Gavg) </div><div class="line">as select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><blockquote>
<ul>
<li><strong><code>Drop view &lt;视图名&gt;&lt;CASCADE]</code>,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除</strong></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>Drop view IS_Sdept;</code> 删除视图</li>
<li><code>Drop view IS_Sdept CASCADE;</code>  删除视图和其导出视图</li>
</ul>
</blockquote>
<h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><blockquote>
<p><strong>查询视图和查询表是一样的，请参照我前两章讲的<a href="https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/">SQL语法</a></strong></p>
</blockquote>
<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><blockquote>
<p><strong>视图的更新包括insert,delete,update,这个和基本表的操作是一样的</strong></p>
<p><strong>注意：</strong></p>
<blockquote>
<ul>
<li>并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了<code>with check option</code>语句的情况下</li>
<li>如果添加了<code>with check option</code>语句,那么对视图的更新就会对应转换成对基本表的更新</li>
<li>各个系统对视图的更新还有进一步的规定，比如DB2规定：<blockquote>
<ul>
<li>如果视图是由两个以上的基本表导出，那么就不可以更新</li>
<li>如果视图来自字段或者表达式，那么就不允许对此视图执行<code>insert</code>,<code>update</code>,但是可以执行<code>delete</code></li>
<li>如果定义中有order by子句，那么不可以更新视图</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL干货篇三&quot;&gt;&lt;a href=&quot;#SQL干货篇三&quot; class=&quot;headerlink&quot; title=&quot;SQL干货篇三&quot;&gt;&lt;/a&gt;SQL干货篇三&lt;/h1&gt;&lt;h2 id=&quot;创建视图&quot;&gt;&lt;a href=&quot;#创建视图&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>java连接mysql初探篇</title>
    <link href="http://chenjiabing666.github.io/2017/04/16/java%E8%BF%9E%E6%8E%A5mysql%E5%88%9D%E6%8E%A2%E7%AF%87/"/>
    <id>http://chenjiabing666.github.io/2017/04/16/java连接mysql初探篇/</id>
    <published>2017-04-16T06:13:04.000Z</published>
    <updated>2017-04-27T15:06:02.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java连接mysql"><a href="#java连接mysql" class="headerlink" title="java连接mysql"></a>java连接mysql</h1><h2 id="基本连接"><a href="#基本连接" class="headerlink" title="基本连接"></a>基本连接</h2><blockquote>
<ul>
<li><p><strong>加载驱动:</strong> <code>Class.forName(com.mysql.jdbc.Driver)</code></p>
</li>
<li><p><strong>建立连接:<code>Connection conn=DriverManager.getConnection(url,user,password)</code></strong></p>
<blockquote>
<p>其中<code>url=&quot;jdbc:mysql://localhost:3306/java_demo&quot;</code>,这里的<code>java_demo</code>是自己创建的数据库的名字,<code>user</code>是<code>mysql</code>数据库的管理员，<code>password</code>是密码<br><strong>下面直接连接数据库，返回的是接口Connection对象</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Connection conn;</div><div class="line">    String driver=<span class="string">"com.mysql.jdbc.Driver"</span>;   <span class="comment">//驱动名称</span></div><div class="line">    String url=<span class="string">"jdbc:mysql://localhost:3306/java_demo"</span>;   <span class="comment">//url</span></div><div class="line">    String user=<span class="string">"root"</span>;</div><div class="line">    String password=<span class="string">"root"</span>;    <span class="comment">//管理员和密码都是root</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        Class.forName(driver);    <span class="comment">//加载驱动，但是会有ClassNotFoundException异常，因此要避免异常</span></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            conn = Dri verManager.getConnection(url, user, password);   <span class="comment">//获得数据库连接</span></div><div class="line">            <span class="keyword">return</span> conn;    <span class="comment">//返回conn</span></div><div class="line">             </div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//如果出现异常就会返回null</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><blockquote>
<ul>
<li><p>**首先根据所得的<code>Connection</code>对象创建<code>Statement</code>对象：<code>Statement statement = connection.createStatement()</code>;</p>
</li>
<li><p><strong>写查询语句：<code>String sql=&quot;select * from student;&quot;</code>这里是查询所有student中的数据，详细内容请看我的<a href="https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/">SQL干货篇二</a></strong></p>
</li>
<li><p><strong>创建ResultSet对象存储查询结果:<code>ResultSet res=statement.executeQuery(sql)</code>,详细的内容请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html" target="_blank" rel="external">官方文档ResultSet详细用法</a></strong></p>
</li>
</ul>
</blockquote>
<p><strong>代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String sql=<span class="string">"select * from student"</span>;</div><div class="line"><span class="keyword">if</span>(!conn.isClosed())</div><div class="line">&#123;</div><div class="line">    Statement statement=conn.createStatement();   <span class="comment">//这里的conn是上面连接数据库的返回的Connection对象</span></div><div class="line">    ResultSet res=statement.executeQuery(sql);   <span class="comment">//执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说</span></div><div class="line">    <span class="keyword">while</span>(res.next())    <span class="comment">//如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id=res.getInt(<span class="string">"id"</span>);    <span class="comment">//得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....</span></div><div class="line">        String name=res.getString(<span class="string">"name"</span>);  <span class="comment">//得到姓名，对应的是mysql中的Char varChar类型</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html" target="_blank" rel="external">PrepareStatement</a></strong></p>
<ul>
<li><p><strong>首先编写sql语句:<code>sql=&quot;select * from student where id=?;&quot;;</code>,这里的<code>?</code>表示一个占位，将条件在后面给出，但是这里一定要用<code>?</code></strong></p>
</li>
<li><p><strong>创建对象：<code>PrepareStatement pre=conn.preparestatement(sql);</code>这里传入参数<code>sql</code></strong></p>
</li>
<li><p><strong>设置<code>sql</code>中的条件语句，填补占位<code>?</code>的值:pre.setInt(1,1);这里的<code>SetInt</code>设置<code>id</code>值的为1，因为这的<code>id</code>是<code>int</code>类型的，第一个参数是表示<code>prepareindex</code>，就是表示第一个占位<code>?</code>,当然第二个就是2,其中还有<code>SetString(prepareindex String var)</code>,用来给定表中的<code>char</code>后者<code>varchar</code>类型的值</strong></p>
</li>
</ul>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!connection.isClosed())</div><div class="line">                &#123;</div><div class="line">                    String sql=<span class="string">"select * from course where id=?,name=?"</span>;      </div><div class="line">                    PreparedStatement preparedStatement=connection.prepareStatement(sql);</div><div class="line">                    preparedStatement.setInt(<span class="number">1</span>,<span class="number">1</span>);    <span class="comment">//给定条件中的值</span></div><div class="line">                    prepareStatement.setString(<span class="number">2</span>,<span class="string">"jack"</span>);  <span class="comment">//为第二个？赋值</span></div><div class="line">                    ResultSet res=preparedStatement.executeQuery();    <span class="comment">//执行查询，返回的仍然是ResultSet对象</span></div><div class="line">                    <span class="keyword">while</span>(res.next())</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">int</span> id=res.getInt(<span class="string">"id"</span>);</div><div class="line">                        String name=res.getString(<span class="string">"name"</span>);</div><div class="line">                        System.out.println(id+<span class="string">"--"</span>+name);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote>
<p><strong>插入数据和上面的两种方法基本是一样的，不同的是<code>mysql</code>语句不同，还有的就是执行语句改成了<code>executeUpdate(sql)</code>，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为<code>executeUpdate</code>即可</strong></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(MemoBean memo)</span> </span>&#123;</div><div class="line">       String sql = <span class="string">"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);"</span>;</div><div class="line">       Connection conn = getConnection();</div><div class="line">       PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ps = conn.prepareStatement(sql);</div><div class="line">           ps.setString(<span class="number">1</span>, memo.getUsername());     <span class="comment">//设值value中的值 </span></div><div class="line">           ps.setString(<span class="number">2</span>, memo.getTitle());</div><div class="line">           ps.setString(<span class="number">3</span>, memo.getContent());</div><div class="line">           ps.setString(<span class="number">4</span>, memo.getMemotype());</div><div class="line">           ps.setString(<span class="number">5</span>, memo.getMemotime());</div><div class="line">           <span class="keyword">return</span> ps.executeUpdate();     <span class="comment">//这里使用的是excuteUpdate</span></div><div class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   ps.close();   <span class="comment">//关闭预编译对象</span></div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123; </div><div class="line">                   e.printStackTrace();   </div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   conn.close();       <span class="comment">//关闭Connection对象</span></div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; </div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;          <span class="comment">//没有插入成功返回-1</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><blockquote>
<p><strong>这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可</strong></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MemoBean memo)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;"</span>;<span class="comment">//查询语句</span></div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ps = connection.prepareStatement(sql);</div><div class="line">            ps.setString(<span class="number">1</span>, memo.getUsername());    <span class="comment">//设置条件语句中的值</span></div><div class="line">            ps.setString(<span class="number">2</span>, memo.getTitle()); </div><div class="line">            ps.setString(<span class="number">3</span>, memo.getContent());</div><div class="line">            ps.setString(<span class="number">4</span>, memo.getMemotype());</div><div class="line">            ps.setString(<span class="number">5</span>, memo.getMemotime());</div><div class="line">            ps.setInt(<span class="number">6</span>,memo.getId());</div><div class="line">            <span class="keyword">return</span> ps.executeUpdate();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    ps.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (SQLException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (SQLException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="最后说"><a href="#最后说" class="headerlink" title="最后说"></a>最后说</h2><blockquote>
<ul>
<li><p><strong>上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看</strong></p>
</li>
<li><p><strong>上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用<code>execute(sql)</code>即可执行，删除表也是用<code>execute(sql)</code>即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行</strong></p>
</li>
<li><p><strong>其中<code>executeUpdate(sql)</code>适用于<code>create</code>,<code>insert</code>,<code>update</code>,<code>delete</code>,但是<code>executeQuery(sql)</code>适用于<code>select</code>,具体见官方文档</strong></p>
</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java连接mysql&quot;&gt;&lt;a href=&quot;#java连接mysql&quot; class=&quot;headerlink&quot; title=&quot;java连接mysql&quot;&gt;&lt;/a&gt;java连接mysql&lt;/h1&gt;&lt;h2 id=&quot;基本连接&quot;&gt;&lt;a href=&quot;#基本连接&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JDBC" scheme="http://chenjiabing666.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Linux干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/13/Linux%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/04/13/Linux干货篇一/</id>
    <published>2017-04-13T04:29:34.000Z</published>
    <updated>2017-04-13T04:32:08.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux干货篇一"><a href="#Linux干货篇一" class="headerlink" title="Linux干货篇一"></a>Linux干货篇一</h1><h2 id="虚拟机的安装-VMware"><a href="#虚拟机的安装-VMware" class="headerlink" title="虚拟机的安装(VMware)"></a>虚拟机的安装(VMware)</h2><blockquote>
<ol>
<li><strong>选择文件-&gt;新建虚拟机</strong></li>
<li>选择<strong>自定义</strong></li>
<li>设置安装来源，选择<strong>稍后安装</strong></li>
<li>选择安装的操作系统，选择<strong>Linux</strong>,然后选择自己安装的对应版本即可</li>
<li>设置虚拟机的安装路径，自己选择</li>
<li>指定磁盘容量，选择默认20G,然后选择<strong>将虚拟磁盘存储为单个文件</strong></li>
<li>设置cpu数量，内存大小，默认即可</li>
<li>设置Linux安装镜像文件路径</li>
<li>点击开启虚拟机即可根据对应的设置安装</li>
</ol>
</blockquote>
<h2 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h2><blockquote>
<ul>
<li><code>/boot</code>:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)</li>
<li><code>/bin</code>:存放可执行程序</li>
<li><code>/etc</code>:存放系统配置文件</li>
<li><code>/home</code>:普通用户的主目录所在位置</li>
<li><code>/lib</code>:存放基本的共享文件和内核模块</li>
<li><code>/mnt(mount)</code>:用户为需要挂载的文件系统提供挂载点</li>
<li><code>/proc(process)</code>:存放与内核进程有关的信息</li>
<li><code>/root</code>:根用户的主目录</li>
<li><code>/tmp(temporary)</code>:存放临时性文件</li>
<li><code>/usr(user)</code>:存放可共享的只读文件</li>
<li><code>/var(variable)</code>:存放各类的数据文件</li>
</ul>
</blockquote>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h4 id="重要选项"><a href="#重要选项" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-a(all)</code> 列出目录中的所有项，包括”.”开头的隐藏文件</li>
<li><code>-l(list)</code> 以列表的方式显示文件</li>
<li><code>-R(recursive)</code>  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件</li>
<li><code>-d</code>仅仅列出目录本身的信息<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4></li>
<li><code>ls -al /etc</code>     以列表的方式列出ect目录下的所有文件</li>
</ul>
</blockquote>
<h2 id="pwd-显示当前路径"><a href="#pwd-显示当前路径" class="headerlink" title="pwd   显示当前路径"></a>pwd   显示当前路径</h2><h2 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd(切换目录)"></a>cd(切换目录)</h2><blockquote>
<ul>
<li><code>cd ..</code>   跳闸到当前目录的上一级</li>
<li><code>cd ~</code>    跳转到当前用户的主目录</li>
</ul>
</blockquote>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote>
<ul>
<li><code>cd /tmp/testdir</code>   跳转到tmp文件下的testdir目录</li>
</ul>
</blockquote>
<h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><blockquote>
<p><strong>获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。</strong></p>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>stat test</code>    查看test文件的基本信息</li>
</ul>
</blockquote>
<h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><blockquote>
<p><strong>创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件</strong></p>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>touch /tmp/testdir/test</code>    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间</li>
</ul>
</blockquote>
<h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir(创建目录)"></a>mkdir(创建目录)</h2><blockquote>
<ul>
<li><code>mkdir /tmp/testdir/test_file</code>    在/tmp/testdir目录下创建一个test_file文件夹</li>
</ul>
</blockquote>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><blockquote>
<p><strong>移动或者重命名文件或目录</strong></p>
</blockquote>
<h4 id="重要选项-1"><a href="#重要选项-1" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>b(backup)</code>:若存在同名文件，覆盖前先备份原来的文件</li>
<li><code>f(force)</code>:强制覆盖同名的文件</li>
</ul>
</blockquote>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /tmp/testdir    //创建一个目录testdir</div><div class="line">touch test1 test2     //创建两个文件test1  test2</div><div class="line">mv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~</div><div class="line"></div><div class="line">mv -b test1 /tmp/testdir1/test    //移动文件到指定目录下</div></pre></td></tr></table></figure>
<h2 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp(copy)"></a>cp(copy)</h2><blockquote>
<p><strong>复制文件和目录</strong></p>
</blockquote>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><blockquote>
<ul>
<li><code>-b</code>: 若存在同名文件，覆盖前先备份</li>
<li><code>-f</code> :强制覆盖同名文件</li>
<li><code>-r</code> : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制</li>
</ul>
</blockquote>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>cp /tmp/testdir tmp/testdir1</code>  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 -&gt;  </li>
<li><code>cp -r /tmp/testdir /tmp/testdir1</code>   可以复制，复制到/tmp文件夹下命名为testdir1</li>
<li><code>cp -b /tmp/testdir/test1  /tmp/testdir1/test</code>    将文件test1复制到testdir1文件夹下命名为test</li>
</ul>
</blockquote>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote>
<p><strong>删除命令</strong></p>
</blockquote>
<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><blockquote>
<ul>
<li><code>-f</code> 强制删除</li>
<li><code>-r</code> 删除文件夹（递归删除）</li>
</ul>
</blockquote>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>rm -rf /tmp/testdir</code>   强制删除testdir目录</li>
</ul>
</blockquote>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><blockquote>
<p><strong>删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r</strong></p>
</blockquote>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><blockquote>
<p><strong>查看文件内容</strong></p>
</blockquote>
<h4 id="重要选项-2"><a href="#重要选项-2" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-n</code> 显示行数</li>
</ul>
</blockquote>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>cat -n /tmp/testdir/test</code>    查看文件test的内容，显示行数</li>
</ul>
</blockquote>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><blockquote>
<p><strong>分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容</strong></p>
</blockquote>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>more /tmp/testdir/test</code></li>
</ul>
</blockquote>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><blockquote>
<p><strong>显示文本文件结尾的部分，默认显示最后10行</strong></p>
</blockquote>
<h4 id="重要选项-3"><a href="#重要选项-3" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-n</code> 指定显示的行数</li>
</ul>
</blockquote>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><blockquote>
<p><strong>显示开头的内容，与<code>tail</code>类似</strong></p>
</blockquote>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><blockquote>
<p><strong>一次显示文本文件的行数，单词数，字节数</strong></p>
</blockquote>
<h4 id="重要选项-4"><a href="#重要选项-4" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-c</code>  显示文件字节数</li>
<li><code>-l(line)</code>   显示文件行数</li>
<li><code>-w(word)</code>   显示文件单词数</li>
</ul>
</blockquote>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>wc -cl  /tmp/testdir/test</code>   查看文件的字数和文件的行数</li>
</ul>
</blockquote>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p><strong>查看或者修改系统命令</strong></p>
<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>date</code>  查看系统时间</li>
<li><code>date 09012017</code>    修改系统时间为2017-09-01</li>
</ul>
</blockquote>
<h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p><strong>列出当前系统的登录用户</strong></p>
<h4 id="重要选项-5"><a href="#重要选项-5" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-r</code> 显示系统当前的运行级</li>
<li><code>-q</code> 显示当前所有登录的用户名称和在线人数</li>
</ul>
</blockquote>
<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p><strong>关闭重启系统</strong></p>
<h4 id="重要选项-6"><a href="#重要选项-6" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-r(reboot)</code>  重启系统</li>
<li><code>-h(halt)</code>   关闭系统</li>
<li><code>-P(poweroff)</code>  关闭系统同时关闭电源</li>
</ul>
</blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>上面选项均可给出数字参数指定多少分钟之后执行操作</strong></p>
<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>shutdown -h 10</code>    设置10分钟后关闭系统</li>
</ul>
</blockquote>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p><strong>清楚当前终端的屏幕内容</strong></p>
<h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p><strong>显示命令的使用手册，按上下键移动光标，Q键退出</strong></p>
<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>man cat</code>     快速查询cat命令的手册</li>
</ul>
</blockquote>
<h2 id="histroy"><a href="#histroy" class="headerlink" title="histroy"></a>histroy</h2><p><strong>查看shell命令的历史记录</strong></p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>histroy 5</code>  显示最近的5条记录</li>
</ul>
</blockquote>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p><strong>调用<code>vim</code>编辑器，按<code>i</code>键插入，<code>w</code>键保存，<code>q</code>键退出，<code>wq</code>保存后退出</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux干货篇一&quot;&gt;&lt;a href=&quot;#Linux干货篇一&quot; class=&quot;headerlink&quot; title=&quot;Linux干货篇一&quot;&gt;&lt;/a&gt;Linux干货篇一&lt;/h1&gt;&lt;h2 id=&quot;虚拟机的安装-VMware&quot;&gt;&lt;a href=&quot;#虚拟机的安装-VMwar
    
    </summary>
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇二</title>
    <link href="http://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2017/04/09/SQL干货篇二/</id>
    <published>2017-04-09T15:13:13.000Z</published>
    <updated>2017-04-09T15:21:08.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL干货篇之查询数据"><a href="#SQL干货篇之查询数据" class="headerlink" title="SQL干货篇之查询数据"></a>SQL干货篇之查询数据</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><blockquote>
<p><strong>只在一个表中查询数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">where</span> Sno=<span class="string">'13143'</span>;   //根据学号查询数据</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote>
<p><strong>同时查询多个表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> student.Sno,student.Sname,Grade</div><div class="line"><span class="keyword">FROM</span> student,SC <span class="keyword">where</span> Grade&gt;=<span class="number">90</span>;</div></pre></td></tr></table></figure></p>
<p><strong>说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表</strong></p>
</blockquote>
<h2 id="模糊查找"><a href="#模糊查找" class="headerlink" title="模糊查找"></a>模糊查找</h2><blockquote>
<p><strong>说明：模糊查找用<code>like</code>和<code>not like</code>进行查找</strong></p>
<ul>
<li><code>SELECT * FROM student where Sname like &#39;刘%&#39;;</code>查询所有姓刘的学生</li>
<li><code>SELECT * FROM student where Sname like &#39;%加%&#39;</code>查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项</li>
<li><code>SELECT * FROM student where Sname like &#39;欧阳_&#39;;</code>查找以姓欧阳并且名字为<strong>三</strong>个字的学生信息</li>
<li><code>SELECT * FROM student WHERE Sname like &#39;_阳&#39;;</code>查找所有姓名为两个字并且第二个字为<strong>阳</strong>的学生信息</li>
<li><code>SELECT * FROM student where Sname like &#39;_阳%&#39;;</code>查询所有姓名中第二个字为<strong>阳</strong>的学生信息</li>
<li><code>SELECT * FROM Course where Cname like &#39;\_IS&#39; ESCAPE &#39;\&#39;;</code>查询课程名字为<strong>_is</strong>的课程信息，这里如果要查询的字符串本省就含有通配符”<code>%</code>“或者”<code>_</code>“，这时就要使用<code>ESCAPE&lt;转码字符&gt;</code>来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用<code>\</code>,上面的查询语句中的<code>\</code>就是转码字符</li>
</ul>
</blockquote>
<h2 id="空值查询"><a href="#空值查询" class="headerlink" title="空值查询"></a>空值查询</h2><blockquote>
<p><strong>判断数据是否为空用<code>is not null</code>和<code>is null</code></strong><br><code>SELECT * FROM student where Sname is null</code>;查询姓名为空的学生信息</p>
</blockquote>
<h2 id="多重条件的查询"><a href="#多重条件的查询" class="headerlink" title="多重条件的查询"></a>多重条件的查询</h2><blockquote>
<p><strong>多重条件的查询用AND和OR,其区别不用多说了</strong><br><code>SELECT Sname FROM student where Sdept=&#39;IS&#39; and Sage&gt;20;</code>查找院系是IS并且年龄超过20岁的学生姓名</p>
</blockquote>
<h2 id="ORDER-BY子句-排序"><a href="#ORDER-BY子句-排序" class="headerlink" title="ORDER BY子句(排序)"></a>ORDER BY子句(排序)</h2><blockquote>
<p><strong>用户可以使用ORDER BY子句对数据进行升序(<code>ASC</code>)或者降序(<code>DESC</code>)排列</strong></p>
<ul>
<li><code>SELECT * FROM student where Sage&gt;20 ORDER BY Sno DESC;</code>查询年龄超过20岁的学生信息，并且按照降序排列输出</li>
<li><code>SELECT * FROM student ORDER BY Sdept,Sage DESC;</code>查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列</li>
</ul>
</blockquote>
<h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><blockquote>
<ul>
<li><code>COUNT(*)</code>   统计元组个数</li>
<li><code>COUNT(DISTINCT|ALL &lt;列名&gt;)</code>  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素</li>
<li><code>SUM(DISTINCT|ALL &lt;列名&gt;)</code>   计算一列值的总和</li>
<li><code>AVG(DISTINCT|ALL&lt;列名&gt;)</code>     计算一列中的平均值</li>
<li><code>MAX(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最大值</li>
<li><code>MIN(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最小值</li>
</ul>
</blockquote>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li><code>select count(*) from student;</code>     查询学生总数</li>
<li><code>select count(DISTINCT Sdept);</code>     查询总共有多少系</li>
<li><code>select AVG(Grade) from SC;</code>        查询学生的平均分</li>
<li><code>select SUM(Grade) from SC;</code>         查询学生的总分</li>
<li><code>select MAX(Grade) from SC where Cno=&#39;1&#39;;</code>    查询课程1的最高分</li>
<li><code>select MIN(Grade) from SC where Cno=&#39;1&#39;;</code>     查询课程1的最低分</li>
</ul>
</blockquote>
<p><strong>注意：<code>where</code>子句中不能用聚集函数，只有在<code>select</code>子句和<code>Group by</code>子句中才能使用聚集函数</strong></p>
<h2 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h2><ul>
<li><strong>GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。</strong></li>
<li><strong>对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值</strong></li>
</ul>
<blockquote>
<p><strong>实例：</strong></p>
<ul>
<li><code>select Cno,Count(Sno) from SC Group by Cno;</code>      求各个课程号以及相应的选课人数</li>
<li><code>select Cno as &#39;课程号&#39;,count(Sno) as &#39;选课人数&#39; from sc group by Cno;</code>求各个课程号以及相应的选课人数</li>
<li><code>select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)&gt;80;</code>  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用<code>Having</code>子句进行条件筛选，<strong>不能使用<code>where</code>子句进行筛选</strong>,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成<code>select Cno,count(Sno) from sc group by Cno Having AVG(Grade)&gt;80;</code></li>
<li><code>select Sno from sc Group by Sno having count(*)&gt;2;</code>   查询选修了两门以上课程的学生学号</li>
<li><code>select Sno,AVG(Grade) from sc Group by Sno;</code> 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩</li>
</ul>
<p><strong>注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：<code>select Sno,count(Cno) from sc;</code>这条语句就是错误的，因为<code>Sno</code>没有出现在聚集函数或者<code>Group by</code>子句中，如果改成<code>select Sno,count(Cno) from SC Group by Sno;</code>就正确了,因为Sno出现在了<code>Group by</code>子句中了</strong></p>
</blockquote>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><blockquote>
<p><strong>如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询</strong></p>
<h3 id="等值和非等值连接查询"><a href="#等值和非等值连接查询" class="headerlink" title="等值和非等值连接查询"></a>等值和非等值连接查询</h3><p><strong>当连接运算符为=时为等值连接查询，否则为非等值连接查询</strong></p>
<p><strong>实例：</strong></p>
<ul>
<li><code>select student.*,SC.* from student,SC where student.Sno=SC.Sno;</code>查询每个学生及其选修课程的情况</li>
</ul>
<h3 id="自然连接查询"><a href="#自然连接查询" class="headerlink" title="自然连接查询"></a>自然连接查询</h3><p><strong>在等值连接的基础上去掉相等的属性组就是自然连接查询</strong></p>
<p><strong>实例：</strong><br><code>select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno;</code></p>
</blockquote>
<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><blockquote>
<p><strong>在<code>SQL</code>语言中一个<code>SELECT-FROM-WHERE</code>语句称为一个</strong>查询块<strong>，将一个查询块嵌套在另外一个查询块的<code>WHERE</code>子句或<code>HAVING</code>短语的条件查询称之为嵌套查询</strong><br><strong>实例：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> SNAME <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> SNO <span class="keyword">IN</span>    <span class="comment">/*外层查询*/</span></div><div class="line">(<span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> CNO=<span class="string">'2'</span>);    <span class="comment">/*内层查询或者子查询*/</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong></p>
<ul>
<li>这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。</li>
<li>子查询中不能使用<code>ORDER BY</code>子句，<code>ORDER BY</code>子句只能对最终的查询结果排序</li>
</ul>
</blockquote>
<h3 id="带有IN谓词的嵌套查询"><a href="#带有IN谓词的嵌套查询" class="headerlink" title="带有IN谓词的嵌套查询"></a>带有IN谓词的嵌套查询</h3><blockquote>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SELECT Sno,Sname,Sdept from student where Sdept IN</div><div class="line">(SELECT Sdept From student Where Sname='刘晨');</div><div class="line">```  </div><div class="line"></div><div class="line">**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**</div><div class="line"></div><div class="line">```sql</div><div class="line">select first.Sno,first.Sname,first.Sdept </div><div class="line">from student first,student second</div><div class="line">where first.Sdept=second.Sdept and second.Sname='刘晨';</div></pre></td></tr></table></figure>
<h3 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> sc x <span class="keyword">where</span> Grade &gt;</div><div class="line">(<span class="keyword">select</span> <span class="keyword">AVG</span>(Grade) <span class="keyword">from</span> sc y <span class="keyword">where</span> x.Sno=y.Sno);</div></pre></td></tr></table></figure>
<p><strong>查询了所有学生成绩超过选修课程平均成绩的课程号</strong></p>
<h3 id="带有ANY或者ALL的谓词子查询"><a href="#带有ANY或者ALL的谓词子查询" class="headerlink" title="带有ANY或者ALL的谓词子查询"></a>带有ANY或者ALL的谓词子查询</h3><blockquote>
<p><strong><code>ANY</code>表示查询条件只要满足其中一个即可，而<code>ALL</code>表示查询条件要满足所有的才行</strong><br><strong>实例：</strong></p>
<ul>
<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ANY(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系<strong>任意</strong>一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可</li>
<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ALL(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，<strong>就是比计算机系年龄最小的都要小</strong></li>
</ul>
</blockquote>
<h3 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h3><blockquote>
<p><strong><code>EXISTS</code>表示存在的意思，带有<code>EXISTS</code>的子查询步返回任何的数据，只产生逻辑真或者假</strong></p>
<ul>
<li><code>SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno=&#39;2&#39;);</code>查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有<code>NOT EXISTS</code></li>
</ul>
</blockquote>
<h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><blockquote>
<p><strong>集合操作包括并操作<code>UNION</code>、交操作<code>INTERSECT</code>、差操作<code>EXCEPT</code></strong></p>
<p><strong>实例：</strong></p>
<ul>
<li><code>select * from student where Sdept= &#39;CS&#39; UNION select * from student where Sage&gt;19;</code>查找计算机系的学生以及年龄不大于19岁的学生信息，这里<code>UNION</code>会自动去掉重复的元组，如果想要保留<strong>全部</strong>的数据需要用<code>UNION ALL</code></li>
<li><code>select Sno from SC where Cno=&#39;1&#39; UNION select Sno from SC where Cno=&#39;2&#39;;</code>查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用<code>UNION ALL</code> 可以保留</li>
<li><code>select Sno from SC where Cno=&#39;1&#39; Intersect select Sno from SC where Cno=&#39;2&#39;;</code>查询同时选修课程1和课程2的学生学号</li>
</ul>
</blockquote>
<h3 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> SC,(<span class="keyword">select</span> Sno,<span class="keyword">AVG</span>(Grade) <span class="keyword">from</span> SC <span class="keyword">Group</span> <span class="keyword">by</span> Sno) </div><div class="line"><span class="keyword">AS</span> AVG_SC(avg_Sno,avg_grade)</div><div class="line"><span class="keyword">where</span> SC.Sno=AVG_SC.avg_Sno <span class="keyword">and</span> SC.Grade&gt;=AVG_SC.avg_grade;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号</strong></p>
<p><strong>注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：</strong></p>
<blockquote>
<p><code>select Sname from student,(select Sno From SC where Cno=&#39;1&#39;) AS SCI where student.Sno=SCI.Sno;</code>这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。</p>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL干货篇之查询数据&quot;&gt;&lt;a href=&quot;#SQL干货篇之查询数据&quot; class=&quot;headerlink&quot; title=&quot;SQL干货篇之查询数据&quot;&gt;&lt;/a&gt;SQL干货篇之查询数据&lt;/h1&gt;&lt;h2 id=&quot;单表查询&quot;&gt;&lt;a href=&quot;#单表查询&quot; class=&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>java干货篇之文字特效</title>
    <link href="http://chenjiabing666.github.io/2017/04/09/java%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%96%87%E5%AD%97%E7%89%B9%E6%95%88/"/>
    <id>http://chenjiabing666.github.io/2017/04/09/java干货篇之文字特效/</id>
    <published>2017-04-09T08:15:16.000Z</published>
    <updated>2017-04-09T08:15:55.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java干货篇文字特效"><a href="#java干货篇文字特效" class="headerlink" title="java干货篇文字特效"></a>java干货篇文字特效</h1><h2 id="立体效果的文字"><a href="#立体效果的文字" class="headerlink" title="立体效果的文字"></a>立体效果的文字</h2><p><strong>主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/039" target="_blank" rel="external">源码</a></strong></p>
<h2 id="阴影效果的文字"><a href="#阴影效果的文字" class="headerlink" title="阴影效果的文字"></a>阴影效果的文字</h2><p><strong>和面一样，只是平移的方式有些不同，详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/040" target="_blank" rel="external">源码</a></strong></p>
<h2 id="倾斜效果的文字"><a href="#倾斜效果的文字" class="headerlink" title="倾斜效果的文字"></a>倾斜效果的文字</h2><p><strong>主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见<a href="https://github.com/chenjiabing666/java_provide/tree/master/041" target="_blank" rel="external">源码</a></strong><br><strong><code>public abstract void shear(double shx,double shy)</code>其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数</strong></p>
<h2 id="渐变效果的文字"><a href="#渐变效果的文字" class="headerlink" title="渐变效果的文字"></a>渐变效果的文字</h2><p><strong>主要使用了Graphics2D中的setPaint的方法,详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/042" target="_blank" rel="external">源码</a></strong><br><strong><code>public abstract void setPaint(Paint paint)</code>paint封装了渐变颜色的Paint对象</strong><br><strong>其中Paint对象的创建是由<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html" target="_blank" rel="external">GradientPaint</a>初始化的,其中的构造函数如下：<code>GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)</code></strong></p>
<h2 id="会变色的文字"><a href="#会变色的文字" class="headerlink" title="会变色的文字"></a>会变色的文字</h2><p><strong>这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/043" target="_blank" rel="external">源码</a></strong></p>
<h2 id="水印文字特效-源码"><a href="#水印文字特效-源码" class="headerlink" title="水印文字特效(源码)"></a>水印文字特效(<a href="https://github.com/chenjiabing666/java_provide/tree/master/044" target="_blank" rel="external">源码</a>)</h2><p><strong>水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：</strong><br><strong><code>public abstract void setComposite(Composite comp)</code>，其中Comp是<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html" target="_blank" rel="external">AlphaComposite</a>对象，可以使用以下两种方式创建</strong></p>
<blockquote>
<ul>
<li><code>AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)</code>获得一个SRC_OVER规则的对象</li>
<li><code>AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)</code>同上</li>
</ul>
</blockquote>
<h2 id="动态绘制文本-源码"><a href="#动态绘制文本-源码" class="headerlink" title="动态绘制文本(源码)"></a>动态绘制文本(<a href="https://github.com/chenjiabing666/java_provide/tree/master/046" target="_blank" rel="external">源码</a>)</h2><p><strong>主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的<a href="https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/">博客文章</a></strong></p>
<blockquote>
<ul>
<li><code>BufferedReader read=new BufferedReader(new FileReader(pathname))</code></li>
<li><code>BufferedReader read=new BufferedReader(new InputStreamReader(in))</code></li>
</ul>
</blockquote>
<p><strong>由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java干货篇文字特效&quot;&gt;&lt;a href=&quot;#java干货篇文字特效&quot; class=&quot;headerlink&quot; title=&quot;java干货篇文字特效&quot;&gt;&lt;/a&gt;java干货篇文字特效&lt;/h1&gt;&lt;h2 id=&quot;立体效果的文字&quot;&gt;&lt;a href=&quot;#立体效果的文字&quot; c
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java图形与文本处理" scheme="http://chenjiabing666.github.io/tags/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>swing干货系列之JTextField</title>
    <link href="http://chenjiabing666.github.io/2017/04/08/Swing%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%E4%B9%8BJTextField/"/>
    <id>http://chenjiabing666.github.io/2017/04/08/Swing干货系列之JTextField/</id>
    <published>2017-04-08T12:32:04.000Z</published>
    <updated>2017-04-08T13:02:57.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing系列之JTextField-单行文本框"><a href="#Swing系列之JTextField-单行文本框" class="headerlink" title="Swing系列之JTextField(单行文本框)"></a>Swing系列之JTextField(单行文本框)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><code>JTextField</code>是一个轻量级组件，它允许编辑单行文本。</li>
<li><p><code>JTextField</code> 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。<code>java.awt.TextField</code> 把字段文本用作针对 <code>ActionEvent</code> 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。</p>
</li>
<li><p><code>setEchoChar</code> 和 <code>getEchoChar</code> 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 <code>JPasswordField</code> 扩展了 <code>JTextField</code>，从而通过可插入外观独立地提供此服务。</p>
</li>
<li><code>JTextField</code> 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 <code>getHorizontalAlignment</code> 方法确定的。默认情况下为前端对齐。</li>
<li>文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。</li>
<li>Swing 不是线程安全的</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li><code>JTextField()</code> 构造一个新的 TextField</li>
<li><code>JTextField(Document doc, String text, int columns)</code>  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。</li>
<li><code>JTextField(int columns)</code>  构造一个具有指定列数的新的空 TextField。</li>
<li><code>JTextField(String text)</code>构造一个用指定文本初始化的新 TextField。</li>
<li><code>JTextField(String text, int columns)</code>   构造一个用指定文本和列初始化的新 TextField。</li>
</ul>
<h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><ul>
<li><p><code>get/setHorizontalAlignment(int alignment</code>) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT</p>
<blockquote>
<ol>
<li><code>JTextField.CENTER</code></li>
<li><code>JTextField.RIGHT</code></li>
<li><code>JTextField.LEADING</code> (the default)</li>
<li><code>JTextField.TRAILING</code></li>
</ol>
</blockquote>
</li>
<li><p><code>setFont(Font font)</code>   设置字体</p>
</li>
<li><code>setScrollOffset(int scrollOffset)</code>  获取滚动偏移量（以像素为单位）。</li>
<li><code>setDocument(Document doc)</code>  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。</li>
<li><code>setInputVerifier(verifier)</code>    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上</li>
<li><code>setDragEnabled(boolean x)</code>   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走</li>
<li><code>addActionListener(ActionListener action)</code>   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同</li>
<li><code>write(InfileWriter writer)</code>  将文本框中的内容输入到文件中</li>
<li><code>addKeyListener(KeyListener event)</code>   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html" target="_blank" rel="external">官方文档</a></li>
<li><code>addCaretListener(CareListener event)</code>  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发</li>
</ul>
<h2 id="一个简单的实例"><a href="#一个简单的实例" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField1;</div><div class="line">    <span class="keyword">private</span> JTextField textField2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        text my = <span class="keyword">new</span> text();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">text</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//this.setBounds(100,100,300,200);</span></div><div class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">1</span>));</div><div class="line">        textField1 = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</div><div class="line">        textField2 = <span class="keyword">new</span> JTextField();</div><div class="line">        panel.add(textField1);</div><div class="line">        panel.add(textField2);</div><div class="line">        <span class="keyword">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class="line">        <span class="keyword">this</span>.pack();</div><div class="line">        InputVerifier verifier = <span class="keyword">new</span> InputVerifier() &#123;    <span class="comment">//添加验证方式</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(JComponent input)</span> </span>&#123;     <span class="comment">//重载函数</span></div><div class="line">                <span class="keyword">boolean</span> value;</div><div class="line">                textField1 = (JTextField) input;    <span class="comment">//将input组件强制转化为JTextField类型的单行文本框</span></div><div class="line">                <span class="keyword">return</span> textField1.getText().equals(<span class="string">"pass"</span>);  <span class="comment">//判断是否输入的时pass,如果不是就会验证错误</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        textField1.setInputVerifier(verifier);   <span class="comment">//设置验证方式</span></div><div class="line">        textField1.setHorizontalAlignment(JTextField.CENTER);   <span class="comment">//设置水平对齐方式</span></div><div class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD + Font.ITALIC, <span class="number">20</span>);</div><div class="line">        textField1.setFont(font);   <span class="comment">//设置字体</span></div><div class="line">        textField1.setDragEnabled(<span class="keyword">true</span>);  <span class="comment">//设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关联文本文档"><a href="#关联文本文档" class="headerlink" title="关联文本文档"></a>关联文本文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Container;</div><div class="line"><span class="keyword">import</span> java.awt.GridLayout;</div><div class="line"><span class="comment">/*from   w  ww.jav  a  2s . co m*/</span></div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.text.Document;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">  JLabel nameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Name:"</span>);</div><div class="line">  JLabel mirroredNameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Mirrored:"</span>);</div><div class="line">  JTextField name = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line">  JTextField mirroredName = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class="line">    <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">0</span>));</div><div class="line"></div><div class="line">    Container contentPane = <span class="keyword">this</span>.getContentPane();</div><div class="line">    contentPane.add(nameLabel);</div><div class="line">    contentPane.add(name);</div><div class="line">    contentPane.add(mirroredNameLabel);</div><div class="line">    contentPane.add(mirroredName);</div><div class="line"></div><div class="line">    Document nameModel = name.getDocument();    <span class="comment">//得到文本框的文本文档，将之与第二个文本框关联</span></div><div class="line">    mirroredName.setDocument(nameModel);           <span class="comment">//两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示</span></div><div class="line">    </div><div class="line">    pack();</div><div class="line">    setVisible(<span class="keyword">true</span>);    </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Main frame = <span class="keyword">new</span> Main();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容</strong></p>
</blockquote>
<h2 id="Action-Listener-动作监听机制"><a href="#Action-Listener-动作监听机制" class="headerlink" title="Action Listener(动作监听机制)"></a>Action Listener(动作监听机制)</h2><p><strong>输入文本后按回车即可触发</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="comment">//from  w  w  w. ja va2s  .c o m</span></div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame();</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    JTextField jTextField1 = <span class="keyword">new</span> JTextField();</div><div class="line"></div><div class="line">    jTextField1.setText(<span class="string">"jTextField1"</span>);</div><div class="line">    <span class="comment">//添加监听机制</span></div><div class="line">    jTextField1.addActionListener(<span class="keyword">new</span>   java.awt.event.ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"action"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    frame.add(jTextField1);</div><div class="line"></div><div class="line">    frame.setSize(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="验证文本内容"><a href="#验证文本内容" class="headerlink" title="验证文本内容"></a>验证文本内容</h2><p><strong>使用<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier(" target="_blank" rel="external">InputVerifier</a>)验证</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> javax.swing.InputVerifier;</div><div class="line"><span class="keyword">import</span> javax.swing.JComponent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"Verifier Sample"</span>);</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    JTextField textField1 = <span class="keyword">new</span> JTextField();</div><div class="line">    JTextField textField2 = <span class="keyword">new</span> JTextField();</div><div class="line">    InputVerifier verifier = <span class="keyword">new</span> InputVerifier() &#123;     <span class="comment">//创建一个验证</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(JComponent comp)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> returnValue;</div><div class="line">        JTextField textField = (JTextField) comp;      <span class="comment">//强制转换，将控件类型的comp转换成JTextFiled类型的</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          Integer.parseInt(textField.getText());    <span class="comment">//将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误</span></div><div class="line">          returnValue = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;   </div><div class="line">          returnValue = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> returnValue;        <span class="comment">//如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    textField1.setInputVerifier(verifier);</div><div class="line">    frame.add(textField1, BorderLayout.NORTH);</div><div class="line">    frame.add(textField2, BorderLayout.CENTER);</div><div class="line">    frame.setSize(<span class="number">300</span>, <span class="number">100</span>);</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</strong></p>
</blockquote>
<h2 id="将文本框中的内容保存到文件中"><a href="#将文本框中的内容保存到文件中" class="headerlink" title="将文本框中的内容保存到文件中"></a>将文本框中的内容保存到文件中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField;</div><div class="line">    <span class="keyword">private</span> FileWriter writer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Main my = <span class="keyword">new</span> Main();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> BorderLayout());</div><div class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">"运行"</span>);</div><div class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"name"</span>);</div><div class="line">        textField = <span class="keyword">new</span> JTextField();</div><div class="line">        panel.add(label, BorderLayout.WEST);</div><div class="line">        panel.add(textField, BorderLayout.CENTER);</div><div class="line">        String filename = <span class="string">"text.txt"</span>;</div><div class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;    <span class="comment">//添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    writer = <span class="keyword">new</span> FileWriter(filename, <span class="keyword">false</span>);   <span class="comment">//创建一个写入文件的对象，这里的false表示不在文件的末尾添加</span></div><div class="line">                    textField.write(writer);     <span class="comment">//将单行文本中输入的内容写入到文件中</span></div><div class="line">                    writer.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                    System.out.println(<span class="string">"false"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        panel.add(button, BorderLayout.SOUTH);</div><div class="line">        <span class="keyword">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class="line">        <span class="keyword">this</span>.pack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里使用的是<code>FileWriter</code>类将内容写入到文件中，详情请看我的上一篇<a href="https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/">文章</a></strong></p>
</blockquote>
<h2 id="复制、粘贴、剪切文本"><a href="#复制、粘贴、剪切文本" class="headerlink" title="复制、粘贴、剪切文本"></a>复制、粘贴、剪切文本</h2><blockquote>
<p><strong>这里使用的时<code>copy()</code>、<code>paste()</code>、<code>cut()</code>函数</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> JTextField textField = <span class="keyword">new</span> JTextField(<span class="number">15</span>);</div><div class="line">    JButton buttonCut = <span class="keyword">new</span> JButton(<span class="string">"Cut"</span>);</div><div class="line">    JButton buttonPaste = <span class="keyword">new</span> JButton(<span class="string">"Paste"</span>);</div><div class="line">    JButton buttonCopy = <span class="keyword">new</span> JButton(<span class="string">"Copy"</span>);</div><div class="line"></div><div class="line">    JFrame jfrm = <span class="keyword">new</span> JFrame(<span class="string">"Cut, Copy, and Paste"</span>);</div><div class="line">    jfrm.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line">    jfrm.setSize(<span class="number">230</span>, <span class="number">150</span>);</div><div class="line">    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    buttonCut.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.cut();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    buttonPaste.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.paste();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    buttonCopy.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.copy();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    textField.addCaretListener(<span class="keyword">new</span> CaretListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caretUpdate</span><span class="params">(CaretEvent ce)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"All text: "</span> + textField.getText());</div><div class="line">        <span class="keyword">if</span> (textField.getSelectedText() != <span class="keyword">null</span>)</div><div class="line">          System.out.println(<span class="string">"Selected text: "</span> + textField.getSelectedText());</div><div class="line">        <span class="keyword">else</span></div><div class="line">          System.out.println(<span class="string">"Selected text: "</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    jfrm.add(textField);</div><div class="line">    jfrm.add(buttonCut);</div><div class="line">    jfrm.add(buttonPaste);</div><div class="line">    jfrm.add(buttonCopy);</div><div class="line">    jfrm.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制</strong></p>
</blockquote>
<h2 id="添加键盘监听机制"><a href="#添加键盘监听机制" class="headerlink" title="添加键盘监听机制"></a>添加键盘监听机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.HeadlessException;</div><div class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> <span class="keyword">throws</span> HeadlessException </span>&#123;</div><div class="line">    setSize(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));</div><div class="line"></div><div class="line">    JLabel usernameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Username: "</span>);</div><div class="line">    JTextField usernameTextField = <span class="keyword">new</span> JTextField();</div><div class="line">    usernameTextField.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">20</span>));</div><div class="line">    add(usernameLabel);</div><div class="line">    add(usernameTextField);</div><div class="line"></div><div class="line">    usernameTextField.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;   <span class="comment">//创建机制</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;        <span class="comment">//重载函数，释放按键触发</span></div><div class="line">        JTextField textField = (JTextField) e.getSource();  <span class="comment">//得到最初发生event的组件对象,既是文本框对象</span></div><div class="line">        String text = textField.getText();</div><div class="line">        textField.setText(text.toUpperCase());      <span class="comment">//将所有的小写字母转换成大写字母</span></div><div class="line">      &#125;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;           <span class="comment">//键入时触发</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;       <span class="comment">//释放按键时触发的函数</span></div><div class="line">      &#125;   </div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Main().setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加插入符位置变化的监听机制"><a href="#添加插入符位置变化的监听机制" class="headerlink" title="添加插入符位置变化的监听机制"></a>添加插入符位置变化的监听机制</h2><p><strong>使用的是<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html" target="_blank" rel="external">CareListener</a>类来实现</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Font;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics2D;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockwiseTextFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField;</div><div class="line">    ClockwiseTextPanel clockwiseTextPanel = <span class="keyword">new</span> ClockwiseTextPanel(); <span class="comment">// 创建面板类的实例</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; <span class="comment">// 主方法</span></div><div class="line">        ClockwiseTextFrame frame = <span class="keyword">new</span> ClockwiseTextFrame(); <span class="comment">// 创建窗体类的实例</span></div><div class="line">        frame.setVisible(<span class="keyword">true</span>); <span class="comment">// 显示窗体</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClockwiseTextFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(); <span class="comment">// 调用超类的构造方法</span></div><div class="line">        setTitle(<span class="string">"顺时针旋转文字"</span>); <span class="comment">// 窗体标题</span></div><div class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">340</span>, <span class="number">240</span>); <span class="comment">// 窗体的显示位置和大小</span></div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 窗体关闭方式</span></div><div class="line">        add(clockwiseTextPanel); <span class="comment">// 将面板类的实例添加到窗体容器中</span></div><div class="line">        textField = <span class="keyword">new</span> JTextField();</div><div class="line">        textField.addCaretListener(<span class="keyword">new</span> CaretListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caretUpdate</span><span class="params">(CaretEvent arg0)</span> </span>&#123;</div><div class="line">                String text = textField.getText();<span class="comment">// 获取文本框字符串</span></div><div class="line">                clockwiseTextPanel.setText(text);<span class="comment">// 为面板中的text变量赋值</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        getContentPane().add(textField, BorderLayout.SOUTH);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ClockwiseTextPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123; <span class="comment">// 创建内部面板类</span></div><div class="line">        <span class="keyword">private</span> String text;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClockwiseTextPanel</span><span class="params">()</span> </span>&#123;</div><div class="line">            setOpaque(<span class="keyword">false</span>);<span class="comment">// 设置面板为透明</span></div><div class="line">            setLayout(<span class="keyword">null</span>);<span class="comment">// 设置为绝对布局</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> text; <span class="comment">// 获得成员变量的值</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.text = text;<span class="comment">// 为成员变量赋值</span></div><div class="line">            repaint();<span class="comment">// 调整paint()方法</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;<span class="comment">// 重写paint()方法</span></div><div class="line">            Graphics2D g2 = (Graphics2D) g;<span class="comment">// 获得Graphics2D的实例</span></div><div class="line">            <span class="keyword">int</span> width = getWidth();<span class="comment">// 获得面板的宽度</span></div><div class="line">            <span class="keyword">int</span> height = getHeight();<span class="comment">// 获得面板的高度</span></div><div class="line">            <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">char</span>[] array = text.toCharArray();<span class="comment">// 将文本转换为字符数组</span></div><div class="line">                <span class="keyword">int</span> len = array.length * <span class="number">5</span>;<span class="comment">// 定义圆的半径，同时可以调整文字的距离</span></div><div class="line">                Font font = <span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">22</span>);<span class="comment">// 创建字体</span></div><div class="line">                g2.setFont(font);<span class="comment">// 设置字体</span></div><div class="line">                <span class="keyword">double</span> angle = <span class="number">0</span>;<span class="comment">// 定义初始角度</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;<span class="comment">// 遍历字符串中的字符</span></div><div class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                        g2.setColor(Color.BLUE);<span class="comment">// 第一个字符用蓝色</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        g2.setColor(Color.BLACK);<span class="comment">// 其他字符用黑色</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">int</span> x = (<span class="keyword">int</span>) (len * Math.sin(Math.toRadians(angle + <span class="number">270</span>)));<span class="comment">// 计算每个文字的横坐标位置</span></div><div class="line">                    <span class="keyword">int</span> y = (<span class="keyword">int</span>) (len * Math.cos(Math.toRadians(angle + <span class="number">270</span>)));<span class="comment">// 计算每个文字的纵坐标位置</span></div><div class="line">                    g2.drawString(array[i] + <span class="string">""</span>, width / <span class="number">2</span> + x, height / <span class="number">2</span> - y);<span class="comment">// 绘制字符</span></div><div class="line">                    angle = angle + <span class="number">360</span>d / array.length;<span class="comment">// 改变角度</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<ul>
<li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int" target="_blank" rel="external">官方网站</a>)</li>
<li><a href="http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm" target="_blank" rel="external">英文文档</a></li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swing系列之JTextField-单行文本框&quot;&gt;&lt;a href=&quot;#Swing系列之JTextField-单行文本框&quot; class=&quot;headerlink&quot; title=&quot;Swing系列之JTextField(单行文本框)&quot;&gt;&lt;/a&gt;Swing系列之JText
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="swing" scheme="http://chenjiabing666.github.io/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬取豆瓣全站</title>
    <link href="http://chenjiabing666.github.io/2017/04/08/scrapy%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%85%A8%E7%AB%99/"/>
    <id>http://chenjiabing666.github.io/2017/04/08/scrapy爬取豆瓣全站/</id>
    <published>2017-04-08T06:24:26.000Z</published>
    <updated>2017-04-08T06:36:20.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy爬取豆瓣读书全站"><a href="#Scrapy爬取豆瓣读书全站" class="headerlink" title="Scrapy爬取豆瓣读书全站"></a>Scrapy爬取豆瓣读书全站</h1><h2 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h2><blockquote>
<p>首先打开<a href="https://book.douban.com/tag/?icn=index-nav" target="_blank" rel="external">豆瓣读书中的分类浏览</a>，可以看到其中有很多的分类</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/2.bmp" alt="分类"></p>
<p>豆瓣应该是一个比较好爬的网站，所有的数据都不是<code>ajax</code>加载的，我们打开谷歌的<code>F12</code>或者是火狐的<code>FireBug</code>可以很轻松的找到每一个分类的链接</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/NonName.bmp" alt="url所在地"></p>
<p>这里我们使用scrapy中的一个<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html" target="_blank" rel="external">linkextractors库</a>,这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需<code>Rule(LinkExtractor(allow=&#39;/tag/&#39;,restrict_xpaths=&quot;//div[@class=&#39;article&#39;]&quot;),follow=True),</code>这里的allow是一个<code>正则表达式</code>，用来筛选分类url,<code>restrict_xpaths</code>是限制在哪个结构中筛选url,这里限制的是在<code>&lt;div class=&#39;article&#39;&gt;</code>这个盒模型中，<code>follow</code>表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在<code>回调函数</code>中测试下，输入所得的url,可以使用<code>respose.url</code></p>
<p>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/3.bmp" alt="作品网页"><br>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/6.bmp" alt="翻页url"><br>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rule(LinkExtractor(allow=<span class="string">"\?start=\d+\&amp;type="</span>,restrict_xpaths=<span class="string">"//div[@class='pa&gt;ginator']"</span>),follow=<span class="keyword">True</span>),</div></pre></td></tr></table></figure>
<blockquote>
<p>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在<code>li</code>标签中，如下图</p>
<blockquote>
<p><img src="http://ono60m7tl.bkt.clouddn.com/4.bmp" alt="url"></p>
</blockquote>
<p>我们打开<code>li</code>标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Rule(LinkExtractor(allow=<span class="string">'/tag/'</span>,restrict_xpaths=<span class="string">"/ /div[@class='article']"</span>),follow=<span class="keyword">True</span>),<span class="comment">#第一步</span></div><div class="line">Rule(LinkExtractor(allow=<span class="string">"\?start=\d+\&amp;type="</span>,restrict_xpaths=<span class="string">"//div[@class='pa&gt;ginator']"</span>),follow=<span class="keyword">True</span>),  <span class="comment">#第二步翻翻页</span></div><div class="line">Rule(LinkExtractor(allow=<span class="string">"/subject/\d+/$"</span>,restrict_&gt;xpaths=<span class="string">"//ul[@class='subject-list']"</span>),callback=<span class="string">'parse_item'</span>)<span class="comment">#得到所需网页的url</span></div></pre></td></tr></table></figure>
<blockquote>
<p>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/5.bmp" alt="图片"><br>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看<a href="https://github.com/chenjiabing666/douban_book_spider" target="_blank" rel="external">源码</a>,值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。</p>
</blockquote>
<h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><blockquote>
<p><strong><a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#" target="_blank" rel="external">scrapy中文文档</a></strong></p>
<p><strong>最后附上本人的<a href="https://github.com/chenjiabing666" target="_blank" rel="external">github地址</a>,不要忘了给个star哦</strong></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy爬取豆瓣读书全站&quot;&gt;&lt;a href=&quot;#Scrapy爬取豆瓣读书全站&quot; class=&quot;headerlink&quot; title=&quot;Scrapy爬取豆瓣读书全站&quot;&gt;&lt;/a&gt;Scrapy爬取豆瓣读书全站&lt;/h1&gt;&lt;h2 id=&quot;分析网页&quot;&gt;&lt;a href=&quot;#分
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/06/SQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://chenjiabing666.github.io/2017/04/06/SQL基本操作/</id>
    <published>2017-04-06T14:33:37.000Z</published>
    <updated>2017-04-06T14:47:15.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL系列之基本操作"><a href="#SQL系列之基本操作" class="headerlink" title="SQL系列之基本操作"></a>SQL系列之基本操作</h1><h2 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h2><blockquote>
<p><strong>CREATE TABLE <name><br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]],<br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]]……</name></strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">Sname <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</div><div class="line">Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>),</div><div class="line">Sage <span class="built_in">SMALLINT</span>,</div><div class="line">Sdept <span class="built_in">CHAR</span>(<span class="number">20</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>其中<code>student</code>是表名，<code>Sno</code>,<code>Sname</code>,<code>Ssex</code>,<code>Sage</code>,<code>Sdept</code>都是列名，后面的<code>CHAR</code>都是数据类型,这里的<code>PRIMARY KEY</code>是将<code>Sno</code>定义为主键,<code>UNIQUE</code>是将<code>Sname</code>定义为唯一的也就是后面插入数据的时候不能有重复的名字</strong></p>
<p><strong>拓展</strong>：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：<code>PRIMARY KEY(Sno,Sname)</code></p>
</blockquote>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote>
<ul>
<li><code>DROP TABLE NAME;</code>只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表</li>
<li><code>DROP TABLE NAME CASCADE</code>;将全部删除，包括基本表和视图</li>
</ul>
</blockquote>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><blockquote>
<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a><strong>添加列</strong></h3><blockquote>
<p><strong><code>alter table 表名 add 列名 列数据类型 [after 插入位置]</code></strong></p>
</blockquote>
<p><strong>例子</strong></p>
<blockquote>
<ul>
<li><code>alter table student add grade smallint;</code> //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加</li>
<li><code>alter table studnet add grade smallint after Sname;</code> //这里将grade插入到表中Sname列的后面</li>
</ul>
</blockquote>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><strong><code>alter table 表名 drop 列名</code></strong></p>
<p><code>alter table student drop Sname</code>;   //输出Sname那一列</p>
<h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><p><strong><code>alter table 表名 change 列名称 列新名称 新数据类型;</code></strong></p>
<p><strong>实例</strong></p>
<ul>
<li>alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。</li>
</ul>
<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p><strong><code>alter table 表名 rename 新表名;</code></strong></p>
<p><strong>实例：</strong><br><code>alter table student rename STUDENT;</code>   //将表名改为STUDENT </p>
</blockquote>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote>
<p><strong><code>INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);</code></strong>   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了</p>
<p><strong>例子:</strong></p>
<blockquote>
<ul>
<li><code>INSERT INTO student(Sno,Sname,Sage,Ssex)values(&#39;201215124&#39;,&#39;jack&#39;,34,&#39;男&#39;);</code>   //这里是插入表中的一些列的数据，并且对应了数据类型</li>
<li><code>INSERT INTO student values(&#39;201215124&#39;,&#39;男&#39;,&#39;jack&#39;,34,&#39;IS&#39;);</code>     //这里是按照表中的列名顺序插入数据的</li>
</ul>
</blockquote>
</blockquote>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><blockquote>
<p><strong><code>update 表名称 set 列名称=新值 where 更新条件;</code></strong></p>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li><code>update student set Sage=Sage+1 where Sno=&#39;12134&#39;;</code>          //将Sno为12134的那一列数据的年龄加一</li>
</ul>
</blockquote>
</blockquote>
<h2 id="删除表中的数据"><a href="#删除表中的数据" class="headerlink" title="删除表中的数据"></a>删除表中的数据</h2><blockquote>
<p><strong><code>delete from 表名称 where 删除条件;</code></strong></p>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li>delete from student where Sno=’121314125’;                //删除Sno为121314125的那一行数据</li>
</ul>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL系列之基本操作&quot;&gt;&lt;a href=&quot;#SQL系列之基本操作&quot; class=&quot;headerlink&quot; title=&quot;SQL系列之基本操作&quot;&gt;&lt;/a&gt;SQL系列之基本操作&lt;/h1&gt;&lt;h2 id=&quot;新建表&quot;&gt;&lt;a href=&quot;#新建表&quot; class=&quot;header
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
</feed>
